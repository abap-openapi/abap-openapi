CLASS zcl_github DEFINITION PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API, 1.1.4
  PUBLIC SECTION.
    INTERFACES zif_github.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_nullable_simple_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_simple_user) TYPE zif_github=>nullable_simple_user
      RAISING cx_static_check.
    METHODS parse_integration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(integration) TYPE zif_github=>integration
      RAISING cx_static_check.
    METHODS parse_basic_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(basic_error) TYPE zif_github=>basic_error
      RAISING cx_static_check.
    METHODS parse_validation_error_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error_simple) TYPE zif_github=>validation_error_simple
      RAISING cx_static_check.
    METHODS parse_webhook_config_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_url) TYPE zif_github=>webhook_config_url
      RAISING cx_static_check.
    METHODS parse_webhook_config_content_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_content_type) TYPE zif_github=>webhook_config_content_type
      RAISING cx_static_check.
    METHODS parse_webhook_config_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_secret) TYPE zif_github=>webhook_config_secret
      RAISING cx_static_check.
    METHODS parse_webhook_config_insecure_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_insecure_ssl) TYPE zif_github=>webhook_config_insecure_ssl
      RAISING cx_static_check.
    METHODS parse_webhook_config
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config) TYPE zif_github=>webhook_config
      RAISING cx_static_check.
    METHODS parse_hook_delivery_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_delivery_item) TYPE zif_github=>hook_delivery_item
      RAISING cx_static_check.
    METHODS parse_scim_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_error) TYPE zif_github=>scim_error
      RAISING cx_static_check.
    METHODS parse_validation_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error) TYPE zif_github=>validation_error
      RAISING cx_static_check.
    METHODS parse_hook_delivery
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_delivery) TYPE zif_github=>hook_delivery
      RAISING cx_static_check.
    METHODS parse_simple_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_user) TYPE zif_github=>simple_user
      RAISING cx_static_check.
    METHODS parse_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise) TYPE zif_github=>enterprise
      RAISING cx_static_check.
    METHODS parse_app_permissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(app_permissions) TYPE zif_github=>app_permissions
      RAISING cx_static_check.
    METHODS parse_installation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation) TYPE zif_github=>installation
      RAISING cx_static_check.
    METHODS parse_nullable_license_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_license_simple) TYPE zif_github=>nullable_license_simple
      RAISING cx_static_check.
    METHODS parse_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository) TYPE zif_github=>repository
      RAISING cx_static_check.
    METHODS parse_installation_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_token) TYPE zif_github=>installation_token
      RAISING cx_static_check.
    METHODS parse_application_grant
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(application_grant) TYPE zif_github=>application_grant
      RAISING cx_static_check.
    METHODS parse_nullable_scoped_installa
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_scoped_installation) TYPE zif_github=>nullable_scoped_installation
      RAISING cx_static_check.
    METHODS parse_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authorization) TYPE zif_github=>authorization
      RAISING cx_static_check.
    METHODS parse_code_of_conduct
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct) TYPE zif_github=>code_of_conduct
      RAISING cx_static_check.
    METHODS parse_enabled_organizations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enabled_organizations) TYPE zif_github=>enabled_organizations
      RAISING cx_static_check.
    METHODS parse_allowed_actions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(allowed_actions) TYPE zif_github=>allowed_actions
      RAISING cx_static_check.
    METHODS parse_selected_actions_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(selected_actions_url) TYPE zif_github=>selected_actions_url
      RAISING cx_static_check.
    METHODS parse_actions_enterprise_permi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_enterprise_permissions) TYPE zif_github=>actions_enterprise_permissions
      RAISING cx_static_check.
    METHODS parse_organization_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_simple) TYPE zif_github=>organization_simple
      RAISING cx_static_check.
    METHODS parse_selected_actions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(selected_actions) TYPE zif_github=>selected_actions
      RAISING cx_static_check.
    METHODS parse_runner_groups_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_groups_enterprise) TYPE zif_github=>runner_groups_enterprise
      RAISING cx_static_check.
    METHODS parse_runner_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_label) TYPE zif_github=>runner_label
      RAISING cx_static_check.
    METHODS parse_runner
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner) TYPE zif_github=>runner
      RAISING cx_static_check.
    METHODS parse_runner_application
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_application) TYPE zif_github=>runner_application
      RAISING cx_static_check.
    METHODS parse_authentication_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authentication_token) TYPE zif_github=>authentication_token
      RAISING cx_static_check.
    METHODS parse_audit_log_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(audit_log_event) TYPE zif_github=>audit_log_event
      RAISING cx_static_check.
    METHODS parse_alert_number
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_number) TYPE zif_github=>alert_number
      RAISING cx_static_check.
    METHODS parse_alert_created_at
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_created_at) TYPE zif_github=>alert_created_at
      RAISING cx_static_check.
    METHODS parse_alert_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_url) TYPE zif_github=>alert_url
      RAISING cx_static_check.
    METHODS parse_alert_html_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_html_url) TYPE zif_github=>alert_html_url
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert_st
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert_state) TYPE zif_github=>secret_scanning_alert_state
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert_resoluti) TYPE zif_github=>secret_scanning_alert_resoluti
      RAISING cx_static_check.
    METHODS parse_nullable_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_repository) TYPE zif_github=>nullable_repository
      RAISING cx_static_check.
    METHODS parse_minimal_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(minimal_repository) TYPE zif_github=>minimal_repository
      RAISING cx_static_check.
    METHODS parse_organization_secret_scan
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_secret_scanning_a) TYPE zif_github=>organization_secret_scanning_a
      RAISING cx_static_check.
    METHODS parse_actions_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_billing_usage) TYPE zif_github=>actions_billing_usage
      RAISING cx_static_check.
    METHODS parse_advanced_security_active
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(advanced_security_active_commi) TYPE zif_github=>advanced_security_active_commi
      RAISING cx_static_check.
    METHODS parse_advanced_security_acti01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(advanced_security_active_com01) TYPE zif_github=>advanced_security_active_com01
      RAISING cx_static_check.
    METHODS parse_advanced_security_acti02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(advanced_security_active_com02) TYPE zif_github=>advanced_security_active_com02
      RAISING cx_static_check.
    METHODS parse_packages_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(packages_billing_usage) TYPE zif_github=>packages_billing_usage
      RAISING cx_static_check.
    METHODS parse_combined_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_billing_usage) TYPE zif_github=>combined_billing_usage
      RAISING cx_static_check.
    METHODS parse_actor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actor) TYPE zif_github=>actor
      RAISING cx_static_check.
    METHODS parse_nullable_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_milestone) TYPE zif_github=>nullable_milestone
      RAISING cx_static_check.
    METHODS parse_nullable_integration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_integration) TYPE zif_github=>nullable_integration
      RAISING cx_static_check.
    METHODS parse_author_association
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(author_association) TYPE zif_github=>author_association
      RAISING cx_static_check.
    METHODS parse_reaction_rollup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction_rollup) TYPE zif_github=>reaction_rollup
      RAISING cx_static_check.
    METHODS parse_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue) TYPE zif_github=>issue
      RAISING cx_static_check.
    METHODS parse_issue_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_comment) TYPE zif_github=>issue_comment
      RAISING cx_static_check.
    METHODS parse_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(event) TYPE zif_github=>event
      RAISING cx_static_check.
    METHODS parse_link_with_type
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link_with_type) TYPE zif_github=>link_with_type
      RAISING cx_static_check.
    METHODS parse_feed
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(feed) TYPE zif_github=>feed
      RAISING cx_static_check.
    METHODS parse_base_gist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(base_gist) TYPE zif_github=>base_gist
      RAISING cx_static_check.
    METHODS parse_public_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(public_user) TYPE zif_github=>public_user
      RAISING cx_static_check.
    METHODS parse_gist_history
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_history) TYPE zif_github=>gist_history
      RAISING cx_static_check.
    METHODS parse_gist_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_simple) TYPE zif_github=>gist_simple
      RAISING cx_static_check.
    METHODS parse_gist_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_comment) TYPE zif_github=>gist_comment
      RAISING cx_static_check.
    METHODS parse_gist_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_commit) TYPE zif_github=>gist_commit
      RAISING cx_static_check.
    METHODS parse_gitignore_template
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gitignore_template) TYPE zif_github=>gitignore_template
      RAISING cx_static_check.
    METHODS parse_license_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_simple) TYPE zif_github=>license_simple
      RAISING cx_static_check.
    METHODS parse_license
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license) TYPE zif_github=>license
      RAISING cx_static_check.
    METHODS parse_marketplace_listing_plan
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_listing_plan) TYPE zif_github=>marketplace_listing_plan
      RAISING cx_static_check.
    METHODS parse_marketplace_purchase
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_purchase) TYPE zif_github=>marketplace_purchase
      RAISING cx_static_check.
    METHODS parse_api_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(api_overview) TYPE zif_github=>api_overview
      RAISING cx_static_check.
    METHODS parse_thread
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread) TYPE zif_github=>thread
      RAISING cx_static_check.
    METHODS parse_thread_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread_subscription) TYPE zif_github=>thread_subscription
      RAISING cx_static_check.
    METHODS parse_organization_custom_repo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_custom_repository) TYPE zif_github=>organization_custom_repository
      RAISING cx_static_check.
    METHODS parse_external_groups
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(external_groups) TYPE zif_github=>external_groups
      RAISING cx_static_check.
    METHODS parse_organization_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_full) TYPE zif_github=>organization_full
      RAISING cx_static_check.
    METHODS parse_enabled_repositories
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enabled_repositories) TYPE zif_github=>enabled_repositories
      RAISING cx_static_check.
    METHODS parse_actions_organization_per
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_organization_permissio) TYPE zif_github=>actions_organization_permissio
      RAISING cx_static_check.
    METHODS parse_actions_default_workflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_default_workflow_permi) TYPE zif_github=>actions_default_workflow_permi
      RAISING cx_static_check.
    METHODS parse_actions_can_approve_pull
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_can_approve_pull_reque) TYPE zif_github=>actions_can_approve_pull_reque
      RAISING cx_static_check.
    METHODS parse_actions_get_default_work
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_get_default_workflow_p) TYPE zif_github=>actions_get_default_workflow_p
      RAISING cx_static_check.
    METHODS parse_actions_set_default_work
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_set_default_workflow_p) TYPE zif_github=>actions_set_default_workflow_p
      RAISING cx_static_check.
    METHODS parse_runner_groups_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_groups_org) TYPE zif_github=>runner_groups_org
      RAISING cx_static_check.
    METHODS parse_organization_actions_sec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_actions_secret) TYPE zif_github=>organization_actions_secret
      RAISING cx_static_check.
    METHODS parse_actions_public_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_public_key) TYPE zif_github=>actions_public_key
      RAISING cx_static_check.
    METHODS parse_empty_object
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(empty_object) TYPE zif_github=>empty_object
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_state) TYPE zif_github=>code_scanning_alert_state
      RAISING cx_static_check.
    METHODS parse_alert_updated_at
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_updated_at) TYPE zif_github=>alert_updated_at
      RAISING cx_static_check.
    METHODS parse_alert_instances_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_instances_url) TYPE zif_github=>alert_instances_url
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_fixe
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_fixed_at) TYPE zif_github=>code_scanning_alert_fixed_at
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_dism
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_dismissed_) TYPE zif_github=>code_scanning_alert_dismissed_
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_di01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_dismisse01) TYPE zif_github=>code_scanning_alert_dismisse01
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_rule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_rule) TYPE zif_github=>code_scanning_alert_rule
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool_na) TYPE zif_github=>code_scanning_analysis_tool_na
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool_ve) TYPE zif_github=>code_scanning_analysis_tool_ve
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool_gu) TYPE zif_github=>code_scanning_analysis_tool_gu
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis03
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool) TYPE zif_github=>code_scanning_analysis_tool
      RAISING cx_static_check.
    METHODS parse_code_scanning_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_ref) TYPE zif_github=>code_scanning_ref
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_a
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_analysi) TYPE zif_github=>code_scanning_analysis_analysi
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_envi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_environmen) TYPE zif_github=>code_scanning_alert_environmen
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_c
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_categor) TYPE zif_github=>code_scanning_analysis_categor
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_loca
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_location) TYPE zif_github=>code_scanning_alert_location
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_clas
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_classifica) TYPE zif_github=>code_scanning_alert_classifica
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_inst
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_instance) TYPE zif_github=>code_scanning_alert_instance
      RAISING cx_static_check.
    METHODS parse_code_scanning_organizati
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_organization_ale) TYPE zif_github=>code_scanning_organization_ale
      RAISING cx_static_check.
    METHODS parse_credential_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(credential_authorization) TYPE zif_github=>credential_authorization
      RAISING cx_static_check.
    METHODS parse_organization_dependabot_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_dependabot_secret) TYPE zif_github=>organization_dependabot_secret
      RAISING cx_static_check.
    METHODS parse_dependabot_public_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dependabot_public_key) TYPE zif_github=>dependabot_public_key
      RAISING cx_static_check.
    METHODS parse_external_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(external_group) TYPE zif_github=>external_group
      RAISING cx_static_check.
    METHODS parse_organization_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_invitation) TYPE zif_github=>organization_invitation
      RAISING cx_static_check.
    METHODS parse_org_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_hook) TYPE zif_github=>org_hook
      RAISING cx_static_check.
    METHODS parse_interaction_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_group) TYPE zif_github=>interaction_group
      RAISING cx_static_check.
    METHODS parse_interaction_limit_respon
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_limit_response) TYPE zif_github=>interaction_limit_response
      RAISING cx_static_check.
    METHODS parse_interaction_expiry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_expiry) TYPE zif_github=>interaction_expiry
      RAISING cx_static_check.
    METHODS parse_interaction_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_limit) TYPE zif_github=>interaction_limit
      RAISING cx_static_check.
    METHODS parse_nullable_team_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_team_simple) TYPE zif_github=>nullable_team_simple
      RAISING cx_static_check.
    METHODS parse_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team) TYPE zif_github=>team
      RAISING cx_static_check.
    METHODS parse_org_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_membership) TYPE zif_github=>org_membership
      RAISING cx_static_check.
    METHODS parse_migration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(migration) TYPE zif_github=>migration
      RAISING cx_static_check.
    METHODS parse_nullable_minimal_reposit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_minimal_repository) TYPE zif_github=>nullable_minimal_repository
      RAISING cx_static_check.
    METHODS parse_package
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(package) TYPE zif_github=>package
      RAISING cx_static_check.
    METHODS parse_package_version
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(package_version) TYPE zif_github=>package_version
      RAISING cx_static_check.
    METHODS parse_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project) TYPE zif_github=>project
      RAISING cx_static_check.
    METHODS parse_group_mapping
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(group_mapping) TYPE zif_github=>group_mapping
      RAISING cx_static_check.
    METHODS parse_team_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_full) TYPE zif_github=>team_full
      RAISING cx_static_check.
    METHODS parse_team_discussion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion) TYPE zif_github=>team_discussion
      RAISING cx_static_check.
    METHODS parse_team_discussion_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion_comment) TYPE zif_github=>team_discussion_comment
      RAISING cx_static_check.
    METHODS parse_reaction
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction) TYPE zif_github=>reaction
      RAISING cx_static_check.
    METHODS parse_team_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_membership) TYPE zif_github=>team_membership
      RAISING cx_static_check.
    METHODS parse_team_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_project) TYPE zif_github=>team_project
      RAISING cx_static_check.
    METHODS parse_team_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_repository) TYPE zif_github=>team_repository
      RAISING cx_static_check.
    METHODS parse_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_card) TYPE zif_github=>project_card
      RAISING cx_static_check.
    METHODS parse_project_column
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_column) TYPE zif_github=>project_column
      RAISING cx_static_check.
    METHODS parse_project_collaborator_per
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_collaborator_permissio) TYPE zif_github=>project_collaborator_permissio
      RAISING cx_static_check.
    METHODS parse_rate_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit) TYPE zif_github=>rate_limit
      RAISING cx_static_check.
    METHODS parse_rate_limit_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit_overview) TYPE zif_github=>rate_limit_overview
      RAISING cx_static_check.
    METHODS parse_code_of_conduct_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct_simple) TYPE zif_github=>code_of_conduct_simple
      RAISING cx_static_check.
    METHODS parse_full_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(full_repository) TYPE zif_github=>full_repository
      RAISING cx_static_check.
    METHODS parse_artifact
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(artifact) TYPE zif_github=>artifact
      RAISING cx_static_check.
    METHODS parse_job
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(job) TYPE zif_github=>job
      RAISING cx_static_check.
    METHODS parse_actions_enabled
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_enabled) TYPE zif_github=>actions_enabled
      RAISING cx_static_check.
    METHODS parse_actions_repository_permi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_repository_permissions) TYPE zif_github=>actions_repository_permissions
      RAISING cx_static_check.
    METHODS parse_pull_request_minimal
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_minimal) TYPE zif_github=>pull_request_minimal
      RAISING cx_static_check.
    METHODS parse_nullable_simple_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_simple_commit) TYPE zif_github=>nullable_simple_commit
      RAISING cx_static_check.
    METHODS parse_workflow_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_run) TYPE zif_github=>workflow_run
      RAISING cx_static_check.
    METHODS parse_environment_approvals
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(environment_approvals) TYPE zif_github=>environment_approvals
      RAISING cx_static_check.
    METHODS parse_deployment_reviewer_type
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_reviewer_type) TYPE zif_github=>deployment_reviewer_type
      RAISING cx_static_check.
    METHODS parse_pending_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pending_deployment) TYPE zif_github=>pending_deployment
      RAISING cx_static_check.
    METHODS parse_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment) TYPE zif_github=>deployment
      RAISING cx_static_check.
    METHODS parse_workflow_run_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_run_usage) TYPE zif_github=>workflow_run_usage
      RAISING cx_static_check.
    METHODS parse_actions_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_secret) TYPE zif_github=>actions_secret
      RAISING cx_static_check.
    METHODS parse_workflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow) TYPE zif_github=>workflow
      RAISING cx_static_check.
    METHODS parse_workflow_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_usage) TYPE zif_github=>workflow_usage
      RAISING cx_static_check.
    METHODS parse_autolink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(autolink) TYPE zif_github=>autolink
      RAISING cx_static_check.
    METHODS parse_protected_branch_require
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_required_stat) TYPE zif_github=>protected_branch_required_stat
      RAISING cx_static_check.
    METHODS parse_protected_branch_admin_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_admin_enforce) TYPE zif_github=>protected_branch_admin_enforce
      RAISING cx_static_check.
    METHODS parse_protected_branch_pull_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_pull_request_) TYPE zif_github=>protected_branch_pull_request_
      RAISING cx_static_check.
    METHODS parse_branch_restriction_polic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_restriction_policy) TYPE zif_github=>branch_restriction_policy
      RAISING cx_static_check.
    METHODS parse_branch_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_protection) TYPE zif_github=>branch_protection
      RAISING cx_static_check.
    METHODS parse_short_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_branch) TYPE zif_github=>short_branch
      RAISING cx_static_check.
    METHODS parse_nullable_git_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_git_user) TYPE zif_github=>nullable_git_user
      RAISING cx_static_check.
    METHODS parse_verification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(verification) TYPE zif_github=>verification
      RAISING cx_static_check.
    METHODS parse_diff_entry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(diff_entry) TYPE zif_github=>diff_entry
      RAISING cx_static_check.
    METHODS parse_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit) TYPE zif_github=>commit
      RAISING cx_static_check.
    METHODS parse_branch_with_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_with_protection) TYPE zif_github=>branch_with_protection
      RAISING cx_static_check.
    METHODS parse_status_check_policy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status_check_policy) TYPE zif_github=>status_check_policy
      RAISING cx_static_check.
    METHODS parse_protected_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch) TYPE zif_github=>protected_branch
      RAISING cx_static_check.
    METHODS parse_deployment_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_simple) TYPE zif_github=>deployment_simple
      RAISING cx_static_check.
    METHODS parse_check_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_run) TYPE zif_github=>check_run
      RAISING cx_static_check.
    METHODS parse_check_annotation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_annotation) TYPE zif_github=>check_annotation
      RAISING cx_static_check.
    METHODS parse_simple_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit) TYPE zif_github=>simple_commit
      RAISING cx_static_check.
    METHODS parse_check_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite) TYPE zif_github=>check_suite
      RAISING cx_static_check.
    METHODS parse_check_suite_preference
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite_preference) TYPE zif_github=>check_suite_preference
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_ru01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_rule_summa) TYPE zif_github=>code_scanning_alert_rule_summa
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_items) TYPE zif_github=>code_scanning_alert_items
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert) TYPE zif_github=>code_scanning_alert
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_set_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_set_state) TYPE zif_github=>code_scanning_alert_set_state
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_s
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_sarif_i) TYPE zif_github=>code_scanning_analysis_sarif_i
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis04
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_commit_) TYPE zif_github=>code_scanning_analysis_commit_
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_environ) TYPE zif_github=>code_scanning_analysis_environ
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis05
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_created) TYPE zif_github=>code_scanning_analysis_created
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_u
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_url) TYPE zif_github=>code_scanning_analysis_url
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis) TYPE zif_github=>code_scanning_analysis
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_d
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_deletio) TYPE zif_github=>code_scanning_analysis_deletio
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis06
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_sarif_f) TYPE zif_github=>code_scanning_analysis_sarif_f
      RAISING cx_static_check.
    METHODS parse_code_scanning_sarifs_rec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_sarifs_receipt) TYPE zif_github=>code_scanning_sarifs_receipt
      RAISING cx_static_check.
    METHODS parse_code_scanning_sarifs_sta
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_sarifs_status) TYPE zif_github=>code_scanning_sarifs_status
      RAISING cx_static_check.
    METHODS parse_codeowners_errors
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codeowners_errors) TYPE zif_github=>codeowners_errors
      RAISING cx_static_check.
    METHODS parse_nullable_codespace_machi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_codespace_machine) TYPE zif_github=>nullable_codespace_machine
      RAISING cx_static_check.
    METHODS parse_codespace
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codespace) TYPE zif_github=>codespace
      RAISING cx_static_check.
    METHODS parse_codespace_machine
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codespace_machine) TYPE zif_github=>codespace_machine
      RAISING cx_static_check.
    METHODS parse_collaborator
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(collaborator) TYPE zif_github=>collaborator
      RAISING cx_static_check.
    METHODS parse_repository_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_invitation) TYPE zif_github=>repository_invitation
      RAISING cx_static_check.
    METHODS parse_nullable_collaborator
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_collaborator) TYPE zif_github=>nullable_collaborator
      RAISING cx_static_check.
    METHODS parse_repository_collaborator_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_collaborator_permis) TYPE zif_github=>repository_collaborator_permis
      RAISING cx_static_check.
    METHODS parse_commit_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comment) TYPE zif_github=>commit_comment
      RAISING cx_static_check.
    METHODS parse_branch_short
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_short) TYPE zif_github=>branch_short
      RAISING cx_static_check.
    METHODS parse_link
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link) TYPE zif_github=>link
      RAISING cx_static_check.
    METHODS parse_auto_merge
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(auto_merge) TYPE zif_github=>auto_merge
      RAISING cx_static_check.
    METHODS parse_pull_request_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_simple) TYPE zif_github=>pull_request_simple
      RAISING cx_static_check.
    METHODS parse_simple_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit_status) TYPE zif_github=>simple_commit_status
      RAISING cx_static_check.
    METHODS parse_combined_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_commit_status) TYPE zif_github=>combined_commit_status
      RAISING cx_static_check.
    METHODS parse_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status) TYPE zif_github=>status
      RAISING cx_static_check.
    METHODS parse_nullable_code_of_conduct
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_code_of_conduct_simpl) TYPE zif_github=>nullable_code_of_conduct_simpl
      RAISING cx_static_check.
    METHODS parse_nullable_community_healt
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_community_health_file) TYPE zif_github=>nullable_community_health_file
      RAISING cx_static_check.
    METHODS parse_community_profile
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(community_profile) TYPE zif_github=>community_profile
      RAISING cx_static_check.
    METHODS parse_commit_comparison
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comparison) TYPE zif_github=>commit_comparison
      RAISING cx_static_check.
    METHODS parse_content_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_tree) TYPE zif_github=>content_tree
      RAISING cx_static_check.
    METHODS parse_content_directory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_directory) TYPE zif_github=>content_directory
      RAISING cx_static_check.
    METHODS parse_content_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_file) TYPE zif_github=>content_file
      RAISING cx_static_check.
    METHODS parse_content_symlink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_symlink) TYPE zif_github=>content_symlink
      RAISING cx_static_check.
    METHODS parse_content_submodule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_submodule) TYPE zif_github=>content_submodule
      RAISING cx_static_check.
    METHODS parse_file_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(file_commit) TYPE zif_github=>file_commit
      RAISING cx_static_check.
    METHODS parse_contributor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor) TYPE zif_github=>contributor
      RAISING cx_static_check.
    METHODS parse_dependabot_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dependabot_secret) TYPE zif_github=>dependabot_secret
      RAISING cx_static_check.
    METHODS parse_deployment_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_status) TYPE zif_github=>deployment_status
      RAISING cx_static_check.
    METHODS parse_wait_timer
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(wait_timer) TYPE zif_github=>wait_timer
      RAISING cx_static_check.
    METHODS parse_deployment_branch_policy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_branch_policy) TYPE zif_github=>deployment_branch_policy
      RAISING cx_static_check.
    METHODS parse_environment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(environment) TYPE zif_github=>environment
      RAISING cx_static_check.
    METHODS parse_short_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_blob) TYPE zif_github=>short_blob
      RAISING cx_static_check.
    METHODS parse_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(blob) TYPE zif_github=>blob
      RAISING cx_static_check.
    METHODS parse_git_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_commit) TYPE zif_github=>git_commit
      RAISING cx_static_check.
    METHODS parse_git_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_ref) TYPE zif_github=>git_ref
      RAISING cx_static_check.
    METHODS parse_git_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tag) TYPE zif_github=>git_tag
      RAISING cx_static_check.
    METHODS parse_git_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tree) TYPE zif_github=>git_tree
      RAISING cx_static_check.
    METHODS parse_hook_response
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_response) TYPE zif_github=>hook_response
      RAISING cx_static_check.
    METHODS parse_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook) TYPE zif_github=>hook
      RAISING cx_static_check.
    METHODS parse_import
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(import) TYPE zif_github=>import
      RAISING cx_static_check.
    METHODS parse_porter_author
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(porter_author) TYPE zif_github=>porter_author
      RAISING cx_static_check.
    METHODS parse_porter_large_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(porter_large_file) TYPE zif_github=>porter_large_file
      RAISING cx_static_check.
    METHODS parse_nullable_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nullable_issue) TYPE zif_github=>nullable_issue
      RAISING cx_static_check.
    METHODS parse_issue_event_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_label) TYPE zif_github=>issue_event_label
      RAISING cx_static_check.
    METHODS parse_issue_event_dismissed_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_dismissed_review) TYPE zif_github=>issue_event_dismissed_review
      RAISING cx_static_check.
    METHODS parse_issue_event_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_milestone) TYPE zif_github=>issue_event_milestone
      RAISING cx_static_check.
    METHODS parse_issue_event_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_project_card) TYPE zif_github=>issue_event_project_card
      RAISING cx_static_check.
    METHODS parse_issue_event_rename
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_rename) TYPE zif_github=>issue_event_rename
      RAISING cx_static_check.
    METHODS parse_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event) TYPE zif_github=>issue_event
      RAISING cx_static_check.
    METHODS parse_labeled_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(labeled_issue_event) TYPE zif_github=>labeled_issue_event
      RAISING cx_static_check.
    METHODS parse_unlabeled_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(unlabeled_issue_event) TYPE zif_github=>unlabeled_issue_event
      RAISING cx_static_check.
    METHODS parse_assigned_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(assigned_issue_event) TYPE zif_github=>assigned_issue_event
      RAISING cx_static_check.
    METHODS parse_unassigned_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(unassigned_issue_event) TYPE zif_github=>unassigned_issue_event
      RAISING cx_static_check.
    METHODS parse_milestoned_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(milestoned_issue_event) TYPE zif_github=>milestoned_issue_event
      RAISING cx_static_check.
    METHODS parse_demilestoned_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(demilestoned_issue_event) TYPE zif_github=>demilestoned_issue_event
      RAISING cx_static_check.
    METHODS parse_renamed_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(renamed_issue_event) TYPE zif_github=>renamed_issue_event
      RAISING cx_static_check.
    METHODS parse_review_requested_issue_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_requested_issue_event) TYPE zif_github=>review_requested_issue_event
      RAISING cx_static_check.
    METHODS parse_review_request_removed_i
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_request_removed_issue_e) TYPE zif_github=>review_request_removed_issue_e
      RAISING cx_static_check.
    METHODS parse_review_dismissed_issue_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_dismissed_issue_event) TYPE zif_github=>review_dismissed_issue_event
      RAISING cx_static_check.
    METHODS parse_locked_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(locked_issue_event) TYPE zif_github=>locked_issue_event
      RAISING cx_static_check.
    METHODS parse_added_to_project_issue_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(added_to_project_issue_event) TYPE zif_github=>added_to_project_issue_event
      RAISING cx_static_check.
    METHODS parse_moved_column_in_project_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(moved_column_in_project_issue_) TYPE zif_github=>moved_column_in_project_issue_
      RAISING cx_static_check.
    METHODS parse_removed_from_project_iss
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(removed_from_project_issue_eve) TYPE zif_github=>removed_from_project_issue_eve
      RAISING cx_static_check.
    METHODS parse_converted_note_to_issue_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(converted_note_to_issue_issue_) TYPE zif_github=>converted_note_to_issue_issue_
      RAISING cx_static_check.
    METHODS parse_issue_event_for_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_for_issue) TYPE zif_github=>issue_event_for_issue
      RAISING cx_static_check.
    METHODS parse_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label) TYPE zif_github=>label
      RAISING cx_static_check.
    METHODS parse_timeline_comment_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_comment_event) TYPE zif_github=>timeline_comment_event
      RAISING cx_static_check.
    METHODS parse_timeline_cross_reference
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_cross_referenced_even) TYPE zif_github=>timeline_cross_referenced_even
      RAISING cx_static_check.
    METHODS parse_timeline_committed_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_committed_event) TYPE zif_github=>timeline_committed_event
      RAISING cx_static_check.
    METHODS parse_timeline_reviewed_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_reviewed_event) TYPE zif_github=>timeline_reviewed_event
      RAISING cx_static_check.
    METHODS parse_pull_request_review_comm
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_comment) TYPE zif_github=>pull_request_review_comment
      RAISING cx_static_check.
    METHODS parse_timeline_line_commented_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_line_commented_event) TYPE zif_github=>timeline_line_commented_event
      RAISING cx_static_check.
    METHODS parse_timeline_commit_commente
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_commit_commented_even) TYPE zif_github=>timeline_commit_commented_even
      RAISING cx_static_check.
    METHODS parse_timeline_assigned_issue_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_assigned_issue_event) TYPE zif_github=>timeline_assigned_issue_event
      RAISING cx_static_check.
    METHODS parse_timeline_unassigned_issu
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_unassigned_issue_even) TYPE zif_github=>timeline_unassigned_issue_even
      RAISING cx_static_check.
    METHODS parse_timeline_issue_events
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timeline_issue_events) TYPE zif_github=>timeline_issue_events
      RAISING cx_static_check.
    METHODS parse_deploy_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deploy_key) TYPE zif_github=>deploy_key
      RAISING cx_static_check.
    METHODS parse_language
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(language) TYPE zif_github=>language
      RAISING cx_static_check.
    METHODS parse_license_content
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_content) TYPE zif_github=>license_content
      RAISING cx_static_check.
    METHODS parse_merged_upstream
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(merged_upstream) TYPE zif_github=>merged_upstream
      RAISING cx_static_check.
    METHODS parse_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(milestone) TYPE zif_github=>milestone
      RAISING cx_static_check.
    METHODS parse_pages_source_hash
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_source_hash) TYPE zif_github=>pages_source_hash
      RAISING cx_static_check.
    METHODS parse_pages_https_certificate
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_https_certificate) TYPE zif_github=>pages_https_certificate
      RAISING cx_static_check.
    METHODS parse_page
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page) TYPE zif_github=>page
      RAISING cx_static_check.
    METHODS parse_page_build
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build) TYPE zif_github=>page_build
      RAISING cx_static_check.
    METHODS parse_page_build_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build_status) TYPE zif_github=>page_build_status
      RAISING cx_static_check.
    METHODS parse_pages_health_check
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_health_check) TYPE zif_github=>pages_health_check
      RAISING cx_static_check.
    METHODS parse_team_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_simple) TYPE zif_github=>team_simple
      RAISING cx_static_check.
    METHODS parse_pull_request
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request) TYPE zif_github=>pull_request
      RAISING cx_static_check.
    METHODS parse_pull_request_merge_resul
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_merge_result) TYPE zif_github=>pull_request_merge_result
      RAISING cx_static_check.
    METHODS parse_pull_request_review_requ
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_request) TYPE zif_github=>pull_request_review_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review) TYPE zif_github=>pull_request_review
      RAISING cx_static_check.
    METHODS parse_review_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_comment) TYPE zif_github=>review_comment
      RAISING cx_static_check.
    METHODS parse_release_asset
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release_asset) TYPE zif_github=>release_asset
      RAISING cx_static_check.
    METHODS parse_release
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release) TYPE zif_github=>release
      RAISING cx_static_check.
    METHODS parse_release_notes_content
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release_notes_content) TYPE zif_github=>release_notes_content
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert) TYPE zif_github=>secret_scanning_alert
      RAISING cx_static_check.
    METHODS parse_secret_scanning_location
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_location_commi) TYPE zif_github=>secret_scanning_location_commi
      RAISING cx_static_check.
    METHODS parse_secret_scanning_locati01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_location) TYPE zif_github=>secret_scanning_location
      RAISING cx_static_check.
    METHODS parse_stargazer
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(stargazer) TYPE zif_github=>stargazer
      RAISING cx_static_check.
    METHODS parse_code_frequency_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_frequency_stat) TYPE zif_github=>code_frequency_stat
      RAISING cx_static_check.
    METHODS parse_commit_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_activity) TYPE zif_github=>commit_activity
      RAISING cx_static_check.
    METHODS parse_contributor_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor_activity) TYPE zif_github=>contributor_activity
      RAISING cx_static_check.
    METHODS parse_participation_stats
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(participation_stats) TYPE zif_github=>participation_stats
      RAISING cx_static_check.
    METHODS parse_repository_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_subscription) TYPE zif_github=>repository_subscription
      RAISING cx_static_check.
    METHODS parse_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(tag) TYPE zif_github=>tag
      RAISING cx_static_check.
    METHODS parse_topic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic) TYPE zif_github=>topic
      RAISING cx_static_check.
    METHODS parse_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(traffic) TYPE zif_github=>traffic
      RAISING cx_static_check.
    METHODS parse_clone_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(clone_traffic) TYPE zif_github=>clone_traffic
      RAISING cx_static_check.
    METHODS parse_content_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_traffic) TYPE zif_github=>content_traffic
      RAISING cx_static_check.
    METHODS parse_referrer_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(referrer_traffic) TYPE zif_github=>referrer_traffic
      RAISING cx_static_check.
    METHODS parse_view_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(view_traffic) TYPE zif_github=>view_traffic
      RAISING cx_static_check.
    METHODS parse_scim_group_list_enterpri
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_group_list_enterprise) TYPE zif_github=>scim_group_list_enterprise
      RAISING cx_static_check.
    METHODS parse_scim_enterprise_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_enterprise_group) TYPE zif_github=>scim_enterprise_group
      RAISING cx_static_check.
    METHODS parse_scim_user_list_enterpris
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user_list_enterprise) TYPE zif_github=>scim_user_list_enterprise
      RAISING cx_static_check.
    METHODS parse_scim_enterprise_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_enterprise_user) TYPE zif_github=>scim_enterprise_user
      RAISING cx_static_check.
    METHODS parse_scim_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user) TYPE zif_github=>scim_user
      RAISING cx_static_check.
    METHODS parse_scim_user_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user_list) TYPE zif_github=>scim_user_list
      RAISING cx_static_check.
    METHODS parse_search_result_text_match
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(search_result_text_matches) TYPE zif_github=>search_result_text_matches
      RAISING cx_static_check.
    METHODS parse_code_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_search_result_item) TYPE zif_github=>code_search_result_item
      RAISING cx_static_check.
    METHODS parse_commit_search_result_ite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_search_result_item) TYPE zif_github=>commit_search_result_item
      RAISING cx_static_check.
    METHODS parse_issue_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_search_result_item) TYPE zif_github=>issue_search_result_item
      RAISING cx_static_check.
    METHODS parse_label_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label_search_result_item) TYPE zif_github=>label_search_result_item
      RAISING cx_static_check.
    METHODS parse_repo_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repo_search_result_item) TYPE zif_github=>repo_search_result_item
      RAISING cx_static_check.
    METHODS parse_topic_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic_search_result_item) TYPE zif_github=>topic_search_result_item
      RAISING cx_static_check.
    METHODS parse_user_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_search_result_item) TYPE zif_github=>user_search_result_item
      RAISING cx_static_check.
    METHODS parse_private_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(private_user) TYPE zif_github=>private_user
      RAISING cx_static_check.
    METHODS parse_codespaces_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codespaces_secret) TYPE zif_github=>codespaces_secret
      RAISING cx_static_check.
    METHODS parse_codespaces_user_public_k
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codespaces_user_public_key) TYPE zif_github=>codespaces_user_public_key
      RAISING cx_static_check.
    METHODS parse_codespace_export_details
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(codespace_export_details) TYPE zif_github=>codespace_export_details
      RAISING cx_static_check.
    METHODS parse_email
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(email) TYPE zif_github=>email
      RAISING cx_static_check.
    METHODS parse_gpg_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gpg_key) TYPE zif_github=>gpg_key
      RAISING cx_static_check.
    METHODS parse_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key) TYPE zif_github=>key
      RAISING cx_static_check.
    METHODS parse_marketplace_account
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_account) TYPE zif_github=>marketplace_account
      RAISING cx_static_check.
    METHODS parse_user_marketplace_purchas
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_marketplace_purchase) TYPE zif_github=>user_marketplace_purchase
      RAISING cx_static_check.
    METHODS parse_starred_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(starred_repository) TYPE zif_github=>starred_repository
      RAISING cx_static_check.
    METHODS parse_hovercard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hovercard) TYPE zif_github=>hovercard
      RAISING cx_static_check.
    METHODS parse_key_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key_simple) TYPE zif_github=>key_simple
      RAISING cx_static_check.
    METHODS json_apps_create_from_manifest
      IMPORTING data TYPE zif_github=>bodyapps_create_from_manifest
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_update_webhook_confi
      IMPORTING data TYPE zif_github=>bodyapps_update_webhook_config
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_create_installation_
      IMPORTING data TYPE zif_github=>bodyapps_create_installation_a
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_delete_authorization
      IMPORTING data TYPE zif_github=>bodyapps_delete_authorization
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_check_token
      IMPORTING data TYPE zif_github=>bodyapps_check_token
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_reset_token
      IMPORTING data TYPE zif_github=>bodyapps_reset_token
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_delete_token
      IMPORTING data TYPE zif_github=>bodyapps_delete_token
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_apps_scope_token
      IMPORTING data TYPE zif_github=>bodyapps_scope_token
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_gith
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_githu
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_sele
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_selec
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_create_s
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_create_se
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_update_s
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_update_se
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_delete_s
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_delete_se
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_org_
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_org_a
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_self
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_self_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_add_cust
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_add_custo
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_cust
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_custo
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_remove_a
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_remove_al
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_create
      IMPORTING data TYPE zif_github=>bodygists_create
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_update
      IMPORTING data TYPE zif_github=>bodygists_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_delete
      IMPORTING data TYPE zif_github=>bodygists_delete
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_create_comment
      IMPORTING data TYPE zif_github=>bodygists_create_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_update_comment
      IMPORTING data TYPE zif_github=>bodygists_update_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_gists_delete_comment
      IMPORTING data TYPE zif_github=>bodygists_delete_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_markdown_render
      IMPORTING data TYPE zif_github=>bodymarkdown_render
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_mark_notificatio
      IMPORTING data TYPE zif_github=>bodyactivity_mark_notification
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_set_thread_subsc
      IMPORTING data TYPE zif_github=>bodyactivity_set_thread_subscr
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_delete_thread_su
      IMPORTING data TYPE zif_github=>bodyactivity_delete_thread_sub
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_update
      IMPORTING data TYPE zif_github=>bodyorgs_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_github_action
      IMPORTING data TYPE zif_github=>bodyactions_set_github_actions
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_selected_repo
      IMPORTING data TYPE zif_github=>bodyactions_set_selected_repos
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_create_self_hoste
      IMPORTING data TYPE zif_github=>bodyactions_create_self_hosted
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_update_self_hoste
      IMPORTING data TYPE zif_github=>bodyactions_update_self_hosted
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_delete_self_hoste
      IMPORTING data TYPE zif_github=>bodyactions_delete_self_hosted
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_repo_access_t
      IMPORTING data TYPE zif_github=>bodyactions_set_repo_access_to
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_self_hosted_r
      IMPORTING data TYPE zif_github=>bodyactions_set_self_hosted_ru
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_add_custom_labels
      IMPORTING data TYPE zif_github=>bodyactions_add_custom_labels_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_custom_labels
      IMPORTING data TYPE zif_github=>bodyactions_set_custom_labels_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_remove_all_custom
      IMPORTING data TYPE zif_github=>bodyactions_remove_all_custom_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_create_or_update_
      IMPORTING data TYPE zif_github=>bodyactions_create_or_update_o
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_delete_org_secret
      IMPORTING data TYPE zif_github=>bodyactions_delete_org_secret
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_selected_re01
      IMPORTING data TYPE zif_github=>bodyactions_set_selected_rep01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_dependabot_create_or_upda
      IMPORTING data TYPE zif_github=>bodydependabot_create_or_updat
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_dependabot_delete_org_sec
      IMPORTING data TYPE zif_github=>bodydependabot_delete_org_secr
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_dependabot_set_selected_r
      IMPORTING data TYPE zif_github=>bodydependabot_set_selected_re
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_create_webhook
      IMPORTING data TYPE zif_github=>bodyorgs_create_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_update_webhook
      IMPORTING data TYPE zif_github=>bodyorgs_update_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_delete_webhook
      IMPORTING data TYPE zif_github=>bodyorgs_delete_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_update_webhook_confi
      IMPORTING data TYPE zif_github=>bodyorgs_update_webhook_config
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_create_invitation
      IMPORTING data TYPE zif_github=>bodyorgs_create_invitation
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_set_membership_for_u
      IMPORTING data TYPE zif_github=>bodyorgs_set_membership_for_us
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_remove_membership_fo
      IMPORTING data TYPE zif_github=>bodyorgs_remove_membership_for
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_start_for_org
      IMPORTING data TYPE zif_github=>bodymigrations_start_for_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_create_for_org
      IMPORTING data TYPE zif_github=>bodyprojects_create_for_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_in_org
      IMPORTING data TYPE zif_github=>bodyrepos_create_in_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_create
      IMPORTING data TYPE zif_github=>bodyteams_create
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_update_in_org
      IMPORTING data TYPE zif_github=>bodyteams_update_in_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_delete_in_org
      IMPORTING data TYPE zif_github=>bodyteams_delete_in_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_create_discussion_i
      IMPORTING data TYPE zif_github=>bodyteams_create_discussion_in
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_update_discussion_i
      IMPORTING data TYPE zif_github=>bodyteams_update_discussion_in
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_delete_discussion_i
      IMPORTING data TYPE zif_github=>bodyteams_delete_discussion_in
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_create_discussion_c
      IMPORTING data TYPE zif_github=>bodyteams_create_discussion_co
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_update_discussion_c
      IMPORTING data TYPE zif_github=>bodyteams_update_discussion_co
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_delete_discussion_c
      IMPORTING data TYPE zif_github=>bodyteams_delete_discussion_co
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_team
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_team_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_te01
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_tea01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_link_external_idp_g
      IMPORTING data TYPE zif_github=>bodyteams_link_external_idp_gr
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_unlink_external_idp
      IMPORTING data TYPE zif_github=>bodyteams_unlink_external_idp_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_add_or_update_membe
      IMPORTING data TYPE zif_github=>bodyteams_add_or_update_member
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_remove_membership_f
      IMPORTING data TYPE zif_github=>bodyteams_remove_membership_fo
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_add_or_update_proje
      IMPORTING data TYPE zif_github=>bodyteams_add_or_update_projec
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_remove_project_in_o
      IMPORTING data TYPE zif_github=>bodyteams_remove_project_in_or
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_add_or_update_repo_
      IMPORTING data TYPE zif_github=>bodyteams_add_or_update_repo_p
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_remove_repo_in_org
      IMPORTING data TYPE zif_github=>bodyteams_remove_repo_in_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_teams_create_or_update_id
      IMPORTING data TYPE zif_github=>bodyteams_create_or_update_idp
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_update_card
      IMPORTING data TYPE zif_github=>bodyprojects_update_card
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_delete_card
      IMPORTING data TYPE zif_github=>bodyprojects_delete_card
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_move_card
      IMPORTING data TYPE zif_github=>bodyprojects_move_card
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_update_column
      IMPORTING data TYPE zif_github=>bodyprojects_update_column
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_delete_column
      IMPORTING data TYPE zif_github=>bodyprojects_delete_column
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_move_column
      IMPORTING data TYPE zif_github=>bodyprojects_move_column
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_update
      IMPORTING data TYPE zif_github=>bodyprojects_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_delete
      IMPORTING data TYPE zif_github=>bodyprojects_delete
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_add_collaborator
      IMPORTING data TYPE zif_github=>bodyprojects_add_collaborator
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_remove_collabora
      IMPORTING data TYPE zif_github=>bodyprojects_remove_collaborat
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_create_column
      IMPORTING data TYPE zif_github=>bodyprojects_create_column
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update
      IMPORTING data TYPE zif_github=>bodyrepos_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete
      IMPORTING data TYPE zif_github=>bodyrepos_delete
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_github_acti01
      IMPORTING data TYPE zif_github=>bodyactions_set_github_actio01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_add_custom_labe01
      IMPORTING data TYPE zif_github=>bodyactions_add_custom_label01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_set_custom_labe01
      IMPORTING data TYPE zif_github=>bodyactions_set_custom_label01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_remove_all_cust01
      IMPORTING data TYPE zif_github=>bodyactions_remove_all_custo01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_review_pending_de
      IMPORTING data TYPE zif_github=>bodyactions_review_pending_dep
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_create_or_updat01
      IMPORTING data TYPE zif_github=>bodyactions_create_or_update_r
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_delete_repo_secre
      IMPORTING data TYPE zif_github=>bodyactions_delete_repo_secret
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_create_workflow_d
      IMPORTING data TYPE zif_github=>bodyactions_create_workflow_di
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_autolink
      IMPORTING data TYPE zif_github=>bodyrepos_create_autolink
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_branch_prote
      IMPORTING data TYPE zif_github=>bodyrepos_update_branch_protec
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_branch_prote
      IMPORTING data TYPE zif_github=>bodyrepos_delete_branch_protec
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_pull_request
      IMPORTING data TYPE zif_github=>bodyrepos_update_pull_request_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_pull_request
      IMPORTING data TYPE zif_github=>bodyrepos_delete_pull_request_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_status_check
      IMPORTING data TYPE zif_github=>bodyrepos_update_status_check_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_remove_status_check
      IMPORTING data TYPE zif_github=>bodyrepos_remove_status_check_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_rename_branch
      IMPORTING data TYPE zif_github=>bodyrepos_rename_branch
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_checks_create
      IMPORTING data TYPE zif_github=>bodychecks_create
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_checks_update
      IMPORTING data TYPE zif_github=>bodychecks_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_checks_create_suite
      IMPORTING data TYPE zif_github=>bodychecks_create_suite
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_checks_set_suites_prefere
      IMPORTING data TYPE zif_github=>bodychecks_set_suites_preferen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_code_scanning_update_aler
      IMPORTING data TYPE zif_github=>bodycode_scanning_update_alert
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_code_scanning_upload_sari
      IMPORTING data TYPE zif_github=>bodycode_scanning_upload_sarif
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_create_with_re
      IMPORTING data TYPE zif_github=>bodycodespaces_create_with_rep
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_add_collaborator
      IMPORTING data TYPE zif_github=>bodyrepos_add_collaborator
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_remove_collaborator
      IMPORTING data TYPE zif_github=>bodyrepos_remove_collaborator
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_commit_comme
      IMPORTING data TYPE zif_github=>bodyrepos_update_commit_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_commit_comme
      IMPORTING data TYPE zif_github=>bodyrepos_delete_commit_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_comm
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_commi
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_commit_comme
      IMPORTING data TYPE zif_github=>bodyrepos_create_commit_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_or_update_fi
      IMPORTING data TYPE zif_github=>bodyrepos_create_or_update_fil
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_file
      IMPORTING data TYPE zif_github=>bodyrepos_delete_file
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_dependabot_create_or_up01
      IMPORTING data TYPE zif_github=>bodydependabot_create_or_upd01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_dependabot_delete_repo_se
      IMPORTING data TYPE zif_github=>bodydependabot_delete_repo_sec
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_deployment
      IMPORTING data TYPE zif_github=>bodyrepos_create_deployment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_deployment_s
      IMPORTING data TYPE zif_github=>bodyrepos_create_deployment_st
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_dispatch_eve
      IMPORTING data TYPE zif_github=>bodyrepos_create_dispatch_even
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_or_update_en
      IMPORTING data TYPE zif_github=>bodyrepos_create_or_update_env
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_an_environme
      IMPORTING data TYPE zif_github=>bodyrepos_delete_an_environmen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_fork
      IMPORTING data TYPE zif_github=>bodyrepos_create_fork
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_create_blob
      IMPORTING data TYPE zif_github=>bodygit_create_blob
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_create_commit
      IMPORTING data TYPE zif_github=>bodygit_create_commit
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_create_ref
      IMPORTING data TYPE zif_github=>bodygit_create_ref
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_update_ref
      IMPORTING data TYPE zif_github=>bodygit_update_ref
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_delete_ref
      IMPORTING data TYPE zif_github=>bodygit_delete_ref
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_create_tag
      IMPORTING data TYPE zif_github=>bodygit_create_tag
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_git_create_tree
      IMPORTING data TYPE zif_github=>bodygit_create_tree
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_webhook
      IMPORTING data TYPE zif_github=>bodyrepos_create_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_webhook
      IMPORTING data TYPE zif_github=>bodyrepos_update_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_webhook
      IMPORTING data TYPE zif_github=>bodyrepos_delete_webhook
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_webhook_conf
      IMPORTING data TYPE zif_github=>bodyrepos_update_webhook_confi
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_start_import
      IMPORTING data TYPE zif_github=>bodymigrations_start_import
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_update_import
      IMPORTING data TYPE zif_github=>bodymigrations_update_import
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_cancel_import
      IMPORTING data TYPE zif_github=>bodymigrations_cancel_import
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_map_commit_aut
      IMPORTING data TYPE zif_github=>bodymigrations_map_commit_auth
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_set_lfs_prefer
      IMPORTING data TYPE zif_github=>bodymigrations_set_lfs_prefere
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_invitation
      IMPORTING data TYPE zif_github=>bodyrepos_update_invitation
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_invitation
      IMPORTING data TYPE zif_github=>bodyrepos_delete_invitation
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_create
      IMPORTING data TYPE zif_github=>bodyissues_create
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_update_comment
      IMPORTING data TYPE zif_github=>bodyissues_update_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_delete_comment
      IMPORTING data TYPE zif_github=>bodyissues_delete_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_issu
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_issue
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_update
      IMPORTING data TYPE zif_github=>bodyissues_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_add_assignees
      IMPORTING data TYPE zif_github=>bodyissues_add_assignees
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_remove_assignees
      IMPORTING data TYPE zif_github=>bodyissues_remove_assignees
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_create_comment
      IMPORTING data TYPE zif_github=>bodyissues_create_comment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_lock
      IMPORTING data TYPE zif_github=>bodyissues_lock
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_unlock
      IMPORTING data TYPE zif_github=>bodyissues_unlock
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_is01
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_iss01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_deploy_key
      IMPORTING data TYPE zif_github=>bodyrepos_create_deploy_key
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_create_label
      IMPORTING data TYPE zif_github=>bodyissues_create_label
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_update_label
      IMPORTING data TYPE zif_github=>bodyissues_update_label
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_delete_label
      IMPORTING data TYPE zif_github=>bodyissues_delete_label
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_merge_upstream
      IMPORTING data TYPE zif_github=>bodyrepos_merge_upstream
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_merge
      IMPORTING data TYPE zif_github=>bodyrepos_merge
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_create_milestone
      IMPORTING data TYPE zif_github=>bodyissues_create_milestone
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_update_milestone
      IMPORTING data TYPE zif_github=>bodyissues_update_milestone
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_issues_delete_milestone
      IMPORTING data TYPE zif_github=>bodyissues_delete_milestone
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_mark_repo_notifi
      IMPORTING data TYPE zif_github=>bodyactivity_mark_repo_notific
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_pages_site
      IMPORTING data TYPE zif_github=>bodyrepos_create_pages_site
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_information_
      IMPORTING data TYPE zif_github=>bodyrepos_update_information_a
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_pages_site
      IMPORTING data TYPE zif_github=>bodyrepos_delete_pages_site
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_create_for_repo
      IMPORTING data TYPE zif_github=>bodyprojects_create_for_repo
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_create
      IMPORTING data TYPE zif_github=>bodypulls_create
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_update_review_comme
      IMPORTING data TYPE zif_github=>bodypulls_update_review_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_delete_review_comme
      IMPORTING data TYPE zif_github=>bodypulls_delete_review_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_pull
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_pull_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_update
      IMPORTING data TYPE zif_github=>bodypulls_update
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_create_with_pr
      IMPORTING data TYPE zif_github=>bodycodespaces_create_with_pr_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_create_review_comme
      IMPORTING data TYPE zif_github=>bodypulls_create_review_commen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_create_reply_for_re
      IMPORTING data TYPE zif_github=>bodypulls_create_reply_for_rev
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_merge
      IMPORTING data TYPE zif_github=>bodypulls_merge
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_request_reviewers
      IMPORTING data TYPE zif_github=>bodypulls_request_reviewers
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_remove_requested_re
      IMPORTING data TYPE zif_github=>bodypulls_remove_requested_rev
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_create_review
      IMPORTING data TYPE zif_github=>bodypulls_create_review
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_update_review
      IMPORTING data TYPE zif_github=>bodypulls_update_review
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_delete_pending_revi
      IMPORTING data TYPE zif_github=>bodypulls_delete_pending_revie
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_dismiss_review
      IMPORTING data TYPE zif_github=>bodypulls_dismiss_review
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_submit_review
      IMPORTING data TYPE zif_github=>bodypulls_submit_review
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_pulls_update_branch
      IMPORTING data TYPE zif_github=>bodypulls_update_branch
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_release
      IMPORTING data TYPE zif_github=>bodyrepos_create_release
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_release_asse
      IMPORTING data TYPE zif_github=>bodyrepos_update_release_asset
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_release_asse
      IMPORTING data TYPE zif_github=>bodyrepos_delete_release_asset
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_generate_release_no
      IMPORTING data TYPE zif_github=>bodyrepos_generate_release_not
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_update_release
      IMPORTING data TYPE zif_github=>bodyrepos_update_release
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_delete_release
      IMPORTING data TYPE zif_github=>bodyrepos_delete_release
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_reactions_create_for_rele
      IMPORTING data TYPE zif_github=>bodyreactions_create_for_relea
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_secret_scanning_update_al
      IMPORTING data TYPE zif_github=>bodysecret_scanning_update_ale
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_commit_statu
      IMPORTING data TYPE zif_github=>bodyrepos_create_commit_status
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_set_repo_subscri
      IMPORTING data TYPE zif_github=>bodyactivity_set_repo_subscrip
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_activity_delete_repo_subs
      IMPORTING data TYPE zif_github=>bodyactivity_delete_repo_subsc
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_replace_all_topics
      IMPORTING data TYPE zif_github=>bodyrepos_replace_all_topics
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_transfer
      IMPORTING data TYPE zif_github=>bodyrepos_transfer
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_using_templa
      IMPORTING data TYPE zif_github=>bodyrepos_create_using_templat
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_create_or_updat02
      IMPORTING data TYPE zif_github=>bodyactions_create_or_update_e
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_actions_delete_environmen
      IMPORTING data TYPE zif_github=>bodyactions_delete_environment
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_provisio
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_provision
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_info
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_infor
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_update_a
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_update_at
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_delete01
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_delete_sc
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_provis01
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_provisi01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_set_in01
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_set_inf01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_update01
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_update_01
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_enterprise_admin_delete_u
      IMPORTING data TYPE zif_github=>bodyenterprise_admin_delete_us
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_scim_provision_and_invite
      IMPORTING data TYPE zif_github=>bodyscim_provision_and_invite_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_scim_set_information_for_
      IMPORTING data TYPE zif_github=>bodyscim_set_information_for_p
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_scim_update_attribute_for
      IMPORTING data TYPE zif_github=>bodyscim_update_attribute_for_
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_scim_delete_user_from_org
      IMPORTING data TYPE zif_github=>bodyscim_delete_user_from_org
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_users_update_authenticate
      IMPORTING data TYPE zif_github=>bodyusers_update_authenticated
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_create_or_upda
      IMPORTING data TYPE zif_github=>bodycodespaces_create_or_updat
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_delete_secret_
      IMPORTING data TYPE zif_github=>bodycodespaces_delete_secret_f
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_set_repositori
      IMPORTING data TYPE zif_github=>bodycodespaces_set_repositorie
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_update_for_aut
      IMPORTING data TYPE zif_github=>bodycodespaces_update_for_auth
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_codespaces_delete_for_aut
      IMPORTING data TYPE zif_github=>bodycodespaces_delete_for_auth
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_users_set_primary_email_v
      IMPORTING data TYPE zif_github=>bodyusers_set_primary_email_vi
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_users_create_gpg_key_for_
      IMPORTING data TYPE zif_github=>bodyusers_create_gpg_key_for_a
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_users_create_public_ssh_k
      IMPORTING data TYPE zif_github=>bodyusers_create_public_ssh_ke
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_orgs_update_membership_fo
      IMPORTING data TYPE zif_github=>bodyorgs_update_membership_for
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_migrations_start_for_auth
      IMPORTING data TYPE zif_github=>bodymigrations_start_for_authe
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_projects_create_for_authe
      IMPORTING data TYPE zif_github=>bodyprojects_create_for_authen
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS json_repos_create_for_authenti
      IMPORTING data TYPE zif_github=>bodyrepos_create_for_authentic
      RETURNING VALUE(json) TYPE string
      RAISING cx_static_check.
    METHODS parse_meta_root
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_meta_root) TYPE zif_github=>response_meta_root
      RAISING cx_static_check.
    METHODS parse_apps_list_webhook_delive
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_webhook_del) TYPE zif_github=>response_apps_list_webhook_del
      RAISING cx_static_check.
    METHODS parse_apps_list_installations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_installatio) TYPE zif_github=>response_apps_list_installatio
      RAISING cx_static_check.
    METHODS parse_codes_of_conduct_get_all
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codes_of_conduct_get_) TYPE zif_github=>response_codes_of_conduct_get_
      RAISING cx_static_check.
    METHODS parse_emojis_get
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_emojis_get) TYPE zif_github=>response_emojis_get
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_se
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_list) TYPE zif_github=>response_enterprise_admin_list
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_li01) TYPE zif_github=>response_enterprise_admin_li01
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_or
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_li02) TYPE zif_github=>response_enterprise_admin_li02
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_li03) TYPE zif_github=>response_enterprise_admin_li03
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_03
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_li04) TYPE zif_github=>response_enterprise_admin_li04
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_list_ru
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_li05) TYPE zif_github=>response_enterprise_admin_li05
      RAISING cx_static_check.
    METHODS parse_enterprise_admin_get_aud
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_enterprise_admin_get_) TYPE zif_github=>response_enterprise_admin_get_
      RAISING cx_static_check.
    METHODS parse_secret_scanning_list_ale
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_secret_scanning_list_) TYPE zif_github=>response_secret_scanning_list_
      RAISING cx_static_check.
    METHODS parse_activity_list_public_eve
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_public_) TYPE zif_github=>response_activity_list_public_
      RAISING cx_static_check.
    METHODS parse_gists_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list) TYPE zif_github=>response_gists_list
      RAISING cx_static_check.
    METHODS parse_gists_list_public
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_public) TYPE zif_github=>response_gists_list_public
      RAISING cx_static_check.
    METHODS parse_gists_list_starred
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_starred) TYPE zif_github=>response_gists_list_starred
      RAISING cx_static_check.
    METHODS parse_gists_list_comments
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_comments) TYPE zif_github=>response_gists_list_comments
      RAISING cx_static_check.
    METHODS parse_gists_list_commits
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_commits) TYPE zif_github=>response_gists_list_commits
      RAISING cx_static_check.
    METHODS parse_gists_list_forks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_forks) TYPE zif_github=>response_gists_list_forks
      RAISING cx_static_check.
    METHODS parse_gists_check_is_starred
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_check_is_starre) TYPE zif_github=>response_gists_check_is_starre
      RAISING cx_static_check.
    METHODS parse_gitignore_get_all_templa
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gitignore_get_all_tem) TYPE zif_github=>response_gitignore_get_all_tem
      RAISING cx_static_check.
    METHODS parse_apps_list_repos_accessib
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_repos_acces) TYPE zif_github=>response_apps_list_repos_acces
      RAISING cx_static_check.
    METHODS parse_issues_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list) TYPE zif_github=>response_issues_list
      RAISING cx_static_check.
    METHODS parse_licenses_get_all_commonl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_licenses_get_all_comm) TYPE zif_github=>response_licenses_get_all_comm
      RAISING cx_static_check.
    METHODS parse_apps_list_plans
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_plans) TYPE zif_github=>response_apps_list_plans
      RAISING cx_static_check.
    METHODS parse_apps_list_accounts_for_p
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_accounts_fo) TYPE zif_github=>response_apps_list_accounts_fo
      RAISING cx_static_check.
    METHODS parse_apps_list_plans_stubbed
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_plans_stubb) TYPE zif_github=>response_apps_list_plans_stubb
      RAISING cx_static_check.
    METHODS parse_apps_list_accounts_for01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_accounts_01) TYPE zif_github=>response_apps_list_accounts_01
      RAISING cx_static_check.
    METHODS parse_activity_list_public_e01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_publi01) TYPE zif_github=>response_activity_list_publi01
      RAISING cx_static_check.
    METHODS parse_activity_list_notificati
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_notific) TYPE zif_github=>response_activity_list_notific
      RAISING cx_static_check.
    METHODS parse_activity_mark_notificati
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_mark_notific) TYPE zif_github=>response_activity_mark_notific
      RAISING cx_static_check.
    METHODS parse_orgs_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list) TYPE zif_github=>response_orgs_list
      RAISING cx_static_check.
    METHODS parse_orgs_list_custom_roles
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_custom_role) TYPE zif_github=>response_orgs_list_custom_role
      RAISING cx_static_check.
    METHODS parse_actions_list_selected_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_selected) TYPE zif_github=>response_actions_list_selected
      RAISING cx_static_check.
    METHODS parse_actions_list_self_hosted
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_self_hos) TYPE zif_github=>response_actions_list_self_hos
      RAISING cx_static_check.
    METHODS parse_actions_list_repo_access
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_repo_acc) TYPE zif_github=>response_actions_list_repo_acc
      RAISING cx_static_check.
    METHODS parse_actions_list_self_host01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_self_h01) TYPE zif_github=>response_actions_list_self_h01
      RAISING cx_static_check.
    METHODS parse_actions_list_self_host02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_self_h02) TYPE zif_github=>response_actions_list_self_h02
      RAISING cx_static_check.
    METHODS parse_actions_list_runner_appl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_runner_a) TYPE zif_github=>response_actions_list_runner_a
      RAISING cx_static_check.
    METHODS parse_actions_list_org_secrets
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_org_secr) TYPE zif_github=>response_actions_list_org_secr
      RAISING cx_static_check.
    METHODS parse_actions_list_selected_01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_select01) TYPE zif_github=>response_actions_list_select01
      RAISING cx_static_check.
    METHODS parse_orgs_get_audit_log
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_get_audit_log) TYPE zif_github=>response_orgs_get_audit_log
      RAISING cx_static_check.
    METHODS parse_orgs_list_blocked_users
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_blocked_use) TYPE zif_github=>response_orgs_list_blocked_use
      RAISING cx_static_check.
    METHODS parse_code_scanning_list_alert
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_code_scanning_list_al) TYPE zif_github=>response_code_scanning_list_al
      RAISING cx_static_check.
    METHODS parse_orgs_list_saml_sso_autho
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_saml_sso_au) TYPE zif_github=>response_orgs_list_saml_sso_au
      RAISING cx_static_check.
    METHODS parse_dependabot_list_org_secr
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_dependabot_list_org_s) TYPE zif_github=>response_dependabot_list_org_s
      RAISING cx_static_check.
    METHODS parse_dependabot_list_selected
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_dependabot_list_selec) TYPE zif_github=>response_dependabot_list_selec
      RAISING cx_static_check.
    METHODS parse_activity_list_public_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_publi02) TYPE zif_github=>response_activity_list_publi02
      RAISING cx_static_check.
    METHODS parse_orgs_list_failed_invitat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_failed_invi) TYPE zif_github=>response_orgs_list_failed_invi
      RAISING cx_static_check.
    METHODS parse_orgs_list_webhooks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_webhooks) TYPE zif_github=>response_orgs_list_webhooks
      RAISING cx_static_check.
    METHODS parse_orgs_list_webhook_delive
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_webhook_del) TYPE zif_github=>response_orgs_list_webhook_del
      RAISING cx_static_check.
    METHODS parse_orgs_list_app_installati
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_app_install) TYPE zif_github=>response_orgs_list_app_install
      RAISING cx_static_check.
    METHODS parse_orgs_list_pending_invita
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_pending_inv) TYPE zif_github=>response_orgs_list_pending_inv
      RAISING cx_static_check.
    METHODS parse_orgs_list_invitation_tea
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_invitation_) TYPE zif_github=>response_orgs_list_invitation_
      RAISING cx_static_check.
    METHODS parse_issues_list_for_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_for_org) TYPE zif_github=>response_issues_list_for_org
      RAISING cx_static_check.
    METHODS parse_orgs_list_members
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_members) TYPE zif_github=>response_orgs_list_members
      RAISING cx_static_check.
    METHODS parse_migrations_list_for_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_list_for_o) TYPE zif_github=>response_migrations_list_for_o
      RAISING cx_static_check.
    METHODS parse_migrations_list_repos_fo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_list_repos) TYPE zif_github=>response_migrations_list_repos
      RAISING cx_static_check.
    METHODS parse_orgs_list_outside_collab
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_outside_col) TYPE zif_github=>response_orgs_list_outside_col
      RAISING cx_static_check.
    METHODS parse_orgs_convert_member_to_o
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_convert_member_t) TYPE zif_github=>response_orgs_convert_member_t
      RAISING cx_static_check.
    METHODS parse_orgs_remove_outside_coll
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_remove_outside_c) TYPE zif_github=>response_orgs_remove_outside_c
      RAISING cx_static_check.
    METHODS parse_packages_list_packages_f
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_list_package) TYPE zif_github=>response_packages_list_package
      RAISING cx_static_check.
    METHODS parse_packages_get_all_package
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_get_all_pack) TYPE zif_github=>response_packages_get_all_pack
      RAISING cx_static_check.
    METHODS parse_projects_list_for_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_for_org) TYPE zif_github=>response_projects_list_for_org
      RAISING cx_static_check.
    METHODS parse_orgs_list_public_members
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_public_memb) TYPE zif_github=>response_orgs_list_public_memb
      RAISING cx_static_check.
    METHODS parse_repos_list_for_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_for_org) TYPE zif_github=>response_repos_list_for_org
      RAISING cx_static_check.
    METHODS parse_secret_scanning_list_a01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_secret_scanning_lis01) TYPE zif_github=>response_secret_scanning_lis01
      RAISING cx_static_check.
    METHODS parse_teams_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list) TYPE zif_github=>response_teams_list
      RAISING cx_static_check.
    METHODS parse_teams_list_discussions_i
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_discussion) TYPE zif_github=>response_teams_list_discussion
      RAISING cx_static_check.
    METHODS parse_teams_list_discussion_co
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_discussi01) TYPE zif_github=>response_teams_list_discussi01
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_team_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_te) TYPE zif_github=>response_reactions_list_for_te
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_tea01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_01) TYPE zif_github=>response_reactions_list_for_01
      RAISING cx_static_check.
    METHODS parse_teams_list_pending_invit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_pending_in) TYPE zif_github=>response_teams_list_pending_in
      RAISING cx_static_check.
    METHODS parse_teams_list_members_in_or
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_members_in) TYPE zif_github=>response_teams_list_members_in
      RAISING cx_static_check.
    METHODS parse_teams_list_projects_in_o
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_projects_i) TYPE zif_github=>response_teams_list_projects_i
      RAISING cx_static_check.
    METHODS parse_teams_add_or_update_proj
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_add_or_update_p) TYPE zif_github=>response_teams_add_or_update_p
      RAISING cx_static_check.
    METHODS parse_teams_list_repos_in_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_repos_in_o) TYPE zif_github=>response_teams_list_repos_in_o
      RAISING cx_static_check.
    METHODS parse_teams_list_child_in_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_child_in_o) TYPE zif_github=>response_teams_list_child_in_o
      RAISING cx_static_check.
    METHODS parse_projects_delete_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_delete_card) TYPE zif_github=>response_projects_delete_card
      RAISING cx_static_check.
    METHODS parse_projects_move_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_move_card) TYPE zif_github=>response_projects_move_card
      RAISING cx_static_check.
    METHODS parse_projects_move_card01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_move_card01) TYPE zif_github=>response_projects_move_card01
      RAISING cx_static_check.
    METHODS parse_projects_move_card02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_move_card02) TYPE zif_github=>response_projects_move_card02
      RAISING cx_static_check.
    METHODS parse_projects_list_cards
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_cards) TYPE zif_github=>response_projects_list_cards
      RAISING cx_static_check.
    METHODS parse_projects_create_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_create_card) TYPE zif_github=>response_projects_create_card
      RAISING cx_static_check.
    METHODS parse_projects_move_column
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_move_column) TYPE zif_github=>response_projects_move_column
      RAISING cx_static_check.
    METHODS parse_projects_update
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_update) TYPE zif_github=>response_projects_update
      RAISING cx_static_check.
    METHODS parse_projects_delete
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_delete) TYPE zif_github=>response_projects_delete
      RAISING cx_static_check.
    METHODS parse_projects_list_collaborat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_collabo) TYPE zif_github=>response_projects_list_collabo
      RAISING cx_static_check.
    METHODS parse_projects_list_columns
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_columns) TYPE zif_github=>response_projects_list_columns
      RAISING cx_static_check.
    METHODS parse_repos_delete
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_delete) TYPE zif_github=>response_repos_delete
      RAISING cx_static_check.
    METHODS parse_actions_list_artifacts_f
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_artifact) TYPE zif_github=>response_actions_list_artifact
      RAISING cx_static_check.
    METHODS parse_actions_list_self_host03
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_self_h03) TYPE zif_github=>response_actions_list_self_h03
      RAISING cx_static_check.
    METHODS parse_actions_list_runner_ap01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_runner01) TYPE zif_github=>response_actions_list_runner01
      RAISING cx_static_check.
    METHODS parse_actions_list_workflow_ru
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_workflow) TYPE zif_github=>response_actions_list_workflow
      RAISING cx_static_check.
    METHODS parse_actions_get_reviews_for_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_get_reviews_f) TYPE zif_github=>response_actions_get_reviews_f
      RAISING cx_static_check.
    METHODS parse_actions_list_workflow_01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_workfl01) TYPE zif_github=>response_actions_list_workfl01
      RAISING cx_static_check.
    METHODS parse_actions_list_jobs_for_wo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_jobs_for) TYPE zif_github=>response_actions_list_jobs_for
      RAISING cx_static_check.
    METHODS parse_actions_cancel_workflow_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_cancel_workfl) TYPE zif_github=>response_actions_cancel_workfl
      RAISING cx_static_check.
    METHODS parse_actions_list_jobs_for_01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_jobs_f01) TYPE zif_github=>response_actions_list_jobs_f01
      RAISING cx_static_check.
    METHODS parse_actions_get_pending_depl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_get_pending_d) TYPE zif_github=>response_actions_get_pending_d
      RAISING cx_static_check.
    METHODS parse_actions_review_pending_d
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_review_pendin) TYPE zif_github=>response_actions_review_pendin
      RAISING cx_static_check.
    METHODS parse_actions_list_repo_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_repo_sec) TYPE zif_github=>response_actions_list_repo_sec
      RAISING cx_static_check.
    METHODS parse_actions_create_or_update
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_create_or_upd) TYPE zif_github=>response_actions_create_or_upd
      RAISING cx_static_check.
    METHODS parse_actions_list_repo_workfl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_repo_wor) TYPE zif_github=>response_actions_list_repo_wor
      RAISING cx_static_check.
    METHODS parse_actions_list_workflow_02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_workfl02) TYPE zif_github=>response_actions_list_workfl02
      RAISING cx_static_check.
    METHODS parse_issues_list_assignees
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_assignees) TYPE zif_github=>response_issues_list_assignees
      RAISING cx_static_check.
    METHODS parse_repos_list_autolinks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_autolinks) TYPE zif_github=>response_repos_list_autolinks
      RAISING cx_static_check.
    METHODS parse_repos_list_branches
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_branches) TYPE zif_github=>response_repos_list_branches
      RAISING cx_static_check.
    METHODS parse_repos_get_all_status_che
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_all_status_) TYPE zif_github=>response_repos_get_all_status_
      RAISING cx_static_check.
    METHODS parse_repos_add_status_check_c
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_add_status_chec) TYPE zif_github=>response_repos_add_status_chec
      RAISING cx_static_check.
    METHODS parse_repos_set_status_check_c
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_set_status_chec) TYPE zif_github=>response_repos_set_status_chec
      RAISING cx_static_check.
    METHODS parse_repos_remove_status_chec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_remove_status_c) TYPE zif_github=>response_repos_remove_status_c
      RAISING cx_static_check.
    METHODS parse_repos_get_apps_with_acce
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_apps_with_a) TYPE zif_github=>response_repos_get_apps_with_a
      RAISING cx_static_check.
    METHODS parse_repos_add_app_access_res
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_add_app_access_) TYPE zif_github=>response_repos_add_app_access_
      RAISING cx_static_check.
    METHODS parse_repos_set_app_access_res
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_set_app_access_) TYPE zif_github=>response_repos_set_app_access_
      RAISING cx_static_check.
    METHODS parse_repos_remove_app_access_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_remove_app_acce) TYPE zif_github=>response_repos_remove_app_acce
      RAISING cx_static_check.
    METHODS parse_repos_get_teams_with_acc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_teams_with_) TYPE zif_github=>response_repos_get_teams_with_
      RAISING cx_static_check.
    METHODS parse_repos_add_team_access_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_add_team_access) TYPE zif_github=>response_repos_add_team_access
      RAISING cx_static_check.
    METHODS parse_repos_set_team_access_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_set_team_access) TYPE zif_github=>response_repos_set_team_access
      RAISING cx_static_check.
    METHODS parse_repos_remove_team_access
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_remove_team_acc) TYPE zif_github=>response_repos_remove_team_acc
      RAISING cx_static_check.
    METHODS parse_repos_get_users_with_acc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_users_with_) TYPE zif_github=>response_repos_get_users_with_
      RAISING cx_static_check.
    METHODS parse_repos_add_user_access_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_add_user_access) TYPE zif_github=>response_repos_add_user_access
      RAISING cx_static_check.
    METHODS parse_repos_set_user_access_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_set_user_access) TYPE zif_github=>response_repos_set_user_access
      RAISING cx_static_check.
    METHODS parse_repos_remove_user_access
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_remove_user_acc) TYPE zif_github=>response_repos_remove_user_acc
      RAISING cx_static_check.
    METHODS parse_checks_list_annotations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_list_annotatio) TYPE zif_github=>response_checks_list_annotatio
      RAISING cx_static_check.
    METHODS parse_checks_rerequest_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_rerequest_run) TYPE zif_github=>response_checks_rerequest_run
      RAISING cx_static_check.
    METHODS parse_checks_list_for_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_list_for_suite) TYPE zif_github=>response_checks_list_for_suite
      RAISING cx_static_check.
    METHODS parse_checks_rerequest_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_rerequest_suit) TYPE zif_github=>response_checks_rerequest_suit
      RAISING cx_static_check.
    METHODS parse_code_scanning_list_ale01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_code_scanning_list_01) TYPE zif_github=>response_code_scanning_list_01
      RAISING cx_static_check.
    METHODS parse_code_scanning_list_ale02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_code_scanning_list_02) TYPE zif_github=>response_code_scanning_list_02
      RAISING cx_static_check.
    METHODS parse_code_scanning_list_recen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_code_scanning_list_re) TYPE zif_github=>response_code_scanning_list_re
      RAISING cx_static_check.
    METHODS parse_codespaces_list_in_repos
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_list_in_re) TYPE zif_github=>response_codespaces_list_in_re
      RAISING cx_static_check.
    METHODS parse_codespaces_repo_machines
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_repo_machi) TYPE zif_github=>response_codespaces_repo_machi
      RAISING cx_static_check.
    METHODS parse_repos_list_collaborators
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_collaborat) TYPE zif_github=>response_repos_list_collaborat
      RAISING cx_static_check.
    METHODS parse_repos_list_commit_commen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_commit_com) TYPE zif_github=>response_repos_list_commit_com
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_commi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_co) TYPE zif_github=>response_reactions_list_for_co
      RAISING cx_static_check.
    METHODS parse_repos_list_commits
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_commits) TYPE zif_github=>response_repos_list_commits
      RAISING cx_static_check.
    METHODS parse_repos_list_branches_for_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_branches_f) TYPE zif_github=>response_repos_list_branches_f
      RAISING cx_static_check.
    METHODS parse_repos_list_comments_for_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_comments_f) TYPE zif_github=>response_repos_list_comments_f
      RAISING cx_static_check.
    METHODS parse_repos_list_pull_requests
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_pull_reque) TYPE zif_github=>response_repos_list_pull_reque
      RAISING cx_static_check.
    METHODS parse_checks_list_for_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_list_for_ref) TYPE zif_github=>response_checks_list_for_ref
      RAISING cx_static_check.
    METHODS parse_checks_list_suites_for_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_checks_list_suites_fo) TYPE zif_github=>response_checks_list_suites_fo
      RAISING cx_static_check.
    METHODS parse_repos_list_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_commit_sta) TYPE zif_github=>response_repos_list_commit_sta
      RAISING cx_static_check.
    METHODS parse_repos_list_contributors
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_contributo) TYPE zif_github=>response_repos_list_contributo
      RAISING cx_static_check.
    METHODS parse_dependabot_list_repo_sec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_dependabot_list_repo_) TYPE zif_github=>response_dependabot_list_repo_
      RAISING cx_static_check.
    METHODS parse_dependabot_create_or_upd
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_dependabot_create_or_) TYPE zif_github=>response_dependabot_create_or_
      RAISING cx_static_check.
    METHODS parse_repos_list_deployments
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_deployment) TYPE zif_github=>response_repos_list_deployment
      RAISING cx_static_check.
    METHODS parse_repos_create_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_create_deployme) TYPE zif_github=>response_repos_create_deployme
      RAISING cx_static_check.
    METHODS parse_repos_list_deployment_st
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_deployme01) TYPE zif_github=>response_repos_list_deployme01
      RAISING cx_static_check.
    METHODS parse_repos_get_all_environmen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_all_environ) TYPE zif_github=>response_repos_get_all_environ
      RAISING cx_static_check.
    METHODS parse_activity_list_repo_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_repo_ev) TYPE zif_github=>response_activity_list_repo_ev
      RAISING cx_static_check.
    METHODS parse_repos_list_forks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_forks) TYPE zif_github=>response_repos_list_forks
      RAISING cx_static_check.
    METHODS parse_git_list_matching_refs
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_git_list_matching_ref) TYPE zif_github=>response_git_list_matching_ref
      RAISING cx_static_check.
    METHODS parse_repos_list_webhooks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_webhooks) TYPE zif_github=>response_repos_list_webhooks
      RAISING cx_static_check.
    METHODS parse_repos_list_webhook_deliv
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_webhook_de) TYPE zif_github=>response_repos_list_webhook_de
      RAISING cx_static_check.
    METHODS parse_migrations_get_commit_au
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_get_commit) TYPE zif_github=>response_migrations_get_commit
      RAISING cx_static_check.
    METHODS parse_migrations_get_large_fil
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_get_large_) TYPE zif_github=>response_migrations_get_large_
      RAISING cx_static_check.
    METHODS parse_repos_list_invitations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_invitation) TYPE zif_github=>response_repos_list_invitation
      RAISING cx_static_check.
    METHODS parse_issues_list_for_repo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_for_repo) TYPE zif_github=>response_issues_list_for_repo
      RAISING cx_static_check.
    METHODS parse_issues_list_comments_for
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_comments_) TYPE zif_github=>response_issues_list_comments_
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_is) TYPE zif_github=>response_reactions_list_for_is
      RAISING cx_static_check.
    METHODS parse_issues_list_events_for_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_events_fo) TYPE zif_github=>response_issues_list_events_fo
      RAISING cx_static_check.
    METHODS parse_issues_list_comments
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_comments) TYPE zif_github=>response_issues_list_comments
      RAISING cx_static_check.
    METHODS parse_issues_list_events
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_events) TYPE zif_github=>response_issues_list_events
      RAISING cx_static_check.
    METHODS parse_issues_list_labels_on_is
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_labels_on) TYPE zif_github=>response_issues_list_labels_on
      RAISING cx_static_check.
    METHODS parse_issues_add_labels
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_add_labels) TYPE zif_github=>response_issues_add_labels
      RAISING cx_static_check.
    METHODS parse_issues_set_labels
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_set_labels) TYPE zif_github=>response_issues_set_labels
      RAISING cx_static_check.
    METHODS parse_issues_remove_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_remove_label) TYPE zif_github=>response_issues_remove_label
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_iss01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_02) TYPE zif_github=>response_reactions_list_for_02
      RAISING cx_static_check.
    METHODS parse_issues_list_events_for_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_events_01) TYPE zif_github=>response_issues_list_events_01
      RAISING cx_static_check.
    METHODS parse_repos_list_deploy_keys
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_deploy_key) TYPE zif_github=>response_repos_list_deploy_key
      RAISING cx_static_check.
    METHODS parse_issues_list_labels_for_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_labels_fo) TYPE zif_github=>response_issues_list_labels_fo
      RAISING cx_static_check.
    METHODS parse_issues_list_milestones
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_milestone) TYPE zif_github=>response_issues_list_milestone
      RAISING cx_static_check.
    METHODS parse_issues_list_labels_for_m
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_labels_01) TYPE zif_github=>response_issues_list_labels_01
      RAISING cx_static_check.
    METHODS parse_activity_list_repo_notif
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_repo_no) TYPE zif_github=>response_activity_list_repo_no
      RAISING cx_static_check.
    METHODS parse_activity_mark_repo_notif
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_mark_repo_no) TYPE zif_github=>response_activity_mark_repo_no
      RAISING cx_static_check.
    METHODS parse_repos_list_pages_builds
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_pages_buil) TYPE zif_github=>response_repos_list_pages_buil
      RAISING cx_static_check.
    METHODS parse_projects_list_for_repo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_for_rep) TYPE zif_github=>response_projects_list_for_rep
      RAISING cx_static_check.
    METHODS parse_pulls_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list) TYPE zif_github=>response_pulls_list
      RAISING cx_static_check.
    METHODS parse_pulls_list_review_commen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_review_com) TYPE zif_github=>response_pulls_list_review_com
      RAISING cx_static_check.
    METHODS parse_reactions_list_for_pull_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_reactions_list_for_pu) TYPE zif_github=>response_reactions_list_for_pu
      RAISING cx_static_check.
    METHODS parse_pulls_list_review_comm01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_review_c01) TYPE zif_github=>response_pulls_list_review_c01
      RAISING cx_static_check.
    METHODS parse_pulls_list_commits
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_commits) TYPE zif_github=>response_pulls_list_commits
      RAISING cx_static_check.
    METHODS parse_pulls_list_files
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_files) TYPE zif_github=>response_pulls_list_files
      RAISING cx_static_check.
    METHODS parse_pulls_merge
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_merge) TYPE zif_github=>response_pulls_merge
      RAISING cx_static_check.
    METHODS parse_pulls_merge01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_merge01) TYPE zif_github=>response_pulls_merge01
      RAISING cx_static_check.
    METHODS parse_pulls_list_reviews
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_reviews) TYPE zif_github=>response_pulls_list_reviews
      RAISING cx_static_check.
    METHODS parse_pulls_list_comments_for_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_list_comments_f) TYPE zif_github=>response_pulls_list_comments_f
      RAISING cx_static_check.
    METHODS parse_pulls_update_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_pulls_update_branch) TYPE zif_github=>response_pulls_update_branch
      RAISING cx_static_check.
    METHODS parse_repos_list_releases
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_releases) TYPE zif_github=>response_repos_list_releases
      RAISING cx_static_check.
    METHODS parse_repos_list_release_asset
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_release_as) TYPE zif_github=>response_repos_list_release_as
      RAISING cx_static_check.
    METHODS parse_secret_scanning_list_a02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_secret_scanning_lis02) TYPE zif_github=>response_secret_scanning_lis02
      RAISING cx_static_check.
    METHODS parse_secret_scanning_list_loc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_secret_scanning_lis03) TYPE zif_github=>response_secret_scanning_lis03
      RAISING cx_static_check.
    METHODS parse_repos_get_code_frequency
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_code_freque) TYPE zif_github=>response_repos_get_code_freque
      RAISING cx_static_check.
    METHODS parse_repos_get_commit_activit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_commit_acti) TYPE zif_github=>response_repos_get_commit_acti
      RAISING cx_static_check.
    METHODS parse_repos_get_contributors_s
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_contributor) TYPE zif_github=>response_repos_get_contributor
      RAISING cx_static_check.
    METHODS parse_repos_get_punch_card_sta
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_punch_card_) TYPE zif_github=>response_repos_get_punch_card_
      RAISING cx_static_check.
    METHODS parse_activity_list_watchers_f
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_watcher) TYPE zif_github=>response_activity_list_watcher
      RAISING cx_static_check.
    METHODS parse_repos_list_tags
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_tags) TYPE zif_github=>response_repos_list_tags
      RAISING cx_static_check.
    METHODS parse_repos_list_teams
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_teams) TYPE zif_github=>response_repos_list_teams
      RAISING cx_static_check.
    METHODS parse_repos_get_top_paths
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_top_paths) TYPE zif_github=>response_repos_get_top_paths
      RAISING cx_static_check.
    METHODS parse_repos_get_top_referrers
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_get_top_referre) TYPE zif_github=>response_repos_get_top_referre
      RAISING cx_static_check.
    METHODS parse_repos_list_public
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_public) TYPE zif_github=>response_repos_list_public
      RAISING cx_static_check.
    METHODS parse_actions_list_environment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_actions_list_environm) TYPE zif_github=>response_actions_list_environm
      RAISING cx_static_check.
    METHODS parse_search_code
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_code) TYPE zif_github=>response_search_code
      RAISING cx_static_check.
    METHODS parse_search_commits
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_commits) TYPE zif_github=>response_search_commits
      RAISING cx_static_check.
    METHODS parse_search_issues_and_pull_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_issues_and_pul) TYPE zif_github=>response_search_issues_and_pul
      RAISING cx_static_check.
    METHODS parse_search_labels
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_labels) TYPE zif_github=>response_search_labels
      RAISING cx_static_check.
    METHODS parse_search_repos
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_repos) TYPE zif_github=>response_search_repos
      RAISING cx_static_check.
    METHODS parse_search_topics
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_topics) TYPE zif_github=>response_search_topics
      RAISING cx_static_check.
    METHODS parse_search_users
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_search_users) TYPE zif_github=>response_search_users
      RAISING cx_static_check.
    METHODS parse_users_list_blocked_by_au
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_blocked_by) TYPE zif_github=>response_users_list_blocked_by
      RAISING cx_static_check.
    METHODS parse_codespaces_list_for_auth
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_list_for_a) TYPE zif_github=>response_codespaces_list_for_a
      RAISING cx_static_check.
    METHODS parse_codespaces_list_secrets_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_list_secre) TYPE zif_github=>response_codespaces_list_secre
      RAISING cx_static_check.
    METHODS parse_codespaces_create_or_upd
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_create_or_) TYPE zif_github=>response_codespaces_create_or_
      RAISING cx_static_check.
    METHODS parse_codespaces_list_reposito
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_list_repos) TYPE zif_github=>response_codespaces_list_repos
      RAISING cx_static_check.
    METHODS parse_codespaces_codespace_mac
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_codespaces_codespace_) TYPE zif_github=>response_codespaces_codespace_
      RAISING cx_static_check.
    METHODS parse_users_set_primary_email_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_set_primary_ema) TYPE zif_github=>response_users_set_primary_ema
      RAISING cx_static_check.
    METHODS parse_users_list_emails_for_au
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_emails_for) TYPE zif_github=>response_users_list_emails_for
      RAISING cx_static_check.
    METHODS parse_users_add_email_for_auth
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_add_email_for_a) TYPE zif_github=>response_users_add_email_for_a
      RAISING cx_static_check.
    METHODS parse_users_list_followers_for
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_followers_) TYPE zif_github=>response_users_list_followers_
      RAISING cx_static_check.
    METHODS parse_users_list_followed_by_a
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_followed_b) TYPE zif_github=>response_users_list_followed_b
      RAISING cx_static_check.
    METHODS parse_users_list_gpg_keys_for_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_gpg_keys_f) TYPE zif_github=>response_users_list_gpg_keys_f
      RAISING cx_static_check.
    METHODS parse_apps_list_installations_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_installat01) TYPE zif_github=>response_apps_list_installat01
      RAISING cx_static_check.
    METHODS parse_apps_list_installation_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_installat02) TYPE zif_github=>response_apps_list_installat02
      RAISING cx_static_check.
    METHODS parse_issues_list_for_authenti
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_issues_list_for_authe) TYPE zif_github=>response_issues_list_for_authe
      RAISING cx_static_check.
    METHODS parse_users_list_public_ssh_ke
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_public_ssh) TYPE zif_github=>response_users_list_public_ssh
      RAISING cx_static_check.
    METHODS parse_apps_list_subscriptions_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_subscriptio) TYPE zif_github=>response_apps_list_subscriptio
      RAISING cx_static_check.
    METHODS parse_apps_list_subscription01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_apps_list_subscript01) TYPE zif_github=>response_apps_list_subscript01
      RAISING cx_static_check.
    METHODS parse_orgs_list_memberships_fo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_memberships) TYPE zif_github=>response_orgs_list_memberships
      RAISING cx_static_check.
    METHODS parse_migrations_list_for_auth
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_list_for_a) TYPE zif_github=>response_migrations_list_for_a
      RAISING cx_static_check.
    METHODS parse_migrations_list_repos_01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_migrations_list_rep01) TYPE zif_github=>response_migrations_list_rep01
      RAISING cx_static_check.
    METHODS parse_orgs_list_for_authentica
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_for_authent) TYPE zif_github=>response_orgs_list_for_authent
      RAISING cx_static_check.
    METHODS parse_packages_list_packages01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_list_packa01) TYPE zif_github=>response_packages_list_packa01
      RAISING cx_static_check.
    METHODS parse_packages_get_all_packa01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_get_all_pa01) TYPE zif_github=>response_packages_get_all_pa01
      RAISING cx_static_check.
    METHODS parse_users_list_public_emails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_public_ema) TYPE zif_github=>response_users_list_public_ema
      RAISING cx_static_check.
    METHODS parse_repos_list_for_authentic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_for_authen) TYPE zif_github=>response_repos_list_for_authen
      RAISING cx_static_check.
    METHODS parse_repos_list_invitations_f
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_invitati01) TYPE zif_github=>response_repos_list_invitati01
      RAISING cx_static_check.
    METHODS parse_activity_list_repos_star
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_repos_s) TYPE zif_github=>response_activity_list_repos_s
      RAISING cx_static_check.
    METHODS parse_activity_list_watched_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_watched) TYPE zif_github=>response_activity_list_watched
      RAISING cx_static_check.
    METHODS parse_teams_list_for_authentic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_teams_list_for_authen) TYPE zif_github=>response_teams_list_for_authen
      RAISING cx_static_check.
    METHODS parse_users_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list) TYPE zif_github=>response_users_list
      RAISING cx_static_check.
    METHODS parse_activity_list_events_for
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_events_) TYPE zif_github=>response_activity_list_events_
      RAISING cx_static_check.
    METHODS parse_activity_list_org_events
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_org_eve) TYPE zif_github=>response_activity_list_org_eve
      RAISING cx_static_check.
    METHODS parse_activity_list_public_e02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_publi03) TYPE zif_github=>response_activity_list_publi03
      RAISING cx_static_check.
    METHODS parse_users_list_followers_f01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_follower01) TYPE zif_github=>response_users_list_follower01
      RAISING cx_static_check.
    METHODS parse_users_list_following_for
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_following_) TYPE zif_github=>response_users_list_following_
      RAISING cx_static_check.
    METHODS parse_gists_list_for_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_gists_list_for_user) TYPE zif_github=>response_gists_list_for_user
      RAISING cx_static_check.
    METHODS parse_users_list_gpg_keys_fo01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_gpg_keys01) TYPE zif_github=>response_users_list_gpg_keys01
      RAISING cx_static_check.
    METHODS parse_users_list_public_keys_f
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_users_list_public_key) TYPE zif_github=>response_users_list_public_key
      RAISING cx_static_check.
    METHODS parse_orgs_list_for_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_orgs_list_for_user) TYPE zif_github=>response_orgs_list_for_user
      RAISING cx_static_check.
    METHODS parse_packages_list_packages02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_list_packa02) TYPE zif_github=>response_packages_list_packa02
      RAISING cx_static_check.
    METHODS parse_packages_get_all_packa02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_packages_get_all_pa02) TYPE zif_github=>response_packages_get_all_pa02
      RAISING cx_static_check.
    METHODS parse_projects_list_for_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_projects_list_for_use) TYPE zif_github=>response_projects_list_for_use
      RAISING cx_static_check.
    METHODS parse_activity_list_received_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_receive) TYPE zif_github=>response_activity_list_receive
      RAISING cx_static_check.
    METHODS parse_activity_list_received_p
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_recei01) TYPE zif_github=>response_activity_list_recei01
      RAISING cx_static_check.
    METHODS parse_repos_list_for_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_repos_list_for_user) TYPE zif_github=>response_repos_list_for_user
      RAISING cx_static_check.
    METHODS parse_activity_list_repos_watc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(response_activity_list_repos_w) TYPE zif_github=>response_activity_list_repos_w
      RAISING cx_static_check.
ENDCLASS.

CLASS zcl_github IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_nullable_simple_user.
    nullable_simple_user-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_simple_user-email = mo_json->value_string( iv_prefix && '/email' ).
    nullable_simple_user-login = mo_json->value_string( iv_prefix && '/login' ).
    nullable_simple_user-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_simple_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_simple_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    nullable_simple_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    nullable_simple_user-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_simple_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_simple_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    nullable_simple_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    nullable_simple_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    nullable_simple_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    nullable_simple_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    nullable_simple_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    nullable_simple_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    nullable_simple_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    nullable_simple_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    nullable_simple_user-type = mo_json->value_string( iv_prefix && '/type' ).
    nullable_simple_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    nullable_simple_user-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
  ENDMETHOD.

  METHOD parse_integration.
    integration-id = mo_json->value_string( iv_prefix && '/id' ).
    integration-slug = mo_json->value_string( iv_prefix && '/slug' ).
    integration-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    integration-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    integration-name = mo_json->value_string( iv_prefix && '/name' ).
    integration-description = mo_json->value_string( iv_prefix && '/description' ).
    integration-external_url = mo_json->value_string( iv_prefix && '/external_url' ).
    integration-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    integration-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    integration-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    integration-permissions-issues = mo_json->value_string( iv_prefix && '/permissions/issues' ).
    integration-permissions-checks = mo_json->value_string( iv_prefix && '/permissions/checks' ).
    integration-permissions-metadata = mo_json->value_string( iv_prefix && '/permissions/metadata' ).
    integration-permissions-contents = mo_json->value_string( iv_prefix && '/permissions/contents' ).
    integration-permissions-deployments = mo_json->value_string( iv_prefix && '/permissions/deployments' ).
* todo, array, events
    integration-installations_count = mo_json->value_string( iv_prefix && '/installations_count' ).
    integration-client_id = mo_json->value_string( iv_prefix && '/client_id' ).
    integration-client_secret = mo_json->value_string( iv_prefix && '/client_secret' ).
    integration-webhook_secret = mo_json->value_string( iv_prefix && '/webhook_secret' ).
    integration-pem = mo_json->value_string( iv_prefix && '/pem' ).
  ENDMETHOD.

  METHOD parse_basic_error.
    basic_error-message = mo_json->value_string( iv_prefix && '/message' ).
    basic_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
    basic_error-url = mo_json->value_string( iv_prefix && '/url' ).
    basic_error-status = mo_json->value_string( iv_prefix && '/status' ).
  ENDMETHOD.

  METHOD parse_validation_error_simple.
    validation_error_simple-message = mo_json->value_string( iv_prefix && '/message' ).
    validation_error_simple-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_webhook_config_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_content_t.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_secret.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_insecure_.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config.
    webhook_config-url = parse_webhook_config_url( iv_prefix && '/url' ).
    webhook_config-content_type = parse_webhook_config_content_t( iv_prefix && '/content_type' ).
    webhook_config-secret = parse_webhook_config_secret( iv_prefix && '/secret' ).
    webhook_config-insecure_ssl = parse_webhook_config_insecure_( iv_prefix && '/insecure_ssl' ).
  ENDMETHOD.

  METHOD parse_hook_delivery_item.
    hook_delivery_item-id = mo_json->value_string( iv_prefix && '/id' ).
    hook_delivery_item-guid = mo_json->value_string( iv_prefix && '/guid' ).
    hook_delivery_item-delivered_at = mo_json->value_string( iv_prefix && '/delivered_at' ).
    hook_delivery_item-redelivery = mo_json->value_boolean( iv_prefix && '/redelivery' ).
* todo, number, duration
    hook_delivery_item-status = mo_json->value_string( iv_prefix && '/status' ).
    hook_delivery_item-status_code = mo_json->value_string( iv_prefix && '/status_code' ).
    hook_delivery_item-event = mo_json->value_string( iv_prefix && '/event' ).
    hook_delivery_item-action = mo_json->value_string( iv_prefix && '/action' ).
    hook_delivery_item-installation_id = mo_json->value_string( iv_prefix && '/installation_id' ).
    hook_delivery_item-repository_id = mo_json->value_string( iv_prefix && '/repository_id' ).
  ENDMETHOD.

  METHOD parse_scim_error.
    scim_error-message = mo_json->value_string( iv_prefix && '/message' ).
    scim_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
    scim_error-detail = mo_json->value_string( iv_prefix && '/detail' ).
    scim_error-status = mo_json->value_string( iv_prefix && '/status' ).
    scim_error-scimtype = mo_json->value_string( iv_prefix && '/scimType' ).
* todo, array, schemas
  ENDMETHOD.

  METHOD parse_validation_error.
    validation_error-message = mo_json->value_string( iv_prefix && '/message' ).
    validation_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_hook_delivery.
    hook_delivery-id = mo_json->value_string( iv_prefix && '/id' ).
    hook_delivery-guid = mo_json->value_string( iv_prefix && '/guid' ).
    hook_delivery-delivered_at = mo_json->value_string( iv_prefix && '/delivered_at' ).
    hook_delivery-redelivery = mo_json->value_boolean( iv_prefix && '/redelivery' ).
* todo, number, duration
    hook_delivery-status = mo_json->value_string( iv_prefix && '/status' ).
    hook_delivery-status_code = mo_json->value_string( iv_prefix && '/status_code' ).
    hook_delivery-event = mo_json->value_string( iv_prefix && '/event' ).
    hook_delivery-action = mo_json->value_string( iv_prefix && '/action' ).
    hook_delivery-installation_id = mo_json->value_string( iv_prefix && '/installation_id' ).
    hook_delivery-repository_id = mo_json->value_string( iv_prefix && '/repository_id' ).
    hook_delivery-url = mo_json->value_string( iv_prefix && '/url' ).
    hook_delivery-response-payload = mo_json->value_string( iv_prefix && '/response/payload' ).
  ENDMETHOD.

  METHOD parse_simple_user.
    simple_user-name = mo_json->value_string( iv_prefix && '/name' ).
    simple_user-email = mo_json->value_string( iv_prefix && '/email' ).
    simple_user-login = mo_json->value_string( iv_prefix && '/login' ).
    simple_user-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    simple_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    simple_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    simple_user-url = mo_json->value_string( iv_prefix && '/url' ).
    simple_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    simple_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    simple_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    simple_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    simple_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    simple_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    simple_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    simple_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    simple_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    simple_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    simple_user-type = mo_json->value_string( iv_prefix && '/type' ).
    simple_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    simple_user-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
  ENDMETHOD.

  METHOD parse_enterprise.
    enterprise-description = mo_json->value_string( iv_prefix && '/description' ).
    enterprise-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    enterprise-website_url = mo_json->value_string( iv_prefix && '/website_url' ).
    enterprise-id = mo_json->value_string( iv_prefix && '/id' ).
    enterprise-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    enterprise-name = mo_json->value_string( iv_prefix && '/name' ).
    enterprise-slug = mo_json->value_string( iv_prefix && '/slug' ).
    enterprise-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    enterprise-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    enterprise-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
  ENDMETHOD.

  METHOD parse_app_permissions.
    app_permissions-actions = mo_json->value_string( iv_prefix && '/actions' ).
    app_permissions-administration = mo_json->value_string( iv_prefix && '/administration' ).
    app_permissions-checks = mo_json->value_string( iv_prefix && '/checks' ).
    app_permissions-contents = mo_json->value_string( iv_prefix && '/contents' ).
    app_permissions-deployments = mo_json->value_string( iv_prefix && '/deployments' ).
    app_permissions-environments = mo_json->value_string( iv_prefix && '/environments' ).
    app_permissions-issues = mo_json->value_string( iv_prefix && '/issues' ).
    app_permissions-metadata = mo_json->value_string( iv_prefix && '/metadata' ).
    app_permissions-packages = mo_json->value_string( iv_prefix && '/packages' ).
    app_permissions-pages = mo_json->value_string( iv_prefix && '/pages' ).
    app_permissions-pull_requests = mo_json->value_string( iv_prefix && '/pull_requests' ).
    app_permissions-repository_hooks = mo_json->value_string( iv_prefix && '/repository_hooks' ).
    app_permissions-repository_projects = mo_json->value_string( iv_prefix && '/repository_projects' ).
    app_permissions-secret_scanning_alerts = mo_json->value_string( iv_prefix && '/secret_scanning_alerts' ).
    app_permissions-secrets = mo_json->value_string( iv_prefix && '/secrets' ).
    app_permissions-security_events = mo_json->value_string( iv_prefix && '/security_events' ).
    app_permissions-single_file = mo_json->value_string( iv_prefix && '/single_file' ).
    app_permissions-statuses = mo_json->value_string( iv_prefix && '/statuses' ).
    app_permissions-vulnerability_alerts = mo_json->value_string( iv_prefix && '/vulnerability_alerts' ).
    app_permissions-workflows = mo_json->value_string( iv_prefix && '/workflows' ).
    app_permissions-members = mo_json->value_string( iv_prefix && '/members' ).
    app_permissions-organization_administration = mo_json->value_string( iv_prefix && '/organization_administration' ).
    app_permissions-organization_hooks = mo_json->value_string( iv_prefix && '/organization_hooks' ).
    app_permissions-organization_plan = mo_json->value_string( iv_prefix && '/organization_plan' ).
    app_permissions-organization_projects = mo_json->value_string( iv_prefix && '/organization_projects' ).
    app_permissions-organization_packages = mo_json->value_string( iv_prefix && '/organization_packages' ).
    app_permissions-organization_secrets = mo_json->value_string( iv_prefix && '/organization_secrets' ).
    app_permissions-organization_self_hosted_runne = mo_json->value_string( iv_prefix && '/organization_self_hosted_runners' ).
    app_permissions-organization_user_blocking = mo_json->value_string( iv_prefix && '/organization_user_blocking' ).
    app_permissions-team_discussions = mo_json->value_string( iv_prefix && '/team_discussions' ).
  ENDMETHOD.

  METHOD parse_installation.
    installation-id = mo_json->value_string( iv_prefix && '/id' ).
    installation-account = mo_json->value_string( iv_prefix && '/account' ).
    installation-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
    installation-access_tokens_url = mo_json->value_string( iv_prefix && '/access_tokens_url' ).
    installation-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    installation-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    installation-app_id = mo_json->value_string( iv_prefix && '/app_id' ).
    installation-target_id = mo_json->value_string( iv_prefix && '/target_id' ).
    installation-target_type = mo_json->value_string( iv_prefix && '/target_type' ).
    installation-permissions = parse_app_permissions( iv_prefix && '/permissions' ).
* todo, array, events
    installation-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    installation-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    installation-single_file_name = mo_json->value_string( iv_prefix && '/single_file_name' ).
    installation-has_multiple_single_files = mo_json->value_boolean( iv_prefix && '/has_multiple_single_files' ).
* todo, array, single_file_paths
    installation-app_slug = mo_json->value_string( iv_prefix && '/app_slug' ).
    installation-suspended_by = parse_nullable_simple_user( iv_prefix && '/suspended_by' ).
    installation-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    installation-contact_email = mo_json->value_string( iv_prefix && '/contact_email' ).
  ENDMETHOD.

  METHOD parse_nullable_license_simple.
    nullable_license_simple-key = mo_json->value_string( iv_prefix && '/key' ).
    nullable_license_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_license_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_license_simple-spdx_id = mo_json->value_string( iv_prefix && '/spdx_id' ).
    nullable_license_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_license_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_repository.
    repository-id = mo_json->value_string( iv_prefix && '/id' ).
    repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    repository-name = mo_json->value_string( iv_prefix && '/name' ).
    repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    repository-license = parse_nullable_license_simple( iv_prefix && '/license' ).
    repository-organization = parse_nullable_simple_user( iv_prefix && '/organization' ).
    repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    repository-owner = parse_simple_user( iv_prefix && '/owner' ).
    repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repository-description = mo_json->value_string( iv_prefix && '/description' ).
    repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    repository-url = mo_json->value_string( iv_prefix && '/url' ).
    repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    repository-language = mo_json->value_string( iv_prefix && '/language' ).
    repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    repository-size = mo_json->value_string( iv_prefix && '/size' ).
    repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    repository-template_repository-id = mo_json->value_string( iv_prefix && '/template_repository/id' ).
    repository-template_repository-node_id = mo_json->value_string( iv_prefix && '/template_repository/node_id' ).
    repository-template_repository-name = mo_json->value_string( iv_prefix && '/template_repository/name' ).
    repository-template_repository-full_name = mo_json->value_string( iv_prefix && '/template_repository/full_name' ).
    repository-template_repository-owner-login = mo_json->value_string( iv_prefix && '/template_repository/owner/login' ).
    repository-template_repository-owner-id = mo_json->value_string( iv_prefix && '/template_repository/owner/id' ).
    repository-template_repository-owner-node_id = mo_json->value_string( iv_prefix && '/template_repository/owner/node_id' ).
    repository-template_repository-owner-avatar_url = mo_json->value_string( iv_prefix && '/template_repository/owner/avatar_url' ).
    repository-template_repository-owner-gravatar_id = mo_json->value_string( iv_prefix && '/template_repository/owner/gravatar_id' ).
    repository-template_repository-owner-url = mo_json->value_string( iv_prefix && '/template_repository/owner/url' ).
    repository-template_repository-owner-html_url = mo_json->value_string( iv_prefix && '/template_repository/owner/html_url' ).
    repository-template_repository-owner-followers_url = mo_json->value_string( iv_prefix && '/template_repository/owner/followers_url' ).
    repository-template_repository-owner-following_url = mo_json->value_string( iv_prefix && '/template_repository/owner/following_url' ).
    repository-template_repository-owner-gists_url = mo_json->value_string( iv_prefix && '/template_repository/owner/gists_url' ).
    repository-template_repository-owner-starred_url = mo_json->value_string( iv_prefix && '/template_repository/owner/starred_url' ).
    repository-template_repository-owner-subscriptions_url = mo_json->value_string( iv_prefix && '/template_repository/owner/subscriptions_url' ).
    repository-template_repository-owner-organizations_url = mo_json->value_string( iv_prefix && '/template_repository/owner/organizations_url' ).
    repository-template_repository-owner-repos_url = mo_json->value_string( iv_prefix && '/template_repository/owner/repos_url' ).
    repository-template_repository-owner-events_url = mo_json->value_string( iv_prefix && '/template_repository/owner/events_url' ).
    repository-template_repository-owner-received_events_url = mo_json->value_string( iv_prefix && '/template_repository/owner/received_events_url' ).
    repository-template_repository-owner-type = mo_json->value_string( iv_prefix && '/template_repository/owner/type' ).
    repository-template_repository-owner-site_admin = mo_json->value_boolean( iv_prefix && '/template_repository/owner/site_admin' ).
    repository-template_repository-private = mo_json->value_boolean( iv_prefix && '/template_repository/private' ).
    repository-template_repository-html_url = mo_json->value_string( iv_prefix && '/template_repository/html_url' ).
    repository-template_repository-description = mo_json->value_string( iv_prefix && '/template_repository/description' ).
    repository-template_repository-fork = mo_json->value_boolean( iv_prefix && '/template_repository/fork' ).
    repository-template_repository-url = mo_json->value_string( iv_prefix && '/template_repository/url' ).
    repository-template_repository-archive_url = mo_json->value_string( iv_prefix && '/template_repository/archive_url' ).
    repository-template_repository-assignees_url = mo_json->value_string( iv_prefix && '/template_repository/assignees_url' ).
    repository-template_repository-blobs_url = mo_json->value_string( iv_prefix && '/template_repository/blobs_url' ).
    repository-template_repository-branches_url = mo_json->value_string( iv_prefix && '/template_repository/branches_url' ).
    repository-template_repository-collaborators_url = mo_json->value_string( iv_prefix && '/template_repository/collaborators_url' ).
    repository-template_repository-comments_url = mo_json->value_string( iv_prefix && '/template_repository/comments_url' ).
    repository-template_repository-commits_url = mo_json->value_string( iv_prefix && '/template_repository/commits_url' ).
    repository-template_repository-compare_url = mo_json->value_string( iv_prefix && '/template_repository/compare_url' ).
    repository-template_repository-contents_url = mo_json->value_string( iv_prefix && '/template_repository/contents_url' ).
    repository-template_repository-contributors_url = mo_json->value_string( iv_prefix && '/template_repository/contributors_url' ).
    repository-template_repository-deployments_url = mo_json->value_string( iv_prefix && '/template_repository/deployments_url' ).
    repository-template_repository-downloads_url = mo_json->value_string( iv_prefix && '/template_repository/downloads_url' ).
    repository-template_repository-events_url = mo_json->value_string( iv_prefix && '/template_repository/events_url' ).
    repository-template_repository-forks_url = mo_json->value_string( iv_prefix && '/template_repository/forks_url' ).
    repository-template_repository-git_commits_url = mo_json->value_string( iv_prefix && '/template_repository/git_commits_url' ).
    repository-template_repository-git_refs_url = mo_json->value_string( iv_prefix && '/template_repository/git_refs_url' ).
    repository-template_repository-git_tags_url = mo_json->value_string( iv_prefix && '/template_repository/git_tags_url' ).
    repository-template_repository-git_url = mo_json->value_string( iv_prefix && '/template_repository/git_url' ).
    repository-template_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/template_repository/issue_comment_url' ).
    repository-template_repository-issue_events_url = mo_json->value_string( iv_prefix && '/template_repository/issue_events_url' ).
    repository-template_repository-issues_url = mo_json->value_string( iv_prefix && '/template_repository/issues_url' ).
    repository-template_repository-keys_url = mo_json->value_string( iv_prefix && '/template_repository/keys_url' ).
    repository-template_repository-labels_url = mo_json->value_string( iv_prefix && '/template_repository/labels_url' ).
    repository-template_repository-languages_url = mo_json->value_string( iv_prefix && '/template_repository/languages_url' ).
    repository-template_repository-merges_url = mo_json->value_string( iv_prefix && '/template_repository/merges_url' ).
    repository-template_repository-milestones_url = mo_json->value_string( iv_prefix && '/template_repository/milestones_url' ).
    repository-template_repository-notifications_url = mo_json->value_string( iv_prefix && '/template_repository/notifications_url' ).
    repository-template_repository-pulls_url = mo_json->value_string( iv_prefix && '/template_repository/pulls_url' ).
    repository-template_repository-releases_url = mo_json->value_string( iv_prefix && '/template_repository/releases_url' ).
    repository-template_repository-ssh_url = mo_json->value_string( iv_prefix && '/template_repository/ssh_url' ).
    repository-template_repository-stargazers_url = mo_json->value_string( iv_prefix && '/template_repository/stargazers_url' ).
    repository-template_repository-statuses_url = mo_json->value_string( iv_prefix && '/template_repository/statuses_url' ).
    repository-template_repository-subscribers_url = mo_json->value_string( iv_prefix && '/template_repository/subscribers_url' ).
    repository-template_repository-subscription_url = mo_json->value_string( iv_prefix && '/template_repository/subscription_url' ).
    repository-template_repository-tags_url = mo_json->value_string( iv_prefix && '/template_repository/tags_url' ).
    repository-template_repository-teams_url = mo_json->value_string( iv_prefix && '/template_repository/teams_url' ).
    repository-template_repository-trees_url = mo_json->value_string( iv_prefix && '/template_repository/trees_url' ).
    repository-template_repository-clone_url = mo_json->value_string( iv_prefix && '/template_repository/clone_url' ).
    repository-template_repository-mirror_url = mo_json->value_string( iv_prefix && '/template_repository/mirror_url' ).
    repository-template_repository-hooks_url = mo_json->value_string( iv_prefix && '/template_repository/hooks_url' ).
    repository-template_repository-svn_url = mo_json->value_string( iv_prefix && '/template_repository/svn_url' ).
    repository-template_repository-homepage = mo_json->value_string( iv_prefix && '/template_repository/homepage' ).
    repository-template_repository-language = mo_json->value_string( iv_prefix && '/template_repository/language' ).
    repository-template_repository-forks_count = mo_json->value_string( iv_prefix && '/template_repository/forks_count' ).
    repository-template_repository-stargazers_count = mo_json->value_string( iv_prefix && '/template_repository/stargazers_count' ).
    repository-template_repository-watchers_count = mo_json->value_string( iv_prefix && '/template_repository/watchers_count' ).
    repository-template_repository-size = mo_json->value_string( iv_prefix && '/template_repository/size' ).
    repository-template_repository-default_branch = mo_json->value_string( iv_prefix && '/template_repository/default_branch' ).
    repository-template_repository-open_issues_count = mo_json->value_string( iv_prefix && '/template_repository/open_issues_count' ).
    repository-template_repository-is_template = mo_json->value_boolean( iv_prefix && '/template_repository/is_template' ).
* todo, array, topics
    repository-template_repository-has_issues = mo_json->value_boolean( iv_prefix && '/template_repository/has_issues' ).
    repository-template_repository-has_projects = mo_json->value_boolean( iv_prefix && '/template_repository/has_projects' ).
    repository-template_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/template_repository/has_wiki' ).
    repository-template_repository-has_pages = mo_json->value_boolean( iv_prefix && '/template_repository/has_pages' ).
    repository-template_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/template_repository/has_downloads' ).
    repository-template_repository-archived = mo_json->value_boolean( iv_prefix && '/template_repository/archived' ).
    repository-template_repository-disabled = mo_json->value_boolean( iv_prefix && '/template_repository/disabled' ).
    repository-template_repository-visibility = mo_json->value_string( iv_prefix && '/template_repository/visibility' ).
    repository-template_repository-pushed_at = mo_json->value_string( iv_prefix && '/template_repository/pushed_at' ).
    repository-template_repository-created_at = mo_json->value_string( iv_prefix && '/template_repository/created_at' ).
    repository-template_repository-updated_at = mo_json->value_string( iv_prefix && '/template_repository/updated_at' ).
    repository-template_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/admin' ).
    repository-template_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/maintain' ).
    repository-template_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/push' ).
    repository-template_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/triage' ).
    repository-template_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/pull' ).
    repository-template_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_rebase_merge' ).
    repository-template_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/template_repository/temp_clone_token' ).
    repository-template_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_squash_merge' ).
    repository-template_repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_auto_merge' ).
    repository-template_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/template_repository/delete_branch_on_merge' ).
    repository-template_repository-allow_update_branch = mo_json->value_boolean( iv_prefix && '/template_repository/allow_update_branch' ).
    repository-template_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/template_repository/allow_merge_commit' ).
    repository-template_repository-subscribers_count = mo_json->value_string( iv_prefix && '/template_repository/subscribers_count' ).
    repository-template_repository-network_count = mo_json->value_string( iv_prefix && '/template_repository/network_count' ).
    repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/allow_auto_merge' ).
    repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
    repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    repository-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
  ENDMETHOD.

  METHOD parse_installation_token.
    installation_token-token = mo_json->value_string( iv_prefix && '/token' ).
    installation_token-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
    installation_token-permissions = parse_app_permissions( iv_prefix && '/permissions' ).
    installation_token-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
* todo, array, repositories
    installation_token-single_file = mo_json->value_string( iv_prefix && '/single_file' ).
    installation_token-has_multiple_single_files = mo_json->value_boolean( iv_prefix && '/has_multiple_single_files' ).
* todo, array, single_file_paths
  ENDMETHOD.

  METHOD parse_application_grant.
    application_grant-id = mo_json->value_string( iv_prefix && '/id' ).
    application_grant-url = mo_json->value_string( iv_prefix && '/url' ).
    application_grant-app-client_id = mo_json->value_string( iv_prefix && '/app/client_id' ).
    application_grant-app-name = mo_json->value_string( iv_prefix && '/app/name' ).
    application_grant-app-url = mo_json->value_string( iv_prefix && '/app/url' ).
    application_grant-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    application_grant-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, array, scopes
    application_grant-user = parse_nullable_simple_user( iv_prefix && '/user' ).
  ENDMETHOD.

  METHOD parse_nullable_scoped_installa.
    nullable_scoped_installation-permissions = parse_app_permissions( iv_prefix && '/permissions' ).
    nullable_scoped_installation-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
    nullable_scoped_installation-single_file_name = mo_json->value_string( iv_prefix && '/single_file_name' ).
    nullable_scoped_installation-has_multiple_single_files = mo_json->value_boolean( iv_prefix && '/has_multiple_single_files' ).
* todo, array, single_file_paths
    nullable_scoped_installation-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    nullable_scoped_installation-account = parse_simple_user( iv_prefix && '/account' ).
  ENDMETHOD.

  METHOD parse_authorization.
    authorization-id = mo_json->value_string( iv_prefix && '/id' ).
    authorization-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, array, scopes
    authorization-token = mo_json->value_string( iv_prefix && '/token' ).
    authorization-token_last_eight = mo_json->value_string( iv_prefix && '/token_last_eight' ).
    authorization-hashed_token = mo_json->value_string( iv_prefix && '/hashed_token' ).
    authorization-app-client_id = mo_json->value_string( iv_prefix && '/app/client_id' ).
    authorization-app-name = mo_json->value_string( iv_prefix && '/app/name' ).
    authorization-app-url = mo_json->value_string( iv_prefix && '/app/url' ).
    authorization-note = mo_json->value_string( iv_prefix && '/note' ).
    authorization-note_url = mo_json->value_string( iv_prefix && '/note_url' ).
    authorization-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    authorization-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    authorization-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    authorization-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    authorization-installation = parse_nullable_scoped_installa( iv_prefix && '/installation' ).
    authorization-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
  ENDMETHOD.

  METHOD parse_code_of_conduct.
    code_of_conduct-key = mo_json->value_string( iv_prefix && '/key' ).
    code_of_conduct-name = mo_json->value_string( iv_prefix && '/name' ).
    code_of_conduct-url = mo_json->value_string( iv_prefix && '/url' ).
    code_of_conduct-body = mo_json->value_string( iv_prefix && '/body' ).
    code_of_conduct-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_enabled_organizations.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_allowed_actions.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_selected_actions_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_actions_enterprise_permi.
    actions_enterprise_permissions-enabled_organizations = parse_enabled_organizations( iv_prefix && '/enabled_organizations' ).
    actions_enterprise_permissions-selected_organizations_url = mo_json->value_string( iv_prefix && '/selected_organizations_url' ).
    actions_enterprise_permissions-allowed_actions = parse_allowed_actions( iv_prefix && '/allowed_actions' ).
    actions_enterprise_permissions-selected_actions_url = parse_selected_actions_url( iv_prefix && '/selected_actions_url' ).
  ENDMETHOD.

  METHOD parse_organization_simple.
    organization_simple-login = mo_json->value_string( iv_prefix && '/login' ).
    organization_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    organization_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    organization_simple-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    organization_simple-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    organization_simple-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    organization_simple-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    organization_simple-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    organization_simple-public_members_url = mo_json->value_string( iv_prefix && '/public_members_url' ).
    organization_simple-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    organization_simple-description = mo_json->value_string( iv_prefix && '/description' ).
  ENDMETHOD.

  METHOD parse_selected_actions.
    selected_actions-github_owned_allowed = mo_json->value_boolean( iv_prefix && '/github_owned_allowed' ).
    selected_actions-verified_allowed = mo_json->value_boolean( iv_prefix && '/verified_allowed' ).
* todo, array, patterns_allowed
  ENDMETHOD.

  METHOD parse_runner_groups_enterprise.
* todo, number, id
    runner_groups_enterprise-name = mo_json->value_string( iv_prefix && '/name' ).
    runner_groups_enterprise-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    runner_groups_enterprise-default = mo_json->value_boolean( iv_prefix && '/default' ).
    runner_groups_enterprise-selected_organizations_url = mo_json->value_string( iv_prefix && '/selected_organizations_url' ).
    runner_groups_enterprise-runners_url = mo_json->value_string( iv_prefix && '/runners_url' ).
    runner_groups_enterprise-allows_public_repositories = mo_json->value_boolean( iv_prefix && '/allows_public_repositories' ).
  ENDMETHOD.

  METHOD parse_runner_label.
    runner_label-id = mo_json->value_string( iv_prefix && '/id' ).
    runner_label-name = mo_json->value_string( iv_prefix && '/name' ).
    runner_label-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_runner.
    runner-id = mo_json->value_string( iv_prefix && '/id' ).
    runner-name = mo_json->value_string( iv_prefix && '/name' ).
    runner-os = mo_json->value_string( iv_prefix && '/os' ).
    runner-status = mo_json->value_string( iv_prefix && '/status' ).
    runner-busy = mo_json->value_boolean( iv_prefix && '/busy' ).
* todo, array, labels
  ENDMETHOD.

  METHOD parse_runner_application.
    runner_application-os = mo_json->value_string( iv_prefix && '/os' ).
    runner_application-architecture = mo_json->value_string( iv_prefix && '/architecture' ).
    runner_application-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    runner_application-filename = mo_json->value_string( iv_prefix && '/filename' ).
    runner_application-temp_download_token = mo_json->value_string( iv_prefix && '/temp_download_token' ).
    runner_application-sha256_checksum = mo_json->value_string( iv_prefix && '/sha256_checksum' ).
  ENDMETHOD.

  METHOD parse_authentication_token.
    authentication_token-token = mo_json->value_string( iv_prefix && '/token' ).
    authentication_token-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
* todo, array, repositories
    authentication_token-single_file = mo_json->value_string( iv_prefix && '/single_file' ).
    authentication_token-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
  ENDMETHOD.

  METHOD parse_audit_log_event.
    audit_log_event-timestamp = mo_json->value_string( iv_prefix && '/@timestamp' ).
    audit_log_event-action = mo_json->value_string( iv_prefix && '/action' ).
    audit_log_event-active = mo_json->value_boolean( iv_prefix && '/active' ).
    audit_log_event-active_was = mo_json->value_boolean( iv_prefix && '/active_was' ).
    audit_log_event-actor = mo_json->value_string( iv_prefix && '/actor' ).
    audit_log_event-actor_id = mo_json->value_string( iv_prefix && '/actor_id' ).
    audit_log_event-actor_location-country_name = mo_json->value_string( iv_prefix && '/actor_location/country_name' ).
    audit_log_event-org_id = mo_json->value_string( iv_prefix && '/org_id' ).
    audit_log_event-blocked_user = mo_json->value_string( iv_prefix && '/blocked_user' ).
    audit_log_event-business = mo_json->value_string( iv_prefix && '/business' ).
* todo, array, config
* todo, array, config_was
    audit_log_event-content_type = mo_json->value_string( iv_prefix && '/content_type' ).
    audit_log_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    audit_log_event-deploy_key_fingerprint = mo_json->value_string( iv_prefix && '/deploy_key_fingerprint' ).
    audit_log_event-_document_id = mo_json->value_string( iv_prefix && '/_document_id' ).
    audit_log_event-emoji = mo_json->value_string( iv_prefix && '/emoji' ).
* todo, array, events
* todo, array, events_were
    audit_log_event-explanation = mo_json->value_string( iv_prefix && '/explanation' ).
    audit_log_event-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    audit_log_event-hook_id = mo_json->value_string( iv_prefix && '/hook_id' ).
    audit_log_event-limited_availability = mo_json->value_boolean( iv_prefix && '/limited_availability' ).
    audit_log_event-message = mo_json->value_string( iv_prefix && '/message' ).
    audit_log_event-name = mo_json->value_string( iv_prefix && '/name' ).
    audit_log_event-old_user = mo_json->value_string( iv_prefix && '/old_user' ).
    audit_log_event-openssh_public_key = mo_json->value_string( iv_prefix && '/openssh_public_key' ).
    audit_log_event-org = mo_json->value_string( iv_prefix && '/org' ).
    audit_log_event-previous_visibility = mo_json->value_string( iv_prefix && '/previous_visibility' ).
    audit_log_event-read_only = mo_json->value_boolean( iv_prefix && '/read_only' ).
    audit_log_event-repo = mo_json->value_string( iv_prefix && '/repo' ).
    audit_log_event-repository = mo_json->value_string( iv_prefix && '/repository' ).
    audit_log_event-repository_public = mo_json->value_boolean( iv_prefix && '/repository_public' ).
    audit_log_event-target_login = mo_json->value_string( iv_prefix && '/target_login' ).
    audit_log_event-team = mo_json->value_string( iv_prefix && '/team' ).
    audit_log_event-transport_protocol = mo_json->value_string( iv_prefix && '/transport_protocol' ).
    audit_log_event-transport_protocol_name = mo_json->value_string( iv_prefix && '/transport_protocol_name' ).
    audit_log_event-user = mo_json->value_string( iv_prefix && '/user' ).
    audit_log_event-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
  ENDMETHOD.

  METHOD parse_alert_number.
    alert_number = mo_json->value_integer( iv_prefix && '/' ).
  ENDMETHOD.

  METHOD parse_alert_created_at.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_html_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_secret_scanning_alert_st.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_secret_scanning_alert_re.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_nullable_repository.
    nullable_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    nullable_repository-license = parse_nullable_license_simple( iv_prefix && '/license' ).
    nullable_repository-organization = parse_nullable_simple_user( iv_prefix && '/organization' ).
    nullable_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    nullable_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    nullable_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    nullable_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    nullable_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    nullable_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    nullable_repository-owner = parse_simple_user( iv_prefix && '/owner' ).
    nullable_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    nullable_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    nullable_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    nullable_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    nullable_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    nullable_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    nullable_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    nullable_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    nullable_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    nullable_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    nullable_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    nullable_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    nullable_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    nullable_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    nullable_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    nullable_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    nullable_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    nullable_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    nullable_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    nullable_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    nullable_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    nullable_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    nullable_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    nullable_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    nullable_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    nullable_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    nullable_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    nullable_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    nullable_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    nullable_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    nullable_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    nullable_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    nullable_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    nullable_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    nullable_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    nullable_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    nullable_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    nullable_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    nullable_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    nullable_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    nullable_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    nullable_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    nullable_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    nullable_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    nullable_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    nullable_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    nullable_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    nullable_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    nullable_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    nullable_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    nullable_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    nullable_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    nullable_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    nullable_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    nullable_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    nullable_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    nullable_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    nullable_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    nullable_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    nullable_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    nullable_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    nullable_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    nullable_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    nullable_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    nullable_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    nullable_repository-template_repository-id = mo_json->value_string( iv_prefix && '/template_repository/id' ).
    nullable_repository-template_repository-node_id = mo_json->value_string( iv_prefix && '/template_repository/node_id' ).
    nullable_repository-template_repository-name = mo_json->value_string( iv_prefix && '/template_repository/name' ).
    nullable_repository-template_repository-full_name = mo_json->value_string( iv_prefix && '/template_repository/full_name' ).
    nullable_repository-template_repository-owner-login = mo_json->value_string( iv_prefix && '/template_repository/owner/login' ).
    nullable_repository-template_repository-owner-id = mo_json->value_string( iv_prefix && '/template_repository/owner/id' ).
    nullable_repository-template_repository-owner-node_id = mo_json->value_string( iv_prefix && '/template_repository/owner/node_id' ).
    nullable_repository-template_repository-owner-avatar_url = mo_json->value_string( iv_prefix && '/template_repository/owner/avatar_url' ).
    nullable_repository-template_repository-owner-gravatar_id = mo_json->value_string( iv_prefix && '/template_repository/owner/gravatar_id' ).
    nullable_repository-template_repository-owner-url = mo_json->value_string( iv_prefix && '/template_repository/owner/url' ).
    nullable_repository-template_repository-owner-html_url = mo_json->value_string( iv_prefix && '/template_repository/owner/html_url' ).
    nullable_repository-template_repository-owner-followers_url = mo_json->value_string( iv_prefix && '/template_repository/owner/followers_url' ).
    nullable_repository-template_repository-owner-following_url = mo_json->value_string( iv_prefix && '/template_repository/owner/following_url' ).
    nullable_repository-template_repository-owner-gists_url = mo_json->value_string( iv_prefix && '/template_repository/owner/gists_url' ).
    nullable_repository-template_repository-owner-starred_url = mo_json->value_string( iv_prefix && '/template_repository/owner/starred_url' ).
    nullable_repository-template_repository-owner-subscriptions_url = mo_json->value_string( iv_prefix && '/template_repository/owner/subscriptions_url' ).
    nullable_repository-template_repository-owner-organizations_url = mo_json->value_string( iv_prefix && '/template_repository/owner/organizations_url' ).
    nullable_repository-template_repository-owner-repos_url = mo_json->value_string( iv_prefix && '/template_repository/owner/repos_url' ).
    nullable_repository-template_repository-owner-events_url = mo_json->value_string( iv_prefix && '/template_repository/owner/events_url' ).
    nullable_repository-template_repository-owner-received_events_url = mo_json->value_string( iv_prefix && '/template_repository/owner/received_events_url' ).
    nullable_repository-template_repository-owner-type = mo_json->value_string( iv_prefix && '/template_repository/owner/type' ).
    nullable_repository-template_repository-owner-site_admin = mo_json->value_boolean( iv_prefix && '/template_repository/owner/site_admin' ).
    nullable_repository-template_repository-private = mo_json->value_boolean( iv_prefix && '/template_repository/private' ).
    nullable_repository-template_repository-html_url = mo_json->value_string( iv_prefix && '/template_repository/html_url' ).
    nullable_repository-template_repository-description = mo_json->value_string( iv_prefix && '/template_repository/description' ).
    nullable_repository-template_repository-fork = mo_json->value_boolean( iv_prefix && '/template_repository/fork' ).
    nullable_repository-template_repository-url = mo_json->value_string( iv_prefix && '/template_repository/url' ).
    nullable_repository-template_repository-archive_url = mo_json->value_string( iv_prefix && '/template_repository/archive_url' ).
    nullable_repository-template_repository-assignees_url = mo_json->value_string( iv_prefix && '/template_repository/assignees_url' ).
    nullable_repository-template_repository-blobs_url = mo_json->value_string( iv_prefix && '/template_repository/blobs_url' ).
    nullable_repository-template_repository-branches_url = mo_json->value_string( iv_prefix && '/template_repository/branches_url' ).
    nullable_repository-template_repository-collaborators_url = mo_json->value_string( iv_prefix && '/template_repository/collaborators_url' ).
    nullable_repository-template_repository-comments_url = mo_json->value_string( iv_prefix && '/template_repository/comments_url' ).
    nullable_repository-template_repository-commits_url = mo_json->value_string( iv_prefix && '/template_repository/commits_url' ).
    nullable_repository-template_repository-compare_url = mo_json->value_string( iv_prefix && '/template_repository/compare_url' ).
    nullable_repository-template_repository-contents_url = mo_json->value_string( iv_prefix && '/template_repository/contents_url' ).
    nullable_repository-template_repository-contributors_url = mo_json->value_string( iv_prefix && '/template_repository/contributors_url' ).
    nullable_repository-template_repository-deployments_url = mo_json->value_string( iv_prefix && '/template_repository/deployments_url' ).
    nullable_repository-template_repository-downloads_url = mo_json->value_string( iv_prefix && '/template_repository/downloads_url' ).
    nullable_repository-template_repository-events_url = mo_json->value_string( iv_prefix && '/template_repository/events_url' ).
    nullable_repository-template_repository-forks_url = mo_json->value_string( iv_prefix && '/template_repository/forks_url' ).
    nullable_repository-template_repository-git_commits_url = mo_json->value_string( iv_prefix && '/template_repository/git_commits_url' ).
    nullable_repository-template_repository-git_refs_url = mo_json->value_string( iv_prefix && '/template_repository/git_refs_url' ).
    nullable_repository-template_repository-git_tags_url = mo_json->value_string( iv_prefix && '/template_repository/git_tags_url' ).
    nullable_repository-template_repository-git_url = mo_json->value_string( iv_prefix && '/template_repository/git_url' ).
    nullable_repository-template_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/template_repository/issue_comment_url' ).
    nullable_repository-template_repository-issue_events_url = mo_json->value_string( iv_prefix && '/template_repository/issue_events_url' ).
    nullable_repository-template_repository-issues_url = mo_json->value_string( iv_prefix && '/template_repository/issues_url' ).
    nullable_repository-template_repository-keys_url = mo_json->value_string( iv_prefix && '/template_repository/keys_url' ).
    nullable_repository-template_repository-labels_url = mo_json->value_string( iv_prefix && '/template_repository/labels_url' ).
    nullable_repository-template_repository-languages_url = mo_json->value_string( iv_prefix && '/template_repository/languages_url' ).
    nullable_repository-template_repository-merges_url = mo_json->value_string( iv_prefix && '/template_repository/merges_url' ).
    nullable_repository-template_repository-milestones_url = mo_json->value_string( iv_prefix && '/template_repository/milestones_url' ).
    nullable_repository-template_repository-notifications_url = mo_json->value_string( iv_prefix && '/template_repository/notifications_url' ).
    nullable_repository-template_repository-pulls_url = mo_json->value_string( iv_prefix && '/template_repository/pulls_url' ).
    nullable_repository-template_repository-releases_url = mo_json->value_string( iv_prefix && '/template_repository/releases_url' ).
    nullable_repository-template_repository-ssh_url = mo_json->value_string( iv_prefix && '/template_repository/ssh_url' ).
    nullable_repository-template_repository-stargazers_url = mo_json->value_string( iv_prefix && '/template_repository/stargazers_url' ).
    nullable_repository-template_repository-statuses_url = mo_json->value_string( iv_prefix && '/template_repository/statuses_url' ).
    nullable_repository-template_repository-subscribers_url = mo_json->value_string( iv_prefix && '/template_repository/subscribers_url' ).
    nullable_repository-template_repository-subscription_url = mo_json->value_string( iv_prefix && '/template_repository/subscription_url' ).
    nullable_repository-template_repository-tags_url = mo_json->value_string( iv_prefix && '/template_repository/tags_url' ).
    nullable_repository-template_repository-teams_url = mo_json->value_string( iv_prefix && '/template_repository/teams_url' ).
    nullable_repository-template_repository-trees_url = mo_json->value_string( iv_prefix && '/template_repository/trees_url' ).
    nullable_repository-template_repository-clone_url = mo_json->value_string( iv_prefix && '/template_repository/clone_url' ).
    nullable_repository-template_repository-mirror_url = mo_json->value_string( iv_prefix && '/template_repository/mirror_url' ).
    nullable_repository-template_repository-hooks_url = mo_json->value_string( iv_prefix && '/template_repository/hooks_url' ).
    nullable_repository-template_repository-svn_url = mo_json->value_string( iv_prefix && '/template_repository/svn_url' ).
    nullable_repository-template_repository-homepage = mo_json->value_string( iv_prefix && '/template_repository/homepage' ).
    nullable_repository-template_repository-language = mo_json->value_string( iv_prefix && '/template_repository/language' ).
    nullable_repository-template_repository-forks_count = mo_json->value_string( iv_prefix && '/template_repository/forks_count' ).
    nullable_repository-template_repository-stargazers_count = mo_json->value_string( iv_prefix && '/template_repository/stargazers_count' ).
    nullable_repository-template_repository-watchers_count = mo_json->value_string( iv_prefix && '/template_repository/watchers_count' ).
    nullable_repository-template_repository-size = mo_json->value_string( iv_prefix && '/template_repository/size' ).
    nullable_repository-template_repository-default_branch = mo_json->value_string( iv_prefix && '/template_repository/default_branch' ).
    nullable_repository-template_repository-open_issues_count = mo_json->value_string( iv_prefix && '/template_repository/open_issues_count' ).
    nullable_repository-template_repository-is_template = mo_json->value_boolean( iv_prefix && '/template_repository/is_template' ).
* todo, array, topics
    nullable_repository-template_repository-has_issues = mo_json->value_boolean( iv_prefix && '/template_repository/has_issues' ).
    nullable_repository-template_repository-has_projects = mo_json->value_boolean( iv_prefix && '/template_repository/has_projects' ).
    nullable_repository-template_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/template_repository/has_wiki' ).
    nullable_repository-template_repository-has_pages = mo_json->value_boolean( iv_prefix && '/template_repository/has_pages' ).
    nullable_repository-template_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/template_repository/has_downloads' ).
    nullable_repository-template_repository-archived = mo_json->value_boolean( iv_prefix && '/template_repository/archived' ).
    nullable_repository-template_repository-disabled = mo_json->value_boolean( iv_prefix && '/template_repository/disabled' ).
    nullable_repository-template_repository-visibility = mo_json->value_string( iv_prefix && '/template_repository/visibility' ).
    nullable_repository-template_repository-pushed_at = mo_json->value_string( iv_prefix && '/template_repository/pushed_at' ).
    nullable_repository-template_repository-created_at = mo_json->value_string( iv_prefix && '/template_repository/created_at' ).
    nullable_repository-template_repository-updated_at = mo_json->value_string( iv_prefix && '/template_repository/updated_at' ).
    nullable_repository-template_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/admin' ).
    nullable_repository-template_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/maintain' ).
    nullable_repository-template_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/push' ).
    nullable_repository-template_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/triage' ).
    nullable_repository-template_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/template_repository/permissions/pull' ).
    nullable_repository-template_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_rebase_merge' ).
    nullable_repository-template_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/template_repository/temp_clone_token' ).
    nullable_repository-template_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_squash_merge' ).
    nullable_repository-template_repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/template_repository/allow_auto_merge' ).
    nullable_repository-template_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/template_repository/delete_branch_on_merge' ).
    nullable_repository-template_repository-allow_update_branch = mo_json->value_boolean( iv_prefix && '/template_repository/allow_update_branch' ).
    nullable_repository-template_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/template_repository/allow_merge_commit' ).
    nullable_repository-template_repository-subscribers_count = mo_json->value_string( iv_prefix && '/template_repository/subscribers_count' ).
    nullable_repository-template_repository-network_count = mo_json->value_string( iv_prefix && '/template_repository/network_count' ).
    nullable_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    nullable_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    nullable_repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/allow_auto_merge' ).
    nullable_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    nullable_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    nullable_repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
    nullable_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    nullable_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    nullable_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    nullable_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    nullable_repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    nullable_repository-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
  ENDMETHOD.

  METHOD parse_minimal_repository.
    minimal_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    minimal_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    minimal_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    minimal_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    minimal_repository-owner = parse_simple_user( iv_prefix && '/owner' ).
    minimal_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    minimal_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    minimal_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    minimal_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    minimal_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    minimal_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    minimal_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    minimal_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    minimal_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    minimal_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    minimal_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    minimal_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    minimal_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    minimal_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    minimal_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    minimal_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    minimal_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    minimal_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    minimal_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    minimal_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    minimal_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    minimal_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    minimal_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    minimal_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    minimal_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    minimal_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    minimal_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    minimal_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    minimal_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    minimal_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    minimal_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    minimal_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    minimal_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    minimal_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    minimal_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    minimal_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    minimal_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    minimal_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    minimal_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    minimal_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    minimal_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    minimal_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    minimal_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    minimal_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    minimal_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    minimal_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    minimal_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    minimal_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    minimal_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    minimal_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    minimal_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    minimal_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    minimal_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    minimal_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    minimal_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    minimal_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    minimal_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    minimal_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    minimal_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    minimal_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    minimal_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    minimal_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    minimal_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    minimal_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    minimal_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    minimal_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    minimal_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    minimal_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    minimal_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    minimal_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    minimal_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    minimal_repository-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
    minimal_repository-template_repository = parse_nullable_repository( iv_prefix && '/template_repository' ).
    minimal_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    minimal_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    minimal_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    minimal_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    minimal_repository-code_of_conduct = parse_code_of_conduct( iv_prefix && '/code_of_conduct' ).
    minimal_repository-license-key = mo_json->value_string( iv_prefix && '/license/key' ).
    minimal_repository-license-name = mo_json->value_string( iv_prefix && '/license/name' ).
    minimal_repository-license-spdx_id = mo_json->value_string( iv_prefix && '/license/spdx_id' ).
    minimal_repository-license-url = mo_json->value_string( iv_prefix && '/license/url' ).
    minimal_repository-license-node_id = mo_json->value_string( iv_prefix && '/license/node_id' ).
    minimal_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    minimal_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    minimal_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    minimal_repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
  ENDMETHOD.

  METHOD parse_organization_secret_scan.
    organization_secret_scanning_a-number = parse_alert_number( iv_prefix && '/number' ).
    organization_secret_scanning_a-created_at = parse_alert_created_at( iv_prefix && '/created_at' ).
    organization_secret_scanning_a-url = parse_alert_url( iv_prefix && '/url' ).
    organization_secret_scanning_a-html_url = parse_alert_html_url( iv_prefix && '/html_url' ).
    organization_secret_scanning_a-locations_url = mo_json->value_string( iv_prefix && '/locations_url' ).
    organization_secret_scanning_a-state = parse_secret_scanning_alert_st( iv_prefix && '/state' ).
    organization_secret_scanning_a-resolution = parse_secret_scanning_alert_re( iv_prefix && '/resolution' ).
    organization_secret_scanning_a-resolved_at = mo_json->value_string( iv_prefix && '/resolved_at' ).
    organization_secret_scanning_a-resolved_by = parse_nullable_simple_user( iv_prefix && '/resolved_by' ).
    organization_secret_scanning_a-secret_type = mo_json->value_string( iv_prefix && '/secret_type' ).
    organization_secret_scanning_a-secret = mo_json->value_string( iv_prefix && '/secret' ).
    organization_secret_scanning_a-repository = parse_minimal_repository( iv_prefix && '/repository' ).
  ENDMETHOD.

  METHOD parse_actions_billing_usage.
    actions_billing_usage-total_minutes_used = mo_json->value_string( iv_prefix && '/total_minutes_used' ).
    actions_billing_usage-total_paid_minutes_used = mo_json->value_string( iv_prefix && '/total_paid_minutes_used' ).
    actions_billing_usage-included_minutes = mo_json->value_string( iv_prefix && '/included_minutes' ).
    actions_billing_usage-minutes_used_breakdown-ubuntu = mo_json->value_string( iv_prefix && '/minutes_used_breakdown/UBUNTU' ).
    actions_billing_usage-minutes_used_breakdown-macos = mo_json->value_string( iv_prefix && '/minutes_used_breakdown/MACOS' ).
    actions_billing_usage-minutes_used_breakdown-windows = mo_json->value_string( iv_prefix && '/minutes_used_breakdown/WINDOWS' ).
  ENDMETHOD.

  METHOD parse_advanced_security_active.
    advanced_security_active_commi-user_login = mo_json->value_string( iv_prefix && '/user_login' ).
    advanced_security_active_commi-last_pushed_date = mo_json->value_string( iv_prefix && '/last_pushed_date' ).
  ENDMETHOD.

  METHOD parse_advanced_security_acti01.
    advanced_security_active_com01-name = mo_json->value_string( iv_prefix && '/name' ).
    advanced_security_active_com01-advanced_security_committers = mo_json->value_string( iv_prefix && '/advanced_security_committers' ).
* todo, array, advanced_security_committers_b
  ENDMETHOD.

  METHOD parse_advanced_security_acti02.
    advanced_security_active_com02-total_advanced_security_commit = mo_json->value_string( iv_prefix && '/total_advanced_security_committers' ).
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_packages_billing_usage.
    packages_billing_usage-total_gigabytes_bandwidth_used = mo_json->value_string( iv_prefix && '/total_gigabytes_bandwidth_used' ).
    packages_billing_usage-total_paid_gigabytes_bandwidth = mo_json->value_string( iv_prefix && '/total_paid_gigabytes_bandwidth_used' ).
    packages_billing_usage-included_gigabytes_bandwidth = mo_json->value_string( iv_prefix && '/included_gigabytes_bandwidth' ).
  ENDMETHOD.

  METHOD parse_combined_billing_usage.
    combined_billing_usage-days_left_in_billing_cycle = mo_json->value_string( iv_prefix && '/days_left_in_billing_cycle' ).
    combined_billing_usage-estimated_paid_storage_for_mon = mo_json->value_string( iv_prefix && '/estimated_paid_storage_for_month' ).
    combined_billing_usage-estimated_storage_for_month = mo_json->value_string( iv_prefix && '/estimated_storage_for_month' ).
  ENDMETHOD.

  METHOD parse_actor.
    actor-id = mo_json->value_string( iv_prefix && '/id' ).
    actor-login = mo_json->value_string( iv_prefix && '/login' ).
    actor-display_login = mo_json->value_string( iv_prefix && '/display_login' ).
    actor-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    actor-url = mo_json->value_string( iv_prefix && '/url' ).
    actor-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
  ENDMETHOD.

  METHOD parse_nullable_milestone.
    nullable_milestone-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_milestone-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_milestone-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    nullable_milestone-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_milestone-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_milestone-number = mo_json->value_string( iv_prefix && '/number' ).
    nullable_milestone-state = mo_json->value_string( iv_prefix && '/state' ).
    nullable_milestone-title = mo_json->value_string( iv_prefix && '/title' ).
    nullable_milestone-description = mo_json->value_string( iv_prefix && '/description' ).
    nullable_milestone-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    nullable_milestone-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    nullable_milestone-closed_issues = mo_json->value_string( iv_prefix && '/closed_issues' ).
    nullable_milestone-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    nullable_milestone-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    nullable_milestone-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    nullable_milestone-due_on = mo_json->value_string( iv_prefix && '/due_on' ).
  ENDMETHOD.

  METHOD parse_nullable_integration.
    nullable_integration-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_integration-slug = mo_json->value_string( iv_prefix && '/slug' ).
    nullable_integration-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_integration-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    nullable_integration-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_integration-description = mo_json->value_string( iv_prefix && '/description' ).
    nullable_integration-external_url = mo_json->value_string( iv_prefix && '/external_url' ).
    nullable_integration-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_integration-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    nullable_integration-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    nullable_integration-permissions-issues = mo_json->value_string( iv_prefix && '/permissions/issues' ).
    nullable_integration-permissions-checks = mo_json->value_string( iv_prefix && '/permissions/checks' ).
    nullable_integration-permissions-metadata = mo_json->value_string( iv_prefix && '/permissions/metadata' ).
    nullable_integration-permissions-contents = mo_json->value_string( iv_prefix && '/permissions/contents' ).
    nullable_integration-permissions-deployments = mo_json->value_string( iv_prefix && '/permissions/deployments' ).
* todo, array, events
    nullable_integration-installations_count = mo_json->value_string( iv_prefix && '/installations_count' ).
    nullable_integration-client_id = mo_json->value_string( iv_prefix && '/client_id' ).
    nullable_integration-client_secret = mo_json->value_string( iv_prefix && '/client_secret' ).
    nullable_integration-webhook_secret = mo_json->value_string( iv_prefix && '/webhook_secret' ).
    nullable_integration-pem = mo_json->value_string( iv_prefix && '/pem' ).
  ENDMETHOD.

  METHOD parse_author_association.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_reaction_rollup.
    reaction_rollup-url = mo_json->value_string( iv_prefix && '/url' ).
    reaction_rollup-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    reaction_rollup-n1 = mo_json->value_string( iv_prefix && '/+1' ).
    reaction_rollup-_1 = mo_json->value_string( iv_prefix && '/-1' ).
    reaction_rollup-laugh = mo_json->value_string( iv_prefix && '/laugh' ).
    reaction_rollup-confused = mo_json->value_string( iv_prefix && '/confused' ).
    reaction_rollup-heart = mo_json->value_string( iv_prefix && '/heart' ).
    reaction_rollup-hooray = mo_json->value_string( iv_prefix && '/hooray' ).
    reaction_rollup-eyes = mo_json->value_string( iv_prefix && '/eyes' ).
    reaction_rollup-rocket = mo_json->value_string( iv_prefix && '/rocket' ).
  ENDMETHOD.

  METHOD parse_issue.
    issue-id = mo_json->value_string( iv_prefix && '/id' ).
    issue-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue-url = mo_json->value_string( iv_prefix && '/url' ).
    issue-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    issue-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    issue-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    issue-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    issue-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue-number = mo_json->value_string( iv_prefix && '/number' ).
    issue-state = mo_json->value_string( iv_prefix && '/state' ).
    issue-title = mo_json->value_string( iv_prefix && '/title' ).
    issue-body = mo_json->value_string( iv_prefix && '/body' ).
    issue-user = parse_nullable_simple_user( iv_prefix && '/user' ).
* todo, array, labels
    issue-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
* todo, array, assignees
    issue-milestone = parse_nullable_milestone( iv_prefix && '/milestone' ).
    issue-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    issue-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    issue-comments = mo_json->value_string( iv_prefix && '/comments' ).
    issue-pull_request-merged_at = mo_json->value_string( iv_prefix && '/pull_request/merged_at' ).
    issue-pull_request-diff_url = mo_json->value_string( iv_prefix && '/pull_request/diff_url' ).
    issue-pull_request-html_url = mo_json->value_string( iv_prefix && '/pull_request/html_url' ).
    issue-pull_request-patch_url = mo_json->value_string( iv_prefix && '/pull_request/patch_url' ).
    issue-pull_request-url = mo_json->value_string( iv_prefix && '/pull_request/url' ).
    issue-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    issue-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    issue-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    issue-closed_by = parse_nullable_simple_user( iv_prefix && '/closed_by' ).
    issue-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
    issue-repository = parse_repository( iv_prefix && '/repository' ).
    issue-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    issue-author_association = parse_author_association( iv_prefix && '/author_association' ).
    issue-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_issue_comment.
    issue_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    issue_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue_comment-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    issue_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    issue_comment-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    issue_comment-author_association = parse_author_association( iv_prefix && '/author_association' ).
    issue_comment-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    issue_comment-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_event.
    event-id = mo_json->value_string( iv_prefix && '/id' ).
    event-type = mo_json->value_string( iv_prefix && '/type' ).
    event-actor = parse_actor( iv_prefix && '/actor' ).
    event-repo-id = mo_json->value_string( iv_prefix && '/repo/id' ).
    event-repo-name = mo_json->value_string( iv_prefix && '/repo/name' ).
    event-repo-url = mo_json->value_string( iv_prefix && '/repo/url' ).
    event-org = parse_actor( iv_prefix && '/org' ).
    event-payload-action = mo_json->value_string( iv_prefix && '/payload/action' ).
    event-payload-issue = parse_issue( iv_prefix && '/payload/issue' ).
    event-payload-comment = parse_issue_comment( iv_prefix && '/payload/comment' ).
* todo, array, pages
    event-public = mo_json->value_boolean( iv_prefix && '/public' ).
    event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
  ENDMETHOD.

  METHOD parse_link_with_type.
    link_with_type-href = mo_json->value_string( iv_prefix && '/href' ).
    link_with_type-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_feed.
    feed-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
    feed-user_url = mo_json->value_string( iv_prefix && '/user_url' ).
    feed-current_user_public_url = mo_json->value_string( iv_prefix && '/current_user_public_url' ).
    feed-current_user_url = mo_json->value_string( iv_prefix && '/current_user_url' ).
    feed-current_user_actor_url = mo_json->value_string( iv_prefix && '/current_user_actor_url' ).
    feed-current_user_organization_url = mo_json->value_string( iv_prefix && '/current_user_organization_url' ).
* todo, array, current_user_organization_urls
    feed-security_advisories_url = mo_json->value_string( iv_prefix && '/security_advisories_url' ).
    feed-_links-timeline = parse_link_with_type( iv_prefix && '/_links/timeline' ).
    feed-_links-user = parse_link_with_type( iv_prefix && '/_links/user' ).
    feed-_links-security_advisories = parse_link_with_type( iv_prefix && '/_links/security_advisories' ).
    feed-_links-current_user = parse_link_with_type( iv_prefix && '/_links/current_user' ).
    feed-_links-current_user_public = parse_link_with_type( iv_prefix && '/_links/current_user_public' ).
    feed-_links-current_user_actor = parse_link_with_type( iv_prefix && '/_links/current_user_actor' ).
    feed-_links-current_user_organization = parse_link_with_type( iv_prefix && '/_links/current_user_organization' ).
* todo, array, current_user_organizations
  ENDMETHOD.

  METHOD parse_base_gist.
    base_gist-url = mo_json->value_string( iv_prefix && '/url' ).
    base_gist-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    base_gist-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    base_gist-id = mo_json->value_string( iv_prefix && '/id' ).
    base_gist-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    base_gist-git_pull_url = mo_json->value_string( iv_prefix && '/git_pull_url' ).
    base_gist-git_push_url = mo_json->value_string( iv_prefix && '/git_push_url' ).
    base_gist-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    base_gist-public = mo_json->value_boolean( iv_prefix && '/public' ).
    base_gist-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    base_gist-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    base_gist-description = mo_json->value_string( iv_prefix && '/description' ).
    base_gist-comments = mo_json->value_string( iv_prefix && '/comments' ).
    base_gist-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    base_gist-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    base_gist-owner = parse_simple_user( iv_prefix && '/owner' ).
    base_gist-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
* todo, array, forks
* todo, array, history
  ENDMETHOD.

  METHOD parse_public_user.
    public_user-login = mo_json->value_string( iv_prefix && '/login' ).
    public_user-id = mo_json->value_string( iv_prefix && '/id' ).
    public_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    public_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    public_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    public_user-url = mo_json->value_string( iv_prefix && '/url' ).
    public_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    public_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    public_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    public_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    public_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    public_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    public_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    public_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    public_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    public_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    public_user-type = mo_json->value_string( iv_prefix && '/type' ).
    public_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    public_user-name = mo_json->value_string( iv_prefix && '/name' ).
    public_user-company = mo_json->value_string( iv_prefix && '/company' ).
    public_user-blog = mo_json->value_string( iv_prefix && '/blog' ).
    public_user-location = mo_json->value_string( iv_prefix && '/location' ).
    public_user-email = mo_json->value_string( iv_prefix && '/email' ).
    public_user-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
    public_user-bio = mo_json->value_string( iv_prefix && '/bio' ).
    public_user-twitter_username = mo_json->value_string( iv_prefix && '/twitter_username' ).
    public_user-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    public_user-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    public_user-followers = mo_json->value_string( iv_prefix && '/followers' ).
    public_user-following = mo_json->value_string( iv_prefix && '/following' ).
    public_user-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    public_user-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    public_user-plan-collaborators = mo_json->value_string( iv_prefix && '/plan/collaborators' ).
    public_user-plan-name = mo_json->value_string( iv_prefix && '/plan/name' ).
    public_user-plan-space = mo_json->value_string( iv_prefix && '/plan/space' ).
    public_user-plan-private_repos = mo_json->value_string( iv_prefix && '/plan/private_repos' ).
    public_user-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    public_user-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    public_user-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    public_user-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    public_user-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    public_user-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
  ENDMETHOD.

  METHOD parse_gist_history.
    gist_history-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    gist_history-version = mo_json->value_string( iv_prefix && '/version' ).
    gist_history-committed_at = mo_json->value_string( iv_prefix && '/committed_at' ).
    gist_history-change_status-total = mo_json->value_string( iv_prefix && '/change_status/total' ).
    gist_history-change_status-additions = mo_json->value_string( iv_prefix && '/change_status/additions' ).
    gist_history-change_status-deletions = mo_json->value_string( iv_prefix && '/change_status/deletions' ).
    gist_history-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_gist_simple.
* todo, array, forks
* todo, array, history
    gist_simple-fork_of-url = mo_json->value_string( iv_prefix && '/fork_of/url' ).
    gist_simple-fork_of-forks_url = mo_json->value_string( iv_prefix && '/fork_of/forks_url' ).
    gist_simple-fork_of-commits_url = mo_json->value_string( iv_prefix && '/fork_of/commits_url' ).
    gist_simple-fork_of-id = mo_json->value_string( iv_prefix && '/fork_of/id' ).
    gist_simple-fork_of-node_id = mo_json->value_string( iv_prefix && '/fork_of/node_id' ).
    gist_simple-fork_of-git_pull_url = mo_json->value_string( iv_prefix && '/fork_of/git_pull_url' ).
    gist_simple-fork_of-git_push_url = mo_json->value_string( iv_prefix && '/fork_of/git_push_url' ).
    gist_simple-fork_of-html_url = mo_json->value_string( iv_prefix && '/fork_of/html_url' ).
    gist_simple-fork_of-public = mo_json->value_boolean( iv_prefix && '/fork_of/public' ).
    gist_simple-fork_of-created_at = mo_json->value_string( iv_prefix && '/fork_of/created_at' ).
    gist_simple-fork_of-updated_at = mo_json->value_string( iv_prefix && '/fork_of/updated_at' ).
    gist_simple-fork_of-description = mo_json->value_string( iv_prefix && '/fork_of/description' ).
    gist_simple-fork_of-comments = mo_json->value_string( iv_prefix && '/fork_of/comments' ).
    gist_simple-fork_of-user = parse_nullable_simple_user( iv_prefix && '/fork_of/user' ).
    gist_simple-fork_of-comments_url = mo_json->value_string( iv_prefix && '/fork_of/comments_url' ).
    gist_simple-fork_of-owner = parse_nullable_simple_user( iv_prefix && '/fork_of/owner' ).
    gist_simple-fork_of-truncated = mo_json->value_boolean( iv_prefix && '/fork_of/truncated' ).
* todo, array, forks
* todo, array, history
    gist_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_simple-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    gist_simple-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    gist_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    gist_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    gist_simple-git_pull_url = mo_json->value_string( iv_prefix && '/git_pull_url' ).
    gist_simple-git_push_url = mo_json->value_string( iv_prefix && '/git_push_url' ).
    gist_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    gist_simple-public = mo_json->value_boolean( iv_prefix && '/public' ).
    gist_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gist_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    gist_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    gist_simple-comments = mo_json->value_string( iv_prefix && '/comments' ).
    gist_simple-user = mo_json->value_string( iv_prefix && '/user' ).
    gist_simple-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    gist_simple-owner = parse_simple_user( iv_prefix && '/owner' ).
    gist_simple-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
  ENDMETHOD.

  METHOD parse_gist_comment.
    gist_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    gist_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    gist_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    gist_comment-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    gist_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gist_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    gist_comment-author_association = parse_author_association( iv_prefix && '/author_association' ).
  ENDMETHOD.

  METHOD parse_gist_commit.
    gist_commit-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_commit-version = mo_json->value_string( iv_prefix && '/version' ).
    gist_commit-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    gist_commit-change_status-total = mo_json->value_string( iv_prefix && '/change_status/total' ).
    gist_commit-change_status-additions = mo_json->value_string( iv_prefix && '/change_status/additions' ).
    gist_commit-change_status-deletions = mo_json->value_string( iv_prefix && '/change_status/deletions' ).
    gist_commit-committed_at = mo_json->value_string( iv_prefix && '/committed_at' ).
  ENDMETHOD.

  METHOD parse_gitignore_template.
    gitignore_template-name = mo_json->value_string( iv_prefix && '/name' ).
    gitignore_template-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_license_simple.
    license_simple-key = mo_json->value_string( iv_prefix && '/key' ).
    license_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    license_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    license_simple-spdx_id = mo_json->value_string( iv_prefix && '/spdx_id' ).
    license_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    license_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_license.
    license-key = mo_json->value_string( iv_prefix && '/key' ).
    license-name = mo_json->value_string( iv_prefix && '/name' ).
    license-spdx_id = mo_json->value_string( iv_prefix && '/spdx_id' ).
    license-url = mo_json->value_string( iv_prefix && '/url' ).
    license-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    license-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    license-description = mo_json->value_string( iv_prefix && '/description' ).
    license-implementation = mo_json->value_string( iv_prefix && '/implementation' ).
* todo, array, permissions
* todo, array, conditions
* todo, array, limitations
    license-body = mo_json->value_string( iv_prefix && '/body' ).
    license-featured = mo_json->value_boolean( iv_prefix && '/featured' ).
  ENDMETHOD.

  METHOD parse_marketplace_listing_plan.
    marketplace_listing_plan-url = mo_json->value_string( iv_prefix && '/url' ).
    marketplace_listing_plan-accounts_url = mo_json->value_string( iv_prefix && '/accounts_url' ).
    marketplace_listing_plan-id = mo_json->value_string( iv_prefix && '/id' ).
    marketplace_listing_plan-number = mo_json->value_string( iv_prefix && '/number' ).
    marketplace_listing_plan-name = mo_json->value_string( iv_prefix && '/name' ).
    marketplace_listing_plan-description = mo_json->value_string( iv_prefix && '/description' ).
    marketplace_listing_plan-monthly_price_in_cents = mo_json->value_string( iv_prefix && '/monthly_price_in_cents' ).
    marketplace_listing_plan-yearly_price_in_cents = mo_json->value_string( iv_prefix && '/yearly_price_in_cents' ).
    marketplace_listing_plan-price_model = mo_json->value_string( iv_prefix && '/price_model' ).
    marketplace_listing_plan-has_free_trial = mo_json->value_boolean( iv_prefix && '/has_free_trial' ).
    marketplace_listing_plan-unit_name = mo_json->value_string( iv_prefix && '/unit_name' ).
    marketplace_listing_plan-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, array, bullets
  ENDMETHOD.

  METHOD parse_marketplace_purchase.
    marketplace_purchase-url = mo_json->value_string( iv_prefix && '/url' ).
    marketplace_purchase-type = mo_json->value_string( iv_prefix && '/type' ).
    marketplace_purchase-id = mo_json->value_string( iv_prefix && '/id' ).
    marketplace_purchase-login = mo_json->value_string( iv_prefix && '/login' ).
    marketplace_purchase-organization_billing_email = mo_json->value_string( iv_prefix && '/organization_billing_email' ).
    marketplace_purchase-email = mo_json->value_string( iv_prefix && '/email' ).
    marketplace_purchase-marketplace_pending_change-is_installed = mo_json->value_boolean( iv_prefix && '/marketplace_pending_change/is_installed' ).
    marketplace_purchase-marketplace_pending_change-effective_date = mo_json->value_string( iv_prefix && '/marketplace_pending_change/effective_date' ).
    marketplace_purchase-marketplace_pending_change-unit_count = mo_json->value_string( iv_prefix && '/marketplace_pending_change/unit_count' ).
    marketplace_purchase-marketplace_pending_change-id = mo_json->value_string( iv_prefix && '/marketplace_pending_change/id' ).
    marketplace_purchase-marketplace_pending_change-plan = parse_marketplace_listing_plan( iv_prefix && '/marketplace_pending_change/plan' ).
    marketplace_purchase-marketplace_purchase-billing_cycle = mo_json->value_string( iv_prefix && '/marketplace_purchase/billing_cycle' ).
    marketplace_purchase-marketplace_purchase-next_billing_date = mo_json->value_string( iv_prefix && '/marketplace_purchase/next_billing_date' ).
    marketplace_purchase-marketplace_purchase-is_installed = mo_json->value_boolean( iv_prefix && '/marketplace_purchase/is_installed' ).
    marketplace_purchase-marketplace_purchase-unit_count = mo_json->value_string( iv_prefix && '/marketplace_purchase/unit_count' ).
    marketplace_purchase-marketplace_purchase-on_free_trial = mo_json->value_boolean( iv_prefix && '/marketplace_purchase/on_free_trial' ).
    marketplace_purchase-marketplace_purchase-free_trial_ends_on = mo_json->value_string( iv_prefix && '/marketplace_purchase/free_trial_ends_on' ).
    marketplace_purchase-marketplace_purchase-updated_at = mo_json->value_string( iv_prefix && '/marketplace_purchase/updated_at' ).
    marketplace_purchase-marketplace_purchase-plan = parse_marketplace_listing_plan( iv_prefix && '/marketplace_purchase/plan' ).
  ENDMETHOD.

  METHOD parse_api_overview.
    api_overview-verifiable_password_authentica = mo_json->value_boolean( iv_prefix && '/verifiable_password_authentication' ).
    api_overview-ssh_key_fingerprints-sha256_rsa = mo_json->value_string( iv_prefix && '/ssh_key_fingerprints/SHA256_RSA' ).
    api_overview-ssh_key_fingerprints-sha256_dsa = mo_json->value_string( iv_prefix && '/ssh_key_fingerprints/SHA256_DSA' ).
    api_overview-ssh_key_fingerprints-sha256_ecdsa = mo_json->value_string( iv_prefix && '/ssh_key_fingerprints/SHA256_ECDSA' ).
    api_overview-ssh_key_fingerprints-sha256_ed25519 = mo_json->value_string( iv_prefix && '/ssh_key_fingerprints/SHA256_ED25519' ).
* todo, array, ssh_keys
* todo, array, hooks
* todo, array, web
* todo, array, api
* todo, array, git
* todo, array, packages
* todo, array, pages
* todo, array, importer
* todo, array, actions
* todo, array, dependabot
  ENDMETHOD.

  METHOD parse_thread.
    thread-id = mo_json->value_string( iv_prefix && '/id' ).
    thread-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    thread-subject-title = mo_json->value_string( iv_prefix && '/subject/title' ).
    thread-subject-url = mo_json->value_string( iv_prefix && '/subject/url' ).
    thread-subject-latest_comment_url = mo_json->value_string( iv_prefix && '/subject/latest_comment_url' ).
    thread-subject-type = mo_json->value_string( iv_prefix && '/subject/type' ).
    thread-reason = mo_json->value_string( iv_prefix && '/reason' ).
    thread-unread = mo_json->value_boolean( iv_prefix && '/unread' ).
    thread-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    thread-last_read_at = mo_json->value_string( iv_prefix && '/last_read_at' ).
    thread-url = mo_json->value_string( iv_prefix && '/url' ).
    thread-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
  ENDMETHOD.

  METHOD parse_thread_subscription.
    thread_subscription-subscribed = mo_json->value_boolean( iv_prefix && '/subscribed' ).
    thread_subscription-ignored = mo_json->value_boolean( iv_prefix && '/ignored' ).
    thread_subscription-reason = mo_json->value_string( iv_prefix && '/reason' ).
    thread_subscription-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    thread_subscription-url = mo_json->value_string( iv_prefix && '/url' ).
    thread_subscription-thread_url = mo_json->value_string( iv_prefix && '/thread_url' ).
    thread_subscription-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
  ENDMETHOD.

  METHOD parse_organization_custom_repo.
    organization_custom_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_custom_repository-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_external_groups.
* todo, array, groups
  ENDMETHOD.

  METHOD parse_organization_full.
    organization_full-login = mo_json->value_string( iv_prefix && '/login' ).
    organization_full-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_full-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    organization_full-url = mo_json->value_string( iv_prefix && '/url' ).
    organization_full-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    organization_full-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    organization_full-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    organization_full-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    organization_full-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    organization_full-public_members_url = mo_json->value_string( iv_prefix && '/public_members_url' ).
    organization_full-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    organization_full-description = mo_json->value_string( iv_prefix && '/description' ).
    organization_full-name = mo_json->value_string( iv_prefix && '/name' ).
    organization_full-company = mo_json->value_string( iv_prefix && '/company' ).
    organization_full-blog = mo_json->value_string( iv_prefix && '/blog' ).
    organization_full-location = mo_json->value_string( iv_prefix && '/location' ).
    organization_full-email = mo_json->value_string( iv_prefix && '/email' ).
    organization_full-twitter_username = mo_json->value_string( iv_prefix && '/twitter_username' ).
    organization_full-is_verified = mo_json->value_boolean( iv_prefix && '/is_verified' ).
    organization_full-has_organization_projects = mo_json->value_boolean( iv_prefix && '/has_organization_projects' ).
    organization_full-has_repository_projects = mo_json->value_boolean( iv_prefix && '/has_repository_projects' ).
    organization_full-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    organization_full-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    organization_full-followers = mo_json->value_string( iv_prefix && '/followers' ).
    organization_full-following = mo_json->value_string( iv_prefix && '/following' ).
    organization_full-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    organization_full-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    organization_full-type = mo_json->value_string( iv_prefix && '/type' ).
    organization_full-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    organization_full-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    organization_full-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    organization_full-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    organization_full-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
    organization_full-billing_email = mo_json->value_string( iv_prefix && '/billing_email' ).
    organization_full-plan-name = mo_json->value_string( iv_prefix && '/plan/name' ).
    organization_full-plan-space = mo_json->value_string( iv_prefix && '/plan/space' ).
    organization_full-plan-private_repos = mo_json->value_string( iv_prefix && '/plan/private_repos' ).
    organization_full-plan-filled_seats = mo_json->value_string( iv_prefix && '/plan/filled_seats' ).
    organization_full-plan-seats = mo_json->value_string( iv_prefix && '/plan/seats' ).
    organization_full-default_repository_permission = mo_json->value_string( iv_prefix && '/default_repository_permission' ).
    organization_full-members_can_create_repositorie = mo_json->value_boolean( iv_prefix && '/members_can_create_repositories' ).
    organization_full-two_factor_requirement_enabled = mo_json->value_boolean( iv_prefix && '/two_factor_requirement_enabled' ).
    organization_full-members_allowed_repository_cre = mo_json->value_string( iv_prefix && '/members_allowed_repository_creation_type' ).
    organization_full-members_can_create_public_repo = mo_json->value_boolean( iv_prefix && '/members_can_create_public_repositories' ).
    organization_full-members_can_create_private_rep = mo_json->value_boolean( iv_prefix && '/members_can_create_private_repositories' ).
    organization_full-members_can_create_internal_re = mo_json->value_boolean( iv_prefix && '/members_can_create_internal_repositories' ).
    organization_full-members_can_create_pages = mo_json->value_boolean( iv_prefix && '/members_can_create_pages' ).
    organization_full-members_can_create_public_page = mo_json->value_boolean( iv_prefix && '/members_can_create_public_pages' ).
    organization_full-members_can_create_private_pag = mo_json->value_boolean( iv_prefix && '/members_can_create_private_pages' ).
    organization_full-members_can_fork_private_repos = mo_json->value_boolean( iv_prefix && '/members_can_fork_private_repositories' ).
    organization_full-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_enabled_repositories.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_actions_organization_per.
    actions_organization_permissio-enabled_repositories = parse_enabled_repositories( iv_prefix && '/enabled_repositories' ).
    actions_organization_permissio-selected_repositories_url = mo_json->value_string( iv_prefix && '/selected_repositories_url' ).
    actions_organization_permissio-allowed_actions = parse_allowed_actions( iv_prefix && '/allowed_actions' ).
    actions_organization_permissio-selected_actions_url = parse_selected_actions_url( iv_prefix && '/selected_actions_url' ).
  ENDMETHOD.

  METHOD parse_actions_default_workflow.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_actions_can_approve_pull.
* todo, handle type boolean
  ENDMETHOD.

  METHOD parse_actions_get_default_work.
    actions_get_default_workflow_p-default_workflow_permissions = parse_actions_default_workflow( iv_prefix && '/default_workflow_permissions' ).
    actions_get_default_workflow_p-can_approve_pull_request_revie = parse_actions_can_approve_pull( iv_prefix && '/can_approve_pull_request_reviews' ).
  ENDMETHOD.

  METHOD parse_actions_set_default_work.
    actions_set_default_workflow_p-default_workflow_permissions = parse_actions_default_workflow( iv_prefix && '/default_workflow_permissions' ).
    actions_set_default_workflow_p-can_approve_pull_request_revie = parse_actions_can_approve_pull( iv_prefix && '/can_approve_pull_request_reviews' ).
  ENDMETHOD.

  METHOD parse_runner_groups_org.
* todo, number, id
    runner_groups_org-name = mo_json->value_string( iv_prefix && '/name' ).
    runner_groups_org-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    runner_groups_org-default = mo_json->value_boolean( iv_prefix && '/default' ).
    runner_groups_org-selected_repositories_url = mo_json->value_string( iv_prefix && '/selected_repositories_url' ).
    runner_groups_org-runners_url = mo_json->value_string( iv_prefix && '/runners_url' ).
    runner_groups_org-inherited = mo_json->value_boolean( iv_prefix && '/inherited' ).
    runner_groups_org-inherited_allows_public_reposi = mo_json->value_boolean( iv_prefix && '/inherited_allows_public_repositories' ).
    runner_groups_org-allows_public_repositories = mo_json->value_boolean( iv_prefix && '/allows_public_repositories' ).
  ENDMETHOD.

  METHOD parse_organization_actions_sec.
    organization_actions_secret-name = mo_json->value_string( iv_prefix && '/name' ).
    organization_actions_secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    organization_actions_secret-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    organization_actions_secret-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    organization_actions_secret-selected_repositories_url = mo_json->value_string( iv_prefix && '/selected_repositories_url' ).
  ENDMETHOD.

  METHOD parse_actions_public_key.
    actions_public_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    actions_public_key-key = mo_json->value_string( iv_prefix && '/key' ).
    actions_public_key-id = mo_json->value_string( iv_prefix && '/id' ).
    actions_public_key-url = mo_json->value_string( iv_prefix && '/url' ).
    actions_public_key-title = mo_json->value_string( iv_prefix && '/title' ).
    actions_public_key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
  ENDMETHOD.

  METHOD parse_empty_object.
  ENDMETHOD.

  METHOD parse_code_scanning_alert_stat.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_updated_at.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_instances_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_fixe.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_dism.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_di01.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_rule.
    code_scanning_alert_rule-id = mo_json->value_string( iv_prefix && '/id' ).
    code_scanning_alert_rule-name = mo_json->value_string( iv_prefix && '/name' ).
    code_scanning_alert_rule-severity = mo_json->value_string( iv_prefix && '/severity' ).
    code_scanning_alert_rule-security_severity_level = mo_json->value_string( iv_prefix && '/security_severity_level' ).
    code_scanning_alert_rule-description = mo_json->value_string( iv_prefix && '/description' ).
    code_scanning_alert_rule-full_description = mo_json->value_string( iv_prefix && '/full_description' ).
* todo, array, tags
    code_scanning_alert_rule-help = mo_json->value_string( iv_prefix && '/help' ).
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_t.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis01.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis02.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis03.
    code_scanning_analysis_tool-name = parse_code_scanning_analysis_t( iv_prefix && '/name' ).
    code_scanning_analysis_tool-version = parse_code_scanning_analysis01( iv_prefix && '/version' ).
    code_scanning_analysis_tool-guid = parse_code_scanning_analysis02( iv_prefix && '/guid' ).
  ENDMETHOD.

  METHOD parse_code_scanning_ref.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_a.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_envi.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_c.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_loca.
    code_scanning_alert_location-path = mo_json->value_string( iv_prefix && '/path' ).
    code_scanning_alert_location-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    code_scanning_alert_location-end_line = mo_json->value_string( iv_prefix && '/end_line' ).
    code_scanning_alert_location-start_column = mo_json->value_string( iv_prefix && '/start_column' ).
    code_scanning_alert_location-end_column = mo_json->value_string( iv_prefix && '/end_column' ).
  ENDMETHOD.

  METHOD parse_code_scanning_alert_clas.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_inst.
    code_scanning_alert_instance-ref = parse_code_scanning_ref( iv_prefix && '/ref' ).
    code_scanning_alert_instance-analysis_key = parse_code_scanning_analysis_a( iv_prefix && '/analysis_key' ).
    code_scanning_alert_instance-environment = parse_code_scanning_alert_envi( iv_prefix && '/environment' ).
    code_scanning_alert_instance-category = parse_code_scanning_analysis_c( iv_prefix && '/category' ).
    code_scanning_alert_instance-state = parse_code_scanning_alert_stat( iv_prefix && '/state' ).
    code_scanning_alert_instance-commit_sha = mo_json->value_string( iv_prefix && '/commit_sha' ).
    code_scanning_alert_instance-message-text = mo_json->value_string( iv_prefix && '/message/text' ).
    code_scanning_alert_instance-location = parse_code_scanning_alert_loca( iv_prefix && '/location' ).
    code_scanning_alert_instance-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, array, classifications
  ENDMETHOD.

  METHOD parse_code_scanning_organizati.
    code_scanning_organization_ale-number = parse_alert_number( iv_prefix && '/number' ).
    code_scanning_organization_ale-created_at = parse_alert_created_at( iv_prefix && '/created_at' ).
    code_scanning_organization_ale-updated_at = parse_alert_updated_at( iv_prefix && '/updated_at' ).
    code_scanning_organization_ale-url = parse_alert_url( iv_prefix && '/url' ).
    code_scanning_organization_ale-html_url = parse_alert_html_url( iv_prefix && '/html_url' ).
    code_scanning_organization_ale-instances_url = parse_alert_instances_url( iv_prefix && '/instances_url' ).
    code_scanning_organization_ale-state = parse_code_scanning_alert_stat( iv_prefix && '/state' ).
    code_scanning_organization_ale-fixed_at = parse_code_scanning_alert_fixe( iv_prefix && '/fixed_at' ).
    code_scanning_organization_ale-dismissed_by = parse_nullable_simple_user( iv_prefix && '/dismissed_by' ).
    code_scanning_organization_ale-dismissed_at = parse_code_scanning_alert_dism( iv_prefix && '/dismissed_at' ).
    code_scanning_organization_ale-dismissed_reason = parse_code_scanning_alert_di01( iv_prefix && '/dismissed_reason' ).
    code_scanning_organization_ale-rule = parse_code_scanning_alert_rule( iv_prefix && '/rule' ).
    code_scanning_organization_ale-tool = parse_code_scanning_analysis03( iv_prefix && '/tool' ).
    code_scanning_organization_ale-most_recent_instance = parse_code_scanning_alert_inst( iv_prefix && '/most_recent_instance' ).
    code_scanning_organization_ale-repository = parse_minimal_repository( iv_prefix && '/repository' ).
  ENDMETHOD.

  METHOD parse_credential_authorization.
    credential_authorization-login = mo_json->value_string( iv_prefix && '/login' ).
    credential_authorization-credential_id = mo_json->value_string( iv_prefix && '/credential_id' ).
    credential_authorization-credential_type = mo_json->value_string( iv_prefix && '/credential_type' ).
    credential_authorization-token_last_eight = mo_json->value_string( iv_prefix && '/token_last_eight' ).
    credential_authorization-credential_authorized_at = mo_json->value_string( iv_prefix && '/credential_authorized_at' ).
* todo, array, scopes
    credential_authorization-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    credential_authorization-credential_accessed_at = mo_json->value_string( iv_prefix && '/credential_accessed_at' ).
    credential_authorization-authorized_credential_id = mo_json->value_string( iv_prefix && '/authorized_credential_id' ).
    credential_authorization-authorized_credential_title = mo_json->value_string( iv_prefix && '/authorized_credential_title' ).
    credential_authorization-authorized_credential_note = mo_json->value_string( iv_prefix && '/authorized_credential_note' ).
    credential_authorization-authorized_credential_expires_ = mo_json->value_string( iv_prefix && '/authorized_credential_expires_at' ).
  ENDMETHOD.

  METHOD parse_organization_dependabot_.
    organization_dependabot_secret-name = mo_json->value_string( iv_prefix && '/name' ).
    organization_dependabot_secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    organization_dependabot_secret-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    organization_dependabot_secret-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    organization_dependabot_secret-selected_repositories_url = mo_json->value_string( iv_prefix && '/selected_repositories_url' ).
  ENDMETHOD.

  METHOD parse_dependabot_public_key.
    dependabot_public_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    dependabot_public_key-key = mo_json->value_string( iv_prefix && '/key' ).
  ENDMETHOD.

  METHOD parse_external_group.
    external_group-group_id = mo_json->value_string( iv_prefix && '/group_id' ).
    external_group-group_name = mo_json->value_string( iv_prefix && '/group_name' ).
    external_group-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, array, teams
* todo, array, members
  ENDMETHOD.

  METHOD parse_organization_invitation.
    organization_invitation-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_invitation-login = mo_json->value_string( iv_prefix && '/login' ).
    organization_invitation-email = mo_json->value_string( iv_prefix && '/email' ).
    organization_invitation-role = mo_json->value_string( iv_prefix && '/role' ).
    organization_invitation-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    organization_invitation-failed_at = mo_json->value_string( iv_prefix && '/failed_at' ).
    organization_invitation-failed_reason = mo_json->value_string( iv_prefix && '/failed_reason' ).
    organization_invitation-inviter = parse_simple_user( iv_prefix && '/inviter' ).
    organization_invitation-team_count = mo_json->value_string( iv_prefix && '/team_count' ).
    organization_invitation-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    organization_invitation-invitation_teams_url = mo_json->value_string( iv_prefix && '/invitation_teams_url' ).
  ENDMETHOD.

  METHOD parse_org_hook.
    org_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    org_hook-url = mo_json->value_string( iv_prefix && '/url' ).
    org_hook-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
    org_hook-deliveries_url = mo_json->value_string( iv_prefix && '/deliveries_url' ).
    org_hook-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, events
    org_hook-active = mo_json->value_boolean( iv_prefix && '/active' ).
    org_hook-config-url = mo_json->value_string( iv_prefix && '/config/url' ).
    org_hook-config-insecure_ssl = mo_json->value_string( iv_prefix && '/config/insecure_ssl' ).
    org_hook-config-content_type = mo_json->value_string( iv_prefix && '/config/content_type' ).
    org_hook-config-secret = mo_json->value_string( iv_prefix && '/config/secret' ).
    org_hook-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    org_hook-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    org_hook-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_interaction_group.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_interaction_limit_respon.
    interaction_limit_response-limit = parse_interaction_group( iv_prefix && '/limit' ).
    interaction_limit_response-origin = mo_json->value_string( iv_prefix && '/origin' ).
    interaction_limit_response-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
  ENDMETHOD.

  METHOD parse_interaction_expiry.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_interaction_limit.
    interaction_limit-limit = parse_interaction_group( iv_prefix && '/limit' ).
    interaction_limit-expiry = parse_interaction_expiry( iv_prefix && '/expiry' ).
  ENDMETHOD.

  METHOD parse_nullable_team_simple.
    nullable_team_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_team_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_team_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_team_simple-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    nullable_team_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_team_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    nullable_team_simple-permission = mo_json->value_string( iv_prefix && '/permission' ).
    nullable_team_simple-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    nullable_team_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_team_simple-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    nullable_team_simple-slug = mo_json->value_string( iv_prefix && '/slug' ).
    nullable_team_simple-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_team.
    team-id = mo_json->value_string( iv_prefix && '/id' ).
    team-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team-name = mo_json->value_string( iv_prefix && '/name' ).
    team-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team-description = mo_json->value_string( iv_prefix && '/description' ).
    team-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    team-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    team-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    team-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    team-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    team-url = mo_json->value_string( iv_prefix && '/url' ).
    team-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    team-parent = parse_nullable_team_simple( iv_prefix && '/parent' ).
  ENDMETHOD.

  METHOD parse_org_membership.
    org_membership-url = mo_json->value_string( iv_prefix && '/url' ).
    org_membership-state = mo_json->value_string( iv_prefix && '/state' ).
    org_membership-role = mo_json->value_string( iv_prefix && '/role' ).
    org_membership-organization_url = mo_json->value_string( iv_prefix && '/organization_url' ).
    org_membership-organization = parse_organization_simple( iv_prefix && '/organization' ).
    org_membership-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    org_membership-permissions-can_create_repository = mo_json->value_boolean( iv_prefix && '/permissions/can_create_repository' ).
  ENDMETHOD.

  METHOD parse_migration.
    migration-id = mo_json->value_string( iv_prefix && '/id' ).
    migration-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    migration-guid = mo_json->value_string( iv_prefix && '/guid' ).
    migration-state = mo_json->value_string( iv_prefix && '/state' ).
    migration-lock_repositories = mo_json->value_boolean( iv_prefix && '/lock_repositories' ).
    migration-exclude_metadata = mo_json->value_boolean( iv_prefix && '/exclude_metadata' ).
    migration-exclude_git_data = mo_json->value_boolean( iv_prefix && '/exclude_git_data' ).
    migration-exclude_attachments = mo_json->value_boolean( iv_prefix && '/exclude_attachments' ).
    migration-exclude_releases = mo_json->value_boolean( iv_prefix && '/exclude_releases' ).
    migration-exclude_owner_projects = mo_json->value_boolean( iv_prefix && '/exclude_owner_projects' ).
* todo, array, repositories
    migration-url = mo_json->value_string( iv_prefix && '/url' ).
    migration-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    migration-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    migration-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    migration-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
* todo, array, exclude
  ENDMETHOD.

  METHOD parse_nullable_minimal_reposit.
    nullable_minimal_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_minimal_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_minimal_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_minimal_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    nullable_minimal_repository-owner = parse_simple_user( iv_prefix && '/owner' ).
    nullable_minimal_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    nullable_minimal_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_minimal_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    nullable_minimal_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    nullable_minimal_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_minimal_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    nullable_minimal_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    nullable_minimal_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    nullable_minimal_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    nullable_minimal_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    nullable_minimal_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    nullable_minimal_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    nullable_minimal_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    nullable_minimal_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    nullable_minimal_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    nullable_minimal_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    nullable_minimal_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    nullable_minimal_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    nullable_minimal_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    nullable_minimal_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    nullable_minimal_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    nullable_minimal_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    nullable_minimal_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    nullable_minimal_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    nullable_minimal_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    nullable_minimal_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    nullable_minimal_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    nullable_minimal_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    nullable_minimal_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    nullable_minimal_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    nullable_minimal_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    nullable_minimal_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    nullable_minimal_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    nullable_minimal_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    nullable_minimal_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    nullable_minimal_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    nullable_minimal_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    nullable_minimal_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    nullable_minimal_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    nullable_minimal_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    nullable_minimal_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    nullable_minimal_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    nullable_minimal_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    nullable_minimal_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    nullable_minimal_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    nullable_minimal_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    nullable_minimal_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    nullable_minimal_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    nullable_minimal_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    nullable_minimal_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    nullable_minimal_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    nullable_minimal_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    nullable_minimal_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    nullable_minimal_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    nullable_minimal_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    nullable_minimal_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    nullable_minimal_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    nullable_minimal_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    nullable_minimal_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    nullable_minimal_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    nullable_minimal_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    nullable_minimal_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    nullable_minimal_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    nullable_minimal_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    nullable_minimal_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    nullable_minimal_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    nullable_minimal_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    nullable_minimal_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    nullable_minimal_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    nullable_minimal_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    nullable_minimal_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    nullable_minimal_repository-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
    nullable_minimal_repository-template_repository = parse_nullable_repository( iv_prefix && '/template_repository' ).
    nullable_minimal_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    nullable_minimal_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    nullable_minimal_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    nullable_minimal_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    nullable_minimal_repository-code_of_conduct = parse_code_of_conduct( iv_prefix && '/code_of_conduct' ).
    nullable_minimal_repository-license-key = mo_json->value_string( iv_prefix && '/license/key' ).
    nullable_minimal_repository-license-name = mo_json->value_string( iv_prefix && '/license/name' ).
    nullable_minimal_repository-license-spdx_id = mo_json->value_string( iv_prefix && '/license/spdx_id' ).
    nullable_minimal_repository-license-url = mo_json->value_string( iv_prefix && '/license/url' ).
    nullable_minimal_repository-license-node_id = mo_json->value_string( iv_prefix && '/license/node_id' ).
    nullable_minimal_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    nullable_minimal_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    nullable_minimal_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    nullable_minimal_repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
  ENDMETHOD.

  METHOD parse_package.
    package-id = mo_json->value_string( iv_prefix && '/id' ).
    package-name = mo_json->value_string( iv_prefix && '/name' ).
    package-package_type = mo_json->value_string( iv_prefix && '/package_type' ).
    package-url = mo_json->value_string( iv_prefix && '/url' ).
    package-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    package-version_count = mo_json->value_string( iv_prefix && '/version_count' ).
    package-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    package-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    package-repository = parse_nullable_minimal_reposit( iv_prefix && '/repository' ).
    package-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    package-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_package_version.
    package_version-id = mo_json->value_string( iv_prefix && '/id' ).
    package_version-name = mo_json->value_string( iv_prefix && '/name' ).
    package_version-url = mo_json->value_string( iv_prefix && '/url' ).
    package_version-package_html_url = mo_json->value_string( iv_prefix && '/package_html_url' ).
    package_version-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    package_version-license = mo_json->value_string( iv_prefix && '/license' ).
    package_version-description = mo_json->value_string( iv_prefix && '/description' ).
    package_version-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    package_version-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    package_version-deleted_at = mo_json->value_string( iv_prefix && '/deleted_at' ).
    package_version-metadata-package_type = mo_json->value_string( iv_prefix && '/metadata/package_type' ).
* todo, array, tags
* todo, array, tag
  ENDMETHOD.

  METHOD parse_project.
    project-owner_url = mo_json->value_string( iv_prefix && '/owner_url' ).
    project-url = mo_json->value_string( iv_prefix && '/url' ).
    project-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    project-columns_url = mo_json->value_string( iv_prefix && '/columns_url' ).
    project-id = mo_json->value_string( iv_prefix && '/id' ).
    project-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project-name = mo_json->value_string( iv_prefix && '/name' ).
    project-body = mo_json->value_string( iv_prefix && '/body' ).
    project-number = mo_json->value_string( iv_prefix && '/number' ).
    project-state = mo_json->value_string( iv_prefix && '/state' ).
    project-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    project-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    project-organization_permission = mo_json->value_string( iv_prefix && '/organization_permission' ).
    project-private = mo_json->value_boolean( iv_prefix && '/private' ).
  ENDMETHOD.

  METHOD parse_group_mapping.
* todo, array, groups
  ENDMETHOD.

  METHOD parse_team_full.
    team_full-id = mo_json->value_string( iv_prefix && '/id' ).
    team_full-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_full-url = mo_json->value_string( iv_prefix && '/url' ).
    team_full-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_full-name = mo_json->value_string( iv_prefix && '/name' ).
    team_full-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team_full-description = mo_json->value_string( iv_prefix && '/description' ).
    team_full-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team_full-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team_full-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team_full-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    team_full-parent = parse_nullable_team_simple( iv_prefix && '/parent' ).
    team_full-members_count = mo_json->value_string( iv_prefix && '/members_count' ).
    team_full-repos_count = mo_json->value_string( iv_prefix && '/repos_count' ).
    team_full-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_full-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_full-organization = parse_organization_full( iv_prefix && '/organization' ).
    team_full-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_team_discussion.
    team_discussion-author = parse_nullable_simple_user( iv_prefix && '/author' ).
    team_discussion-body = mo_json->value_string( iv_prefix && '/body' ).
    team_discussion-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    team_discussion-body_version = mo_json->value_string( iv_prefix && '/body_version' ).
    team_discussion-comments_count = mo_json->value_string( iv_prefix && '/comments_count' ).
    team_discussion-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    team_discussion-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_discussion-last_edited_at = mo_json->value_string( iv_prefix && '/last_edited_at' ).
    team_discussion-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_discussion-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_discussion-number = mo_json->value_string( iv_prefix && '/number' ).
    team_discussion-pinned = mo_json->value_boolean( iv_prefix && '/pinned' ).
    team_discussion-private = mo_json->value_boolean( iv_prefix && '/private' ).
    team_discussion-team_url = mo_json->value_string( iv_prefix && '/team_url' ).
    team_discussion-title = mo_json->value_string( iv_prefix && '/title' ).
    team_discussion-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_discussion-url = mo_json->value_string( iv_prefix && '/url' ).
    team_discussion-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_team_discussion_comment.
    team_discussion_comment-author = parse_nullable_simple_user( iv_prefix && '/author' ).
    team_discussion_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    team_discussion_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    team_discussion_comment-body_version = mo_json->value_string( iv_prefix && '/body_version' ).
    team_discussion_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_discussion_comment-last_edited_at = mo_json->value_string( iv_prefix && '/last_edited_at' ).
    team_discussion_comment-discussion_url = mo_json->value_string( iv_prefix && '/discussion_url' ).
    team_discussion_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_discussion_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_discussion_comment-number = mo_json->value_string( iv_prefix && '/number' ).
    team_discussion_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_discussion_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    team_discussion_comment-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_reaction.
    reaction-id = mo_json->value_string( iv_prefix && '/id' ).
    reaction-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    reaction-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    reaction-content = mo_json->value_string( iv_prefix && '/content' ).
    reaction-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
  ENDMETHOD.

  METHOD parse_team_membership.
    team_membership-url = mo_json->value_string( iv_prefix && '/url' ).
    team_membership-role = mo_json->value_string( iv_prefix && '/role' ).
    team_membership-state = mo_json->value_string( iv_prefix && '/state' ).
  ENDMETHOD.

  METHOD parse_team_project.
    team_project-owner_url = mo_json->value_string( iv_prefix && '/owner_url' ).
    team_project-url = mo_json->value_string( iv_prefix && '/url' ).
    team_project-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_project-columns_url = mo_json->value_string( iv_prefix && '/columns_url' ).
    team_project-id = mo_json->value_string( iv_prefix && '/id' ).
    team_project-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_project-name = mo_json->value_string( iv_prefix && '/name' ).
    team_project-body = mo_json->value_string( iv_prefix && '/body' ).
    team_project-number = mo_json->value_string( iv_prefix && '/number' ).
    team_project-state = mo_json->value_string( iv_prefix && '/state' ).
    team_project-creator = parse_simple_user( iv_prefix && '/creator' ).
    team_project-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_project-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_project-organization_permission = mo_json->value_string( iv_prefix && '/organization_permission' ).
    team_project-private = mo_json->value_boolean( iv_prefix && '/private' ).
    team_project-permissions-read = mo_json->value_boolean( iv_prefix && '/permissions/read' ).
    team_project-permissions-write = mo_json->value_boolean( iv_prefix && '/permissions/write' ).
    team_project-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
  ENDMETHOD.

  METHOD parse_team_repository.
    team_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    team_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    team_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    team_repository-license = parse_nullable_license_simple( iv_prefix && '/license' ).
    team_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    team_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    team_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    team_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    team_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    team_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    team_repository-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
    team_repository-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    team_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    team_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    team_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    team_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    team_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    team_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    team_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    team_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    team_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    team_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    team_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    team_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    team_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    team_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    team_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    team_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    team_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    team_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    team_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    team_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    team_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    team_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    team_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    team_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    team_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    team_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    team_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    team_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    team_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    team_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    team_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    team_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    team_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    team_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    team_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    team_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    team_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    team_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    team_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    team_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    team_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    team_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    team_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    team_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    team_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    team_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    team_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    team_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    team_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    team_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    team_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    team_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    team_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    team_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    team_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    team_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    team_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    team_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    team_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    team_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    team_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    team_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    team_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    team_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    team_repository-template_repository = parse_nullable_repository( iv_prefix && '/template_repository' ).
    team_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    team_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    team_repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/allow_auto_merge' ).
    team_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    team_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    team_repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
    team_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    team_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    team_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    team_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    team_repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
  ENDMETHOD.

  METHOD parse_project_card.
    project_card-url = mo_json->value_string( iv_prefix && '/url' ).
    project_card-id = mo_json->value_string( iv_prefix && '/id' ).
    project_card-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project_card-note = mo_json->value_string( iv_prefix && '/note' ).
    project_card-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    project_card-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project_card-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    project_card-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    project_card-column_name = mo_json->value_string( iv_prefix && '/column_name' ).
    project_card-project_id = mo_json->value_string( iv_prefix && '/project_id' ).
    project_card-column_url = mo_json->value_string( iv_prefix && '/column_url' ).
    project_card-content_url = mo_json->value_string( iv_prefix && '/content_url' ).
    project_card-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
  ENDMETHOD.

  METHOD parse_project_column.
    project_column-url = mo_json->value_string( iv_prefix && '/url' ).
    project_column-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
    project_column-cards_url = mo_json->value_string( iv_prefix && '/cards_url' ).
    project_column-id = mo_json->value_string( iv_prefix && '/id' ).
    project_column-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project_column-name = mo_json->value_string( iv_prefix && '/name' ).
    project_column-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project_column-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_project_collaborator_per.
    project_collaborator_permissio-permission = mo_json->value_string( iv_prefix && '/permission' ).
    project_collaborator_permissio-user = parse_nullable_simple_user( iv_prefix && '/user' ).
  ENDMETHOD.

  METHOD parse_rate_limit.
    rate_limit-limit = mo_json->value_string( iv_prefix && '/limit' ).
    rate_limit-remaining = mo_json->value_string( iv_prefix && '/remaining' ).
    rate_limit-reset = mo_json->value_string( iv_prefix && '/reset' ).
    rate_limit-used = mo_json->value_string( iv_prefix && '/used' ).
  ENDMETHOD.

  METHOD parse_rate_limit_overview.
    rate_limit_overview-resources-core = parse_rate_limit( iv_prefix && '/resources/core' ).
    rate_limit_overview-resources-graphql = parse_rate_limit( iv_prefix && '/resources/graphql' ).
    rate_limit_overview-resources-search = parse_rate_limit( iv_prefix && '/resources/search' ).
    rate_limit_overview-resources-source_import = parse_rate_limit( iv_prefix && '/resources/source_import' ).
    rate_limit_overview-resources-integration_manifest = parse_rate_limit( iv_prefix && '/resources/integration_manifest' ).
    rate_limit_overview-resources-code_scanning_upload = parse_rate_limit( iv_prefix && '/resources/code_scanning_upload' ).
    rate_limit_overview-resources-actions_runner_registration = parse_rate_limit( iv_prefix && '/resources/actions_runner_registration' ).
    rate_limit_overview-resources-scim = parse_rate_limit( iv_prefix && '/resources/scim' ).
    rate_limit_overview-rate = parse_rate_limit( iv_prefix && '/rate' ).
  ENDMETHOD.

  METHOD parse_code_of_conduct_simple.
    code_of_conduct_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    code_of_conduct_simple-key = mo_json->value_string( iv_prefix && '/key' ).
    code_of_conduct_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    code_of_conduct_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_full_repository.
    full_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    full_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    full_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    full_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    full_repository-owner = parse_simple_user( iv_prefix && '/owner' ).
    full_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    full_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    full_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    full_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    full_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    full_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    full_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    full_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    full_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    full_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    full_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    full_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    full_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    full_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    full_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    full_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    full_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    full_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    full_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    full_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    full_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    full_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    full_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    full_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    full_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    full_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    full_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    full_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    full_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    full_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    full_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    full_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    full_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    full_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    full_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    full_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    full_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    full_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    full_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    full_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    full_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    full_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    full_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    full_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    full_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    full_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    full_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    full_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    full_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    full_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    full_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    full_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    full_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    full_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    full_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, array, topics
    full_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    full_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    full_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    full_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    full_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    full_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    full_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    full_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    full_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    full_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    full_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    full_repository-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    full_repository-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    full_repository-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    full_repository-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    full_repository-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    full_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    full_repository-template_repository = parse_nullable_repository( iv_prefix && '/template_repository' ).
    full_repository-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    full_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    full_repository-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/allow_auto_merge' ).
    full_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    full_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    full_repository-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
    full_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    full_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    full_repository-license = parse_nullable_license_simple( iv_prefix && '/license' ).
    full_repository-organization = parse_nullable_simple_user( iv_prefix && '/organization' ).
    full_repository-parent = parse_repository( iv_prefix && '/parent' ).
    full_repository-source = parse_repository( iv_prefix && '/source' ).
    full_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    full_repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    full_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    full_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    full_repository-anonymous_access_enabled = mo_json->value_boolean( iv_prefix && '/anonymous_access_enabled' ).
    full_repository-code_of_conduct = parse_code_of_conduct_simple( iv_prefix && '/code_of_conduct' ).
    full_repository-security_and_analysis-advanced_security-status = mo_json->value_string( iv_prefix && '/security_and_analysis/advanced_security/status' ).
    full_repository-security_and_analysis-secret_scanning-status = mo_json->value_string( iv_prefix && '/security_and_analysis/secret_scanning/status' ).
  ENDMETHOD.

  METHOD parse_artifact.
    artifact-id = mo_json->value_string( iv_prefix && '/id' ).
    artifact-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    artifact-name = mo_json->value_string( iv_prefix && '/name' ).
    artifact-size_in_bytes = mo_json->value_string( iv_prefix && '/size_in_bytes' ).
    artifact-url = mo_json->value_string( iv_prefix && '/url' ).
    artifact-archive_download_url = mo_json->value_string( iv_prefix && '/archive_download_url' ).
    artifact-expired = mo_json->value_boolean( iv_prefix && '/expired' ).
    artifact-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    artifact-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
    artifact-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_job.
    job-id = mo_json->value_string( iv_prefix && '/id' ).
    job-run_id = mo_json->value_string( iv_prefix && '/run_id' ).
    job-run_url = mo_json->value_string( iv_prefix && '/run_url' ).
    job-run_attempt = mo_json->value_string( iv_prefix && '/run_attempt' ).
    job-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    job-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    job-url = mo_json->value_string( iv_prefix && '/url' ).
    job-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    job-status = mo_json->value_string( iv_prefix && '/status' ).
    job-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    job-started_at = mo_json->value_string( iv_prefix && '/started_at' ).
    job-completed_at = mo_json->value_string( iv_prefix && '/completed_at' ).
    job-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, steps
    job-check_run_url = mo_json->value_string( iv_prefix && '/check_run_url' ).
* todo, array, labels
    job-runner_id = mo_json->value_string( iv_prefix && '/runner_id' ).
    job-runner_name = mo_json->value_string( iv_prefix && '/runner_name' ).
    job-runner_group_id = mo_json->value_string( iv_prefix && '/runner_group_id' ).
    job-runner_group_name = mo_json->value_string( iv_prefix && '/runner_group_name' ).
  ENDMETHOD.

  METHOD parse_actions_enabled.
* todo, handle type boolean
  ENDMETHOD.

  METHOD parse_actions_repository_permi.
    actions_repository_permissions-enabled = parse_actions_enabled( iv_prefix && '/enabled' ).
    actions_repository_permissions-allowed_actions = parse_allowed_actions( iv_prefix && '/allowed_actions' ).
    actions_repository_permissions-selected_actions_url = parse_selected_actions_url( iv_prefix && '/selected_actions_url' ).
  ENDMETHOD.

  METHOD parse_pull_request_minimal.
    pull_request_minimal-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_minimal-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request_minimal-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request_minimal-head-ref = mo_json->value_string( iv_prefix && '/head/ref' ).
    pull_request_minimal-head-sha = mo_json->value_string( iv_prefix && '/head/sha' ).
    pull_request_minimal-head-repo-id = mo_json->value_string( iv_prefix && '/head/repo/id' ).
    pull_request_minimal-head-repo-url = mo_json->value_string( iv_prefix && '/head/repo/url' ).
    pull_request_minimal-head-repo-name = mo_json->value_string( iv_prefix && '/head/repo/name' ).
    pull_request_minimal-base-ref = mo_json->value_string( iv_prefix && '/base/ref' ).
    pull_request_minimal-base-sha = mo_json->value_string( iv_prefix && '/base/sha' ).
    pull_request_minimal-base-repo-id = mo_json->value_string( iv_prefix && '/base/repo/id' ).
    pull_request_minimal-base-repo-url = mo_json->value_string( iv_prefix && '/base/repo/url' ).
    pull_request_minimal-base-repo-name = mo_json->value_string( iv_prefix && '/base/repo/name' ).
  ENDMETHOD.

  METHOD parse_nullable_simple_commit.
    nullable_simple_commit-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_simple_commit-tree_id = mo_json->value_string( iv_prefix && '/tree_id' ).
    nullable_simple_commit-message = mo_json->value_string( iv_prefix && '/message' ).
    nullable_simple_commit-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
    nullable_simple_commit-author-name = mo_json->value_string( iv_prefix && '/author/name' ).
    nullable_simple_commit-author-email = mo_json->value_string( iv_prefix && '/author/email' ).
    nullable_simple_commit-committer-name = mo_json->value_string( iv_prefix && '/committer/name' ).
    nullable_simple_commit-committer-email = mo_json->value_string( iv_prefix && '/committer/email' ).
  ENDMETHOD.

  METHOD parse_workflow_run.
    workflow_run-id = mo_json->value_string( iv_prefix && '/id' ).
    workflow_run-name = mo_json->value_string( iv_prefix && '/name' ).
    workflow_run-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    workflow_run-check_suite_id = mo_json->value_string( iv_prefix && '/check_suite_id' ).
    workflow_run-check_suite_node_id = mo_json->value_string( iv_prefix && '/check_suite_node_id' ).
    workflow_run-head_branch = mo_json->value_string( iv_prefix && '/head_branch' ).
    workflow_run-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    workflow_run-run_number = mo_json->value_string( iv_prefix && '/run_number' ).
    workflow_run-run_attempt = mo_json->value_string( iv_prefix && '/run_attempt' ).
    workflow_run-event = mo_json->value_string( iv_prefix && '/event' ).
    workflow_run-status = mo_json->value_string( iv_prefix && '/status' ).
    workflow_run-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    workflow_run-workflow_id = mo_json->value_string( iv_prefix && '/workflow_id' ).
    workflow_run-url = mo_json->value_string( iv_prefix && '/url' ).
    workflow_run-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, array, pull_requests
    workflow_run-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    workflow_run-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    workflow_run-run_started_at = mo_json->value_string( iv_prefix && '/run_started_at' ).
    workflow_run-jobs_url = mo_json->value_string( iv_prefix && '/jobs_url' ).
    workflow_run-logs_url = mo_json->value_string( iv_prefix && '/logs_url' ).
    workflow_run-check_suite_url = mo_json->value_string( iv_prefix && '/check_suite_url' ).
    workflow_run-artifacts_url = mo_json->value_string( iv_prefix && '/artifacts_url' ).
    workflow_run-cancel_url = mo_json->value_string( iv_prefix && '/cancel_url' ).
    workflow_run-rerun_url = mo_json->value_string( iv_prefix && '/rerun_url' ).
    workflow_run-previous_attempt_url = mo_json->value_string( iv_prefix && '/previous_attempt_url' ).
    workflow_run-workflow_url = mo_json->value_string( iv_prefix && '/workflow_url' ).
    workflow_run-head_commit = parse_nullable_simple_commit( iv_prefix && '/head_commit' ).
    workflow_run-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    workflow_run-head_repository = parse_minimal_repository( iv_prefix && '/head_repository' ).
    workflow_run-head_repository_id = mo_json->value_string( iv_prefix && '/head_repository_id' ).
  ENDMETHOD.

  METHOD parse_environment_approvals.
* todo, array, environments
    environment_approvals-state = mo_json->value_string( iv_prefix && '/state' ).
    environment_approvals-user = parse_simple_user( iv_prefix && '/user' ).
    environment_approvals-comment = mo_json->value_string( iv_prefix && '/comment' ).
  ENDMETHOD.

  METHOD parse_deployment_reviewer_type.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_pending_deployment.
    pending_deployment-environment-id = mo_json->value_string( iv_prefix && '/environment/id' ).
    pending_deployment-environment-node_id = mo_json->value_string( iv_prefix && '/environment/node_id' ).
    pending_deployment-environment-name = mo_json->value_string( iv_prefix && '/environment/name' ).
    pending_deployment-environment-url = mo_json->value_string( iv_prefix && '/environment/url' ).
    pending_deployment-environment-html_url = mo_json->value_string( iv_prefix && '/environment/html_url' ).
    pending_deployment-wait_timer = mo_json->value_string( iv_prefix && '/wait_timer' ).
    pending_deployment-wait_timer_started_at = mo_json->value_string( iv_prefix && '/wait_timer_started_at' ).
    pending_deployment-current_user_can_approve = mo_json->value_boolean( iv_prefix && '/current_user_can_approve' ).
* todo, array, reviewers
  ENDMETHOD.

  METHOD parse_deployment.
    deployment-url = mo_json->value_string( iv_prefix && '/url' ).
    deployment-id = mo_json->value_string( iv_prefix && '/id' ).
    deployment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    deployment-sha = mo_json->value_string( iv_prefix && '/sha' ).
    deployment-ref = mo_json->value_string( iv_prefix && '/ref' ).
    deployment-task = mo_json->value_string( iv_prefix && '/task' ).
    deployment-payload = mo_json->value_string( iv_prefix && '/payload' ).
    deployment-original_environment = mo_json->value_string( iv_prefix && '/original_environment' ).
    deployment-environment = mo_json->value_string( iv_prefix && '/environment' ).
    deployment-description = mo_json->value_string( iv_prefix && '/description' ).
    deployment-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    deployment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deployment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    deployment-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    deployment-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    deployment-transient_environment = mo_json->value_boolean( iv_prefix && '/transient_environment' ).
    deployment-production_environment = mo_json->value_boolean( iv_prefix && '/production_environment' ).
    deployment-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
  ENDMETHOD.

  METHOD parse_workflow_run_usage.
    workflow_run_usage-billable-ubuntu-total_ms = mo_json->value_string( iv_prefix && '/billable/UBUNTU/total_ms' ).
    workflow_run_usage-billable-ubuntu-jobs = mo_json->value_string( iv_prefix && '/billable/UBUNTU/jobs' ).
* todo, array, job_runs
    workflow_run_usage-billable-macos-total_ms = mo_json->value_string( iv_prefix && '/billable/MACOS/total_ms' ).
    workflow_run_usage-billable-macos-jobs = mo_json->value_string( iv_prefix && '/billable/MACOS/jobs' ).
* todo, array, job_runs
    workflow_run_usage-billable-windows-total_ms = mo_json->value_string( iv_prefix && '/billable/WINDOWS/total_ms' ).
    workflow_run_usage-billable-windows-jobs = mo_json->value_string( iv_prefix && '/billable/WINDOWS/jobs' ).
* todo, array, job_runs
    workflow_run_usage-run_duration_ms = mo_json->value_string( iv_prefix && '/run_duration_ms' ).
  ENDMETHOD.

  METHOD parse_actions_secret.
    actions_secret-name = mo_json->value_string( iv_prefix && '/name' ).
    actions_secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    actions_secret-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_workflow.
    workflow-id = mo_json->value_string( iv_prefix && '/id' ).
    workflow-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    workflow-name = mo_json->value_string( iv_prefix && '/name' ).
    workflow-path = mo_json->value_string( iv_prefix && '/path' ).
    workflow-state = mo_json->value_string( iv_prefix && '/state' ).
    workflow-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    workflow-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    workflow-url = mo_json->value_string( iv_prefix && '/url' ).
    workflow-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    workflow-badge_url = mo_json->value_string( iv_prefix && '/badge_url' ).
    workflow-deleted_at = mo_json->value_string( iv_prefix && '/deleted_at' ).
  ENDMETHOD.

  METHOD parse_workflow_usage.
    workflow_usage-billable-ubuntu-total_ms = mo_json->value_string( iv_prefix && '/billable/UBUNTU/total_ms' ).
    workflow_usage-billable-macos-total_ms = mo_json->value_string( iv_prefix && '/billable/MACOS/total_ms' ).
    workflow_usage-billable-windows-total_ms = mo_json->value_string( iv_prefix && '/billable/WINDOWS/total_ms' ).
  ENDMETHOD.

  METHOD parse_autolink.
    autolink-id = mo_json->value_string( iv_prefix && '/id' ).
    autolink-key_prefix = mo_json->value_string( iv_prefix && '/key_prefix' ).
    autolink-url_template = mo_json->value_string( iv_prefix && '/url_template' ).
  ENDMETHOD.

  METHOD parse_protected_branch_require.
    protected_branch_required_stat-url = mo_json->value_string( iv_prefix && '/url' ).
    protected_branch_required_stat-enforcement_level = mo_json->value_string( iv_prefix && '/enforcement_level' ).
* todo, array, contexts
* todo, array, checks
    protected_branch_required_stat-contexts_url = mo_json->value_string( iv_prefix && '/contexts_url' ).
    protected_branch_required_stat-strict = mo_json->value_boolean( iv_prefix && '/strict' ).
  ENDMETHOD.

  METHOD parse_protected_branch_admin_e.
    protected_branch_admin_enforce-url = mo_json->value_string( iv_prefix && '/url' ).
    protected_branch_admin_enforce-enabled = mo_json->value_boolean( iv_prefix && '/enabled' ).
  ENDMETHOD.

  METHOD parse_protected_branch_pull_re.
    protected_branch_pull_request_-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, array, users
* todo, array, teams
    protected_branch_pull_request_-dismissal_restrictions-url = mo_json->value_string( iv_prefix && '/dismissal_restrictions/url' ).
    protected_branch_pull_request_-dismissal_restrictions-users_url = mo_json->value_string( iv_prefix && '/dismissal_restrictions/users_url' ).
    protected_branch_pull_request_-dismissal_restrictions-teams_url = mo_json->value_string( iv_prefix && '/dismissal_restrictions/teams_url' ).
* todo, array, users
* todo, array, teams
    protected_branch_pull_request_-dismiss_stale_reviews = mo_json->value_boolean( iv_prefix && '/dismiss_stale_reviews' ).
    protected_branch_pull_request_-require_code_owner_reviews = mo_json->value_boolean( iv_prefix && '/require_code_owner_reviews' ).
    protected_branch_pull_request_-required_approving_review_coun = mo_json->value_string( iv_prefix && '/required_approving_review_count' ).
  ENDMETHOD.

  METHOD parse_branch_restriction_polic.
    branch_restriction_policy-url = mo_json->value_string( iv_prefix && '/url' ).
    branch_restriction_policy-users_url = mo_json->value_string( iv_prefix && '/users_url' ).
    branch_restriction_policy-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    branch_restriction_policy-apps_url = mo_json->value_string( iv_prefix && '/apps_url' ).
* todo, array, users
* todo, array, teams
* todo, array, apps
  ENDMETHOD.

  METHOD parse_branch_protection.
    branch_protection-url = mo_json->value_string( iv_prefix && '/url' ).
    branch_protection-enabled = mo_json->value_boolean( iv_prefix && '/enabled' ).
    branch_protection-required_status_checks = parse_protected_branch_require( iv_prefix && '/required_status_checks' ).
    branch_protection-enforce_admins = parse_protected_branch_admin_e( iv_prefix && '/enforce_admins' ).
    branch_protection-required_pull_request_reviews = parse_protected_branch_pull_re( iv_prefix && '/required_pull_request_reviews' ).
    branch_protection-restrictions = parse_branch_restriction_polic( iv_prefix && '/restrictions' ).
    branch_protection-required_linear_history-enabled = mo_json->value_boolean( iv_prefix && '/required_linear_history/enabled' ).
    branch_protection-allow_force_pushes-enabled = mo_json->value_boolean( iv_prefix && '/allow_force_pushes/enabled' ).
    branch_protection-allow_deletions-enabled = mo_json->value_boolean( iv_prefix && '/allow_deletions/enabled' ).
    branch_protection-required_conversation_resoluti-enabled = mo_json->value_boolean( iv_prefix && '/required_conversation_resolution/enabled' ).
    branch_protection-name = mo_json->value_string( iv_prefix && '/name' ).
    branch_protection-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
    branch_protection-required_signatures-url = mo_json->value_string( iv_prefix && '/required_signatures/url' ).
    branch_protection-required_signatures-enabled = mo_json->value_boolean( iv_prefix && '/required_signatures/enabled' ).
  ENDMETHOD.

  METHOD parse_short_branch.
    short_branch-name = mo_json->value_string( iv_prefix && '/name' ).
    short_branch-commit-sha = mo_json->value_string( iv_prefix && '/commit/sha' ).
    short_branch-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    short_branch-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
    short_branch-protection = parse_branch_protection( iv_prefix && '/protection' ).
    short_branch-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
  ENDMETHOD.

  METHOD parse_nullable_git_user.
    nullable_git_user-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_git_user-email = mo_json->value_string( iv_prefix && '/email' ).
    nullable_git_user-date = mo_json->value_string( iv_prefix && '/date' ).
  ENDMETHOD.

  METHOD parse_verification.
    verification-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    verification-reason = mo_json->value_string( iv_prefix && '/reason' ).
    verification-payload = mo_json->value_string( iv_prefix && '/payload' ).
    verification-signature = mo_json->value_string( iv_prefix && '/signature' ).
  ENDMETHOD.

  METHOD parse_diff_entry.
    diff_entry-sha = mo_json->value_string( iv_prefix && '/sha' ).
    diff_entry-filename = mo_json->value_string( iv_prefix && '/filename' ).
    diff_entry-status = mo_json->value_string( iv_prefix && '/status' ).
    diff_entry-additions = mo_json->value_string( iv_prefix && '/additions' ).
    diff_entry-deletions = mo_json->value_string( iv_prefix && '/deletions' ).
    diff_entry-changes = mo_json->value_string( iv_prefix && '/changes' ).
    diff_entry-blob_url = mo_json->value_string( iv_prefix && '/blob_url' ).
    diff_entry-raw_url = mo_json->value_string( iv_prefix && '/raw_url' ).
    diff_entry-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    diff_entry-patch = mo_json->value_string( iv_prefix && '/patch' ).
    diff_entry-previous_filename = mo_json->value_string( iv_prefix && '/previous_filename' ).
  ENDMETHOD.

  METHOD parse_commit.
    commit-url = mo_json->value_string( iv_prefix && '/url' ).
    commit-sha = mo_json->value_string( iv_prefix && '/sha' ).
    commit-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    commit-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    commit-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    commit-commit-author = parse_nullable_git_user( iv_prefix && '/commit/author' ).
    commit-commit-committer = parse_nullable_git_user( iv_prefix && '/commit/committer' ).
    commit-commit-message = mo_json->value_string( iv_prefix && '/commit/message' ).
    commit-commit-comment_count = mo_json->value_string( iv_prefix && '/commit/comment_count' ).
    commit-commit-tree-sha = mo_json->value_string( iv_prefix && '/commit/tree/sha' ).
    commit-commit-tree-url = mo_json->value_string( iv_prefix && '/commit/tree/url' ).
    commit-commit-verification = parse_verification( iv_prefix && '/commit/verification' ).
    commit-author = parse_nullable_simple_user( iv_prefix && '/author' ).
    commit-committer = parse_nullable_simple_user( iv_prefix && '/committer' ).
* todo, array, parents
    commit-stats-additions = mo_json->value_string( iv_prefix && '/stats/additions' ).
    commit-stats-deletions = mo_json->value_string( iv_prefix && '/stats/deletions' ).
    commit-stats-total = mo_json->value_string( iv_prefix && '/stats/total' ).
* todo, array, files
  ENDMETHOD.

  METHOD parse_branch_with_protection.
    branch_with_protection-name = mo_json->value_string( iv_prefix && '/name' ).
    branch_with_protection-commit = parse_commit( iv_prefix && '/commit' ).
    branch_with_protection-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    branch_with_protection-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
    branch_with_protection-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
    branch_with_protection-protection = parse_branch_protection( iv_prefix && '/protection' ).
    branch_with_protection-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
    branch_with_protection-pattern = mo_json->value_string( iv_prefix && '/pattern' ).
    branch_with_protection-required_approving_review_coun = mo_json->value_string( iv_prefix && '/required_approving_review_count' ).
  ENDMETHOD.

  METHOD parse_status_check_policy.
    status_check_policy-url = mo_json->value_string( iv_prefix && '/url' ).
    status_check_policy-strict = mo_json->value_boolean( iv_prefix && '/strict' ).
* todo, array, contexts
* todo, array, checks
    status_check_policy-contexts_url = mo_json->value_string( iv_prefix && '/contexts_url' ).
  ENDMETHOD.

  METHOD parse_protected_branch.
    protected_branch-url = mo_json->value_string( iv_prefix && '/url' ).
    protected_branch-required_status_checks = parse_status_check_policy( iv_prefix && '/required_status_checks' ).
    protected_branch-required_pull_request_reviews-url = mo_json->value_string( iv_prefix && '/required_pull_request_reviews/url' ).
    protected_branch-required_pull_request_reviews-dismiss_stale_reviews = mo_json->value_boolean( iv_prefix && '/required_pull_request_reviews/dismiss_stale_reviews' ).
    protected_branch-required_pull_request_reviews-require_code_owner_reviews = mo_json->value_boolean( iv_prefix && '/required_pull_request_reviews/require_code_owner_reviews' ).
    protected_branch-required_pull_request_reviews-required_approving_review_coun = mo_json->value_string( iv_prefix && '/required_pull_request_reviews/required_approving_review_count' ).
    protected_branch-required_pull_request_reviews-dismissal_restrictions-url = mo_json->value_string( iv_prefix && '/required_pull_request_reviews/dismissal_restrictions/url' ).
    protected_branch-required_pull_request_reviews-dismissal_restrictions-users_url = mo_json->value_string( iv_prefix && '/required_pull_request_reviews/dismissal_restrictions/users_url' ).
    protected_branch-required_pull_request_reviews-dismissal_restrictions-teams_url = mo_json->value_string( iv_prefix && '/required_pull_request_reviews/dismissal_restrictions/teams_url' ).
* todo, array, users
* todo, array, teams
* todo, array, users
* todo, array, teams
    protected_branch-required_signatures-url = mo_json->value_string( iv_prefix && '/required_signatures/url' ).
    protected_branch-required_signatures-enabled = mo_json->value_boolean( iv_prefix && '/required_signatures/enabled' ).
    protected_branch-enforce_admins-url = mo_json->value_string( iv_prefix && '/enforce_admins/url' ).
    protected_branch-enforce_admins-enabled = mo_json->value_boolean( iv_prefix && '/enforce_admins/enabled' ).
    protected_branch-required_linear_history-enabled = mo_json->value_boolean( iv_prefix && '/required_linear_history/enabled' ).
    protected_branch-allow_force_pushes-enabled = mo_json->value_boolean( iv_prefix && '/allow_force_pushes/enabled' ).
    protected_branch-allow_deletions-enabled = mo_json->value_boolean( iv_prefix && '/allow_deletions/enabled' ).
    protected_branch-restrictions = parse_branch_restriction_polic( iv_prefix && '/restrictions' ).
    protected_branch-required_conversation_resoluti-enabled = mo_json->value_boolean( iv_prefix && '/required_conversation_resolution/enabled' ).
  ENDMETHOD.

  METHOD parse_deployment_simple.
    deployment_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    deployment_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    deployment_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    deployment_simple-task = mo_json->value_string( iv_prefix && '/task' ).
    deployment_simple-original_environment = mo_json->value_string( iv_prefix && '/original_environment' ).
    deployment_simple-environment = mo_json->value_string( iv_prefix && '/environment' ).
    deployment_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    deployment_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deployment_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    deployment_simple-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    deployment_simple-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    deployment_simple-transient_environment = mo_json->value_boolean( iv_prefix && '/transient_environment' ).
    deployment_simple-production_environment = mo_json->value_boolean( iv_prefix && '/production_environment' ).
    deployment_simple-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
  ENDMETHOD.

  METHOD parse_check_run.
    check_run-id = mo_json->value_string( iv_prefix && '/id' ).
    check_run-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    check_run-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    check_run-external_id = mo_json->value_string( iv_prefix && '/external_id' ).
    check_run-url = mo_json->value_string( iv_prefix && '/url' ).
    check_run-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    check_run-details_url = mo_json->value_string( iv_prefix && '/details_url' ).
    check_run-status = mo_json->value_string( iv_prefix && '/status' ).
    check_run-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    check_run-started_at = mo_json->value_string( iv_prefix && '/started_at' ).
    check_run-completed_at = mo_json->value_string( iv_prefix && '/completed_at' ).
    check_run-output-title = mo_json->value_string( iv_prefix && '/output/title' ).
    check_run-output-summary = mo_json->value_string( iv_prefix && '/output/summary' ).
    check_run-output-text = mo_json->value_string( iv_prefix && '/output/text' ).
    check_run-output-annotations_count = mo_json->value_string( iv_prefix && '/output/annotations_count' ).
    check_run-output-annotations_url = mo_json->value_string( iv_prefix && '/output/annotations_url' ).
    check_run-name = mo_json->value_string( iv_prefix && '/name' ).
    check_run-check_suite-id = mo_json->value_string( iv_prefix && '/check_suite/id' ).
    check_run-app = parse_nullable_integration( iv_prefix && '/app' ).
* todo, array, pull_requests
    check_run-deployment = parse_deployment_simple( iv_prefix && '/deployment' ).
  ENDMETHOD.

  METHOD parse_check_annotation.
    check_annotation-path = mo_json->value_string( iv_prefix && '/path' ).
    check_annotation-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    check_annotation-end_line = mo_json->value_string( iv_prefix && '/end_line' ).
    check_annotation-start_column = mo_json->value_string( iv_prefix && '/start_column' ).
    check_annotation-end_column = mo_json->value_string( iv_prefix && '/end_column' ).
    check_annotation-annotation_level = mo_json->value_string( iv_prefix && '/annotation_level' ).
    check_annotation-title = mo_json->value_string( iv_prefix && '/title' ).
    check_annotation-message = mo_json->value_string( iv_prefix && '/message' ).
    check_annotation-raw_details = mo_json->value_string( iv_prefix && '/raw_details' ).
    check_annotation-blob_href = mo_json->value_string( iv_prefix && '/blob_href' ).
  ENDMETHOD.

  METHOD parse_simple_commit.
    simple_commit-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_commit-tree_id = mo_json->value_string( iv_prefix && '/tree_id' ).
    simple_commit-message = mo_json->value_string( iv_prefix && '/message' ).
    simple_commit-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
    simple_commit-author-name = mo_json->value_string( iv_prefix && '/author/name' ).
    simple_commit-author-email = mo_json->value_string( iv_prefix && '/author/email' ).
    simple_commit-committer-name = mo_json->value_string( iv_prefix && '/committer/name' ).
    simple_commit-committer-email = mo_json->value_string( iv_prefix && '/committer/email' ).
  ENDMETHOD.

  METHOD parse_check_suite.
    check_suite-id = mo_json->value_string( iv_prefix && '/id' ).
    check_suite-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    check_suite-head_branch = mo_json->value_string( iv_prefix && '/head_branch' ).
    check_suite-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    check_suite-status = mo_json->value_string( iv_prefix && '/status' ).
    check_suite-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    check_suite-url = mo_json->value_string( iv_prefix && '/url' ).
    check_suite-before = mo_json->value_string( iv_prefix && '/before' ).
    check_suite-after = mo_json->value_string( iv_prefix && '/after' ).
* todo, array, pull_requests
    check_suite-app = parse_nullable_integration( iv_prefix && '/app' ).
    check_suite-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    check_suite-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    check_suite-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    check_suite-head_commit = parse_simple_commit( iv_prefix && '/head_commit' ).
    check_suite-latest_check_runs_count = mo_json->value_string( iv_prefix && '/latest_check_runs_count' ).
    check_suite-check_runs_url = mo_json->value_string( iv_prefix && '/check_runs_url' ).
    check_suite-rerequestable = mo_json->value_boolean( iv_prefix && '/rerequestable' ).
    check_suite-runs_rerequestable = mo_json->value_boolean( iv_prefix && '/runs_rerequestable' ).
  ENDMETHOD.

  METHOD parse_check_suite_preference.
* todo, array, auto_trigger_checks
    check_suite_preference-repository = parse_minimal_repository( iv_prefix && '/repository' ).
  ENDMETHOD.

  METHOD parse_code_scanning_alert_ru01.
    code_scanning_alert_rule_summa-id = mo_json->value_string( iv_prefix && '/id' ).
    code_scanning_alert_rule_summa-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, tags
    code_scanning_alert_rule_summa-severity = mo_json->value_string( iv_prefix && '/severity' ).
    code_scanning_alert_rule_summa-description = mo_json->value_string( iv_prefix && '/description' ).
  ENDMETHOD.

  METHOD parse_code_scanning_alert_item.
    code_scanning_alert_items-number = parse_alert_number( iv_prefix && '/number' ).
    code_scanning_alert_items-created_at = parse_alert_created_at( iv_prefix && '/created_at' ).
    code_scanning_alert_items-updated_at = parse_alert_updated_at( iv_prefix && '/updated_at' ).
    code_scanning_alert_items-url = parse_alert_url( iv_prefix && '/url' ).
    code_scanning_alert_items-html_url = parse_alert_html_url( iv_prefix && '/html_url' ).
    code_scanning_alert_items-instances_url = parse_alert_instances_url( iv_prefix && '/instances_url' ).
    code_scanning_alert_items-state = parse_code_scanning_alert_stat( iv_prefix && '/state' ).
    code_scanning_alert_items-fixed_at = parse_code_scanning_alert_fixe( iv_prefix && '/fixed_at' ).
    code_scanning_alert_items-dismissed_by = parse_nullable_simple_user( iv_prefix && '/dismissed_by' ).
    code_scanning_alert_items-dismissed_at = parse_code_scanning_alert_dism( iv_prefix && '/dismissed_at' ).
    code_scanning_alert_items-dismissed_reason = parse_code_scanning_alert_di01( iv_prefix && '/dismissed_reason' ).
    code_scanning_alert_items-rule = parse_code_scanning_alert_ru01( iv_prefix && '/rule' ).
    code_scanning_alert_items-tool = parse_code_scanning_analysis03( iv_prefix && '/tool' ).
    code_scanning_alert_items-most_recent_instance = parse_code_scanning_alert_inst( iv_prefix && '/most_recent_instance' ).
  ENDMETHOD.

  METHOD parse_code_scanning_alert.
    code_scanning_alert-number = parse_alert_number( iv_prefix && '/number' ).
    code_scanning_alert-created_at = parse_alert_created_at( iv_prefix && '/created_at' ).
    code_scanning_alert-updated_at = parse_alert_updated_at( iv_prefix && '/updated_at' ).
    code_scanning_alert-url = parse_alert_url( iv_prefix && '/url' ).
    code_scanning_alert-html_url = parse_alert_html_url( iv_prefix && '/html_url' ).
    code_scanning_alert-instances_url = parse_alert_instances_url( iv_prefix && '/instances_url' ).
    code_scanning_alert-state = parse_code_scanning_alert_stat( iv_prefix && '/state' ).
    code_scanning_alert-fixed_at = parse_code_scanning_alert_fixe( iv_prefix && '/fixed_at' ).
    code_scanning_alert-dismissed_by = parse_nullable_simple_user( iv_prefix && '/dismissed_by' ).
    code_scanning_alert-dismissed_at = parse_code_scanning_alert_dism( iv_prefix && '/dismissed_at' ).
    code_scanning_alert-dismissed_reason = parse_code_scanning_alert_di01( iv_prefix && '/dismissed_reason' ).
    code_scanning_alert-rule = parse_code_scanning_alert_rule( iv_prefix && '/rule' ).
    code_scanning_alert-tool = parse_code_scanning_analysis03( iv_prefix && '/tool' ).
    code_scanning_alert-most_recent_instance = parse_code_scanning_alert_inst( iv_prefix && '/most_recent_instance' ).
  ENDMETHOD.

  METHOD parse_code_scanning_alert_set_.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_s.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis04.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_e.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis05.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_u.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis.
    code_scanning_analysis-ref = parse_code_scanning_ref( iv_prefix && '/ref' ).
    code_scanning_analysis-commit_sha = parse_code_scanning_analysis04( iv_prefix && '/commit_sha' ).
    code_scanning_analysis-analysis_key = parse_code_scanning_analysis_a( iv_prefix && '/analysis_key' ).
    code_scanning_analysis-environment = parse_code_scanning_analysis_e( iv_prefix && '/environment' ).
    code_scanning_analysis-category = parse_code_scanning_analysis_c( iv_prefix && '/category' ).
    code_scanning_analysis-error = mo_json->value_string( iv_prefix && '/error' ).
    code_scanning_analysis-created_at = parse_code_scanning_analysis05( iv_prefix && '/created_at' ).
    code_scanning_analysis-results_count = mo_json->value_string( iv_prefix && '/results_count' ).
    code_scanning_analysis-rules_count = mo_json->value_string( iv_prefix && '/rules_count' ).
    code_scanning_analysis-id = mo_json->value_string( iv_prefix && '/id' ).
    code_scanning_analysis-url = parse_code_scanning_analysis_u( iv_prefix && '/url' ).
    code_scanning_analysis-sarif_id = parse_code_scanning_analysis_s( iv_prefix && '/sarif_id' ).
    code_scanning_analysis-tool = parse_code_scanning_analysis03( iv_prefix && '/tool' ).
    code_scanning_analysis-deletable = mo_json->value_boolean( iv_prefix && '/deletable' ).
    code_scanning_analysis-warning = mo_json->value_string( iv_prefix && '/warning' ).
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_d.
    code_scanning_analysis_deletio-next_analysis_url = mo_json->value_string( iv_prefix && '/next_analysis_url' ).
    code_scanning_analysis_deletio-confirm_delete_url = mo_json->value_string( iv_prefix && '/confirm_delete_url' ).
  ENDMETHOD.

  METHOD parse_code_scanning_analysis06.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_sarifs_rec.
    code_scanning_sarifs_receipt-id = parse_code_scanning_analysis_s( iv_prefix && '/id' ).
    code_scanning_sarifs_receipt-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_code_scanning_sarifs_sta.
    code_scanning_sarifs_status-processing_status = mo_json->value_string( iv_prefix && '/processing_status' ).
    code_scanning_sarifs_status-analyses_url = mo_json->value_string( iv_prefix && '/analyses_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_codeowners_errors.
* todo, array, errors
  ENDMETHOD.

  METHOD parse_nullable_codespace_machi.
    nullable_codespace_machine-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_codespace_machine-display_name = mo_json->value_string( iv_prefix && '/display_name' ).
    nullable_codespace_machine-operating_system = mo_json->value_string( iv_prefix && '/operating_system' ).
    nullable_codespace_machine-storage_in_bytes = mo_json->value_string( iv_prefix && '/storage_in_bytes' ).
    nullable_codespace_machine-memory_in_bytes = mo_json->value_string( iv_prefix && '/memory_in_bytes' ).
    nullable_codespace_machine-cpus = mo_json->value_string( iv_prefix && '/cpus' ).
    nullable_codespace_machine-prebuild_availability = mo_json->value_string( iv_prefix && '/prebuild_availability' ).
  ENDMETHOD.

  METHOD parse_codespace.
    codespace-id = mo_json->value_string( iv_prefix && '/id' ).
    codespace-name = mo_json->value_string( iv_prefix && '/name' ).
    codespace-display_name = mo_json->value_string( iv_prefix && '/display_name' ).
    codespace-environment_id = mo_json->value_string( iv_prefix && '/environment_id' ).
    codespace-owner = parse_simple_user( iv_prefix && '/owner' ).
    codespace-billable_owner = parse_simple_user( iv_prefix && '/billable_owner' ).
    codespace-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    codespace-machine = parse_nullable_codespace_machi( iv_prefix && '/machine' ).
    codespace-prebuild = mo_json->value_boolean( iv_prefix && '/prebuild' ).
    codespace-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    codespace-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    codespace-last_used_at = mo_json->value_string( iv_prefix && '/last_used_at' ).
    codespace-state = mo_json->value_string( iv_prefix && '/state' ).
    codespace-url = mo_json->value_string( iv_prefix && '/url' ).
    codespace-git_status-ahead = mo_json->value_string( iv_prefix && '/git_status/ahead' ).
    codespace-git_status-behind = mo_json->value_string( iv_prefix && '/git_status/behind' ).
    codespace-git_status-has_unpushed_changes = mo_json->value_boolean( iv_prefix && '/git_status/has_unpushed_changes' ).
    codespace-git_status-has_uncommitted_changes = mo_json->value_boolean( iv_prefix && '/git_status/has_uncommitted_changes' ).
    codespace-git_status-ref = mo_json->value_string( iv_prefix && '/git_status/ref' ).
    codespace-location = mo_json->value_string( iv_prefix && '/location' ).
    codespace-idle_timeout_minutes = mo_json->value_string( iv_prefix && '/idle_timeout_minutes' ).
    codespace-web_url = mo_json->value_string( iv_prefix && '/web_url' ).
    codespace-machines_url = mo_json->value_string( iv_prefix && '/machines_url' ).
    codespace-start_url = mo_json->value_string( iv_prefix && '/start_url' ).
    codespace-stop_url = mo_json->value_string( iv_prefix && '/stop_url' ).
    codespace-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
* todo, array, recent_folders
* todo, array, allowed_port_privacy_settings
  ENDMETHOD.

  METHOD parse_codespace_machine.
    codespace_machine-name = mo_json->value_string( iv_prefix && '/name' ).
    codespace_machine-display_name = mo_json->value_string( iv_prefix && '/display_name' ).
    codespace_machine-operating_system = mo_json->value_string( iv_prefix && '/operating_system' ).
    codespace_machine-storage_in_bytes = mo_json->value_string( iv_prefix && '/storage_in_bytes' ).
    codespace_machine-memory_in_bytes = mo_json->value_string( iv_prefix && '/memory_in_bytes' ).
    codespace_machine-cpus = mo_json->value_string( iv_prefix && '/cpus' ).
    codespace_machine-prebuild_availability = mo_json->value_string( iv_prefix && '/prebuild_availability' ).
  ENDMETHOD.

  METHOD parse_collaborator.
    collaborator-login = mo_json->value_string( iv_prefix && '/login' ).
    collaborator-id = mo_json->value_string( iv_prefix && '/id' ).
    collaborator-email = mo_json->value_string( iv_prefix && '/email' ).
    collaborator-name = mo_json->value_string( iv_prefix && '/name' ).
    collaborator-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    collaborator-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    collaborator-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    collaborator-url = mo_json->value_string( iv_prefix && '/url' ).
    collaborator-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    collaborator-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    collaborator-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    collaborator-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    collaborator-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    collaborator-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    collaborator-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    collaborator-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    collaborator-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    collaborator-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    collaborator-type = mo_json->value_string( iv_prefix && '/type' ).
    collaborator-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    collaborator-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    collaborator-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    collaborator-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    collaborator-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    collaborator-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    collaborator-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
  ENDMETHOD.

  METHOD parse_repository_invitation.
    repository_invitation-id = mo_json->value_string( iv_prefix && '/id' ).
    repository_invitation-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    repository_invitation-invitee = parse_nullable_simple_user( iv_prefix && '/invitee' ).
    repository_invitation-inviter = parse_nullable_simple_user( iv_prefix && '/inviter' ).
    repository_invitation-permissions = mo_json->value_string( iv_prefix && '/permissions' ).
    repository_invitation-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository_invitation-expired = mo_json->value_boolean( iv_prefix && '/expired' ).
    repository_invitation-url = mo_json->value_string( iv_prefix && '/url' ).
    repository_invitation-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repository_invitation-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
  ENDMETHOD.

  METHOD parse_nullable_collaborator.
    nullable_collaborator-login = mo_json->value_string( iv_prefix && '/login' ).
    nullable_collaborator-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_collaborator-email = mo_json->value_string( iv_prefix && '/email' ).
    nullable_collaborator-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_collaborator-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_collaborator-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    nullable_collaborator-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    nullable_collaborator-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_collaborator-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_collaborator-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    nullable_collaborator-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    nullable_collaborator-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    nullable_collaborator-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    nullable_collaborator-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    nullable_collaborator-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    nullable_collaborator-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    nullable_collaborator-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    nullable_collaborator-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    nullable_collaborator-type = mo_json->value_string( iv_prefix && '/type' ).
    nullable_collaborator-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    nullable_collaborator-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    nullable_collaborator-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    nullable_collaborator-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    nullable_collaborator-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    nullable_collaborator-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    nullable_collaborator-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
  ENDMETHOD.

  METHOD parse_repository_collaborator_.
    repository_collaborator_permis-permission = mo_json->value_string( iv_prefix && '/permission' ).
    repository_collaborator_permis-role_name = mo_json->value_string( iv_prefix && '/role_name' ).
    repository_collaborator_permis-user = parse_nullable_collaborator( iv_prefix && '/user' ).
  ENDMETHOD.

  METHOD parse_commit_comment.
    commit_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    commit_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    commit_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    commit_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    commit_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    commit_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    commit_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    commit_comment-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    commit_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    commit_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    commit_comment-author_association = parse_author_association( iv_prefix && '/author_association' ).
    commit_comment-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_branch_short.
    branch_short-name = mo_json->value_string( iv_prefix && '/name' ).
    branch_short-commit-sha = mo_json->value_string( iv_prefix && '/commit/sha' ).
    branch_short-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    branch_short-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
  ENDMETHOD.

  METHOD parse_link.
    link-href = mo_json->value_string( iv_prefix && '/href' ).
  ENDMETHOD.

  METHOD parse_auto_merge.
    auto_merge-enabled_by = parse_simple_user( iv_prefix && '/enabled_by' ).
    auto_merge-merge_method = mo_json->value_string( iv_prefix && '/merge_method' ).
    auto_merge-commit_title = mo_json->value_string( iv_prefix && '/commit_title' ).
    auto_merge-commit_message = mo_json->value_string( iv_prefix && '/commit_message' ).
  ENDMETHOD.

  METHOD parse_pull_request_simple.
    pull_request_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_simple-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    pull_request_simple-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
    pull_request_simple-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    pull_request_simple-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    pull_request_simple-review_comments_url = mo_json->value_string( iv_prefix && '/review_comments_url' ).
    pull_request_simple-review_comment_url = mo_json->value_string( iv_prefix && '/review_comment_url' ).
    pull_request_simple-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    pull_request_simple-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    pull_request_simple-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request_simple-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request_simple-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    pull_request_simple-title = mo_json->value_string( iv_prefix && '/title' ).
    pull_request_simple-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    pull_request_simple-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, array, labels
    pull_request_simple-milestone = parse_nullable_milestone( iv_prefix && '/milestone' ).
    pull_request_simple-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    pull_request_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request_simple-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    pull_request_simple-merged_at = mo_json->value_string( iv_prefix && '/merged_at' ).
    pull_request_simple-merge_commit_sha = mo_json->value_string( iv_prefix && '/merge_commit_sha' ).
    pull_request_simple-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
* todo, array, assignees
* todo, array, requested_reviewers
* todo, array, requested_teams
    pull_request_simple-head-label = mo_json->value_string( iv_prefix && '/head/label' ).
    pull_request_simple-head-ref = mo_json->value_string( iv_prefix && '/head/ref' ).
    pull_request_simple-head-repo = parse_repository( iv_prefix && '/head/repo' ).
    pull_request_simple-head-sha = mo_json->value_string( iv_prefix && '/head/sha' ).
    pull_request_simple-head-user = parse_nullable_simple_user( iv_prefix && '/head/user' ).
    pull_request_simple-base-label = mo_json->value_string( iv_prefix && '/base/label' ).
    pull_request_simple-base-ref = mo_json->value_string( iv_prefix && '/base/ref' ).
    pull_request_simple-base-repo = parse_repository( iv_prefix && '/base/repo' ).
    pull_request_simple-base-sha = mo_json->value_string( iv_prefix && '/base/sha' ).
    pull_request_simple-base-user = parse_nullable_simple_user( iv_prefix && '/base/user' ).
    pull_request_simple-_links-comments = parse_link( iv_prefix && '/_links/comments' ).
    pull_request_simple-_links-commits = parse_link( iv_prefix && '/_links/commits' ).
    pull_request_simple-_links-statuses = parse_link( iv_prefix && '/_links/statuses' ).
    pull_request_simple-_links-html = parse_link( iv_prefix && '/_links/html' ).
    pull_request_simple-_links-issue = parse_link( iv_prefix && '/_links/issue' ).
    pull_request_simple-_links-review_comments = parse_link( iv_prefix && '/_links/review_comments' ).
    pull_request_simple-_links-review_comment = parse_link( iv_prefix && '/_links/review_comment' ).
    pull_request_simple-_links-self = parse_link( iv_prefix && '/_links/self' ).
    pull_request_simple-author_association = parse_author_association( iv_prefix && '/author_association' ).
    pull_request_simple-auto_merge = parse_auto_merge( iv_prefix && '/auto_merge' ).
    pull_request_simple-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
  ENDMETHOD.

  METHOD parse_simple_commit_status.
    simple_commit_status-description = mo_json->value_string( iv_prefix && '/description' ).
    simple_commit_status-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_commit_status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    simple_commit_status-state = mo_json->value_string( iv_prefix && '/state' ).
    simple_commit_status-context = mo_json->value_string( iv_prefix && '/context' ).
    simple_commit_status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    simple_commit_status-required = mo_json->value_boolean( iv_prefix && '/required' ).
    simple_commit_status-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    simple_commit_status-url = mo_json->value_string( iv_prefix && '/url' ).
    simple_commit_status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    simple_commit_status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_combined_commit_status.
    combined_commit_status-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, array, statuses
    combined_commit_status-sha = mo_json->value_string( iv_prefix && '/sha' ).
    combined_commit_status-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    combined_commit_status-repository = parse_minimal_repository( iv_prefix && '/repository' ).
    combined_commit_status-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    combined_commit_status-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_status.
    status-url = mo_json->value_string( iv_prefix && '/url' ).
    status-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    status-id = mo_json->value_string( iv_prefix && '/id' ).
    status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    status-state = mo_json->value_string( iv_prefix && '/state' ).
    status-description = mo_json->value_string( iv_prefix && '/description' ).
    status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    status-context = mo_json->value_string( iv_prefix && '/context' ).
    status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    status-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
  ENDMETHOD.

  METHOD parse_nullable_code_of_conduct.
    nullable_code_of_conduct_simpl-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_code_of_conduct_simpl-key = mo_json->value_string( iv_prefix && '/key' ).
    nullable_code_of_conduct_simpl-name = mo_json->value_string( iv_prefix && '/name' ).
    nullable_code_of_conduct_simpl-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_nullable_community_healt.
    nullable_community_health_file-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_community_health_file-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_community_profile.
    community_profile-health_percentage = mo_json->value_string( iv_prefix && '/health_percentage' ).
    community_profile-description = mo_json->value_string( iv_prefix && '/description' ).
    community_profile-documentation = mo_json->value_string( iv_prefix && '/documentation' ).
    community_profile-files-code_of_conduct = parse_nullable_code_of_conduct( iv_prefix && '/files/code_of_conduct' ).
    community_profile-files-code_of_conduct_file = parse_nullable_community_healt( iv_prefix && '/files/code_of_conduct_file' ).
    community_profile-files-license = parse_nullable_license_simple( iv_prefix && '/files/license' ).
    community_profile-files-contributing = parse_nullable_community_healt( iv_prefix && '/files/contributing' ).
    community_profile-files-readme = parse_nullable_community_healt( iv_prefix && '/files/readme' ).
    community_profile-files-issue_template = parse_nullable_community_healt( iv_prefix && '/files/issue_template' ).
    community_profile-files-pull_request_template = parse_nullable_community_healt( iv_prefix && '/files/pull_request_template' ).
    community_profile-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    community_profile-content_reports_enabled = mo_json->value_boolean( iv_prefix && '/content_reports_enabled' ).
  ENDMETHOD.

  METHOD parse_commit_comparison.
    commit_comparison-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_comparison-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_comparison-permalink_url = mo_json->value_string( iv_prefix && '/permalink_url' ).
    commit_comparison-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    commit_comparison-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
    commit_comparison-base_commit = parse_commit( iv_prefix && '/base_commit' ).
    commit_comparison-merge_base_commit = parse_commit( iv_prefix && '/merge_base_commit' ).
    commit_comparison-status = mo_json->value_string( iv_prefix && '/status' ).
    commit_comparison-ahead_by = mo_json->value_string( iv_prefix && '/ahead_by' ).
    commit_comparison-behind_by = mo_json->value_string( iv_prefix && '/behind_by' ).
    commit_comparison-total_commits = mo_json->value_string( iv_prefix && '/total_commits' ).
* todo, array, commits
* todo, array, files
  ENDMETHOD.

  METHOD parse_content_tree.
    content_tree-type = mo_json->value_string( iv_prefix && '/type' ).
    content_tree-size = mo_json->value_string( iv_prefix && '/size' ).
    content_tree-name = mo_json->value_string( iv_prefix && '/name' ).
    content_tree-path = mo_json->value_string( iv_prefix && '/path' ).
    content_tree-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_tree-url = mo_json->value_string( iv_prefix && '/url' ).
    content_tree-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_tree-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_tree-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
* todo, array, entries
    content_tree-_links-git = mo_json->value_string( iv_prefix && '/_links/git' ).
    content_tree-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    content_tree-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
  ENDMETHOD.

  METHOD parse_content_directory.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_content_file.
    content_file-type = mo_json->value_string( iv_prefix && '/type' ).
    content_file-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
    content_file-size = mo_json->value_string( iv_prefix && '/size' ).
    content_file-name = mo_json->value_string( iv_prefix && '/name' ).
    content_file-path = mo_json->value_string( iv_prefix && '/path' ).
    content_file-content = mo_json->value_string( iv_prefix && '/content' ).
    content_file-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_file-url = mo_json->value_string( iv_prefix && '/url' ).
    content_file-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_file-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_file-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    content_file-_links-git = mo_json->value_string( iv_prefix && '/_links/git' ).
    content_file-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    content_file-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
    content_file-target = mo_json->value_string( iv_prefix && '/target' ).
    content_file-submodule_git_url = mo_json->value_string( iv_prefix && '/submodule_git_url' ).
  ENDMETHOD.

  METHOD parse_content_symlink.
    content_symlink-type = mo_json->value_string( iv_prefix && '/type' ).
    content_symlink-target = mo_json->value_string( iv_prefix && '/target' ).
    content_symlink-size = mo_json->value_string( iv_prefix && '/size' ).
    content_symlink-name = mo_json->value_string( iv_prefix && '/name' ).
    content_symlink-path = mo_json->value_string( iv_prefix && '/path' ).
    content_symlink-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_symlink-url = mo_json->value_string( iv_prefix && '/url' ).
    content_symlink-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_symlink-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_symlink-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    content_symlink-_links-git = mo_json->value_string( iv_prefix && '/_links/git' ).
    content_symlink-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    content_symlink-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
  ENDMETHOD.

  METHOD parse_content_submodule.
    content_submodule-type = mo_json->value_string( iv_prefix && '/type' ).
    content_submodule-submodule_git_url = mo_json->value_string( iv_prefix && '/submodule_git_url' ).
    content_submodule-size = mo_json->value_string( iv_prefix && '/size' ).
    content_submodule-name = mo_json->value_string( iv_prefix && '/name' ).
    content_submodule-path = mo_json->value_string( iv_prefix && '/path' ).
    content_submodule-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_submodule-url = mo_json->value_string( iv_prefix && '/url' ).
    content_submodule-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_submodule-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_submodule-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    content_submodule-_links-git = mo_json->value_string( iv_prefix && '/_links/git' ).
    content_submodule-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    content_submodule-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
  ENDMETHOD.

  METHOD parse_file_commit.
    file_commit-content-name = mo_json->value_string( iv_prefix && '/content/name' ).
    file_commit-content-path = mo_json->value_string( iv_prefix && '/content/path' ).
    file_commit-content-sha = mo_json->value_string( iv_prefix && '/content/sha' ).
    file_commit-content-size = mo_json->value_string( iv_prefix && '/content/size' ).
    file_commit-content-url = mo_json->value_string( iv_prefix && '/content/url' ).
    file_commit-content-html_url = mo_json->value_string( iv_prefix && '/content/html_url' ).
    file_commit-content-git_url = mo_json->value_string( iv_prefix && '/content/git_url' ).
    file_commit-content-download_url = mo_json->value_string( iv_prefix && '/content/download_url' ).
    file_commit-content-type = mo_json->value_string( iv_prefix && '/content/type' ).
    file_commit-content-_links-self = mo_json->value_string( iv_prefix && '/content/_links/self' ).
    file_commit-content-_links-git = mo_json->value_string( iv_prefix && '/content/_links/git' ).
    file_commit-content-_links-html = mo_json->value_string( iv_prefix && '/content/_links/html' ).
    file_commit-commit-sha = mo_json->value_string( iv_prefix && '/commit/sha' ).
    file_commit-commit-node_id = mo_json->value_string( iv_prefix && '/commit/node_id' ).
    file_commit-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    file_commit-commit-html_url = mo_json->value_string( iv_prefix && '/commit/html_url' ).
    file_commit-commit-author-date = mo_json->value_string( iv_prefix && '/commit/author/date' ).
    file_commit-commit-author-name = mo_json->value_string( iv_prefix && '/commit/author/name' ).
    file_commit-commit-author-email = mo_json->value_string( iv_prefix && '/commit/author/email' ).
    file_commit-commit-committer-date = mo_json->value_string( iv_prefix && '/commit/committer/date' ).
    file_commit-commit-committer-name = mo_json->value_string( iv_prefix && '/commit/committer/name' ).
    file_commit-commit-committer-email = mo_json->value_string( iv_prefix && '/commit/committer/email' ).
    file_commit-commit-message = mo_json->value_string( iv_prefix && '/commit/message' ).
    file_commit-commit-tree-url = mo_json->value_string( iv_prefix && '/commit/tree/url' ).
    file_commit-commit-tree-sha = mo_json->value_string( iv_prefix && '/commit/tree/sha' ).
* todo, array, parents
    file_commit-commit-verification-verified = mo_json->value_boolean( iv_prefix && '/commit/verification/verified' ).
    file_commit-commit-verification-reason = mo_json->value_string( iv_prefix && '/commit/verification/reason' ).
    file_commit-commit-verification-signature = mo_json->value_string( iv_prefix && '/commit/verification/signature' ).
    file_commit-commit-verification-payload = mo_json->value_string( iv_prefix && '/commit/verification/payload' ).
  ENDMETHOD.

  METHOD parse_contributor.
    contributor-login = mo_json->value_string( iv_prefix && '/login' ).
    contributor-id = mo_json->value_string( iv_prefix && '/id' ).
    contributor-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    contributor-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    contributor-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    contributor-url = mo_json->value_string( iv_prefix && '/url' ).
    contributor-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    contributor-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    contributor-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    contributor-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    contributor-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    contributor-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    contributor-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    contributor-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    contributor-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    contributor-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    contributor-type = mo_json->value_string( iv_prefix && '/type' ).
    contributor-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    contributor-contributions = mo_json->value_string( iv_prefix && '/contributions' ).
    contributor-email = mo_json->value_string( iv_prefix && '/email' ).
    contributor-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_dependabot_secret.
    dependabot_secret-name = mo_json->value_string( iv_prefix && '/name' ).
    dependabot_secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    dependabot_secret-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_deployment_status.
    deployment_status-url = mo_json->value_string( iv_prefix && '/url' ).
    deployment_status-id = mo_json->value_string( iv_prefix && '/id' ).
    deployment_status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    deployment_status-state = mo_json->value_string( iv_prefix && '/state' ).
    deployment_status-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    deployment_status-description = mo_json->value_string( iv_prefix && '/description' ).
    deployment_status-environment = mo_json->value_string( iv_prefix && '/environment' ).
    deployment_status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    deployment_status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deployment_status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    deployment_status-deployment_url = mo_json->value_string( iv_prefix && '/deployment_url' ).
    deployment_status-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    deployment_status-environment_url = mo_json->value_string( iv_prefix && '/environment_url' ).
    deployment_status-log_url = mo_json->value_string( iv_prefix && '/log_url' ).
    deployment_status-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
  ENDMETHOD.

  METHOD parse_wait_timer.
    wait_timer = mo_json->value_integer( iv_prefix && '/' ).
  ENDMETHOD.

  METHOD parse_deployment_branch_policy.
    deployment_branch_policy-protected_branches = mo_json->value_boolean( iv_prefix && '/protected_branches' ).
    deployment_branch_policy-custom_branch_policies = mo_json->value_boolean( iv_prefix && '/custom_branch_policies' ).
  ENDMETHOD.

  METHOD parse_environment.
    environment-id = mo_json->value_string( iv_prefix && '/id' ).
    environment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    environment-name = mo_json->value_string( iv_prefix && '/name' ).
    environment-url = mo_json->value_string( iv_prefix && '/url' ).
    environment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    environment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    environment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, array, protection_rules
    environment-deployment_branch_policy = parse_deployment_branch_policy( iv_prefix && '/deployment_branch_policy' ).
  ENDMETHOD.

  METHOD parse_short_blob.
    short_blob-url = mo_json->value_string( iv_prefix && '/url' ).
    short_blob-sha = mo_json->value_string( iv_prefix && '/sha' ).
  ENDMETHOD.

  METHOD parse_blob.
    blob-content = mo_json->value_string( iv_prefix && '/content' ).
    blob-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
    blob-url = mo_json->value_string( iv_prefix && '/url' ).
    blob-sha = mo_json->value_string( iv_prefix && '/sha' ).
    blob-size = mo_json->value_string( iv_prefix && '/size' ).
    blob-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    blob-highlighted_content = mo_json->value_string( iv_prefix && '/highlighted_content' ).
  ENDMETHOD.

  METHOD parse_git_commit.
    git_commit-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_commit-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_commit-url = mo_json->value_string( iv_prefix && '/url' ).
    git_commit-author-date = mo_json->value_string( iv_prefix && '/author/date' ).
    git_commit-author-email = mo_json->value_string( iv_prefix && '/author/email' ).
    git_commit-author-name = mo_json->value_string( iv_prefix && '/author/name' ).
    git_commit-committer-date = mo_json->value_string( iv_prefix && '/committer/date' ).
    git_commit-committer-email = mo_json->value_string( iv_prefix && '/committer/email' ).
    git_commit-committer-name = mo_json->value_string( iv_prefix && '/committer/name' ).
    git_commit-message = mo_json->value_string( iv_prefix && '/message' ).
    git_commit-tree-sha = mo_json->value_string( iv_prefix && '/tree/sha' ).
    git_commit-tree-url = mo_json->value_string( iv_prefix && '/tree/url' ).
* todo, array, parents
    git_commit-verification-verified = mo_json->value_boolean( iv_prefix && '/verification/verified' ).
    git_commit-verification-reason = mo_json->value_string( iv_prefix && '/verification/reason' ).
    git_commit-verification-signature = mo_json->value_string( iv_prefix && '/verification/signature' ).
    git_commit-verification-payload = mo_json->value_string( iv_prefix && '/verification/payload' ).
    git_commit-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_git_ref.
    git_ref-ref = mo_json->value_string( iv_prefix && '/ref' ).
    git_ref-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_ref-url = mo_json->value_string( iv_prefix && '/url' ).
    git_ref-object-type = mo_json->value_string( iv_prefix && '/object/type' ).
    git_ref-object-sha = mo_json->value_string( iv_prefix && '/object/sha' ).
    git_ref-object-url = mo_json->value_string( iv_prefix && '/object/url' ).
  ENDMETHOD.

  METHOD parse_git_tag.
    git_tag-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_tag-tag = mo_json->value_string( iv_prefix && '/tag' ).
    git_tag-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_tag-url = mo_json->value_string( iv_prefix && '/url' ).
    git_tag-message = mo_json->value_string( iv_prefix && '/message' ).
    git_tag-tagger-date = mo_json->value_string( iv_prefix && '/tagger/date' ).
    git_tag-tagger-email = mo_json->value_string( iv_prefix && '/tagger/email' ).
    git_tag-tagger-name = mo_json->value_string( iv_prefix && '/tagger/name' ).
    git_tag-object-sha = mo_json->value_string( iv_prefix && '/object/sha' ).
    git_tag-object-type = mo_json->value_string( iv_prefix && '/object/type' ).
    git_tag-object-url = mo_json->value_string( iv_prefix && '/object/url' ).
    git_tag-verification = parse_verification( iv_prefix && '/verification' ).
  ENDMETHOD.

  METHOD parse_git_tree.
    git_tree-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_tree-url = mo_json->value_string( iv_prefix && '/url' ).
    git_tree-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
* todo, array, tree
  ENDMETHOD.

  METHOD parse_hook_response.
    hook_response-code = mo_json->value_string( iv_prefix && '/code' ).
    hook_response-status = mo_json->value_string( iv_prefix && '/status' ).
    hook_response-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_hook.
    hook-type = mo_json->value_string( iv_prefix && '/type' ).
    hook-id = mo_json->value_string( iv_prefix && '/id' ).
    hook-name = mo_json->value_string( iv_prefix && '/name' ).
    hook-active = mo_json->value_boolean( iv_prefix && '/active' ).
* todo, array, events
    hook-config-email = mo_json->value_string( iv_prefix && '/config/email' ).
    hook-config-password = mo_json->value_string( iv_prefix && '/config/password' ).
    hook-config-room = mo_json->value_string( iv_prefix && '/config/room' ).
    hook-config-subdomain = mo_json->value_string( iv_prefix && '/config/subdomain' ).
    hook-config-url = parse_webhook_config_url( iv_prefix && '/config/url' ).
    hook-config-insecure_ssl = parse_webhook_config_insecure_( iv_prefix && '/config/insecure_ssl' ).
    hook-config-content_type = parse_webhook_config_content_t( iv_prefix && '/config/content_type' ).
    hook-config-digest = mo_json->value_string( iv_prefix && '/config/digest' ).
    hook-config-secret = parse_webhook_config_secret( iv_prefix && '/config/secret' ).
    hook-config-token = mo_json->value_string( iv_prefix && '/config/token' ).
    hook-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    hook-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    hook-url = mo_json->value_string( iv_prefix && '/url' ).
    hook-test_url = mo_json->value_string( iv_prefix && '/test_url' ).
    hook-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
    hook-deliveries_url = mo_json->value_string( iv_prefix && '/deliveries_url' ).
    hook-last_response = parse_hook_response( iv_prefix && '/last_response' ).
  ENDMETHOD.

  METHOD parse_import.
    import-vcs = mo_json->value_string( iv_prefix && '/vcs' ).
    import-use_lfs = mo_json->value_boolean( iv_prefix && '/use_lfs' ).
    import-vcs_url = mo_json->value_string( iv_prefix && '/vcs_url' ).
    import-svc_root = mo_json->value_string( iv_prefix && '/svc_root' ).
    import-tfvc_project = mo_json->value_string( iv_prefix && '/tfvc_project' ).
    import-status = mo_json->value_string( iv_prefix && '/status' ).
    import-status_text = mo_json->value_string( iv_prefix && '/status_text' ).
    import-failed_step = mo_json->value_string( iv_prefix && '/failed_step' ).
    import-error_message = mo_json->value_string( iv_prefix && '/error_message' ).
    import-import_percent = mo_json->value_string( iv_prefix && '/import_percent' ).
    import-commit_count = mo_json->value_string( iv_prefix && '/commit_count' ).
    import-push_percent = mo_json->value_string( iv_prefix && '/push_percent' ).
    import-has_large_files = mo_json->value_boolean( iv_prefix && '/has_large_files' ).
    import-large_files_size = mo_json->value_string( iv_prefix && '/large_files_size' ).
    import-large_files_count = mo_json->value_string( iv_prefix && '/large_files_count' ).
* todo, array, project_choices
    import-message = mo_json->value_string( iv_prefix && '/message' ).
    import-authors_count = mo_json->value_string( iv_prefix && '/authors_count' ).
    import-url = mo_json->value_string( iv_prefix && '/url' ).
    import-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    import-authors_url = mo_json->value_string( iv_prefix && '/authors_url' ).
    import-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    import-svn_root = mo_json->value_string( iv_prefix && '/svn_root' ).
  ENDMETHOD.

  METHOD parse_porter_author.
    porter_author-id = mo_json->value_string( iv_prefix && '/id' ).
    porter_author-remote_id = mo_json->value_string( iv_prefix && '/remote_id' ).
    porter_author-remote_name = mo_json->value_string( iv_prefix && '/remote_name' ).
    porter_author-email = mo_json->value_string( iv_prefix && '/email' ).
    porter_author-name = mo_json->value_string( iv_prefix && '/name' ).
    porter_author-url = mo_json->value_string( iv_prefix && '/url' ).
    porter_author-import_url = mo_json->value_string( iv_prefix && '/import_url' ).
  ENDMETHOD.

  METHOD parse_porter_large_file.
    porter_large_file-ref_name = mo_json->value_string( iv_prefix && '/ref_name' ).
    porter_large_file-path = mo_json->value_string( iv_prefix && '/path' ).
    porter_large_file-oid = mo_json->value_string( iv_prefix && '/oid' ).
    porter_large_file-size = mo_json->value_string( iv_prefix && '/size' ).
  ENDMETHOD.

  METHOD parse_nullable_issue.
    nullable_issue-id = mo_json->value_string( iv_prefix && '/id' ).
    nullable_issue-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    nullable_issue-url = mo_json->value_string( iv_prefix && '/url' ).
    nullable_issue-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    nullable_issue-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    nullable_issue-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    nullable_issue-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    nullable_issue-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    nullable_issue-number = mo_json->value_string( iv_prefix && '/number' ).
    nullable_issue-state = mo_json->value_string( iv_prefix && '/state' ).
    nullable_issue-title = mo_json->value_string( iv_prefix && '/title' ).
    nullable_issue-body = mo_json->value_string( iv_prefix && '/body' ).
    nullable_issue-user = parse_nullable_simple_user( iv_prefix && '/user' ).
* todo, array, labels
    nullable_issue-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
* todo, array, assignees
    nullable_issue-milestone = parse_nullable_milestone( iv_prefix && '/milestone' ).
    nullable_issue-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    nullable_issue-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    nullable_issue-comments = mo_json->value_string( iv_prefix && '/comments' ).
    nullable_issue-pull_request-merged_at = mo_json->value_string( iv_prefix && '/pull_request/merged_at' ).
    nullable_issue-pull_request-diff_url = mo_json->value_string( iv_prefix && '/pull_request/diff_url' ).
    nullable_issue-pull_request-html_url = mo_json->value_string( iv_prefix && '/pull_request/html_url' ).
    nullable_issue-pull_request-patch_url = mo_json->value_string( iv_prefix && '/pull_request/patch_url' ).
    nullable_issue-pull_request-url = mo_json->value_string( iv_prefix && '/pull_request/url' ).
    nullable_issue-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    nullable_issue-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    nullable_issue-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    nullable_issue-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    nullable_issue-closed_by = parse_nullable_simple_user( iv_prefix && '/closed_by' ).
    nullable_issue-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    nullable_issue-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    nullable_issue-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
    nullable_issue-repository = parse_repository( iv_prefix && '/repository' ).
    nullable_issue-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    nullable_issue-author_association = parse_author_association( iv_prefix && '/author_association' ).
    nullable_issue-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_issue_event_label.
    issue_event_label-name = mo_json->value_string( iv_prefix && '/name' ).
    issue_event_label-color = mo_json->value_string( iv_prefix && '/color' ).
  ENDMETHOD.

  METHOD parse_issue_event_dismissed_re.
    issue_event_dismissed_review-state = mo_json->value_string( iv_prefix && '/state' ).
    issue_event_dismissed_review-review_id = mo_json->value_string( iv_prefix && '/review_id' ).
    issue_event_dismissed_review-dismissal_message = mo_json->value_string( iv_prefix && '/dismissal_message' ).
    issue_event_dismissed_review-dismissal_commit_id = mo_json->value_string( iv_prefix && '/dismissal_commit_id' ).
  ENDMETHOD.

  METHOD parse_issue_event_milestone.
    issue_event_milestone-title = mo_json->value_string( iv_prefix && '/title' ).
  ENDMETHOD.

  METHOD parse_issue_event_project_card.
    issue_event_project_card-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_event_project_card-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_event_project_card-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
    issue_event_project_card-project_id = mo_json->value_string( iv_prefix && '/project_id' ).
    issue_event_project_card-column_name = mo_json->value_string( iv_prefix && '/column_name' ).
    issue_event_project_card-previous_column_name = mo_json->value_string( iv_prefix && '/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_issue_event_rename.
    issue_event_rename-from = mo_json->value_string( iv_prefix && '/from' ).
    issue_event_rename-to = mo_json->value_string( iv_prefix && '/to' ).
  ENDMETHOD.

  METHOD parse_issue_event.
    issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_event-actor = parse_nullable_simple_user( iv_prefix && '/actor' ).
    issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_event-issue = parse_nullable_issue( iv_prefix && '/issue' ).
    issue_event-label = parse_issue_event_label( iv_prefix && '/label' ).
    issue_event-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
    issue_event-assigner = parse_nullable_simple_user( iv_prefix && '/assigner' ).
    issue_event-review_requester = parse_nullable_simple_user( iv_prefix && '/review_requester' ).
    issue_event-requested_reviewer = parse_nullable_simple_user( iv_prefix && '/requested_reviewer' ).
    issue_event-requested_team = parse_team( iv_prefix && '/requested_team' ).
    issue_event-dismissed_review = parse_issue_event_dismissed_re( iv_prefix && '/dismissed_review' ).
    issue_event-milestone = parse_issue_event_milestone( iv_prefix && '/milestone' ).
    issue_event-project_card = parse_issue_event_project_card( iv_prefix && '/project_card' ).
    issue_event-rename = parse_issue_event_rename( iv_prefix && '/rename' ).
    issue_event-author_association = parse_author_association( iv_prefix && '/author_association' ).
    issue_event-lock_reason = mo_json->value_string( iv_prefix && '/lock_reason' ).
    issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
  ENDMETHOD.

  METHOD parse_labeled_issue_event.
    labeled_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    labeled_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    labeled_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    labeled_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    labeled_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    labeled_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    labeled_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    labeled_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    labeled_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    labeled_issue_event-label-name = mo_json->value_string( iv_prefix && '/label/name' ).
    labeled_issue_event-label-color = mo_json->value_string( iv_prefix && '/label/color' ).
  ENDMETHOD.

  METHOD parse_unlabeled_issue_event.
    unlabeled_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    unlabeled_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    unlabeled_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    unlabeled_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    unlabeled_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    unlabeled_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    unlabeled_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    unlabeled_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    unlabeled_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    unlabeled_issue_event-label-name = mo_json->value_string( iv_prefix && '/label/name' ).
    unlabeled_issue_event-label-color = mo_json->value_string( iv_prefix && '/label/color' ).
  ENDMETHOD.

  METHOD parse_assigned_issue_event.
    assigned_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    assigned_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    assigned_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    assigned_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    assigned_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    assigned_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    assigned_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    assigned_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    assigned_issue_event-performed_via_github_app = parse_integration( iv_prefix && '/performed_via_github_app' ).
    assigned_issue_event-assignee = parse_simple_user( iv_prefix && '/assignee' ).
    assigned_issue_event-assigner = parse_simple_user( iv_prefix && '/assigner' ).
  ENDMETHOD.

  METHOD parse_unassigned_issue_event.
    unassigned_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    unassigned_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    unassigned_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    unassigned_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    unassigned_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    unassigned_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    unassigned_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    unassigned_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    unassigned_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    unassigned_issue_event-assignee = parse_simple_user( iv_prefix && '/assignee' ).
    unassigned_issue_event-assigner = parse_simple_user( iv_prefix && '/assigner' ).
  ENDMETHOD.

  METHOD parse_milestoned_issue_event.
    milestoned_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    milestoned_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    milestoned_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    milestoned_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    milestoned_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    milestoned_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    milestoned_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    milestoned_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    milestoned_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    milestoned_issue_event-milestone-title = mo_json->value_string( iv_prefix && '/milestone/title' ).
  ENDMETHOD.

  METHOD parse_demilestoned_issue_event.
    demilestoned_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    demilestoned_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    demilestoned_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    demilestoned_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    demilestoned_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    demilestoned_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    demilestoned_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    demilestoned_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    demilestoned_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    demilestoned_issue_event-milestone-title = mo_json->value_string( iv_prefix && '/milestone/title' ).
  ENDMETHOD.

  METHOD parse_renamed_issue_event.
    renamed_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    renamed_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    renamed_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    renamed_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    renamed_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    renamed_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    renamed_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    renamed_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    renamed_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    renamed_issue_event-rename-from = mo_json->value_string( iv_prefix && '/rename/from' ).
    renamed_issue_event-rename-to = mo_json->value_string( iv_prefix && '/rename/to' ).
  ENDMETHOD.

  METHOD parse_review_requested_issue_e.
    review_requested_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    review_requested_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    review_requested_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    review_requested_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    review_requested_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    review_requested_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    review_requested_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    review_requested_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    review_requested_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    review_requested_issue_event-review_requester = parse_simple_user( iv_prefix && '/review_requester' ).
    review_requested_issue_event-requested_team = parse_team( iv_prefix && '/requested_team' ).
    review_requested_issue_event-requested_reviewer = parse_simple_user( iv_prefix && '/requested_reviewer' ).
  ENDMETHOD.

  METHOD parse_review_request_removed_i.
    review_request_removed_issue_e-id = mo_json->value_string( iv_prefix && '/id' ).
    review_request_removed_issue_e-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    review_request_removed_issue_e-url = mo_json->value_string( iv_prefix && '/url' ).
    review_request_removed_issue_e-actor = parse_simple_user( iv_prefix && '/actor' ).
    review_request_removed_issue_e-event = mo_json->value_string( iv_prefix && '/event' ).
    review_request_removed_issue_e-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    review_request_removed_issue_e-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    review_request_removed_issue_e-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    review_request_removed_issue_e-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    review_request_removed_issue_e-review_requester = parse_simple_user( iv_prefix && '/review_requester' ).
    review_request_removed_issue_e-requested_team = parse_team( iv_prefix && '/requested_team' ).
    review_request_removed_issue_e-requested_reviewer = parse_simple_user( iv_prefix && '/requested_reviewer' ).
  ENDMETHOD.

  METHOD parse_review_dismissed_issue_e.
    review_dismissed_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    review_dismissed_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    review_dismissed_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    review_dismissed_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    review_dismissed_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    review_dismissed_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    review_dismissed_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    review_dismissed_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    review_dismissed_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    review_dismissed_issue_event-dismissed_review-state = mo_json->value_string( iv_prefix && '/dismissed_review/state' ).
    review_dismissed_issue_event-dismissed_review-review_id = mo_json->value_string( iv_prefix && '/dismissed_review/review_id' ).
    review_dismissed_issue_event-dismissed_review-dismissal_message = mo_json->value_string( iv_prefix && '/dismissed_review/dismissal_message' ).
    review_dismissed_issue_event-dismissed_review-dismissal_commit_id = mo_json->value_string( iv_prefix && '/dismissed_review/dismissal_commit_id' ).
  ENDMETHOD.

  METHOD parse_locked_issue_event.
    locked_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    locked_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    locked_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    locked_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    locked_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    locked_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    locked_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    locked_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    locked_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    locked_issue_event-lock_reason = mo_json->value_string( iv_prefix && '/lock_reason' ).
  ENDMETHOD.

  METHOD parse_added_to_project_issue_e.
    added_to_project_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    added_to_project_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    added_to_project_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    added_to_project_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    added_to_project_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    added_to_project_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    added_to_project_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    added_to_project_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    added_to_project_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    added_to_project_issue_event-project_card-id = mo_json->value_string( iv_prefix && '/project_card/id' ).
    added_to_project_issue_event-project_card-url = mo_json->value_string( iv_prefix && '/project_card/url' ).
    added_to_project_issue_event-project_card-project_id = mo_json->value_string( iv_prefix && '/project_card/project_id' ).
    added_to_project_issue_event-project_card-project_url = mo_json->value_string( iv_prefix && '/project_card/project_url' ).
    added_to_project_issue_event-project_card-column_name = mo_json->value_string( iv_prefix && '/project_card/column_name' ).
    added_to_project_issue_event-project_card-previous_column_name = mo_json->value_string( iv_prefix && '/project_card/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_moved_column_in_project_.
    moved_column_in_project_issue_-id = mo_json->value_string( iv_prefix && '/id' ).
    moved_column_in_project_issue_-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    moved_column_in_project_issue_-url = mo_json->value_string( iv_prefix && '/url' ).
    moved_column_in_project_issue_-actor = parse_simple_user( iv_prefix && '/actor' ).
    moved_column_in_project_issue_-event = mo_json->value_string( iv_prefix && '/event' ).
    moved_column_in_project_issue_-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    moved_column_in_project_issue_-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    moved_column_in_project_issue_-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    moved_column_in_project_issue_-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    moved_column_in_project_issue_-project_card-id = mo_json->value_string( iv_prefix && '/project_card/id' ).
    moved_column_in_project_issue_-project_card-url = mo_json->value_string( iv_prefix && '/project_card/url' ).
    moved_column_in_project_issue_-project_card-project_id = mo_json->value_string( iv_prefix && '/project_card/project_id' ).
    moved_column_in_project_issue_-project_card-project_url = mo_json->value_string( iv_prefix && '/project_card/project_url' ).
    moved_column_in_project_issue_-project_card-column_name = mo_json->value_string( iv_prefix && '/project_card/column_name' ).
    moved_column_in_project_issue_-project_card-previous_column_name = mo_json->value_string( iv_prefix && '/project_card/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_removed_from_project_iss.
    removed_from_project_issue_eve-id = mo_json->value_string( iv_prefix && '/id' ).
    removed_from_project_issue_eve-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    removed_from_project_issue_eve-url = mo_json->value_string( iv_prefix && '/url' ).
    removed_from_project_issue_eve-actor = parse_simple_user( iv_prefix && '/actor' ).
    removed_from_project_issue_eve-event = mo_json->value_string( iv_prefix && '/event' ).
    removed_from_project_issue_eve-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    removed_from_project_issue_eve-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    removed_from_project_issue_eve-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    removed_from_project_issue_eve-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    removed_from_project_issue_eve-project_card-id = mo_json->value_string( iv_prefix && '/project_card/id' ).
    removed_from_project_issue_eve-project_card-url = mo_json->value_string( iv_prefix && '/project_card/url' ).
    removed_from_project_issue_eve-project_card-project_id = mo_json->value_string( iv_prefix && '/project_card/project_id' ).
    removed_from_project_issue_eve-project_card-project_url = mo_json->value_string( iv_prefix && '/project_card/project_url' ).
    removed_from_project_issue_eve-project_card-column_name = mo_json->value_string( iv_prefix && '/project_card/column_name' ).
    removed_from_project_issue_eve-project_card-previous_column_name = mo_json->value_string( iv_prefix && '/project_card/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_converted_note_to_issue_.
    converted_note_to_issue_issue_-id = mo_json->value_string( iv_prefix && '/id' ).
    converted_note_to_issue_issue_-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    converted_note_to_issue_issue_-url = mo_json->value_string( iv_prefix && '/url' ).
    converted_note_to_issue_issue_-actor = parse_simple_user( iv_prefix && '/actor' ).
    converted_note_to_issue_issue_-event = mo_json->value_string( iv_prefix && '/event' ).
    converted_note_to_issue_issue_-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    converted_note_to_issue_issue_-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    converted_note_to_issue_issue_-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    converted_note_to_issue_issue_-performed_via_github_app = parse_integration( iv_prefix && '/performed_via_github_app' ).
    converted_note_to_issue_issue_-project_card-id = mo_json->value_string( iv_prefix && '/project_card/id' ).
    converted_note_to_issue_issue_-project_card-url = mo_json->value_string( iv_prefix && '/project_card/url' ).
    converted_note_to_issue_issue_-project_card-project_id = mo_json->value_string( iv_prefix && '/project_card/project_id' ).
    converted_note_to_issue_issue_-project_card-project_url = mo_json->value_string( iv_prefix && '/project_card/project_url' ).
    converted_note_to_issue_issue_-project_card-column_name = mo_json->value_string( iv_prefix && '/project_card/column_name' ).
    converted_note_to_issue_issue_-project_card-previous_column_name = mo_json->value_string( iv_prefix && '/project_card/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_issue_event_for_issue.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_label.
    label-id = mo_json->value_string( iv_prefix && '/id' ).
    label-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    label-url = mo_json->value_string( iv_prefix && '/url' ).
    label-name = mo_json->value_string( iv_prefix && '/name' ).
    label-description = mo_json->value_string( iv_prefix && '/description' ).
    label-color = mo_json->value_string( iv_prefix && '/color' ).
    label-default = mo_json->value_boolean( iv_prefix && '/default' ).
  ENDMETHOD.

  METHOD parse_timeline_comment_event.
    timeline_comment_event-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_comment_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    timeline_comment_event-id = mo_json->value_string( iv_prefix && '/id' ).
    timeline_comment_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_comment_event-url = mo_json->value_string( iv_prefix && '/url' ).
    timeline_comment_event-body = mo_json->value_string( iv_prefix && '/body' ).
    timeline_comment_event-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    timeline_comment_event-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    timeline_comment_event-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    timeline_comment_event-user = parse_simple_user( iv_prefix && '/user' ).
    timeline_comment_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    timeline_comment_event-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    timeline_comment_event-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    timeline_comment_event-author_association = parse_author_association( iv_prefix && '/author_association' ).
    timeline_comment_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    timeline_comment_event-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_timeline_cross_reference.
    timeline_cross_referenced_even-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_cross_referenced_even-actor = parse_simple_user( iv_prefix && '/actor' ).
    timeline_cross_referenced_even-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    timeline_cross_referenced_even-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    timeline_cross_referenced_even-source-type = mo_json->value_string( iv_prefix && '/source/type' ).
    timeline_cross_referenced_even-source-issue = parse_issue( iv_prefix && '/source/issue' ).
  ENDMETHOD.

  METHOD parse_timeline_committed_event.
    timeline_committed_event-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_committed_event-sha = mo_json->value_string( iv_prefix && '/sha' ).
    timeline_committed_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_committed_event-url = mo_json->value_string( iv_prefix && '/url' ).
    timeline_committed_event-author-date = mo_json->value_string( iv_prefix && '/author/date' ).
    timeline_committed_event-author-email = mo_json->value_string( iv_prefix && '/author/email' ).
    timeline_committed_event-author-name = mo_json->value_string( iv_prefix && '/author/name' ).
    timeline_committed_event-committer-date = mo_json->value_string( iv_prefix && '/committer/date' ).
    timeline_committed_event-committer-email = mo_json->value_string( iv_prefix && '/committer/email' ).
    timeline_committed_event-committer-name = mo_json->value_string( iv_prefix && '/committer/name' ).
    timeline_committed_event-message = mo_json->value_string( iv_prefix && '/message' ).
    timeline_committed_event-tree-sha = mo_json->value_string( iv_prefix && '/tree/sha' ).
    timeline_committed_event-tree-url = mo_json->value_string( iv_prefix && '/tree/url' ).
* todo, array, parents
    timeline_committed_event-verification-verified = mo_json->value_boolean( iv_prefix && '/verification/verified' ).
    timeline_committed_event-verification-reason = mo_json->value_string( iv_prefix && '/verification/reason' ).
    timeline_committed_event-verification-signature = mo_json->value_string( iv_prefix && '/verification/signature' ).
    timeline_committed_event-verification-payload = mo_json->value_string( iv_prefix && '/verification/payload' ).
    timeline_committed_event-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_timeline_reviewed_event.
    timeline_reviewed_event-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_reviewed_event-id = mo_json->value_string( iv_prefix && '/id' ).
    timeline_reviewed_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_reviewed_event-user = parse_simple_user( iv_prefix && '/user' ).
    timeline_reviewed_event-body = mo_json->value_string( iv_prefix && '/body' ).
    timeline_reviewed_event-state = mo_json->value_string( iv_prefix && '/state' ).
    timeline_reviewed_event-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    timeline_reviewed_event-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
    timeline_reviewed_event-_links-html-href = mo_json->value_string( iv_prefix && '/_links/html/href' ).
    timeline_reviewed_event-_links-pull_request-href = mo_json->value_string( iv_prefix && '/_links/pull_request/href' ).
    timeline_reviewed_event-submitted_at = mo_json->value_string( iv_prefix && '/submitted_at' ).
    timeline_reviewed_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    timeline_reviewed_event-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    timeline_reviewed_event-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    timeline_reviewed_event-author_association = parse_author_association( iv_prefix && '/author_association' ).
  ENDMETHOD.

  METHOD parse_pull_request_review_comm.
    pull_request_review_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request_review_comment-pull_request_review_id = mo_json->value_string( iv_prefix && '/pull_request_review_id' ).
    pull_request_review_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_review_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request_review_comment-diff_hunk = mo_json->value_string( iv_prefix && '/diff_hunk' ).
    pull_request_review_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    pull_request_review_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    pull_request_review_comment-original_position = mo_json->value_string( iv_prefix && '/original_position' ).
    pull_request_review_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    pull_request_review_comment-original_commit_id = mo_json->value_string( iv_prefix && '/original_commit_id' ).
    pull_request_review_comment-in_reply_to_id = mo_json->value_string( iv_prefix && '/in_reply_to_id' ).
    pull_request_review_comment-user = parse_simple_user( iv_prefix && '/user' ).
    pull_request_review_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    pull_request_review_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request_review_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request_review_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_review_comment-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
    pull_request_review_comment-author_association = parse_author_association( iv_prefix && '/author_association' ).
    pull_request_review_comment-_links-self-href = mo_json->value_string( iv_prefix && '/_links/self/href' ).
    pull_request_review_comment-_links-html-href = mo_json->value_string( iv_prefix && '/_links/html/href' ).
    pull_request_review_comment-_links-pull_request-href = mo_json->value_string( iv_prefix && '/_links/pull_request/href' ).
    pull_request_review_comment-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    pull_request_review_comment-original_start_line = mo_json->value_string( iv_prefix && '/original_start_line' ).
    pull_request_review_comment-start_side = mo_json->value_string( iv_prefix && '/start_side' ).
    pull_request_review_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    pull_request_review_comment-original_line = mo_json->value_string( iv_prefix && '/original_line' ).
    pull_request_review_comment-side = mo_json->value_string( iv_prefix && '/side' ).
    pull_request_review_comment-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
    pull_request_review_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    pull_request_review_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
  ENDMETHOD.

  METHOD parse_timeline_line_commented_.
    timeline_line_commented_event-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_line_commented_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
* todo, array, comments
  ENDMETHOD.

  METHOD parse_timeline_commit_commente.
    timeline_commit_commented_even-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_commit_commented_even-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_commit_commented_even-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
* todo, array, comments
  ENDMETHOD.

  METHOD parse_timeline_assigned_issue_.
    timeline_assigned_issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    timeline_assigned_issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_assigned_issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
    timeline_assigned_issue_event-actor = parse_simple_user( iv_prefix && '/actor' ).
    timeline_assigned_issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_assigned_issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    timeline_assigned_issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    timeline_assigned_issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    timeline_assigned_issue_event-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    timeline_assigned_issue_event-assignee = parse_simple_user( iv_prefix && '/assignee' ).
  ENDMETHOD.

  METHOD parse_timeline_unassigned_issu.
    timeline_unassigned_issue_even-id = mo_json->value_string( iv_prefix && '/id' ).
    timeline_unassigned_issue_even-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    timeline_unassigned_issue_even-url = mo_json->value_string( iv_prefix && '/url' ).
    timeline_unassigned_issue_even-actor = parse_simple_user( iv_prefix && '/actor' ).
    timeline_unassigned_issue_even-event = mo_json->value_string( iv_prefix && '/event' ).
    timeline_unassigned_issue_even-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    timeline_unassigned_issue_even-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    timeline_unassigned_issue_even-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    timeline_unassigned_issue_even-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    timeline_unassigned_issue_even-assignee = parse_simple_user( iv_prefix && '/assignee' ).
  ENDMETHOD.

  METHOD parse_timeline_issue_events.
  ENDMETHOD.

  METHOD parse_deploy_key.
    deploy_key-id = mo_json->value_string( iv_prefix && '/id' ).
    deploy_key-key = mo_json->value_string( iv_prefix && '/key' ).
    deploy_key-url = mo_json->value_string( iv_prefix && '/url' ).
    deploy_key-title = mo_json->value_string( iv_prefix && '/title' ).
    deploy_key-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    deploy_key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deploy_key-read_only = mo_json->value_boolean( iv_prefix && '/read_only' ).
  ENDMETHOD.

  METHOD parse_language.
  ENDMETHOD.

  METHOD parse_license_content.
    license_content-name = mo_json->value_string( iv_prefix && '/name' ).
    license_content-path = mo_json->value_string( iv_prefix && '/path' ).
    license_content-sha = mo_json->value_string( iv_prefix && '/sha' ).
    license_content-size = mo_json->value_string( iv_prefix && '/size' ).
    license_content-url = mo_json->value_string( iv_prefix && '/url' ).
    license_content-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    license_content-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    license_content-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    license_content-type = mo_json->value_string( iv_prefix && '/type' ).
    license_content-content = mo_json->value_string( iv_prefix && '/content' ).
    license_content-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
    license_content-_links-git = mo_json->value_string( iv_prefix && '/_links/git' ).
    license_content-_links-html = mo_json->value_string( iv_prefix && '/_links/html' ).
    license_content-_links-self = mo_json->value_string( iv_prefix && '/_links/self' ).
    license_content-license = parse_nullable_license_simple( iv_prefix && '/license' ).
  ENDMETHOD.

  METHOD parse_merged_upstream.
    merged_upstream-message = mo_json->value_string( iv_prefix && '/message' ).
    merged_upstream-merge_type = mo_json->value_string( iv_prefix && '/merge_type' ).
    merged_upstream-base_branch = mo_json->value_string( iv_prefix && '/base_branch' ).
  ENDMETHOD.

  METHOD parse_milestone.
    milestone-url = mo_json->value_string( iv_prefix && '/url' ).
    milestone-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    milestone-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    milestone-id = mo_json->value_string( iv_prefix && '/id' ).
    milestone-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    milestone-number = mo_json->value_string( iv_prefix && '/number' ).
    milestone-state = mo_json->value_string( iv_prefix && '/state' ).
    milestone-title = mo_json->value_string( iv_prefix && '/title' ).
    milestone-description = mo_json->value_string( iv_prefix && '/description' ).
    milestone-creator = parse_nullable_simple_user( iv_prefix && '/creator' ).
    milestone-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    milestone-closed_issues = mo_json->value_string( iv_prefix && '/closed_issues' ).
    milestone-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    milestone-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    milestone-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    milestone-due_on = mo_json->value_string( iv_prefix && '/due_on' ).
  ENDMETHOD.

  METHOD parse_pages_source_hash.
    pages_source_hash-branch = mo_json->value_string( iv_prefix && '/branch' ).
    pages_source_hash-path = mo_json->value_string( iv_prefix && '/path' ).
  ENDMETHOD.

  METHOD parse_pages_https_certificate.
    pages_https_certificate-state = mo_json->value_string( iv_prefix && '/state' ).
    pages_https_certificate-description = mo_json->value_string( iv_prefix && '/description' ).
* todo, array, domains
    pages_https_certificate-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
  ENDMETHOD.

  METHOD parse_page.
    page-url = mo_json->value_string( iv_prefix && '/url' ).
    page-status = mo_json->value_string( iv_prefix && '/status' ).
    page-cname = mo_json->value_string( iv_prefix && '/cname' ).
    page-protected_domain_state = mo_json->value_string( iv_prefix && '/protected_domain_state' ).
    page-pending_domain_unverified_at = mo_json->value_string( iv_prefix && '/pending_domain_unverified_at' ).
    page-custom_404 = mo_json->value_boolean( iv_prefix && '/custom_404' ).
    page-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    page-source = parse_pages_source_hash( iv_prefix && '/source' ).
    page-public = mo_json->value_boolean( iv_prefix && '/public' ).
    page-https_certificate = parse_pages_https_certificate( iv_prefix && '/https_certificate' ).
    page-https_enforced = mo_json->value_boolean( iv_prefix && '/https_enforced' ).
  ENDMETHOD.

  METHOD parse_page_build.
    page_build-url = mo_json->value_string( iv_prefix && '/url' ).
    page_build-status = mo_json->value_string( iv_prefix && '/status' ).
    page_build-error-message = mo_json->value_string( iv_prefix && '/error/message' ).
    page_build-pusher = parse_nullable_simple_user( iv_prefix && '/pusher' ).
    page_build-commit = mo_json->value_string( iv_prefix && '/commit' ).
    page_build-duration = mo_json->value_string( iv_prefix && '/duration' ).
    page_build-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    page_build-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_page_build_status.
    page_build_status-url = mo_json->value_string( iv_prefix && '/url' ).
    page_build_status-status = mo_json->value_string( iv_prefix && '/status' ).
  ENDMETHOD.

  METHOD parse_pages_health_check.
    pages_health_check-domain-host = mo_json->value_string( iv_prefix && '/domain/host' ).
    pages_health_check-domain-uri = mo_json->value_string( iv_prefix && '/domain/uri' ).
    pages_health_check-domain-nameservers = mo_json->value_string( iv_prefix && '/domain/nameservers' ).
    pages_health_check-domain-dns_resolves = mo_json->value_boolean( iv_prefix && '/domain/dns_resolves' ).
    pages_health_check-domain-is_proxied = mo_json->value_boolean( iv_prefix && '/domain/is_proxied' ).
    pages_health_check-domain-is_cloudflare_ip = mo_json->value_boolean( iv_prefix && '/domain/is_cloudflare_ip' ).
    pages_health_check-domain-is_fastly_ip = mo_json->value_boolean( iv_prefix && '/domain/is_fastly_ip' ).
    pages_health_check-domain-is_old_ip_address = mo_json->value_boolean( iv_prefix && '/domain/is_old_ip_address' ).
    pages_health_check-domain-is_a_record = mo_json->value_boolean( iv_prefix && '/domain/is_a_record' ).
    pages_health_check-domain-has_cname_record = mo_json->value_boolean( iv_prefix && '/domain/has_cname_record' ).
    pages_health_check-domain-has_mx_records_present = mo_json->value_boolean( iv_prefix && '/domain/has_mx_records_present' ).
    pages_health_check-domain-is_valid_domain = mo_json->value_boolean( iv_prefix && '/domain/is_valid_domain' ).
    pages_health_check-domain-is_apex_domain = mo_json->value_boolean( iv_prefix && '/domain/is_apex_domain' ).
    pages_health_check-domain-should_be_a_record = mo_json->value_boolean( iv_prefix && '/domain/should_be_a_record' ).
    pages_health_check-domain-is_cname_to_github_user_domain = mo_json->value_boolean( iv_prefix && '/domain/is_cname_to_github_user_domain' ).
    pages_health_check-domain-is_cname_to_pages_dot_github_d = mo_json->value_boolean( iv_prefix && '/domain/is_cname_to_pages_dot_github_dot_com' ).
    pages_health_check-domain-is_cname_to_fastly = mo_json->value_boolean( iv_prefix && '/domain/is_cname_to_fastly' ).
    pages_health_check-domain-is_pointed_to_github_pages_ip = mo_json->value_boolean( iv_prefix && '/domain/is_pointed_to_github_pages_ip' ).
    pages_health_check-domain-is_non_github_pages_ip_present = mo_json->value_boolean( iv_prefix && '/domain/is_non_github_pages_ip_present' ).
    pages_health_check-domain-is_pages_domain = mo_json->value_boolean( iv_prefix && '/domain/is_pages_domain' ).
    pages_health_check-domain-is_served_by_pages = mo_json->value_boolean( iv_prefix && '/domain/is_served_by_pages' ).
    pages_health_check-domain-is_valid = mo_json->value_boolean( iv_prefix && '/domain/is_valid' ).
    pages_health_check-domain-reason = mo_json->value_string( iv_prefix && '/domain/reason' ).
    pages_health_check-domain-responds_to_https = mo_json->value_boolean( iv_prefix && '/domain/responds_to_https' ).
    pages_health_check-domain-enforces_https = mo_json->value_boolean( iv_prefix && '/domain/enforces_https' ).
    pages_health_check-domain-https_error = mo_json->value_string( iv_prefix && '/domain/https_error' ).
    pages_health_check-domain-is_https_eligible = mo_json->value_boolean( iv_prefix && '/domain/is_https_eligible' ).
    pages_health_check-domain-caa_error = mo_json->value_string( iv_prefix && '/domain/caa_error' ).
    pages_health_check-alt_domain-host = mo_json->value_string( iv_prefix && '/alt_domain/host' ).
    pages_health_check-alt_domain-uri = mo_json->value_string( iv_prefix && '/alt_domain/uri' ).
    pages_health_check-alt_domain-nameservers = mo_json->value_string( iv_prefix && '/alt_domain/nameservers' ).
    pages_health_check-alt_domain-dns_resolves = mo_json->value_boolean( iv_prefix && '/alt_domain/dns_resolves' ).
    pages_health_check-alt_domain-is_proxied = mo_json->value_boolean( iv_prefix && '/alt_domain/is_proxied' ).
    pages_health_check-alt_domain-is_cloudflare_ip = mo_json->value_boolean( iv_prefix && '/alt_domain/is_cloudflare_ip' ).
    pages_health_check-alt_domain-is_fastly_ip = mo_json->value_boolean( iv_prefix && '/alt_domain/is_fastly_ip' ).
    pages_health_check-alt_domain-is_old_ip_address = mo_json->value_boolean( iv_prefix && '/alt_domain/is_old_ip_address' ).
    pages_health_check-alt_domain-is_a_record = mo_json->value_boolean( iv_prefix && '/alt_domain/is_a_record' ).
    pages_health_check-alt_domain-has_cname_record = mo_json->value_boolean( iv_prefix && '/alt_domain/has_cname_record' ).
    pages_health_check-alt_domain-has_mx_records_present = mo_json->value_boolean( iv_prefix && '/alt_domain/has_mx_records_present' ).
    pages_health_check-alt_domain-is_valid_domain = mo_json->value_boolean( iv_prefix && '/alt_domain/is_valid_domain' ).
    pages_health_check-alt_domain-is_apex_domain = mo_json->value_boolean( iv_prefix && '/alt_domain/is_apex_domain' ).
    pages_health_check-alt_domain-should_be_a_record = mo_json->value_boolean( iv_prefix && '/alt_domain/should_be_a_record' ).
    pages_health_check-alt_domain-is_cname_to_github_user_domain = mo_json->value_boolean( iv_prefix && '/alt_domain/is_cname_to_github_user_domain' ).
    pages_health_check-alt_domain-is_cname_to_pages_dot_github_d = mo_json->value_boolean( iv_prefix && '/alt_domain/is_cname_to_pages_dot_github_dot_com' ).
    pages_health_check-alt_domain-is_cname_to_fastly = mo_json->value_boolean( iv_prefix && '/alt_domain/is_cname_to_fastly' ).
    pages_health_check-alt_domain-is_pointed_to_github_pages_ip = mo_json->value_boolean( iv_prefix && '/alt_domain/is_pointed_to_github_pages_ip' ).
    pages_health_check-alt_domain-is_non_github_pages_ip_present = mo_json->value_boolean( iv_prefix && '/alt_domain/is_non_github_pages_ip_present' ).
    pages_health_check-alt_domain-is_pages_domain = mo_json->value_boolean( iv_prefix && '/alt_domain/is_pages_domain' ).
    pages_health_check-alt_domain-is_served_by_pages = mo_json->value_boolean( iv_prefix && '/alt_domain/is_served_by_pages' ).
    pages_health_check-alt_domain-is_valid = mo_json->value_boolean( iv_prefix && '/alt_domain/is_valid' ).
    pages_health_check-alt_domain-reason = mo_json->value_string( iv_prefix && '/alt_domain/reason' ).
    pages_health_check-alt_domain-responds_to_https = mo_json->value_boolean( iv_prefix && '/alt_domain/responds_to_https' ).
    pages_health_check-alt_domain-enforces_https = mo_json->value_boolean( iv_prefix && '/alt_domain/enforces_https' ).
    pages_health_check-alt_domain-https_error = mo_json->value_string( iv_prefix && '/alt_domain/https_error' ).
    pages_health_check-alt_domain-is_https_eligible = mo_json->value_boolean( iv_prefix && '/alt_domain/is_https_eligible' ).
    pages_health_check-alt_domain-caa_error = mo_json->value_string( iv_prefix && '/alt_domain/caa_error' ).
  ENDMETHOD.

  METHOD parse_team_simple.
    team_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    team_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    team_simple-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    team_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    team_simple-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team_simple-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_simple-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    team_simple-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team_simple-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_pull_request.
    pull_request-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    pull_request-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
    pull_request-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    pull_request-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    pull_request-review_comments_url = mo_json->value_string( iv_prefix && '/review_comments_url' ).
    pull_request-review_comment_url = mo_json->value_string( iv_prefix && '/review_comment_url' ).
    pull_request-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    pull_request-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    pull_request-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    pull_request-title = mo_json->value_string( iv_prefix && '/title' ).
    pull_request-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    pull_request-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, array, labels
    pull_request-milestone = parse_nullable_milestone( iv_prefix && '/milestone' ).
    pull_request-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    pull_request-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    pull_request-merged_at = mo_json->value_string( iv_prefix && '/merged_at' ).
    pull_request-merge_commit_sha = mo_json->value_string( iv_prefix && '/merge_commit_sha' ).
    pull_request-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
* todo, array, assignees
* todo, array, requested_reviewers
* todo, array, requested_teams
    pull_request-head-label = mo_json->value_string( iv_prefix && '/head/label' ).
    pull_request-head-ref = mo_json->value_string( iv_prefix && '/head/ref' ).
    pull_request-head-repo-archive_url = mo_json->value_string( iv_prefix && '/head/repo/archive_url' ).
    pull_request-head-repo-assignees_url = mo_json->value_string( iv_prefix && '/head/repo/assignees_url' ).
    pull_request-head-repo-blobs_url = mo_json->value_string( iv_prefix && '/head/repo/blobs_url' ).
    pull_request-head-repo-branches_url = mo_json->value_string( iv_prefix && '/head/repo/branches_url' ).
    pull_request-head-repo-collaborators_url = mo_json->value_string( iv_prefix && '/head/repo/collaborators_url' ).
    pull_request-head-repo-comments_url = mo_json->value_string( iv_prefix && '/head/repo/comments_url' ).
    pull_request-head-repo-commits_url = mo_json->value_string( iv_prefix && '/head/repo/commits_url' ).
    pull_request-head-repo-compare_url = mo_json->value_string( iv_prefix && '/head/repo/compare_url' ).
    pull_request-head-repo-contents_url = mo_json->value_string( iv_prefix && '/head/repo/contents_url' ).
    pull_request-head-repo-contributors_url = mo_json->value_string( iv_prefix && '/head/repo/contributors_url' ).
    pull_request-head-repo-deployments_url = mo_json->value_string( iv_prefix && '/head/repo/deployments_url' ).
    pull_request-head-repo-description = mo_json->value_string( iv_prefix && '/head/repo/description' ).
    pull_request-head-repo-downloads_url = mo_json->value_string( iv_prefix && '/head/repo/downloads_url' ).
    pull_request-head-repo-events_url = mo_json->value_string( iv_prefix && '/head/repo/events_url' ).
    pull_request-head-repo-fork = mo_json->value_boolean( iv_prefix && '/head/repo/fork' ).
    pull_request-head-repo-forks_url = mo_json->value_string( iv_prefix && '/head/repo/forks_url' ).
    pull_request-head-repo-full_name = mo_json->value_string( iv_prefix && '/head/repo/full_name' ).
    pull_request-head-repo-git_commits_url = mo_json->value_string( iv_prefix && '/head/repo/git_commits_url' ).
    pull_request-head-repo-git_refs_url = mo_json->value_string( iv_prefix && '/head/repo/git_refs_url' ).
    pull_request-head-repo-git_tags_url = mo_json->value_string( iv_prefix && '/head/repo/git_tags_url' ).
    pull_request-head-repo-hooks_url = mo_json->value_string( iv_prefix && '/head/repo/hooks_url' ).
    pull_request-head-repo-html_url = mo_json->value_string( iv_prefix && '/head/repo/html_url' ).
    pull_request-head-repo-id = mo_json->value_string( iv_prefix && '/head/repo/id' ).
    pull_request-head-repo-node_id = mo_json->value_string( iv_prefix && '/head/repo/node_id' ).
    pull_request-head-repo-issue_comment_url = mo_json->value_string( iv_prefix && '/head/repo/issue_comment_url' ).
    pull_request-head-repo-issue_events_url = mo_json->value_string( iv_prefix && '/head/repo/issue_events_url' ).
    pull_request-head-repo-issues_url = mo_json->value_string( iv_prefix && '/head/repo/issues_url' ).
    pull_request-head-repo-keys_url = mo_json->value_string( iv_prefix && '/head/repo/keys_url' ).
    pull_request-head-repo-labels_url = mo_json->value_string( iv_prefix && '/head/repo/labels_url' ).
    pull_request-head-repo-languages_url = mo_json->value_string( iv_prefix && '/head/repo/languages_url' ).
    pull_request-head-repo-merges_url = mo_json->value_string( iv_prefix && '/head/repo/merges_url' ).
    pull_request-head-repo-milestones_url = mo_json->value_string( iv_prefix && '/head/repo/milestones_url' ).
    pull_request-head-repo-name = mo_json->value_string( iv_prefix && '/head/repo/name' ).
    pull_request-head-repo-notifications_url = mo_json->value_string( iv_prefix && '/head/repo/notifications_url' ).
    pull_request-head-repo-owner-avatar_url = mo_json->value_string( iv_prefix && '/head/repo/owner/avatar_url' ).
    pull_request-head-repo-owner-events_url = mo_json->value_string( iv_prefix && '/head/repo/owner/events_url' ).
    pull_request-head-repo-owner-followers_url = mo_json->value_string( iv_prefix && '/head/repo/owner/followers_url' ).
    pull_request-head-repo-owner-following_url = mo_json->value_string( iv_prefix && '/head/repo/owner/following_url' ).
    pull_request-head-repo-owner-gists_url = mo_json->value_string( iv_prefix && '/head/repo/owner/gists_url' ).
    pull_request-head-repo-owner-gravatar_id = mo_json->value_string( iv_prefix && '/head/repo/owner/gravatar_id' ).
    pull_request-head-repo-owner-html_url = mo_json->value_string( iv_prefix && '/head/repo/owner/html_url' ).
    pull_request-head-repo-owner-id = mo_json->value_string( iv_prefix && '/head/repo/owner/id' ).
    pull_request-head-repo-owner-node_id = mo_json->value_string( iv_prefix && '/head/repo/owner/node_id' ).
    pull_request-head-repo-owner-login = mo_json->value_string( iv_prefix && '/head/repo/owner/login' ).
    pull_request-head-repo-owner-organizations_url = mo_json->value_string( iv_prefix && '/head/repo/owner/organizations_url' ).
    pull_request-head-repo-owner-received_events_url = mo_json->value_string( iv_prefix && '/head/repo/owner/received_events_url' ).
    pull_request-head-repo-owner-repos_url = mo_json->value_string( iv_prefix && '/head/repo/owner/repos_url' ).
    pull_request-head-repo-owner-site_admin = mo_json->value_boolean( iv_prefix && '/head/repo/owner/site_admin' ).
    pull_request-head-repo-owner-starred_url = mo_json->value_string( iv_prefix && '/head/repo/owner/starred_url' ).
    pull_request-head-repo-owner-subscriptions_url = mo_json->value_string( iv_prefix && '/head/repo/owner/subscriptions_url' ).
    pull_request-head-repo-owner-type = mo_json->value_string( iv_prefix && '/head/repo/owner/type' ).
    pull_request-head-repo-owner-url = mo_json->value_string( iv_prefix && '/head/repo/owner/url' ).
    pull_request-head-repo-private = mo_json->value_boolean( iv_prefix && '/head/repo/private' ).
    pull_request-head-repo-pulls_url = mo_json->value_string( iv_prefix && '/head/repo/pulls_url' ).
    pull_request-head-repo-releases_url = mo_json->value_string( iv_prefix && '/head/repo/releases_url' ).
    pull_request-head-repo-stargazers_url = mo_json->value_string( iv_prefix && '/head/repo/stargazers_url' ).
    pull_request-head-repo-statuses_url = mo_json->value_string( iv_prefix && '/head/repo/statuses_url' ).
    pull_request-head-repo-subscribers_url = mo_json->value_string( iv_prefix && '/head/repo/subscribers_url' ).
    pull_request-head-repo-subscription_url = mo_json->value_string( iv_prefix && '/head/repo/subscription_url' ).
    pull_request-head-repo-tags_url = mo_json->value_string( iv_prefix && '/head/repo/tags_url' ).
    pull_request-head-repo-teams_url = mo_json->value_string( iv_prefix && '/head/repo/teams_url' ).
    pull_request-head-repo-trees_url = mo_json->value_string( iv_prefix && '/head/repo/trees_url' ).
    pull_request-head-repo-url = mo_json->value_string( iv_prefix && '/head/repo/url' ).
    pull_request-head-repo-clone_url = mo_json->value_string( iv_prefix && '/head/repo/clone_url' ).
    pull_request-head-repo-default_branch = mo_json->value_string( iv_prefix && '/head/repo/default_branch' ).
    pull_request-head-repo-forks = mo_json->value_string( iv_prefix && '/head/repo/forks' ).
    pull_request-head-repo-forks_count = mo_json->value_string( iv_prefix && '/head/repo/forks_count' ).
    pull_request-head-repo-git_url = mo_json->value_string( iv_prefix && '/head/repo/git_url' ).
    pull_request-head-repo-has_downloads = mo_json->value_boolean( iv_prefix && '/head/repo/has_downloads' ).
    pull_request-head-repo-has_issues = mo_json->value_boolean( iv_prefix && '/head/repo/has_issues' ).
    pull_request-head-repo-has_projects = mo_json->value_boolean( iv_prefix && '/head/repo/has_projects' ).
    pull_request-head-repo-has_wiki = mo_json->value_boolean( iv_prefix && '/head/repo/has_wiki' ).
    pull_request-head-repo-has_pages = mo_json->value_boolean( iv_prefix && '/head/repo/has_pages' ).
    pull_request-head-repo-homepage = mo_json->value_string( iv_prefix && '/head/repo/homepage' ).
    pull_request-head-repo-language = mo_json->value_string( iv_prefix && '/head/repo/language' ).
    pull_request-head-repo-master_branch = mo_json->value_string( iv_prefix && '/head/repo/master_branch' ).
    pull_request-head-repo-archived = mo_json->value_boolean( iv_prefix && '/head/repo/archived' ).
    pull_request-head-repo-disabled = mo_json->value_boolean( iv_prefix && '/head/repo/disabled' ).
    pull_request-head-repo-visibility = mo_json->value_string( iv_prefix && '/head/repo/visibility' ).
    pull_request-head-repo-mirror_url = mo_json->value_string( iv_prefix && '/head/repo/mirror_url' ).
    pull_request-head-repo-open_issues = mo_json->value_string( iv_prefix && '/head/repo/open_issues' ).
    pull_request-head-repo-open_issues_count = mo_json->value_string( iv_prefix && '/head/repo/open_issues_count' ).
    pull_request-head-repo-permissions-admin = mo_json->value_boolean( iv_prefix && '/head/repo/permissions/admin' ).
    pull_request-head-repo-permissions-maintain = mo_json->value_boolean( iv_prefix && '/head/repo/permissions/maintain' ).
    pull_request-head-repo-permissions-push = mo_json->value_boolean( iv_prefix && '/head/repo/permissions/push' ).
    pull_request-head-repo-permissions-triage = mo_json->value_boolean( iv_prefix && '/head/repo/permissions/triage' ).
    pull_request-head-repo-permissions-pull = mo_json->value_boolean( iv_prefix && '/head/repo/permissions/pull' ).
    pull_request-head-repo-temp_clone_token = mo_json->value_string( iv_prefix && '/head/repo/temp_clone_token' ).
    pull_request-head-repo-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/head/repo/allow_merge_commit' ).
    pull_request-head-repo-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/head/repo/allow_squash_merge' ).
    pull_request-head-repo-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/head/repo/allow_rebase_merge' ).
    pull_request-head-repo-license-key = mo_json->value_string( iv_prefix && '/head/repo/license/key' ).
    pull_request-head-repo-license-name = mo_json->value_string( iv_prefix && '/head/repo/license/name' ).
    pull_request-head-repo-license-url = mo_json->value_string( iv_prefix && '/head/repo/license/url' ).
    pull_request-head-repo-license-spdx_id = mo_json->value_string( iv_prefix && '/head/repo/license/spdx_id' ).
    pull_request-head-repo-license-node_id = mo_json->value_string( iv_prefix && '/head/repo/license/node_id' ).
    pull_request-head-repo-pushed_at = mo_json->value_string( iv_prefix && '/head/repo/pushed_at' ).
    pull_request-head-repo-size = mo_json->value_string( iv_prefix && '/head/repo/size' ).
    pull_request-head-repo-ssh_url = mo_json->value_string( iv_prefix && '/head/repo/ssh_url' ).
    pull_request-head-repo-stargazers_count = mo_json->value_string( iv_prefix && '/head/repo/stargazers_count' ).
    pull_request-head-repo-svn_url = mo_json->value_string( iv_prefix && '/head/repo/svn_url' ).
* todo, array, topics
    pull_request-head-repo-watchers = mo_json->value_string( iv_prefix && '/head/repo/watchers' ).
    pull_request-head-repo-watchers_count = mo_json->value_string( iv_prefix && '/head/repo/watchers_count' ).
    pull_request-head-repo-created_at = mo_json->value_string( iv_prefix && '/head/repo/created_at' ).
    pull_request-head-repo-updated_at = mo_json->value_string( iv_prefix && '/head/repo/updated_at' ).
    pull_request-head-repo-allow_forking = mo_json->value_boolean( iv_prefix && '/head/repo/allow_forking' ).
    pull_request-head-repo-is_template = mo_json->value_boolean( iv_prefix && '/head/repo/is_template' ).
    pull_request-head-sha = mo_json->value_string( iv_prefix && '/head/sha' ).
    pull_request-head-user-avatar_url = mo_json->value_string( iv_prefix && '/head/user/avatar_url' ).
    pull_request-head-user-events_url = mo_json->value_string( iv_prefix && '/head/user/events_url' ).
    pull_request-head-user-followers_url = mo_json->value_string( iv_prefix && '/head/user/followers_url' ).
    pull_request-head-user-following_url = mo_json->value_string( iv_prefix && '/head/user/following_url' ).
    pull_request-head-user-gists_url = mo_json->value_string( iv_prefix && '/head/user/gists_url' ).
    pull_request-head-user-gravatar_id = mo_json->value_string( iv_prefix && '/head/user/gravatar_id' ).
    pull_request-head-user-html_url = mo_json->value_string( iv_prefix && '/head/user/html_url' ).
    pull_request-head-user-id = mo_json->value_string( iv_prefix && '/head/user/id' ).
    pull_request-head-user-node_id = mo_json->value_string( iv_prefix && '/head/user/node_id' ).
    pull_request-head-user-login = mo_json->value_string( iv_prefix && '/head/user/login' ).
    pull_request-head-user-organizations_url = mo_json->value_string( iv_prefix && '/head/user/organizations_url' ).
    pull_request-head-user-received_events_url = mo_json->value_string( iv_prefix && '/head/user/received_events_url' ).
    pull_request-head-user-repos_url = mo_json->value_string( iv_prefix && '/head/user/repos_url' ).
    pull_request-head-user-site_admin = mo_json->value_boolean( iv_prefix && '/head/user/site_admin' ).
    pull_request-head-user-starred_url = mo_json->value_string( iv_prefix && '/head/user/starred_url' ).
    pull_request-head-user-subscriptions_url = mo_json->value_string( iv_prefix && '/head/user/subscriptions_url' ).
    pull_request-head-user-type = mo_json->value_string( iv_prefix && '/head/user/type' ).
    pull_request-head-user-url = mo_json->value_string( iv_prefix && '/head/user/url' ).
    pull_request-base-label = mo_json->value_string( iv_prefix && '/base/label' ).
    pull_request-base-ref = mo_json->value_string( iv_prefix && '/base/ref' ).
    pull_request-base-repo-archive_url = mo_json->value_string( iv_prefix && '/base/repo/archive_url' ).
    pull_request-base-repo-assignees_url = mo_json->value_string( iv_prefix && '/base/repo/assignees_url' ).
    pull_request-base-repo-blobs_url = mo_json->value_string( iv_prefix && '/base/repo/blobs_url' ).
    pull_request-base-repo-branches_url = mo_json->value_string( iv_prefix && '/base/repo/branches_url' ).
    pull_request-base-repo-collaborators_url = mo_json->value_string( iv_prefix && '/base/repo/collaborators_url' ).
    pull_request-base-repo-comments_url = mo_json->value_string( iv_prefix && '/base/repo/comments_url' ).
    pull_request-base-repo-commits_url = mo_json->value_string( iv_prefix && '/base/repo/commits_url' ).
    pull_request-base-repo-compare_url = mo_json->value_string( iv_prefix && '/base/repo/compare_url' ).
    pull_request-base-repo-contents_url = mo_json->value_string( iv_prefix && '/base/repo/contents_url' ).
    pull_request-base-repo-contributors_url = mo_json->value_string( iv_prefix && '/base/repo/contributors_url' ).
    pull_request-base-repo-deployments_url = mo_json->value_string( iv_prefix && '/base/repo/deployments_url' ).
    pull_request-base-repo-description = mo_json->value_string( iv_prefix && '/base/repo/description' ).
    pull_request-base-repo-downloads_url = mo_json->value_string( iv_prefix && '/base/repo/downloads_url' ).
    pull_request-base-repo-events_url = mo_json->value_string( iv_prefix && '/base/repo/events_url' ).
    pull_request-base-repo-fork = mo_json->value_boolean( iv_prefix && '/base/repo/fork' ).
    pull_request-base-repo-forks_url = mo_json->value_string( iv_prefix && '/base/repo/forks_url' ).
    pull_request-base-repo-full_name = mo_json->value_string( iv_prefix && '/base/repo/full_name' ).
    pull_request-base-repo-git_commits_url = mo_json->value_string( iv_prefix && '/base/repo/git_commits_url' ).
    pull_request-base-repo-git_refs_url = mo_json->value_string( iv_prefix && '/base/repo/git_refs_url' ).
    pull_request-base-repo-git_tags_url = mo_json->value_string( iv_prefix && '/base/repo/git_tags_url' ).
    pull_request-base-repo-hooks_url = mo_json->value_string( iv_prefix && '/base/repo/hooks_url' ).
    pull_request-base-repo-html_url = mo_json->value_string( iv_prefix && '/base/repo/html_url' ).
    pull_request-base-repo-id = mo_json->value_string( iv_prefix && '/base/repo/id' ).
    pull_request-base-repo-is_template = mo_json->value_boolean( iv_prefix && '/base/repo/is_template' ).
    pull_request-base-repo-node_id = mo_json->value_string( iv_prefix && '/base/repo/node_id' ).
    pull_request-base-repo-issue_comment_url = mo_json->value_string( iv_prefix && '/base/repo/issue_comment_url' ).
    pull_request-base-repo-issue_events_url = mo_json->value_string( iv_prefix && '/base/repo/issue_events_url' ).
    pull_request-base-repo-issues_url = mo_json->value_string( iv_prefix && '/base/repo/issues_url' ).
    pull_request-base-repo-keys_url = mo_json->value_string( iv_prefix && '/base/repo/keys_url' ).
    pull_request-base-repo-labels_url = mo_json->value_string( iv_prefix && '/base/repo/labels_url' ).
    pull_request-base-repo-languages_url = mo_json->value_string( iv_prefix && '/base/repo/languages_url' ).
    pull_request-base-repo-merges_url = mo_json->value_string( iv_prefix && '/base/repo/merges_url' ).
    pull_request-base-repo-milestones_url = mo_json->value_string( iv_prefix && '/base/repo/milestones_url' ).
    pull_request-base-repo-name = mo_json->value_string( iv_prefix && '/base/repo/name' ).
    pull_request-base-repo-notifications_url = mo_json->value_string( iv_prefix && '/base/repo/notifications_url' ).
    pull_request-base-repo-owner-avatar_url = mo_json->value_string( iv_prefix && '/base/repo/owner/avatar_url' ).
    pull_request-base-repo-owner-events_url = mo_json->value_string( iv_prefix && '/base/repo/owner/events_url' ).
    pull_request-base-repo-owner-followers_url = mo_json->value_string( iv_prefix && '/base/repo/owner/followers_url' ).
    pull_request-base-repo-owner-following_url = mo_json->value_string( iv_prefix && '/base/repo/owner/following_url' ).
    pull_request-base-repo-owner-gists_url = mo_json->value_string( iv_prefix && '/base/repo/owner/gists_url' ).
    pull_request-base-repo-owner-gravatar_id = mo_json->value_string( iv_prefix && '/base/repo/owner/gravatar_id' ).
    pull_request-base-repo-owner-html_url = mo_json->value_string( iv_prefix && '/base/repo/owner/html_url' ).
    pull_request-base-repo-owner-id = mo_json->value_string( iv_prefix && '/base/repo/owner/id' ).
    pull_request-base-repo-owner-node_id = mo_json->value_string( iv_prefix && '/base/repo/owner/node_id' ).
    pull_request-base-repo-owner-login = mo_json->value_string( iv_prefix && '/base/repo/owner/login' ).
    pull_request-base-repo-owner-organizations_url = mo_json->value_string( iv_prefix && '/base/repo/owner/organizations_url' ).
    pull_request-base-repo-owner-received_events_url = mo_json->value_string( iv_prefix && '/base/repo/owner/received_events_url' ).
    pull_request-base-repo-owner-repos_url = mo_json->value_string( iv_prefix && '/base/repo/owner/repos_url' ).
    pull_request-base-repo-owner-site_admin = mo_json->value_boolean( iv_prefix && '/base/repo/owner/site_admin' ).
    pull_request-base-repo-owner-starred_url = mo_json->value_string( iv_prefix && '/base/repo/owner/starred_url' ).
    pull_request-base-repo-owner-subscriptions_url = mo_json->value_string( iv_prefix && '/base/repo/owner/subscriptions_url' ).
    pull_request-base-repo-owner-type = mo_json->value_string( iv_prefix && '/base/repo/owner/type' ).
    pull_request-base-repo-owner-url = mo_json->value_string( iv_prefix && '/base/repo/owner/url' ).
    pull_request-base-repo-private = mo_json->value_boolean( iv_prefix && '/base/repo/private' ).
    pull_request-base-repo-pulls_url = mo_json->value_string( iv_prefix && '/base/repo/pulls_url' ).
    pull_request-base-repo-releases_url = mo_json->value_string( iv_prefix && '/base/repo/releases_url' ).
    pull_request-base-repo-stargazers_url = mo_json->value_string( iv_prefix && '/base/repo/stargazers_url' ).
    pull_request-base-repo-statuses_url = mo_json->value_string( iv_prefix && '/base/repo/statuses_url' ).
    pull_request-base-repo-subscribers_url = mo_json->value_string( iv_prefix && '/base/repo/subscribers_url' ).
    pull_request-base-repo-subscription_url = mo_json->value_string( iv_prefix && '/base/repo/subscription_url' ).
    pull_request-base-repo-tags_url = mo_json->value_string( iv_prefix && '/base/repo/tags_url' ).
    pull_request-base-repo-teams_url = mo_json->value_string( iv_prefix && '/base/repo/teams_url' ).
    pull_request-base-repo-trees_url = mo_json->value_string( iv_prefix && '/base/repo/trees_url' ).
    pull_request-base-repo-url = mo_json->value_string( iv_prefix && '/base/repo/url' ).
    pull_request-base-repo-clone_url = mo_json->value_string( iv_prefix && '/base/repo/clone_url' ).
    pull_request-base-repo-default_branch = mo_json->value_string( iv_prefix && '/base/repo/default_branch' ).
    pull_request-base-repo-forks = mo_json->value_string( iv_prefix && '/base/repo/forks' ).
    pull_request-base-repo-forks_count = mo_json->value_string( iv_prefix && '/base/repo/forks_count' ).
    pull_request-base-repo-git_url = mo_json->value_string( iv_prefix && '/base/repo/git_url' ).
    pull_request-base-repo-has_downloads = mo_json->value_boolean( iv_prefix && '/base/repo/has_downloads' ).
    pull_request-base-repo-has_issues = mo_json->value_boolean( iv_prefix && '/base/repo/has_issues' ).
    pull_request-base-repo-has_projects = mo_json->value_boolean( iv_prefix && '/base/repo/has_projects' ).
    pull_request-base-repo-has_wiki = mo_json->value_boolean( iv_prefix && '/base/repo/has_wiki' ).
    pull_request-base-repo-has_pages = mo_json->value_boolean( iv_prefix && '/base/repo/has_pages' ).
    pull_request-base-repo-homepage = mo_json->value_string( iv_prefix && '/base/repo/homepage' ).
    pull_request-base-repo-language = mo_json->value_string( iv_prefix && '/base/repo/language' ).
    pull_request-base-repo-master_branch = mo_json->value_string( iv_prefix && '/base/repo/master_branch' ).
    pull_request-base-repo-archived = mo_json->value_boolean( iv_prefix && '/base/repo/archived' ).
    pull_request-base-repo-disabled = mo_json->value_boolean( iv_prefix && '/base/repo/disabled' ).
    pull_request-base-repo-visibility = mo_json->value_string( iv_prefix && '/base/repo/visibility' ).
    pull_request-base-repo-mirror_url = mo_json->value_string( iv_prefix && '/base/repo/mirror_url' ).
    pull_request-base-repo-open_issues = mo_json->value_string( iv_prefix && '/base/repo/open_issues' ).
    pull_request-base-repo-open_issues_count = mo_json->value_string( iv_prefix && '/base/repo/open_issues_count' ).
    pull_request-base-repo-permissions-admin = mo_json->value_boolean( iv_prefix && '/base/repo/permissions/admin' ).
    pull_request-base-repo-permissions-maintain = mo_json->value_boolean( iv_prefix && '/base/repo/permissions/maintain' ).
    pull_request-base-repo-permissions-push = mo_json->value_boolean( iv_prefix && '/base/repo/permissions/push' ).
    pull_request-base-repo-permissions-triage = mo_json->value_boolean( iv_prefix && '/base/repo/permissions/triage' ).
    pull_request-base-repo-permissions-pull = mo_json->value_boolean( iv_prefix && '/base/repo/permissions/pull' ).
    pull_request-base-repo-temp_clone_token = mo_json->value_string( iv_prefix && '/base/repo/temp_clone_token' ).
    pull_request-base-repo-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/base/repo/allow_merge_commit' ).
    pull_request-base-repo-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/base/repo/allow_squash_merge' ).
    pull_request-base-repo-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/base/repo/allow_rebase_merge' ).
    pull_request-base-repo-license = parse_nullable_license_simple( iv_prefix && '/base/repo/license' ).
    pull_request-base-repo-pushed_at = mo_json->value_string( iv_prefix && '/base/repo/pushed_at' ).
    pull_request-base-repo-size = mo_json->value_string( iv_prefix && '/base/repo/size' ).
    pull_request-base-repo-ssh_url = mo_json->value_string( iv_prefix && '/base/repo/ssh_url' ).
    pull_request-base-repo-stargazers_count = mo_json->value_string( iv_prefix && '/base/repo/stargazers_count' ).
    pull_request-base-repo-svn_url = mo_json->value_string( iv_prefix && '/base/repo/svn_url' ).
* todo, array, topics
    pull_request-base-repo-watchers = mo_json->value_string( iv_prefix && '/base/repo/watchers' ).
    pull_request-base-repo-watchers_count = mo_json->value_string( iv_prefix && '/base/repo/watchers_count' ).
    pull_request-base-repo-created_at = mo_json->value_string( iv_prefix && '/base/repo/created_at' ).
    pull_request-base-repo-updated_at = mo_json->value_string( iv_prefix && '/base/repo/updated_at' ).
    pull_request-base-repo-allow_forking = mo_json->value_boolean( iv_prefix && '/base/repo/allow_forking' ).
    pull_request-base-sha = mo_json->value_string( iv_prefix && '/base/sha' ).
    pull_request-base-user-avatar_url = mo_json->value_string( iv_prefix && '/base/user/avatar_url' ).
    pull_request-base-user-events_url = mo_json->value_string( iv_prefix && '/base/user/events_url' ).
    pull_request-base-user-followers_url = mo_json->value_string( iv_prefix && '/base/user/followers_url' ).
    pull_request-base-user-following_url = mo_json->value_string( iv_prefix && '/base/user/following_url' ).
    pull_request-base-user-gists_url = mo_json->value_string( iv_prefix && '/base/user/gists_url' ).
    pull_request-base-user-gravatar_id = mo_json->value_string( iv_prefix && '/base/user/gravatar_id' ).
    pull_request-base-user-html_url = mo_json->value_string( iv_prefix && '/base/user/html_url' ).
    pull_request-base-user-id = mo_json->value_string( iv_prefix && '/base/user/id' ).
    pull_request-base-user-node_id = mo_json->value_string( iv_prefix && '/base/user/node_id' ).
    pull_request-base-user-login = mo_json->value_string( iv_prefix && '/base/user/login' ).
    pull_request-base-user-organizations_url = mo_json->value_string( iv_prefix && '/base/user/organizations_url' ).
    pull_request-base-user-received_events_url = mo_json->value_string( iv_prefix && '/base/user/received_events_url' ).
    pull_request-base-user-repos_url = mo_json->value_string( iv_prefix && '/base/user/repos_url' ).
    pull_request-base-user-site_admin = mo_json->value_boolean( iv_prefix && '/base/user/site_admin' ).
    pull_request-base-user-starred_url = mo_json->value_string( iv_prefix && '/base/user/starred_url' ).
    pull_request-base-user-subscriptions_url = mo_json->value_string( iv_prefix && '/base/user/subscriptions_url' ).
    pull_request-base-user-type = mo_json->value_string( iv_prefix && '/base/user/type' ).
    pull_request-base-user-url = mo_json->value_string( iv_prefix && '/base/user/url' ).
    pull_request-_links-comments = parse_link( iv_prefix && '/_links/comments' ).
    pull_request-_links-commits = parse_link( iv_prefix && '/_links/commits' ).
    pull_request-_links-statuses = parse_link( iv_prefix && '/_links/statuses' ).
    pull_request-_links-html = parse_link( iv_prefix && '/_links/html' ).
    pull_request-_links-issue = parse_link( iv_prefix && '/_links/issue' ).
    pull_request-_links-review_comments = parse_link( iv_prefix && '/_links/review_comments' ).
    pull_request-_links-review_comment = parse_link( iv_prefix && '/_links/review_comment' ).
    pull_request-_links-self = parse_link( iv_prefix && '/_links/self' ).
    pull_request-author_association = parse_author_association( iv_prefix && '/author_association' ).
    pull_request-auto_merge = parse_auto_merge( iv_prefix && '/auto_merge' ).
    pull_request-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    pull_request-merged = mo_json->value_boolean( iv_prefix && '/merged' ).
    pull_request-mergeable = mo_json->value_boolean( iv_prefix && '/mergeable' ).
    pull_request-rebaseable = mo_json->value_boolean( iv_prefix && '/rebaseable' ).
    pull_request-mergeable_state = mo_json->value_string( iv_prefix && '/mergeable_state' ).
    pull_request-merged_by = parse_nullable_simple_user( iv_prefix && '/merged_by' ).
    pull_request-comments = mo_json->value_string( iv_prefix && '/comments' ).
    pull_request-review_comments = mo_json->value_string( iv_prefix && '/review_comments' ).
    pull_request-maintainer_can_modify = mo_json->value_boolean( iv_prefix && '/maintainer_can_modify' ).
    pull_request-commits = mo_json->value_string( iv_prefix && '/commits' ).
    pull_request-additions = mo_json->value_string( iv_prefix && '/additions' ).
    pull_request-deletions = mo_json->value_string( iv_prefix && '/deletions' ).
    pull_request-changed_files = mo_json->value_string( iv_prefix && '/changed_files' ).
  ENDMETHOD.

  METHOD parse_pull_request_merge_resul.
    pull_request_merge_result-sha = mo_json->value_string( iv_prefix && '/sha' ).
    pull_request_merge_result-merged = mo_json->value_boolean( iv_prefix && '/merged' ).
    pull_request_merge_result-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_pull_request_review_requ.
* todo, array, users
* todo, array, teams
  ENDMETHOD.

  METHOD parse_pull_request_review.
    pull_request_review-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_review-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request_review-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    pull_request_review-body = mo_json->value_string( iv_prefix && '/body' ).
    pull_request_review-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request_review-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_review-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
    pull_request_review-_links-html-href = mo_json->value_string( iv_prefix && '/_links/html/href' ).
    pull_request_review-_links-pull_request-href = mo_json->value_string( iv_prefix && '/_links/pull_request/href' ).
    pull_request_review-submitted_at = mo_json->value_string( iv_prefix && '/submitted_at' ).
    pull_request_review-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    pull_request_review-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    pull_request_review-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    pull_request_review-author_association = parse_author_association( iv_prefix && '/author_association' ).
  ENDMETHOD.

  METHOD parse_review_comment.
    review_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    review_comment-pull_request_review_id = mo_json->value_string( iv_prefix && '/pull_request_review_id' ).
    review_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    review_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    review_comment-diff_hunk = mo_json->value_string( iv_prefix && '/diff_hunk' ).
    review_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    review_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    review_comment-original_position = mo_json->value_string( iv_prefix && '/original_position' ).
    review_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    review_comment-original_commit_id = mo_json->value_string( iv_prefix && '/original_commit_id' ).
    review_comment-in_reply_to_id = mo_json->value_string( iv_prefix && '/in_reply_to_id' ).
    review_comment-user = parse_nullable_simple_user( iv_prefix && '/user' ).
    review_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    review_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    review_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    review_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    review_comment-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
    review_comment-author_association = parse_author_association( iv_prefix && '/author_association' ).
    review_comment-_links-self = parse_link( iv_prefix && '/_links/self' ).
    review_comment-_links-html = parse_link( iv_prefix && '/_links/html' ).
    review_comment-_links-pull_request = parse_link( iv_prefix && '/_links/pull_request' ).
    review_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    review_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    review_comment-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
    review_comment-side = mo_json->value_string( iv_prefix && '/side' ).
    review_comment-start_side = mo_json->value_string( iv_prefix && '/start_side' ).
    review_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    review_comment-original_line = mo_json->value_string( iv_prefix && '/original_line' ).
    review_comment-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    review_comment-original_start_line = mo_json->value_string( iv_prefix && '/original_start_line' ).
  ENDMETHOD.

  METHOD parse_release_asset.
    release_asset-url = mo_json->value_string( iv_prefix && '/url' ).
    release_asset-browser_download_url = mo_json->value_string( iv_prefix && '/browser_download_url' ).
    release_asset-id = mo_json->value_string( iv_prefix && '/id' ).
    release_asset-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    release_asset-name = mo_json->value_string( iv_prefix && '/name' ).
    release_asset-label = mo_json->value_string( iv_prefix && '/label' ).
    release_asset-state = mo_json->value_string( iv_prefix && '/state' ).
    release_asset-content_type = mo_json->value_string( iv_prefix && '/content_type' ).
    release_asset-size = mo_json->value_string( iv_prefix && '/size' ).
    release_asset-download_count = mo_json->value_string( iv_prefix && '/download_count' ).
    release_asset-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    release_asset-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    release_asset-uploader = parse_nullable_simple_user( iv_prefix && '/uploader' ).
  ENDMETHOD.

  METHOD parse_release.
    release-url = mo_json->value_string( iv_prefix && '/url' ).
    release-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    release-assets_url = mo_json->value_string( iv_prefix && '/assets_url' ).
    release-upload_url = mo_json->value_string( iv_prefix && '/upload_url' ).
    release-tarball_url = mo_json->value_string( iv_prefix && '/tarball_url' ).
    release-zipball_url = mo_json->value_string( iv_prefix && '/zipball_url' ).
    release-id = mo_json->value_string( iv_prefix && '/id' ).
    release-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    release-tag_name = mo_json->value_string( iv_prefix && '/tag_name' ).
    release-target_commitish = mo_json->value_string( iv_prefix && '/target_commitish' ).
    release-name = mo_json->value_string( iv_prefix && '/name' ).
    release-body = mo_json->value_string( iv_prefix && '/body' ).
    release-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    release-prerelease = mo_json->value_boolean( iv_prefix && '/prerelease' ).
    release-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    release-published_at = mo_json->value_string( iv_prefix && '/published_at' ).
    release-author = parse_simple_user( iv_prefix && '/author' ).
* todo, array, assets
    release-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    release-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    release-mentions_count = mo_json->value_string( iv_prefix && '/mentions_count' ).
    release-discussion_url = mo_json->value_string( iv_prefix && '/discussion_url' ).
    release-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_release_notes_content.
    release_notes_content-name = mo_json->value_string( iv_prefix && '/name' ).
    release_notes_content-body = mo_json->value_string( iv_prefix && '/body' ).
  ENDMETHOD.

  METHOD parse_secret_scanning_alert.
    secret_scanning_alert-number = parse_alert_number( iv_prefix && '/number' ).
    secret_scanning_alert-created_at = parse_alert_created_at( iv_prefix && '/created_at' ).
    secret_scanning_alert-url = parse_alert_url( iv_prefix && '/url' ).
    secret_scanning_alert-html_url = parse_alert_html_url( iv_prefix && '/html_url' ).
    secret_scanning_alert-locations_url = mo_json->value_string( iv_prefix && '/locations_url' ).
    secret_scanning_alert-state = parse_secret_scanning_alert_st( iv_prefix && '/state' ).
    secret_scanning_alert-resolution = parse_secret_scanning_alert_re( iv_prefix && '/resolution' ).
    secret_scanning_alert-resolved_at = mo_json->value_string( iv_prefix && '/resolved_at' ).
    secret_scanning_alert-resolved_by = parse_nullable_simple_user( iv_prefix && '/resolved_by' ).
    secret_scanning_alert-secret_type = mo_json->value_string( iv_prefix && '/secret_type' ).
    secret_scanning_alert-secret = mo_json->value_string( iv_prefix && '/secret' ).
  ENDMETHOD.

  METHOD parse_secret_scanning_location.
    secret_scanning_location_commi-path = mo_json->value_string( iv_prefix && '/path' ).
* todo, number, start_line
* todo, number, end_line
* todo, number, start_column
* todo, number, end_column
    secret_scanning_location_commi-blob_sha = mo_json->value_string( iv_prefix && '/blob_sha' ).
    secret_scanning_location_commi-blob_url = mo_json->value_string( iv_prefix && '/blob_url' ).
    secret_scanning_location_commi-commit_sha = mo_json->value_string( iv_prefix && '/commit_sha' ).
    secret_scanning_location_commi-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
  ENDMETHOD.

  METHOD parse_secret_scanning_locati01.
    secret_scanning_location-type = mo_json->value_string( iv_prefix && '/type' ).
    secret_scanning_location-details = mo_json->value_string( iv_prefix && '/details' ).
  ENDMETHOD.

  METHOD parse_stargazer.
    stargazer-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
    stargazer-user = parse_nullable_simple_user( iv_prefix && '/user' ).
  ENDMETHOD.

  METHOD parse_code_frequency_stat.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_commit_activity.
* todo, array, days
    commit_activity-total = mo_json->value_string( iv_prefix && '/total' ).
    commit_activity-week = mo_json->value_string( iv_prefix && '/week' ).
  ENDMETHOD.

  METHOD parse_contributor_activity.
    contributor_activity-author = parse_nullable_simple_user( iv_prefix && '/author' ).
    contributor_activity-total = mo_json->value_string( iv_prefix && '/total' ).
* todo, array, weeks
  ENDMETHOD.

  METHOD parse_participation_stats.
* todo, array, all
* todo, array, owner
  ENDMETHOD.

  METHOD parse_repository_subscription.
    repository_subscription-subscribed = mo_json->value_boolean( iv_prefix && '/subscribed' ).
    repository_subscription-ignored = mo_json->value_boolean( iv_prefix && '/ignored' ).
    repository_subscription-reason = mo_json->value_string( iv_prefix && '/reason' ).
    repository_subscription-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository_subscription-url = mo_json->value_string( iv_prefix && '/url' ).
    repository_subscription-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
  ENDMETHOD.

  METHOD parse_tag.
    tag-name = mo_json->value_string( iv_prefix && '/name' ).
    tag-commit-sha = mo_json->value_string( iv_prefix && '/commit/sha' ).
    tag-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    tag-zipball_url = mo_json->value_string( iv_prefix && '/zipball_url' ).
    tag-tarball_url = mo_json->value_string( iv_prefix && '/tarball_url' ).
    tag-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
  ENDMETHOD.

  METHOD parse_topic.
* todo, array, names
  ENDMETHOD.

  METHOD parse_traffic.
    traffic-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
    traffic-uniques = mo_json->value_string( iv_prefix && '/uniques' ).
    traffic-count = mo_json->value_string( iv_prefix && '/count' ).
  ENDMETHOD.

  METHOD parse_clone_traffic.
    clone_traffic-count = mo_json->value_string( iv_prefix && '/count' ).
    clone_traffic-uniques = mo_json->value_string( iv_prefix && '/uniques' ).
* todo, array, clones
  ENDMETHOD.

  METHOD parse_content_traffic.
    content_traffic-path = mo_json->value_string( iv_prefix && '/path' ).
    content_traffic-title = mo_json->value_string( iv_prefix && '/title' ).
    content_traffic-count = mo_json->value_string( iv_prefix && '/count' ).
    content_traffic-uniques = mo_json->value_string( iv_prefix && '/uniques' ).
  ENDMETHOD.

  METHOD parse_referrer_traffic.
    referrer_traffic-referrer = mo_json->value_string( iv_prefix && '/referrer' ).
    referrer_traffic-count = mo_json->value_string( iv_prefix && '/count' ).
    referrer_traffic-uniques = mo_json->value_string( iv_prefix && '/uniques' ).
  ENDMETHOD.

  METHOD parse_view_traffic.
    view_traffic-count = mo_json->value_string( iv_prefix && '/count' ).
    view_traffic-uniques = mo_json->value_string( iv_prefix && '/uniques' ).
* todo, array, views
  ENDMETHOD.

  METHOD parse_scim_group_list_enterpri.
* todo, array, schemas
* todo, number, totalresults
* todo, number, itemsperpage
* todo, number, startindex
* todo, array, resources
  ENDMETHOD.

  METHOD parse_scim_enterprise_group.
* todo, array, schemas
    scim_enterprise_group-id = mo_json->value_string( iv_prefix && '/id' ).
    scim_enterprise_group-externalid = mo_json->value_string( iv_prefix && '/externalId' ).
    scim_enterprise_group-displayname = mo_json->value_string( iv_prefix && '/displayName' ).
* todo, array, members
    scim_enterprise_group-meta-resourcetype = mo_json->value_string( iv_prefix && '/meta/resourceType' ).
    scim_enterprise_group-meta-created = mo_json->value_string( iv_prefix && '/meta/created' ).
    scim_enterprise_group-meta-lastmodified = mo_json->value_string( iv_prefix && '/meta/lastModified' ).
    scim_enterprise_group-meta-location = mo_json->value_string( iv_prefix && '/meta/location' ).
  ENDMETHOD.

  METHOD parse_scim_user_list_enterpris.
* todo, array, schemas
* todo, number, totalresults
* todo, number, itemsperpage
* todo, number, startindex
* todo, array, resources
  ENDMETHOD.

  METHOD parse_scim_enterprise_user.
* todo, array, schemas
    scim_enterprise_user-id = mo_json->value_string( iv_prefix && '/id' ).
    scim_enterprise_user-externalid = mo_json->value_string( iv_prefix && '/externalId' ).
    scim_enterprise_user-username = mo_json->value_string( iv_prefix && '/userName' ).
    scim_enterprise_user-name-givenname = mo_json->value_string( iv_prefix && '/name/givenName' ).
    scim_enterprise_user-name-familyname = mo_json->value_string( iv_prefix && '/name/familyName' ).
* todo, array, emails
* todo, array, groups
    scim_enterprise_user-active = mo_json->value_boolean( iv_prefix && '/active' ).
    scim_enterprise_user-meta-resourcetype = mo_json->value_string( iv_prefix && '/meta/resourceType' ).
    scim_enterprise_user-meta-created = mo_json->value_string( iv_prefix && '/meta/created' ).
    scim_enterprise_user-meta-lastmodified = mo_json->value_string( iv_prefix && '/meta/lastModified' ).
    scim_enterprise_user-meta-location = mo_json->value_string( iv_prefix && '/meta/location' ).
  ENDMETHOD.

  METHOD parse_scim_user.
* todo, array, schemas
    scim_user-id = mo_json->value_string( iv_prefix && '/id' ).
    scim_user-externalid = mo_json->value_string( iv_prefix && '/externalId' ).
    scim_user-username = mo_json->value_string( iv_prefix && '/userName' ).
    scim_user-displayname = mo_json->value_string( iv_prefix && '/displayName' ).
    scim_user-name-givenname = mo_json->value_string( iv_prefix && '/name/givenName' ).
    scim_user-name-familyname = mo_json->value_string( iv_prefix && '/name/familyName' ).
    scim_user-name-formatted = mo_json->value_string( iv_prefix && '/name/formatted' ).
* todo, array, emails
    scim_user-active = mo_json->value_boolean( iv_prefix && '/active' ).
    scim_user-meta-resourcetype = mo_json->value_string( iv_prefix && '/meta/resourceType' ).
    scim_user-meta-created = mo_json->value_string( iv_prefix && '/meta/created' ).
    scim_user-meta-lastmodified = mo_json->value_string( iv_prefix && '/meta/lastModified' ).
    scim_user-meta-location = mo_json->value_string( iv_prefix && '/meta/location' ).
    scim_user-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
* todo, array, operations
* todo, array, groups
  ENDMETHOD.

  METHOD parse_scim_user_list.
* todo, array, schemas
    scim_user_list-totalresults = mo_json->value_string( iv_prefix && '/totalResults' ).
    scim_user_list-itemsperpage = mo_json->value_string( iv_prefix && '/itemsPerPage' ).
    scim_user_list-startindex = mo_json->value_string( iv_prefix && '/startIndex' ).
* todo, array, resources
  ENDMETHOD.

  METHOD parse_search_result_text_match.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_code_search_result_item.
    code_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    code_search_result_item-path = mo_json->value_string( iv_prefix && '/path' ).
    code_search_result_item-sha = mo_json->value_string( iv_prefix && '/sha' ).
    code_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    code_search_result_item-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    code_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    code_search_result_item-repository = parse_minimal_repository( iv_prefix && '/repository' ).
* todo, number, score
    code_search_result_item-file_size = mo_json->value_string( iv_prefix && '/file_size' ).
    code_search_result_item-language = mo_json->value_string( iv_prefix && '/language' ).
    code_search_result_item-last_modified_at = mo_json->value_string( iv_prefix && '/last_modified_at' ).
* todo, array, line_numbers
    code_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
  ENDMETHOD.

  METHOD parse_commit_search_result_ite.
    commit_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_search_result_item-sha = mo_json->value_string( iv_prefix && '/sha' ).
    commit_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    commit_search_result_item-commit-author-name = mo_json->value_string( iv_prefix && '/commit/author/name' ).
    commit_search_result_item-commit-author-email = mo_json->value_string( iv_prefix && '/commit/author/email' ).
    commit_search_result_item-commit-author-date = mo_json->value_string( iv_prefix && '/commit/author/date' ).
    commit_search_result_item-commit-committer = parse_nullable_git_user( iv_prefix && '/commit/committer' ).
    commit_search_result_item-commit-comment_count = mo_json->value_string( iv_prefix && '/commit/comment_count' ).
    commit_search_result_item-commit-message = mo_json->value_string( iv_prefix && '/commit/message' ).
    commit_search_result_item-commit-tree-sha = mo_json->value_string( iv_prefix && '/commit/tree/sha' ).
    commit_search_result_item-commit-tree-url = mo_json->value_string( iv_prefix && '/commit/tree/url' ).
    commit_search_result_item-commit-url = mo_json->value_string( iv_prefix && '/commit/url' ).
    commit_search_result_item-commit-verification = parse_verification( iv_prefix && '/commit/verification' ).
    commit_search_result_item-author = parse_nullable_simple_user( iv_prefix && '/author' ).
    commit_search_result_item-committer = parse_nullable_git_user( iv_prefix && '/committer' ).
* todo, array, parents
    commit_search_result_item-repository = parse_minimal_repository( iv_prefix && '/repository' ).
* todo, number, score
    commit_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    commit_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
  ENDMETHOD.

  METHOD parse_issue_search_result_item.
    issue_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_search_result_item-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    issue_search_result_item-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    issue_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    issue_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    issue_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_search_result_item-number = mo_json->value_string( iv_prefix && '/number' ).
    issue_search_result_item-title = mo_json->value_string( iv_prefix && '/title' ).
    issue_search_result_item-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    issue_search_result_item-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
* todo, array, assignees
    issue_search_result_item-user = parse_nullable_simple_user( iv_prefix && '/user' ).
* todo, array, labels
    issue_search_result_item-state = mo_json->value_string( iv_prefix && '/state' ).
    issue_search_result_item-assignee = parse_nullable_simple_user( iv_prefix && '/assignee' ).
    issue_search_result_item-milestone = parse_nullable_milestone( iv_prefix && '/milestone' ).
    issue_search_result_item-comments = mo_json->value_string( iv_prefix && '/comments' ).
    issue_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    issue_search_result_item-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    issue_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
    issue_search_result_item-pull_request-merged_at = mo_json->value_string( iv_prefix && '/pull_request/merged_at' ).
    issue_search_result_item-pull_request-diff_url = mo_json->value_string( iv_prefix && '/pull_request/diff_url' ).
    issue_search_result_item-pull_request-html_url = mo_json->value_string( iv_prefix && '/pull_request/html_url' ).
    issue_search_result_item-pull_request-patch_url = mo_json->value_string( iv_prefix && '/pull_request/patch_url' ).
    issue_search_result_item-pull_request-url = mo_json->value_string( iv_prefix && '/pull_request/url' ).
    issue_search_result_item-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, number, score
    issue_search_result_item-author_association = parse_author_association( iv_prefix && '/author_association' ).
    issue_search_result_item-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    issue_search_result_item-repository = parse_repository( iv_prefix && '/repository' ).
    issue_search_result_item-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_search_result_item-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue_search_result_item-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
    issue_search_result_item-performed_via_github_app = parse_nullable_integration( iv_prefix && '/performed_via_github_app' ).
    issue_search_result_item-reactions = parse_reaction_rollup( iv_prefix && '/reactions' ).
  ENDMETHOD.

  METHOD parse_label_search_result_item.
    label_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    label_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    label_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    label_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    label_search_result_item-color = mo_json->value_string( iv_prefix && '/color' ).
    label_search_result_item-default = mo_json->value_boolean( iv_prefix && '/default' ).
    label_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
* todo, number, score
    label_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
  ENDMETHOD.

  METHOD parse_repo_search_result_item.
    repo_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    repo_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    repo_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    repo_search_result_item-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
    repo_search_result_item-owner = parse_nullable_simple_user( iv_prefix && '/owner' ).
    repo_search_result_item-private = mo_json->value_boolean( iv_prefix && '/private' ).
    repo_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repo_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
    repo_search_result_item-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    repo_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    repo_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repo_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    repo_search_result_item-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    repo_search_result_item-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    repo_search_result_item-size = mo_json->value_string( iv_prefix && '/size' ).
    repo_search_result_item-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    repo_search_result_item-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    repo_search_result_item-language = mo_json->value_string( iv_prefix && '/language' ).
    repo_search_result_item-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    repo_search_result_item-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    repo_search_result_item-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    repo_search_result_item-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
* todo, number, score
    repo_search_result_item-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    repo_search_result_item-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    repo_search_result_item-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    repo_search_result_item-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    repo_search_result_item-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    repo_search_result_item-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    repo_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    repo_search_result_item-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    repo_search_result_item-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    repo_search_result_item-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    repo_search_result_item-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    repo_search_result_item-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    repo_search_result_item-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    repo_search_result_item-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    repo_search_result_item-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    repo_search_result_item-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    repo_search_result_item-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    repo_search_result_item-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    repo_search_result_item-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    repo_search_result_item-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    repo_search_result_item-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    repo_search_result_item-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    repo_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    repo_search_result_item-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    repo_search_result_item-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    repo_search_result_item-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    repo_search_result_item-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    repo_search_result_item-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    repo_search_result_item-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    repo_search_result_item-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    repo_search_result_item-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    repo_search_result_item-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    repo_search_result_item-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    repo_search_result_item-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    repo_search_result_item-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    repo_search_result_item-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    repo_search_result_item-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    repo_search_result_item-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    repo_search_result_item-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    repo_search_result_item-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    repo_search_result_item-forks = mo_json->value_string( iv_prefix && '/forks' ).
    repo_search_result_item-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    repo_search_result_item-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
* todo, array, topics
    repo_search_result_item-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    repo_search_result_item-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    repo_search_result_item-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    repo_search_result_item-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    repo_search_result_item-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    repo_search_result_item-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    repo_search_result_item-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    repo_search_result_item-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    repo_search_result_item-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    repo_search_result_item-license = parse_nullable_license_simple( iv_prefix && '/license' ).
    repo_search_result_item-permissions-admin = mo_json->value_boolean( iv_prefix && '/permissions/admin' ).
    repo_search_result_item-permissions-maintain = mo_json->value_boolean( iv_prefix && '/permissions/maintain' ).
    repo_search_result_item-permissions-push = mo_json->value_boolean( iv_prefix && '/permissions/push' ).
    repo_search_result_item-permissions-triage = mo_json->value_boolean( iv_prefix && '/permissions/triage' ).
    repo_search_result_item-permissions-pull = mo_json->value_boolean( iv_prefix && '/permissions/pull' ).
    repo_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
    repo_search_result_item-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    repo_search_result_item-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    repo_search_result_item-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    repo_search_result_item-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    repo_search_result_item-allow_auto_merge = mo_json->value_boolean( iv_prefix && '/allow_auto_merge' ).
    repo_search_result_item-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    repo_search_result_item-allow_forking = mo_json->value_boolean( iv_prefix && '/allow_forking' ).
    repo_search_result_item-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
  ENDMETHOD.

  METHOD parse_topic_search_result_item.
    topic_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    topic_search_result_item-display_name = mo_json->value_string( iv_prefix && '/display_name' ).
    topic_search_result_item-short_description = mo_json->value_string( iv_prefix && '/short_description' ).
    topic_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
    topic_search_result_item-created_by = mo_json->value_string( iv_prefix && '/created_by' ).
    topic_search_result_item-released = mo_json->value_string( iv_prefix && '/released' ).
    topic_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    topic_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    topic_search_result_item-featured = mo_json->value_boolean( iv_prefix && '/featured' ).
    topic_search_result_item-curated = mo_json->value_boolean( iv_prefix && '/curated' ).
* todo, number, score
    topic_search_result_item-repository_count = mo_json->value_string( iv_prefix && '/repository_count' ).
    topic_search_result_item-logo_url = mo_json->value_string( iv_prefix && '/logo_url' ).
    topic_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
* todo, array, related
* todo, array, aliases
  ENDMETHOD.

  METHOD parse_user_search_result_item.
    user_search_result_item-login = mo_json->value_string( iv_prefix && '/login' ).
    user_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    user_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    user_search_result_item-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    user_search_result_item-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    user_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    user_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    user_search_result_item-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    user_search_result_item-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    user_search_result_item-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    user_search_result_item-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    user_search_result_item-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    user_search_result_item-type = mo_json->value_string( iv_prefix && '/type' ).
* todo, number, score
    user_search_result_item-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    user_search_result_item-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    user_search_result_item-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    user_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    user_search_result_item-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    user_search_result_item-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    user_search_result_item-followers = mo_json->value_string( iv_prefix && '/followers' ).
    user_search_result_item-following = mo_json->value_string( iv_prefix && '/following' ).
    user_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    user_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    user_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    user_search_result_item-bio = mo_json->value_string( iv_prefix && '/bio' ).
    user_search_result_item-email = mo_json->value_string( iv_prefix && '/email' ).
    user_search_result_item-location = mo_json->value_string( iv_prefix && '/location' ).
    user_search_result_item-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    user_search_result_item-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
    user_search_result_item-text_matches = parse_search_result_text_match( iv_prefix && '/text_matches' ).
    user_search_result_item-blog = mo_json->value_string( iv_prefix && '/blog' ).
    user_search_result_item-company = mo_json->value_string( iv_prefix && '/company' ).
    user_search_result_item-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
  ENDMETHOD.

  METHOD parse_private_user.
    private_user-login = mo_json->value_string( iv_prefix && '/login' ).
    private_user-id = mo_json->value_string( iv_prefix && '/id' ).
    private_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    private_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    private_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    private_user-url = mo_json->value_string( iv_prefix && '/url' ).
    private_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    private_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    private_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    private_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    private_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    private_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    private_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    private_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    private_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    private_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    private_user-type = mo_json->value_string( iv_prefix && '/type' ).
    private_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    private_user-name = mo_json->value_string( iv_prefix && '/name' ).
    private_user-company = mo_json->value_string( iv_prefix && '/company' ).
    private_user-blog = mo_json->value_string( iv_prefix && '/blog' ).
    private_user-location = mo_json->value_string( iv_prefix && '/location' ).
    private_user-email = mo_json->value_string( iv_prefix && '/email' ).
    private_user-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
    private_user-bio = mo_json->value_string( iv_prefix && '/bio' ).
    private_user-twitter_username = mo_json->value_string( iv_prefix && '/twitter_username' ).
    private_user-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    private_user-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    private_user-followers = mo_json->value_string( iv_prefix && '/followers' ).
    private_user-following = mo_json->value_string( iv_prefix && '/following' ).
    private_user-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    private_user-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    private_user-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    private_user-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    private_user-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    private_user-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    private_user-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
    private_user-two_factor_authentication = mo_json->value_boolean( iv_prefix && '/two_factor_authentication' ).
    private_user-plan-collaborators = mo_json->value_string( iv_prefix && '/plan/collaborators' ).
    private_user-plan-name = mo_json->value_string( iv_prefix && '/plan/name' ).
    private_user-plan-space = mo_json->value_string( iv_prefix && '/plan/space' ).
    private_user-plan-private_repos = mo_json->value_string( iv_prefix && '/plan/private_repos' ).
    private_user-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    private_user-business_plus = mo_json->value_boolean( iv_prefix && '/business_plus' ).
    private_user-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_codespaces_secret.
    codespaces_secret-name = mo_json->value_string( iv_prefix && '/name' ).
    codespaces_secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    codespaces_secret-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    codespaces_secret-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    codespaces_secret-selected_repositories_url = mo_json->value_string( iv_prefix && '/selected_repositories_url' ).
  ENDMETHOD.

  METHOD parse_codespaces_user_public_k.
    codespaces_user_public_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    codespaces_user_public_key-key = mo_json->value_string( iv_prefix && '/key' ).
  ENDMETHOD.

  METHOD parse_codespace_export_details.
    codespace_export_details-state = mo_json->value_string( iv_prefix && '/state' ).
    codespace_export_details-completed_at = mo_json->value_string( iv_prefix && '/completed_at' ).
    codespace_export_details-branch = mo_json->value_string( iv_prefix && '/branch' ).
    codespace_export_details-sha = mo_json->value_string( iv_prefix && '/sha' ).
    codespace_export_details-id = mo_json->value_string( iv_prefix && '/id' ).
    codespace_export_details-export_url = mo_json->value_string( iv_prefix && '/export_url' ).
  ENDMETHOD.

  METHOD parse_email.
    email-email = mo_json->value_string( iv_prefix && '/email' ).
    email-primary = mo_json->value_boolean( iv_prefix && '/primary' ).
    email-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    email-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
  ENDMETHOD.

  METHOD parse_gpg_key.
    gpg_key-id = mo_json->value_string( iv_prefix && '/id' ).
    gpg_key-primary_key_id = mo_json->value_string( iv_prefix && '/primary_key_id' ).
    gpg_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    gpg_key-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
* todo, array, emails
* todo, array, subkeys
    gpg_key-can_sign = mo_json->value_boolean( iv_prefix && '/can_sign' ).
    gpg_key-can_encrypt_comms = mo_json->value_boolean( iv_prefix && '/can_encrypt_comms' ).
    gpg_key-can_encrypt_storage = mo_json->value_boolean( iv_prefix && '/can_encrypt_storage' ).
    gpg_key-can_certify = mo_json->value_boolean( iv_prefix && '/can_certify' ).
    gpg_key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gpg_key-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
    gpg_key-raw_key = mo_json->value_string( iv_prefix && '/raw_key' ).
  ENDMETHOD.

  METHOD parse_key.
    key-key = mo_json->value_string( iv_prefix && '/key' ).
    key-id = mo_json->value_string( iv_prefix && '/id' ).
    key-url = mo_json->value_string( iv_prefix && '/url' ).
    key-title = mo_json->value_string( iv_prefix && '/title' ).
    key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    key-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    key-read_only = mo_json->value_boolean( iv_prefix && '/read_only' ).
  ENDMETHOD.

  METHOD parse_marketplace_account.
    marketplace_account-url = mo_json->value_string( iv_prefix && '/url' ).
    marketplace_account-id = mo_json->value_string( iv_prefix && '/id' ).
    marketplace_account-type = mo_json->value_string( iv_prefix && '/type' ).
    marketplace_account-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    marketplace_account-login = mo_json->value_string( iv_prefix && '/login' ).
    marketplace_account-email = mo_json->value_string( iv_prefix && '/email' ).
    marketplace_account-organization_billing_email = mo_json->value_string( iv_prefix && '/organization_billing_email' ).
  ENDMETHOD.

  METHOD parse_user_marketplace_purchas.
    user_marketplace_purchase-billing_cycle = mo_json->value_string( iv_prefix && '/billing_cycle' ).
    user_marketplace_purchase-next_billing_date = mo_json->value_string( iv_prefix && '/next_billing_date' ).
    user_marketplace_purchase-unit_count = mo_json->value_string( iv_prefix && '/unit_count' ).
    user_marketplace_purchase-on_free_trial = mo_json->value_boolean( iv_prefix && '/on_free_trial' ).
    user_marketplace_purchase-free_trial_ends_on = mo_json->value_string( iv_prefix && '/free_trial_ends_on' ).
    user_marketplace_purchase-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    user_marketplace_purchase-account = parse_marketplace_account( iv_prefix && '/account' ).
    user_marketplace_purchase-plan = parse_marketplace_listing_plan( iv_prefix && '/plan' ).
  ENDMETHOD.

  METHOD parse_starred_repository.
    starred_repository-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
    starred_repository-repo = parse_repository( iv_prefix && '/repo' ).
  ENDMETHOD.

  METHOD parse_hovercard.
* todo, array, contexts
  ENDMETHOD.

  METHOD parse_key_simple.
    key_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    key_simple-key = mo_json->value_string( iv_prefix && '/key' ).
  ENDMETHOD.

  METHOD parse_meta_root.
    response_meta_root-current_user_url = mo_json->value_string( iv_prefix && '/current_user_url' ).
    response_meta_root-current_user_authorizations_ht = mo_json->value_string( iv_prefix && '/current_user_authorizations_html_url' ).
    response_meta_root-authorizations_url = mo_json->value_string( iv_prefix && '/authorizations_url' ).
    response_meta_root-code_search_url = mo_json->value_string( iv_prefix && '/code_search_url' ).
    response_meta_root-commit_search_url = mo_json->value_string( iv_prefix && '/commit_search_url' ).
    response_meta_root-emails_url = mo_json->value_string( iv_prefix && '/emails_url' ).
    response_meta_root-emojis_url = mo_json->value_string( iv_prefix && '/emojis_url' ).
    response_meta_root-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    response_meta_root-feeds_url = mo_json->value_string( iv_prefix && '/feeds_url' ).
    response_meta_root-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    response_meta_root-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    response_meta_root-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    response_meta_root-hub_url = mo_json->value_string( iv_prefix && '/hub_url' ).
    response_meta_root-issue_search_url = mo_json->value_string( iv_prefix && '/issue_search_url' ).
    response_meta_root-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    response_meta_root-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    response_meta_root-label_search_url = mo_json->value_string( iv_prefix && '/label_search_url' ).
    response_meta_root-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    response_meta_root-organization_url = mo_json->value_string( iv_prefix && '/organization_url' ).
    response_meta_root-organization_repositories_url = mo_json->value_string( iv_prefix && '/organization_repositories_url' ).
    response_meta_root-organization_teams_url = mo_json->value_string( iv_prefix && '/organization_teams_url' ).
    response_meta_root-public_gists_url = mo_json->value_string( iv_prefix && '/public_gists_url' ).
    response_meta_root-rate_limit_url = mo_json->value_string( iv_prefix && '/rate_limit_url' ).
    response_meta_root-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    response_meta_root-repository_search_url = mo_json->value_string( iv_prefix && '/repository_search_url' ).
    response_meta_root-current_user_repositories_url = mo_json->value_string( iv_prefix && '/current_user_repositories_url' ).
    response_meta_root-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    response_meta_root-starred_gists_url = mo_json->value_string( iv_prefix && '/starred_gists_url' ).
    response_meta_root-topic_search_url = mo_json->value_string( iv_prefix && '/topic_search_url' ).
    response_meta_root-user_url = mo_json->value_string( iv_prefix && '/user_url' ).
    response_meta_root-user_organizations_url = mo_json->value_string( iv_prefix && '/user_organizations_url' ).
    response_meta_root-user_repositories_url = mo_json->value_string( iv_prefix && '/user_repositories_url' ).
    response_meta_root-user_search_url = mo_json->value_string( iv_prefix && '/user_search_url' ).
  ENDMETHOD.

  METHOD parse_apps_list_webhook_delive.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA hook_delivery_item TYPE zif_github=>hook_delivery_item.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR hook_delivery_item.
      hook_delivery_item = parse_hook_delivery_item( iv_prefix && '/' && lv_member ).
      APPEND hook_delivery_item TO response_apps_list_webhook_del.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_installations.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA installation TYPE zif_github=>installation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR installation.
      installation = parse_installation( iv_prefix && '/' && lv_member ).
      APPEND installation TO response_apps_list_installatio.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_codes_of_conduct_get_all.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_of_conduct TYPE zif_github=>code_of_conduct.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_of_conduct.
      code_of_conduct = parse_code_of_conduct( iv_prefix && '/' && lv_member ).
      APPEND code_of_conduct TO response_codes_of_conduct_get_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_emojis_get.
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_se.
* todo, number, total_count
* todo, array, organizations
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_01.
* todo, number, total_count
* todo, array, runner_groups
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_or.
* todo, number, total_count
* todo, array, organizations
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_02.
* todo, number, total_count
* todo, array, runners
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_03.
* todo, number, total_count
* todo, array, runners
  ENDMETHOD.

  METHOD parse_enterprise_admin_list_ru.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA runner_application TYPE zif_github=>runner_application.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR runner_application.
      runner_application = parse_runner_application( iv_prefix && '/' && lv_member ).
      APPEND runner_application TO response_enterprise_admin_li05.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_enterprise_admin_get_aud.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA audit_log_event TYPE zif_github=>audit_log_event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR audit_log_event.
      audit_log_event = parse_audit_log_event( iv_prefix && '/' && lv_member ).
      APPEND audit_log_event TO response_enterprise_admin_get_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_secret_scanning_list_ale.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_secret_scanning_a TYPE zif_github=>organization_secret_scanning_a.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_secret_scanning_a.
      organization_secret_scanning_a = parse_organization_secret_scan( iv_prefix && '/' && lv_member ).
      APPEND organization_secret_scanning_a TO response_secret_scanning_list_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_public_eve.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_public_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA base_gist TYPE zif_github=>base_gist.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR base_gist.
      base_gist = parse_base_gist( iv_prefix && '/' && lv_member ).
      APPEND base_gist TO response_gists_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_public.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA base_gist TYPE zif_github=>base_gist.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR base_gist.
      base_gist = parse_base_gist( iv_prefix && '/' && lv_member ).
      APPEND base_gist TO response_gists_list_public.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_starred.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA base_gist TYPE zif_github=>base_gist.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR base_gist.
      base_gist = parse_base_gist( iv_prefix && '/' && lv_member ).
      APPEND base_gist TO response_gists_list_starred.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_comments.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA gist_comment TYPE zif_github=>gist_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR gist_comment.
      gist_comment = parse_gist_comment( iv_prefix && '/' && lv_member ).
      APPEND gist_comment TO response_gists_list_comments.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_commits.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA gist_commit TYPE zif_github=>gist_commit.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR gist_commit.
      gist_commit = parse_gist_commit( iv_prefix && '/' && lv_member ).
      APPEND gist_commit TO response_gists_list_commits.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_forks.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA gist_simple TYPE zif_github=>gist_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR gist_simple.
      gist_simple = parse_gist_simple( iv_prefix && '/' && lv_member ).
      APPEND gist_simple TO response_gists_list_forks.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_check_is_starred.
  ENDMETHOD.

  METHOD parse_gitignore_get_all_templa.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_apps_list_repos_accessib.
    response_apps_list_repos_acces-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, repositories
    response_apps_list_repos_acces-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
  ENDMETHOD.

  METHOD parse_issues_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue TYPE zif_github=>issue.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue.
      issue = parse_issue( iv_prefix && '/' && lv_member ).
      APPEND issue TO response_issues_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_licenses_get_all_commonl.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA license_simple TYPE zif_github=>license_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR license_simple.
      license_simple = parse_license_simple( iv_prefix && '/' && lv_member ).
      APPEND license_simple TO response_licenses_get_all_comm.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_plans.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA marketplace_listing_plan TYPE zif_github=>marketplace_listing_plan.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR marketplace_listing_plan.
      marketplace_listing_plan = parse_marketplace_listing_plan( iv_prefix && '/' && lv_member ).
      APPEND marketplace_listing_plan TO response_apps_list_plans.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_accounts_for_p.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA marketplace_purchase TYPE zif_github=>marketplace_purchase.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR marketplace_purchase.
      marketplace_purchase = parse_marketplace_purchase( iv_prefix && '/' && lv_member ).
      APPEND marketplace_purchase TO response_apps_list_accounts_fo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_plans_stubbed.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA marketplace_listing_plan TYPE zif_github=>marketplace_listing_plan.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR marketplace_listing_plan.
      marketplace_listing_plan = parse_marketplace_listing_plan( iv_prefix && '/' && lv_member ).
      APPEND marketplace_listing_plan TO response_apps_list_plans_stubb.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_accounts_for01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA marketplace_purchase TYPE zif_github=>marketplace_purchase.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR marketplace_purchase.
      marketplace_purchase = parse_marketplace_purchase( iv_prefix && '/' && lv_member ).
      APPEND marketplace_purchase TO response_apps_list_accounts_01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_public_e01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_publi01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_notificati.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA thread TYPE zif_github=>thread.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR thread.
      thread = parse_thread( iv_prefix && '/' && lv_member ).
      APPEND thread TO response_activity_list_notific.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_mark_notificati.
    response_activity_mark_notific-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_orgs_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_simple TYPE zif_github=>organization_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_simple.
      organization_simple = parse_organization_simple( iv_prefix && '/' && lv_member ).
      APPEND organization_simple TO response_orgs_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_custom_roles.
    response_orgs_list_custom_role-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, custom_roles
  ENDMETHOD.

  METHOD parse_actions_list_selected_re.
* todo, number, total_count
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_actions_list_self_hosted.
* todo, number, total_count
* todo, array, runner_groups
  ENDMETHOD.

  METHOD parse_actions_list_repo_access.
* todo, number, total_count
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_actions_list_self_host01.
* todo, number, total_count
* todo, array, runners
  ENDMETHOD.

  METHOD parse_actions_list_self_host02.
    response_actions_list_self_h02-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, runners
  ENDMETHOD.

  METHOD parse_actions_list_runner_appl.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA runner_application TYPE zif_github=>runner_application.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR runner_application.
      runner_application = parse_runner_application( iv_prefix && '/' && lv_member ).
      APPEND runner_application TO response_actions_list_runner_a.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_list_org_secrets.
    response_actions_list_org_secr-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_actions_list_selected_01.
    response_actions_list_select01-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_orgs_get_audit_log.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA audit_log_event TYPE zif_github=>audit_log_event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR audit_log_event.
      audit_log_event = parse_audit_log_event( iv_prefix && '/' && lv_member ).
      APPEND audit_log_event TO response_orgs_get_audit_log.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_blocked_users.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_orgs_list_blocked_use.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_code_scanning_list_alert.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_scanning_organization_ale TYPE zif_github=>code_scanning_organization_ale.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_scanning_organization_ale.
      code_scanning_organization_ale = parse_code_scanning_organizati( iv_prefix && '/' && lv_member ).
      APPEND code_scanning_organization_ale TO response_code_scanning_list_al.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_saml_sso_autho.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA credential_authorization TYPE zif_github=>credential_authorization.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR credential_authorization.
      credential_authorization = parse_credential_authorization( iv_prefix && '/' && lv_member ).
      APPEND credential_authorization TO response_orgs_list_saml_sso_au.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_dependabot_list_org_secr.
    response_dependabot_list_org_s-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_dependabot_list_selected.
    response_dependabot_list_selec-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_activity_list_public_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_publi02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_failed_invitat.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_invitation TYPE zif_github=>organization_invitation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_invitation.
      organization_invitation = parse_organization_invitation( iv_prefix && '/' && lv_member ).
      APPEND organization_invitation TO response_orgs_list_failed_invi.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_webhooks.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA org_hook TYPE zif_github=>org_hook.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR org_hook.
      org_hook = parse_org_hook( iv_prefix && '/' && lv_member ).
      APPEND org_hook TO response_orgs_list_webhooks.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_webhook_delive.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA hook_delivery_item TYPE zif_github=>hook_delivery_item.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR hook_delivery_item.
      hook_delivery_item = parse_hook_delivery_item( iv_prefix && '/' && lv_member ).
      APPEND hook_delivery_item TO response_orgs_list_webhook_del.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_app_installati.
    response_orgs_list_app_install-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, installations
  ENDMETHOD.

  METHOD parse_orgs_list_pending_invita.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_invitation TYPE zif_github=>organization_invitation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_invitation.
      organization_invitation = parse_organization_invitation( iv_prefix && '/' && lv_member ).
      APPEND organization_invitation TO response_orgs_list_pending_inv.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_invitation_tea.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_orgs_list_invitation_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_for_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue TYPE zif_github=>issue.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue.
      issue = parse_issue( iv_prefix && '/' && lv_member ).
      APPEND issue TO response_issues_list_for_org.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_members.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_orgs_list_members.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_list_for_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA migration TYPE zif_github=>migration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR migration.
      migration = parse_migration( iv_prefix && '/' && lv_member ).
      APPEND migration TO response_migrations_list_for_o.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_list_repos_fo.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_migrations_list_repos.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_outside_collab.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_orgs_list_outside_col.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_convert_member_to_o.
  ENDMETHOD.

  METHOD parse_orgs_remove_outside_coll.
    response_orgs_remove_outside_c-message = mo_json->value_string( iv_prefix && '/message' ).
    response_orgs_remove_outside_c-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_packages_list_packages_f.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package TYPE zif_github=>package.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package.
      package = parse_package( iv_prefix && '/' && lv_member ).
      APPEND package TO response_packages_list_package.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_packages_get_all_package.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package_version TYPE zif_github=>package_version.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package_version.
      package_version = parse_package_version( iv_prefix && '/' && lv_member ).
      APPEND package_version TO response_packages_get_all_pack.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_list_for_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA project TYPE zif_github=>project.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR project.
      project = parse_project( iv_prefix && '/' && lv_member ).
      APPEND project TO response_projects_list_for_org.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_public_members.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_orgs_list_public_memb.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_for_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_repos_list_for_org.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_secret_scanning_list_a01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_secret_scanning_a TYPE zif_github=>organization_secret_scanning_a.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_secret_scanning_a.
      organization_secret_scanning_a = parse_organization_secret_scan( iv_prefix && '/' && lv_member ).
      APPEND organization_secret_scanning_a TO response_secret_scanning_lis01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_teams_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_discussions_i.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team_discussion TYPE zif_github=>team_discussion.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team_discussion.
      team_discussion = parse_team_discussion( iv_prefix && '/' && lv_member ).
      APPEND team_discussion TO response_teams_list_discussion.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_discussion_co.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team_discussion_comment TYPE zif_github=>team_discussion_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team_discussion_comment.
      team_discussion_comment = parse_team_discussion_comment( iv_prefix && '/' && lv_member ).
      APPEND team_discussion_comment TO response_teams_list_discussi01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_team_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_te.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_tea01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_pending_invit.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_invitation TYPE zif_github=>organization_invitation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_invitation.
      organization_invitation = parse_organization_invitation( iv_prefix && '/' && lv_member ).
      APPEND organization_invitation TO response_teams_list_pending_in.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_members_in_or.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_teams_list_members_in.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_projects_in_o.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team_project TYPE zif_github=>team_project.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team_project.
      team_project = parse_team_project( iv_prefix && '/' && lv_member ).
      APPEND team_project TO response_teams_list_projects_i.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_add_or_update_proj.
    response_teams_add_or_update_p-message = mo_json->value_string( iv_prefix && '/message' ).
    response_teams_add_or_update_p-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_teams_list_repos_in_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_teams_list_repos_in_o.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_child_in_org.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_teams_list_child_in_o.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_delete_card.
    response_projects_delete_card-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_delete_card-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_move_card.
  ENDMETHOD.

  METHOD parse_projects_move_card01.
    response_projects_move_card01-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_move_card01-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_move_card02.
    response_projects_move_card02-code = mo_json->value_string( iv_prefix && '/code' ).
    response_projects_move_card02-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_move_card02-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_list_cards.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA project_card TYPE zif_github=>project_card.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR project_card.
      project_card = parse_project_card( iv_prefix && '/' && lv_member ).
      APPEND project_card TO response_projects_list_cards.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_create_card.
    response_projects_create_card-code = mo_json->value_string( iv_prefix && '/code' ).
    response_projects_create_card-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_create_card-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_move_column.
  ENDMETHOD.

  METHOD parse_projects_update.
    response_projects_update-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_update-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_delete.
    response_projects_delete-message = mo_json->value_string( iv_prefix && '/message' ).
    response_projects_delete-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, array, errors
  ENDMETHOD.

  METHOD parse_projects_list_collaborat.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_projects_list_collabo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_list_columns.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA project_column TYPE zif_github=>project_column.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR project_column.
      project_column = parse_project_column( iv_prefix && '/' && lv_member ).
      APPEND project_column TO response_projects_list_columns.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_delete.
    response_repos_delete-message = mo_json->value_string( iv_prefix && '/message' ).
    response_repos_delete-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_actions_list_artifacts_f.
    response_actions_list_artifact-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, artifacts
  ENDMETHOD.

  METHOD parse_actions_list_self_host03.
    response_actions_list_self_h03-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, runners
  ENDMETHOD.

  METHOD parse_actions_list_runner_ap01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA runner_application TYPE zif_github=>runner_application.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR runner_application.
      runner_application = parse_runner_application( iv_prefix && '/' && lv_member ).
      APPEND runner_application TO response_actions_list_runner01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_list_workflow_ru.
    response_actions_list_workflow-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, workflow_runs
  ENDMETHOD.

  METHOD parse_actions_get_reviews_for_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA environment_approvals TYPE zif_github=>environment_approvals.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR environment_approvals.
      environment_approvals = parse_environment_approvals( iv_prefix && '/' && lv_member ).
      APPEND environment_approvals TO response_actions_get_reviews_f.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_list_workflow_01.
    response_actions_list_workfl01-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, artifacts
  ENDMETHOD.

  METHOD parse_actions_list_jobs_for_wo.
    response_actions_list_jobs_for-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, jobs
  ENDMETHOD.

  METHOD parse_actions_cancel_workflow_.
  ENDMETHOD.

  METHOD parse_actions_list_jobs_for_01.
    response_actions_list_jobs_f01-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, jobs
  ENDMETHOD.

  METHOD parse_actions_get_pending_depl.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pending_deployment TYPE zif_github=>pending_deployment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pending_deployment.
      pending_deployment = parse_pending_deployment( iv_prefix && '/' && lv_member ).
      APPEND pending_deployment TO response_actions_get_pending_d.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_review_pending_d.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA deployment TYPE zif_github=>deployment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR deployment.
      deployment = parse_deployment( iv_prefix && '/' && lv_member ).
      APPEND deployment TO response_actions_review_pendin.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_list_repo_secret.
    response_actions_list_repo_sec-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_actions_create_or_update.
  ENDMETHOD.

  METHOD parse_actions_list_repo_workfl.
    response_actions_list_repo_wor-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, workflows
  ENDMETHOD.

  METHOD parse_actions_list_workflow_02.
    response_actions_list_workfl02-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, workflow_runs
  ENDMETHOD.

  METHOD parse_issues_list_assignees.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_issues_list_assignees.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_autolinks.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA autolink TYPE zif_github=>autolink.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR autolink.
      autolink = parse_autolink( iv_prefix && '/' && lv_member ).
      APPEND autolink TO response_repos_list_autolinks.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_branches.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA short_branch TYPE zif_github=>short_branch.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR short_branch.
      short_branch = parse_short_branch( iv_prefix && '/' && lv_member ).
      APPEND short_branch TO response_repos_list_branches.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_all_status_che.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_repos_add_status_check_c.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_repos_set_status_check_c.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_repos_remove_status_chec.
* todo, handle type array, no item_ref
  ENDMETHOD.

  METHOD parse_repos_get_apps_with_acce.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA integration TYPE zif_github=>integration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR integration.
      integration = parse_integration( iv_prefix && '/' && lv_member ).
      APPEND integration TO response_repos_get_apps_with_a.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_add_app_access_res.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA integration TYPE zif_github=>integration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR integration.
      integration = parse_integration( iv_prefix && '/' && lv_member ).
      APPEND integration TO response_repos_add_app_access_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_set_app_access_res.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA integration TYPE zif_github=>integration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR integration.
      integration = parse_integration( iv_prefix && '/' && lv_member ).
      APPEND integration TO response_repos_set_app_access_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_remove_app_access_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA integration TYPE zif_github=>integration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR integration.
      integration = parse_integration( iv_prefix && '/' && lv_member ).
      APPEND integration TO response_repos_remove_app_acce.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_teams_with_acc.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_repos_get_teams_with_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_add_team_access_re.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_repos_add_team_access.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_set_team_access_re.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_repos_set_team_access.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_remove_team_access.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_repos_remove_team_acc.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_users_with_acc.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_repos_get_users_with_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_add_user_access_re.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_repos_add_user_access.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_set_user_access_re.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_repos_set_user_access.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_remove_user_access.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_repos_remove_user_acc.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_checks_list_annotations.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA check_annotation TYPE zif_github=>check_annotation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR check_annotation.
      check_annotation = parse_check_annotation( iv_prefix && '/' && lv_member ).
      APPEND check_annotation TO response_checks_list_annotatio.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_checks_rerequest_run.
  ENDMETHOD.

  METHOD parse_checks_list_for_suite.
    response_checks_list_for_suite-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, check_runs
  ENDMETHOD.

  METHOD parse_checks_rerequest_suite.
  ENDMETHOD.

  METHOD parse_code_scanning_list_ale01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_scanning_alert_items TYPE zif_github=>code_scanning_alert_items.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_scanning_alert_items.
      code_scanning_alert_items = parse_code_scanning_alert_item( iv_prefix && '/' && lv_member ).
      APPEND code_scanning_alert_items TO response_code_scanning_list_01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_code_scanning_list_ale02.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_scanning_alert_instance TYPE zif_github=>code_scanning_alert_instance.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_scanning_alert_instance.
      code_scanning_alert_instance = parse_code_scanning_alert_inst( iv_prefix && '/' && lv_member ).
      APPEND code_scanning_alert_instance TO response_code_scanning_list_02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_code_scanning_list_recen.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_scanning_analysis TYPE zif_github=>code_scanning_analysis.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_scanning_analysis.
      code_scanning_analysis = parse_code_scanning_analysis( iv_prefix && '/' && lv_member ).
      APPEND code_scanning_analysis TO response_code_scanning_list_re.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_codespaces_list_in_repos.
    response_codespaces_list_in_re-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, codespaces
  ENDMETHOD.

  METHOD parse_codespaces_repo_machines.
    response_codespaces_repo_machi-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, machines
  ENDMETHOD.

  METHOD parse_repos_list_collaborators.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA collaborator TYPE zif_github=>collaborator.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR collaborator.
      collaborator = parse_collaborator( iv_prefix && '/' && lv_member ).
      APPEND collaborator TO response_repos_list_collaborat.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_commit_commen.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA commit_comment TYPE zif_github=>commit_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR commit_comment.
      commit_comment = parse_commit_comment( iv_prefix && '/' && lv_member ).
      APPEND commit_comment TO response_repos_list_commit_com.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_commi.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_co.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_commits.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA commit TYPE zif_github=>commit.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR commit.
      commit = parse_commit( iv_prefix && '/' && lv_member ).
      APPEND commit TO response_repos_list_commits.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_branches_for_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA branch_short TYPE zif_github=>branch_short.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR branch_short.
      branch_short = parse_branch_short( iv_prefix && '/' && lv_member ).
      APPEND branch_short TO response_repos_list_branches_f.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_comments_for_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA commit_comment TYPE zif_github=>commit_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR commit_comment.
      commit_comment = parse_commit_comment( iv_prefix && '/' && lv_member ).
      APPEND commit_comment TO response_repos_list_comments_f.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_pull_requests.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pull_request_simple TYPE zif_github=>pull_request_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pull_request_simple.
      pull_request_simple = parse_pull_request_simple( iv_prefix && '/' && lv_member ).
      APPEND pull_request_simple TO response_repos_list_pull_reque.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_checks_list_for_ref.
    response_checks_list_for_ref-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, check_runs
  ENDMETHOD.

  METHOD parse_checks_list_suites_for_r.
    response_checks_list_suites_fo-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, check_suites
  ENDMETHOD.

  METHOD parse_repos_list_commit_status.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA status TYPE zif_github=>status.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR status.
      status = parse_status( iv_prefix && '/' && lv_member ).
      APPEND status TO response_repos_list_commit_sta.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_contributors.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA contributor TYPE zif_github=>contributor.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR contributor.
      contributor = parse_contributor( iv_prefix && '/' && lv_member ).
      APPEND contributor TO response_repos_list_contributo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_dependabot_list_repo_sec.
    response_dependabot_list_repo_-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_dependabot_create_or_upd.
  ENDMETHOD.

  METHOD parse_repos_list_deployments.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA deployment TYPE zif_github=>deployment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR deployment.
      deployment = parse_deployment( iv_prefix && '/' && lv_member ).
      APPEND deployment TO response_repos_list_deployment.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_create_deployment.
    response_repos_create_deployme-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_repos_list_deployment_st.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA deployment_status TYPE zif_github=>deployment_status.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR deployment_status.
      deployment_status = parse_deployment_status( iv_prefix && '/' && lv_member ).
      APPEND deployment_status TO response_repos_list_deployme01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_all_environmen.
    response_repos_get_all_environ-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, environments
  ENDMETHOD.

  METHOD parse_activity_list_repo_event.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_repo_ev.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_forks.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_repos_list_forks.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_git_list_matching_refs.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA git_ref TYPE zif_github=>git_ref.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR git_ref.
      git_ref = parse_git_ref( iv_prefix && '/' && lv_member ).
      APPEND git_ref TO response_git_list_matching_ref.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_webhooks.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA hook TYPE zif_github=>hook.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR hook.
      hook = parse_hook( iv_prefix && '/' && lv_member ).
      APPEND hook TO response_repos_list_webhooks.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_webhook_deliv.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA hook_delivery_item TYPE zif_github=>hook_delivery_item.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR hook_delivery_item.
      hook_delivery_item = parse_hook_delivery_item( iv_prefix && '/' && lv_member ).
      APPEND hook_delivery_item TO response_repos_list_webhook_de.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_get_commit_au.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA porter_author TYPE zif_github=>porter_author.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR porter_author.
      porter_author = parse_porter_author( iv_prefix && '/' && lv_member ).
      APPEND porter_author TO response_migrations_get_commit.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_get_large_fil.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA porter_large_file TYPE zif_github=>porter_large_file.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR porter_large_file.
      porter_large_file = parse_porter_large_file( iv_prefix && '/' && lv_member ).
      APPEND porter_large_file TO response_migrations_get_large_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_invitations.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA repository_invitation TYPE zif_github=>repository_invitation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR repository_invitation.
      repository_invitation = parse_repository_invitation( iv_prefix && '/' && lv_member ).
      APPEND repository_invitation TO response_repos_list_invitation.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_for_repo.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue TYPE zif_github=>issue.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue.
      issue = parse_issue( iv_prefix && '/' && lv_member ).
      APPEND issue TO response_issues_list_for_repo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_comments_for.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue_comment TYPE zif_github=>issue_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue_comment.
      issue_comment = parse_issue_comment( iv_prefix && '/' && lv_member ).
      APPEND issue_comment TO response_issues_list_comments_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_issue.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_is.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_events_for_r.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue_event TYPE zif_github=>issue_event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue_event.
      issue_event = parse_issue_event( iv_prefix && '/' && lv_member ).
      APPEND issue_event TO response_issues_list_events_fo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_comments.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue_comment TYPE zif_github=>issue_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue_comment.
      issue_comment = parse_issue_comment( iv_prefix && '/' && lv_member ).
      APPEND issue_comment TO response_issues_list_comments.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_events.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue_event_for_issue TYPE zif_github=>issue_event_for_issue.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue_event_for_issue.
      issue_event_for_issue = parse_issue_event_for_issue( iv_prefix && '/' && lv_member ).
      APPEND issue_event_for_issue TO response_issues_list_events.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_labels_on_is.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_list_labels_on.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_add_labels.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_add_labels.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_set_labels.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_set_labels.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_remove_label.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_remove_label.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_iss01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_events_for_t.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA timeline_issue_events TYPE zif_github=>timeline_issue_events.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR timeline_issue_events.
      timeline_issue_events = parse_timeline_issue_events( iv_prefix && '/' && lv_member ).
      APPEND timeline_issue_events TO response_issues_list_events_01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_deploy_keys.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA deploy_key TYPE zif_github=>deploy_key.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR deploy_key.
      deploy_key = parse_deploy_key( iv_prefix && '/' && lv_member ).
      APPEND deploy_key TO response_repos_list_deploy_key.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_labels_for_r.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_list_labels_fo.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_milestones.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA milestone TYPE zif_github=>milestone.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR milestone.
      milestone = parse_milestone( iv_prefix && '/' && lv_member ).
      APPEND milestone TO response_issues_list_milestone.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_issues_list_labels_for_m.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA label TYPE zif_github=>label.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR label.
      label = parse_label( iv_prefix && '/' && lv_member ).
      APPEND label TO response_issues_list_labels_01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_repo_notif.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA thread TYPE zif_github=>thread.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR thread.
      thread = parse_thread( iv_prefix && '/' && lv_member ).
      APPEND thread TO response_activity_list_repo_no.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_mark_repo_notif.
    response_activity_mark_repo_no-message = mo_json->value_string( iv_prefix && '/message' ).
    response_activity_mark_repo_no-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_repos_list_pages_builds.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA page_build TYPE zif_github=>page_build.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR page_build.
      page_build = parse_page_build( iv_prefix && '/' && lv_member ).
      APPEND page_build TO response_repos_list_pages_buil.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_list_for_repo.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA project TYPE zif_github=>project.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR project.
      project = parse_project( iv_prefix && '/' && lv_member ).
      APPEND project TO response_projects_list_for_rep.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pull_request_simple TYPE zif_github=>pull_request_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pull_request_simple.
      pull_request_simple = parse_pull_request_simple( iv_prefix && '/' && lv_member ).
      APPEND pull_request_simple TO response_pulls_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list_review_commen.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pull_request_review_comment TYPE zif_github=>pull_request_review_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pull_request_review_comment.
      pull_request_review_comment = parse_pull_request_review_comm( iv_prefix && '/' && lv_member ).
      APPEND pull_request_review_comment TO response_pulls_list_review_com.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_reactions_list_for_pull_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA reaction TYPE zif_github=>reaction.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR reaction.
      reaction = parse_reaction( iv_prefix && '/' && lv_member ).
      APPEND reaction TO response_reactions_list_for_pu.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list_review_comm01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pull_request_review_comment TYPE zif_github=>pull_request_review_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pull_request_review_comment.
      pull_request_review_comment = parse_pull_request_review_comm( iv_prefix && '/' && lv_member ).
      APPEND pull_request_review_comment TO response_pulls_list_review_c01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list_commits.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA commit TYPE zif_github=>commit.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR commit.
      commit = parse_commit( iv_prefix && '/' && lv_member ).
      APPEND commit TO response_pulls_list_commits.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list_files.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA diff_entry TYPE zif_github=>diff_entry.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR diff_entry.
      diff_entry = parse_diff_entry( iv_prefix && '/' && lv_member ).
      APPEND diff_entry TO response_pulls_list_files.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_merge.
    response_pulls_merge-message = mo_json->value_string( iv_prefix && '/message' ).
    response_pulls_merge-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_pulls_merge01.
    response_pulls_merge01-message = mo_json->value_string( iv_prefix && '/message' ).
    response_pulls_merge01-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_pulls_list_reviews.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA pull_request_review TYPE zif_github=>pull_request_review.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR pull_request_review.
      pull_request_review = parse_pull_request_review( iv_prefix && '/' && lv_member ).
      APPEND pull_request_review TO response_pulls_list_reviews.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_list_comments_for_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA review_comment TYPE zif_github=>review_comment.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR review_comment.
      review_comment = parse_review_comment( iv_prefix && '/' && lv_member ).
      APPEND review_comment TO response_pulls_list_comments_f.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_pulls_update_branch.
    response_pulls_update_branch-message = mo_json->value_string( iv_prefix && '/message' ).
    response_pulls_update_branch-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_repos_list_releases.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA release TYPE zif_github=>release.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR release.
      release = parse_release( iv_prefix && '/' && lv_member ).
      APPEND release TO response_repos_list_releases.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_release_asset.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA release_asset TYPE zif_github=>release_asset.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR release_asset.
      release_asset = parse_release_asset( iv_prefix && '/' && lv_member ).
      APPEND release_asset TO response_repos_list_release_as.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_secret_scanning_list_a02.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA secret_scanning_alert TYPE zif_github=>secret_scanning_alert.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR secret_scanning_alert.
      secret_scanning_alert = parse_secret_scanning_alert( iv_prefix && '/' && lv_member ).
      APPEND secret_scanning_alert TO response_secret_scanning_lis02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_secret_scanning_list_loc.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA secret_scanning_location TYPE zif_github=>secret_scanning_location.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR secret_scanning_location.
      secret_scanning_location = parse_secret_scanning_locati01( iv_prefix && '/' && lv_member ).
      APPEND secret_scanning_location TO response_secret_scanning_lis03.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_code_frequency.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_frequency_stat TYPE zif_github=>code_frequency_stat.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_frequency_stat.
      code_frequency_stat = parse_code_frequency_stat( iv_prefix && '/' && lv_member ).
      APPEND code_frequency_stat TO response_repos_get_code_freque.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_commit_activit.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA commit_activity TYPE zif_github=>commit_activity.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR commit_activity.
      commit_activity = parse_commit_activity( iv_prefix && '/' && lv_member ).
      APPEND commit_activity TO response_repos_get_commit_acti.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_contributors_s.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA contributor_activity TYPE zif_github=>contributor_activity.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR contributor_activity.
      contributor_activity = parse_contributor_activity( iv_prefix && '/' && lv_member ).
      APPEND contributor_activity TO response_repos_get_contributor.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_punch_card_sta.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA code_frequency_stat TYPE zif_github=>code_frequency_stat.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR code_frequency_stat.
      code_frequency_stat = parse_code_frequency_stat( iv_prefix && '/' && lv_member ).
      APPEND code_frequency_stat TO response_repos_get_punch_card_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_watchers_f.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_activity_list_watcher.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_tags.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA tag TYPE zif_github=>tag.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR tag.
      tag = parse_tag( iv_prefix && '/' && lv_member ).
      APPEND tag TO response_repos_list_tags.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_teams.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team TYPE zif_github=>team.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team.
      team = parse_team( iv_prefix && '/' && lv_member ).
      APPEND team TO response_repos_list_teams.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_top_paths.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA content_traffic TYPE zif_github=>content_traffic.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR content_traffic.
      content_traffic = parse_content_traffic( iv_prefix && '/' && lv_member ).
      APPEND content_traffic TO response_repos_get_top_paths.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_get_top_referrers.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA referrer_traffic TYPE zif_github=>referrer_traffic.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR referrer_traffic.
      referrer_traffic = parse_referrer_traffic( iv_prefix && '/' && lv_member ).
      APPEND referrer_traffic TO response_repos_get_top_referre.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_public.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_repos_list_public.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_actions_list_environment.
    response_actions_list_environm-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_search_code.
    response_search_code-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_code-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_commits.
    response_search_commits-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_commits-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_issues_and_pull_r.
    response_search_issues_and_pul-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_issues_and_pul-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_labels.
    response_search_labels-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_labels-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_repos.
    response_search_repos-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_repos-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_topics.
    response_search_topics-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_topics-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_search_users.
    response_search_users-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_search_users-incomplete_results = mo_json->value_boolean( iv_prefix && '/incomplete_results' ).
* todo, array, items
  ENDMETHOD.

  METHOD parse_users_list_blocked_by_au.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list_blocked_by.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_codespaces_list_for_auth.
    response_codespaces_list_for_a-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, codespaces
  ENDMETHOD.

  METHOD parse_codespaces_list_secrets_.
    response_codespaces_list_secre-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, secrets
  ENDMETHOD.

  METHOD parse_codespaces_create_or_upd.
  ENDMETHOD.

  METHOD parse_codespaces_list_reposito.
    response_codespaces_list_repos-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_codespaces_codespace_mac.
    response_codespaces_codespace_-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, machines
  ENDMETHOD.

  METHOD parse_users_set_primary_email_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA email TYPE zif_github=>email.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR email.
      email = parse_email( iv_prefix && '/' && lv_member ).
      APPEND email TO response_users_set_primary_ema.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_emails_for_au.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA email TYPE zif_github=>email.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR email.
      email = parse_email( iv_prefix && '/' && lv_member ).
      APPEND email TO response_users_list_emails_for.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_add_email_for_auth.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA email TYPE zif_github=>email.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR email.
      email = parse_email( iv_prefix && '/' && lv_member ).
      APPEND email TO response_users_add_email_for_a.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_followers_for.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list_followers_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_followed_by_a.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list_followed_b.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_gpg_keys_for_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA gpg_key TYPE zif_github=>gpg_key.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR gpg_key.
      gpg_key = parse_gpg_key( iv_prefix && '/' && lv_member ).
      APPEND gpg_key TO response_users_list_gpg_keys_f.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_installations_.
    response_apps_list_installat01-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, array, installations
  ENDMETHOD.

  METHOD parse_apps_list_installation_r.
    response_apps_list_installat02-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    response_apps_list_installat02-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
* todo, array, repositories
  ENDMETHOD.

  METHOD parse_issues_list_for_authenti.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA issue TYPE zif_github=>issue.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR issue.
      issue = parse_issue( iv_prefix && '/' && lv_member ).
      APPEND issue TO response_issues_list_for_authe.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_public_ssh_ke.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA key TYPE zif_github=>key.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR key.
      key = parse_key( iv_prefix && '/' && lv_member ).
      APPEND key TO response_users_list_public_ssh.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_subscriptions_.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA user_marketplace_purchase TYPE zif_github=>user_marketplace_purchase.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR user_marketplace_purchase.
      user_marketplace_purchase = parse_user_marketplace_purchas( iv_prefix && '/' && lv_member ).
      APPEND user_marketplace_purchase TO response_apps_list_subscriptio.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_apps_list_subscription01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA user_marketplace_purchase TYPE zif_github=>user_marketplace_purchase.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR user_marketplace_purchase.
      user_marketplace_purchase = parse_user_marketplace_purchas( iv_prefix && '/' && lv_member ).
      APPEND user_marketplace_purchase TO response_apps_list_subscript01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_memberships_fo.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA org_membership TYPE zif_github=>org_membership.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR org_membership.
      org_membership = parse_org_membership( iv_prefix && '/' && lv_member ).
      APPEND org_membership TO response_orgs_list_memberships.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_list_for_auth.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA migration TYPE zif_github=>migration.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR migration.
      migration = parse_migration( iv_prefix && '/' && lv_member ).
      APPEND migration TO response_migrations_list_for_a.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_migrations_list_repos_01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_migrations_list_rep01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_for_authentica.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_simple TYPE zif_github=>organization_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_simple.
      organization_simple = parse_organization_simple( iv_prefix && '/' && lv_member ).
      APPEND organization_simple TO response_orgs_list_for_authent.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_packages_list_packages01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package TYPE zif_github=>package.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package.
      package = parse_package( iv_prefix && '/' && lv_member ).
      APPEND package TO response_packages_list_packa01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_packages_get_all_packa01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package_version TYPE zif_github=>package_version.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package_version.
      package_version = parse_package_version( iv_prefix && '/' && lv_member ).
      APPEND package_version TO response_packages_get_all_pa01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_public_emails.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA email TYPE zif_github=>email.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR email.
      email = parse_email( iv_prefix && '/' && lv_member ).
      APPEND email TO response_users_list_public_ema.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_for_authentic.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA repository TYPE zif_github=>repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR repository.
      repository = parse_repository( iv_prefix && '/' && lv_member ).
      APPEND repository TO response_repos_list_for_authen.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_invitations_f.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA repository_invitation TYPE zif_github=>repository_invitation.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR repository_invitation.
      repository_invitation = parse_repository_invitation( iv_prefix && '/' && lv_member ).
      APPEND repository_invitation TO response_repos_list_invitati01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_repos_star.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA repository TYPE zif_github=>repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR repository.
      repository = parse_repository( iv_prefix && '/' && lv_member ).
      APPEND repository TO response_activity_list_repos_s.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_watched_re.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_activity_list_watched.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_teams_list_for_authentic.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA team_full TYPE zif_github=>team_full.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR team_full.
      team_full = parse_team_full( iv_prefix && '/' && lv_member ).
      APPEND team_full TO response_teams_list_for_authen.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_events_for.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_events_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_org_events.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_org_eve.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_public_e02.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_publi03.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_followers_f01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list_follower01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_following_for.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA simple_user TYPE zif_github=>simple_user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR simple_user.
      simple_user = parse_simple_user( iv_prefix && '/' && lv_member ).
      APPEND simple_user TO response_users_list_following_.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_gists_list_for_user.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA base_gist TYPE zif_github=>base_gist.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR base_gist.
      base_gist = parse_base_gist( iv_prefix && '/' && lv_member ).
      APPEND base_gist TO response_gists_list_for_user.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_gpg_keys_fo01.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA gpg_key TYPE zif_github=>gpg_key.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR gpg_key.
      gpg_key = parse_gpg_key( iv_prefix && '/' && lv_member ).
      APPEND gpg_key TO response_users_list_gpg_keys01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_users_list_public_keys_f.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA key_simple TYPE zif_github=>key_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR key_simple.
      key_simple = parse_key_simple( iv_prefix && '/' && lv_member ).
      APPEND key_simple TO response_users_list_public_key.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_orgs_list_for_user.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA organization_simple TYPE zif_github=>organization_simple.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR organization_simple.
      organization_simple = parse_organization_simple( iv_prefix && '/' && lv_member ).
      APPEND organization_simple TO response_orgs_list_for_user.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_packages_list_packages02.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package TYPE zif_github=>package.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package.
      package = parse_package( iv_prefix && '/' && lv_member ).
      APPEND package TO response_packages_list_packa02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_packages_get_all_packa02.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA package_version TYPE zif_github=>package_version.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR package_version.
      package_version = parse_package_version( iv_prefix && '/' && lv_member ).
      APPEND package_version TO response_packages_get_all_pa02.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_projects_list_for_user.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA project TYPE zif_github=>project.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR project.
      project = parse_project( iv_prefix && '/' && lv_member ).
      APPEND project TO response_projects_list_for_use.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_received_e.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_receive.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_received_p.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA event TYPE zif_github=>event.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR event.
      event = parse_event( iv_prefix && '/' && lv_member ).
      APPEND event TO response_activity_list_recei01.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_repos_list_for_user.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_repos_list_for_user.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_activity_list_repos_watc.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA minimal_repository TYPE zif_github=>minimal_repository.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR minimal_repository.
      minimal_repository = parse_minimal_repository( iv_prefix && '/' && lv_member ).
      APPEND minimal_repository TO response_activity_list_repos_w.
    ENDLOOP.
  ENDMETHOD.

  METHOD json_apps_create_from_manifest.
    json = json && '{'.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_update_webhook_confi.
    json = json && '{'.
*  json = json && '"url":' not simple
*  json = json && '"content_type":' not simple
*  json = json && '"secret":' not simple
*  json = json && '"insecure_ssl":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_create_installation_.
    json = json && '{'.
*  json = json && '"repositories":' not simple
*  json = json && '"repository_ids":' not simple
*  json = json && '"permissions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_delete_authorization.
    json = json && '{'.
    json = json && |"access_token": "{ data-access_token }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_check_token.
    json = json && '{'.
    json = json && |"access_token": "{ data-access_token }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_reset_token.
    json = json && '{'.
    json = json && |"access_token": "{ data-access_token }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_delete_token.
    json = json && '{'.
    json = json && |"access_token": "{ data-access_token }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_apps_scope_token.
    json = json && '{'.
    json = json && |"access_token": "{ data-access_token }",|.
    json = json && |"target": "{ data-target }",|.
    IF data-target_id <> cl_abap_math=>max_int4.
      json = json && |"target_id": { data-target_id },|.
    ENDIF.
*  json = json && '"repositories":' not simple
*  json = json && '"repository_ids":' not simple
*  json = json && '"permissions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_gith.
    json = json && '{'.
*  json = json && '"enabled_organizations":' not simple
*  json = json && '"allowed_actions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_sele.
    json = json && '{'.
*  json = json && '"selected_organization_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_create_s.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_organization_ids":' not simple
*  json = json && '"runners":' not simple
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_update_s.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_delete_s.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_org_.
    json = json && '{'.
*  json = json && '"selected_organization_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_self.
    json = json && '{'.
*  json = json && '"runners":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_add_cust.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_cust.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_remove_a.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_create.
    json = json && '{'.
    json = json && |"description": "{ data-description }",|.
*  json = json && '"files":' not simple
    json = json && |"public": "{ data-public }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_update.
    json = json && '{'.
    json = json && |"description": "{ data-description }",|.
*  json = json && '"files":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_delete.
    json = json && '{'.
    json = json && |"description": "{ data-description }",|.
*  json = json && '"files":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_create_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_update_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_gists_delete_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_markdown_render.
    json = json && '{'.
    json = json && |"text": "{ data-text }",|.
    json = json && |"mode": "{ data-mode }",|.
    json = json && |"context": "{ data-context }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_mark_notificatio.
    json = json && '{'.
    json = json && |"last_read_at": "{ data-last_read_at }",|.
    IF data-read = abap_true.
      json = json && |"read": true,|.
    ELSEIF data-read = abap_false.
      json = json && |"read": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_set_thread_subsc.
    json = json && '{'.
    IF data-ignored = abap_true.
      json = json && |"ignored": true,|.
    ELSEIF data-ignored = abap_false.
      json = json && |"ignored": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_delete_thread_su.
    json = json && '{'.
    IF data-ignored = abap_true.
      json = json && |"ignored": true,|.
    ELSEIF data-ignored = abap_false.
      json = json && |"ignored": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_update.
    json = json && '{'.
    json = json && |"billing_email": "{ data-billing_email }",|.
    json = json && |"company": "{ data-company }",|.
    json = json && |"email": "{ data-email }",|.
    json = json && |"twitter_username": "{ data-twitter_username }",|.
    json = json && |"location": "{ data-location }",|.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    IF data-has_organization_projects = abap_true.
      json = json && |"has_organization_projects": true,|.
    ELSEIF data-has_organization_projects = abap_false.
      json = json && |"has_organization_projects": false,|.
    ENDIF.
    IF data-has_repository_projects = abap_true.
      json = json && |"has_repository_projects": true,|.
    ELSEIF data-has_repository_projects = abap_false.
      json = json && |"has_repository_projects": false,|.
    ENDIF.
    json = json && |"default_repository_permission": "{ data-default_repository_permission }",|.
    IF data-members_can_create_repositorie = abap_true.
      json = json && |"members_can_create_repositories": true,|.
    ELSEIF data-members_can_create_repositorie = abap_false.
      json = json && |"members_can_create_repositories": false,|.
    ENDIF.
    IF data-members_can_create_internal_re = abap_true.
      json = json && |"members_can_create_internal_repositories": true,|.
    ELSEIF data-members_can_create_internal_re = abap_false.
      json = json && |"members_can_create_internal_repositories": false,|.
    ENDIF.
    IF data-members_can_create_private_rep = abap_true.
      json = json && |"members_can_create_private_repositories": true,|.
    ELSEIF data-members_can_create_private_rep = abap_false.
      json = json && |"members_can_create_private_repositories": false,|.
    ENDIF.
    IF data-members_can_create_public_repo = abap_true.
      json = json && |"members_can_create_public_repositories": true,|.
    ELSEIF data-members_can_create_public_repo = abap_false.
      json = json && |"members_can_create_public_repositories": false,|.
    ENDIF.
    json = json && |"members_allowed_repository_creation_type": "{ data-members_allowed_repository_cre }",|.
    IF data-members_can_create_pages = abap_true.
      json = json && |"members_can_create_pages": true,|.
    ELSEIF data-members_can_create_pages = abap_false.
      json = json && |"members_can_create_pages": false,|.
    ENDIF.
    IF data-members_can_create_public_page = abap_true.
      json = json && |"members_can_create_public_pages": true,|.
    ELSEIF data-members_can_create_public_page = abap_false.
      json = json && |"members_can_create_public_pages": false,|.
    ENDIF.
    IF data-members_can_create_private_pag = abap_true.
      json = json && |"members_can_create_private_pages": true,|.
    ELSEIF data-members_can_create_private_pag = abap_false.
      json = json && |"members_can_create_private_pages": false,|.
    ENDIF.
    IF data-members_can_fork_private_repos = abap_true.
      json = json && |"members_can_fork_private_repositories": true,|.
    ELSEIF data-members_can_fork_private_repos = abap_false.
      json = json && |"members_can_fork_private_repositories": false,|.
    ENDIF.
    json = json && |"blog": "{ data-blog }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_github_action.
    json = json && '{'.
*  json = json && '"enabled_repositories":' not simple
*  json = json && '"allowed_actions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_selected_repo.
    json = json && '{'.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_create_self_hoste.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_repository_ids":' not simple
*  json = json && '"runners":' not simple
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_update_self_hoste.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_delete_self_hoste.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"visibility": "{ data-visibility }",|.
    IF data-allows_public_repositories = abap_true.
      json = json && |"allows_public_repositories": true,|.
    ELSEIF data-allows_public_repositories = abap_false.
      json = json && |"allows_public_repositories": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_repo_access_t.
    json = json && '{'.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_self_hosted_r.
    json = json && '{'.
*  json = json && '"runners":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_add_custom_labels.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_custom_labels.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_remove_all_custom.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_create_or_update_.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_delete_org_secret.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_selected_re01.
    json = json && '{'.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_dependabot_create_or_upda.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_dependabot_delete_org_sec.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_dependabot_set_selected_r.
    json = json && '{'.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_create_webhook.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_update_webhook.
    json = json && '{'.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_delete_webhook.
    json = json && '{'.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_update_webhook_confi.
    json = json && '{'.
*  json = json && '"url":' not simple
*  json = json && '"content_type":' not simple
*  json = json && '"secret":' not simple
*  json = json && '"insecure_ssl":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_create_invitation.
    json = json && '{'.
    IF data-invitee_id <> cl_abap_math=>max_int4.
      json = json && |"invitee_id": { data-invitee_id },|.
    ENDIF.
    json = json && |"email": "{ data-email }",|.
    json = json && |"role": "{ data-role }",|.
*  json = json && '"team_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_set_membership_for_u.
    json = json && '{'.
    json = json && |"role": "{ data-role }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_remove_membership_fo.
    json = json && '{'.
    json = json && |"role": "{ data-role }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_start_for_org.
    json = json && '{'.
*  json = json && '"repositories":' not simple
    IF data-lock_repositories = abap_true.
      json = json && |"lock_repositories": true,|.
    ELSEIF data-lock_repositories = abap_false.
      json = json && |"lock_repositories": false,|.
    ENDIF.
    IF data-exclude_attachments = abap_true.
      json = json && |"exclude_attachments": true,|.
    ELSEIF data-exclude_attachments = abap_false.
      json = json && |"exclude_attachments": false,|.
    ENDIF.
    IF data-exclude_releases = abap_true.
      json = json && |"exclude_releases": true,|.
    ELSEIF data-exclude_releases = abap_false.
      json = json && |"exclude_releases": false,|.
    ENDIF.
    IF data-exclude_owner_projects = abap_true.
      json = json && |"exclude_owner_projects": true,|.
    ELSEIF data-exclude_owner_projects = abap_false.
      json = json && |"exclude_owner_projects": false,|.
    ENDIF.
*  json = json && '"exclude":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_create_for_org.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_in_org.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"homepage": "{ data-homepage }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = json && |"visibility": "{ data-visibility }",|.
    IF data-has_issues = abap_true.
      json = json && |"has_issues": true,|.
    ELSEIF data-has_issues = abap_false.
      json = json && |"has_issues": false,|.
    ENDIF.
    IF data-has_projects = abap_true.
      json = json && |"has_projects": true,|.
    ELSEIF data-has_projects = abap_false.
      json = json && |"has_projects": false,|.
    ENDIF.
    IF data-has_wiki = abap_true.
      json = json && |"has_wiki": true,|.
    ELSEIF data-has_wiki = abap_false.
      json = json && |"has_wiki": false,|.
    ENDIF.
    IF data-is_template = abap_true.
      json = json && |"is_template": true,|.
    ELSEIF data-is_template = abap_false.
      json = json && |"is_template": false,|.
    ENDIF.
    IF data-team_id <> cl_abap_math=>max_int4.
      json = json && |"team_id": { data-team_id },|.
    ENDIF.
    IF data-auto_init = abap_true.
      json = json && |"auto_init": true,|.
    ELSEIF data-auto_init = abap_false.
      json = json && |"auto_init": false,|.
    ENDIF.
    json = json && |"gitignore_template": "{ data-gitignore_template }",|.
    json = json && |"license_template": "{ data-license_template }",|.
    IF data-allow_squash_merge = abap_true.
      json = json && |"allow_squash_merge": true,|.
    ELSEIF data-allow_squash_merge = abap_false.
      json = json && |"allow_squash_merge": false,|.
    ENDIF.
    IF data-allow_merge_commit = abap_true.
      json = json && |"allow_merge_commit": true,|.
    ELSEIF data-allow_merge_commit = abap_false.
      json = json && |"allow_merge_commit": false,|.
    ENDIF.
    IF data-allow_rebase_merge = abap_true.
      json = json && |"allow_rebase_merge": true,|.
    ELSEIF data-allow_rebase_merge = abap_false.
      json = json && |"allow_rebase_merge": false,|.
    ENDIF.
    IF data-allow_auto_merge = abap_true.
      json = json && |"allow_auto_merge": true,|.
    ELSEIF data-allow_auto_merge = abap_false.
      json = json && |"allow_auto_merge": false,|.
    ENDIF.
    IF data-delete_branch_on_merge = abap_true.
      json = json && |"delete_branch_on_merge": true,|.
    ELSEIF data-delete_branch_on_merge = abap_false.
      json = json && |"delete_branch_on_merge": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_create.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
*  json = json && '"maintainers":' not simple
*  json = json && '"repo_names":' not simple
    json = json && |"privacy": "{ data-privacy }",|.
    json = json && |"permission": "{ data-permission }",|.
    IF data-parent_team_id <> cl_abap_math=>max_int4.
      json = json && |"parent_team_id": { data-parent_team_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_update_in_org.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"privacy": "{ data-privacy }",|.
    json = json && |"permission": "{ data-permission }",|.
    IF data-parent_team_id <> cl_abap_math=>max_int4.
      json = json && |"parent_team_id": { data-parent_team_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_delete_in_org.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"privacy": "{ data-privacy }",|.
    json = json && |"permission": "{ data-permission }",|.
    IF data-parent_team_id <> cl_abap_math=>max_int4.
      json = json && |"parent_team_id": { data-parent_team_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_create_discussion_i.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_update_discussion_i.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_delete_discussion_i.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_create_discussion_c.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_update_discussion_c.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_delete_discussion_c.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_team.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_te01.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_link_external_idp_g.
    json = json && '{'.
    IF data-group_id <> cl_abap_math=>max_int4.
      json = json && |"group_id": { data-group_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_unlink_external_idp.
    json = json && '{'.
    IF data-group_id <> cl_abap_math=>max_int4.
      json = json && |"group_id": { data-group_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_add_or_update_membe.
    json = json && '{'.
    json = json && |"role": "{ data-role }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_remove_membership_f.
    json = json && '{'.
    json = json && |"role": "{ data-role }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_add_or_update_proje.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_remove_project_in_o.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_add_or_update_repo_.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_remove_repo_in_org.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_teams_create_or_update_id.
    json = json && '{'.
*  json = json && '"groups":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_update_card.
    json = json && '{'.
    json = json && |"note": "{ data-note }",|.
    IF data-archived = abap_true.
      json = json && |"archived": true,|.
    ELSEIF data-archived = abap_false.
      json = json && |"archived": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_delete_card.
    json = json && '{'.
    json = json && |"note": "{ data-note }",|.
    IF data-archived = abap_true.
      json = json && |"archived": true,|.
    ELSEIF data-archived = abap_false.
      json = json && |"archived": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_move_card.
    json = json && '{'.
    json = json && |"position": "{ data-position }",|.
    IF data-column_id <> cl_abap_math=>max_int4.
      json = json && |"column_id": { data-column_id },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_update_column.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_delete_column.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_move_column.
    json = json && '{'.
    json = json && |"position": "{ data-position }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_update.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"organization_permission": "{ data-organization_permission }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_delete.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"organization_permission": "{ data-organization_permission }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_add_collaborator.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_remove_collabora.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_create_column.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"homepage": "{ data-homepage }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"security_and_analysis":' not simple
    IF data-has_issues = abap_true.
      json = json && |"has_issues": true,|.
    ELSEIF data-has_issues = abap_false.
      json = json && |"has_issues": false,|.
    ENDIF.
    IF data-has_projects = abap_true.
      json = json && |"has_projects": true,|.
    ELSEIF data-has_projects = abap_false.
      json = json && |"has_projects": false,|.
    ENDIF.
    IF data-has_wiki = abap_true.
      json = json && |"has_wiki": true,|.
    ELSEIF data-has_wiki = abap_false.
      json = json && |"has_wiki": false,|.
    ENDIF.
    IF data-is_template = abap_true.
      json = json && |"is_template": true,|.
    ELSEIF data-is_template = abap_false.
      json = json && |"is_template": false,|.
    ENDIF.
    json = json && |"default_branch": "{ data-default_branch }",|.
    IF data-allow_squash_merge = abap_true.
      json = json && |"allow_squash_merge": true,|.
    ELSEIF data-allow_squash_merge = abap_false.
      json = json && |"allow_squash_merge": false,|.
    ENDIF.
    IF data-allow_merge_commit = abap_true.
      json = json && |"allow_merge_commit": true,|.
    ELSEIF data-allow_merge_commit = abap_false.
      json = json && |"allow_merge_commit": false,|.
    ENDIF.
    IF data-allow_rebase_merge = abap_true.
      json = json && |"allow_rebase_merge": true,|.
    ELSEIF data-allow_rebase_merge = abap_false.
      json = json && |"allow_rebase_merge": false,|.
    ENDIF.
    IF data-allow_auto_merge = abap_true.
      json = json && |"allow_auto_merge": true,|.
    ELSEIF data-allow_auto_merge = abap_false.
      json = json && |"allow_auto_merge": false,|.
    ENDIF.
    IF data-delete_branch_on_merge = abap_true.
      json = json && |"delete_branch_on_merge": true,|.
    ELSEIF data-delete_branch_on_merge = abap_false.
      json = json && |"delete_branch_on_merge": false,|.
    ENDIF.
    IF data-archived = abap_true.
      json = json && |"archived": true,|.
    ELSEIF data-archived = abap_false.
      json = json && |"archived": false,|.
    ENDIF.
    IF data-allow_forking = abap_true.
      json = json && |"allow_forking": true,|.
    ELSEIF data-allow_forking = abap_false.
      json = json && |"allow_forking": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"homepage": "{ data-homepage }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = json && |"visibility": "{ data-visibility }",|.
*  json = json && '"security_and_analysis":' not simple
    IF data-has_issues = abap_true.
      json = json && |"has_issues": true,|.
    ELSEIF data-has_issues = abap_false.
      json = json && |"has_issues": false,|.
    ENDIF.
    IF data-has_projects = abap_true.
      json = json && |"has_projects": true,|.
    ELSEIF data-has_projects = abap_false.
      json = json && |"has_projects": false,|.
    ENDIF.
    IF data-has_wiki = abap_true.
      json = json && |"has_wiki": true,|.
    ELSEIF data-has_wiki = abap_false.
      json = json && |"has_wiki": false,|.
    ENDIF.
    IF data-is_template = abap_true.
      json = json && |"is_template": true,|.
    ELSEIF data-is_template = abap_false.
      json = json && |"is_template": false,|.
    ENDIF.
    json = json && |"default_branch": "{ data-default_branch }",|.
    IF data-allow_squash_merge = abap_true.
      json = json && |"allow_squash_merge": true,|.
    ELSEIF data-allow_squash_merge = abap_false.
      json = json && |"allow_squash_merge": false,|.
    ENDIF.
    IF data-allow_merge_commit = abap_true.
      json = json && |"allow_merge_commit": true,|.
    ELSEIF data-allow_merge_commit = abap_false.
      json = json && |"allow_merge_commit": false,|.
    ENDIF.
    IF data-allow_rebase_merge = abap_true.
      json = json && |"allow_rebase_merge": true,|.
    ELSEIF data-allow_rebase_merge = abap_false.
      json = json && |"allow_rebase_merge": false,|.
    ENDIF.
    IF data-allow_auto_merge = abap_true.
      json = json && |"allow_auto_merge": true,|.
    ELSEIF data-allow_auto_merge = abap_false.
      json = json && |"allow_auto_merge": false,|.
    ENDIF.
    IF data-delete_branch_on_merge = abap_true.
      json = json && |"delete_branch_on_merge": true,|.
    ELSEIF data-delete_branch_on_merge = abap_false.
      json = json && |"delete_branch_on_merge": false,|.
    ENDIF.
    IF data-archived = abap_true.
      json = json && |"archived": true,|.
    ELSEIF data-archived = abap_false.
      json = json && |"archived": false,|.
    ENDIF.
    IF data-allow_forking = abap_true.
      json = json && |"allow_forking": true,|.
    ELSEIF data-allow_forking = abap_false.
      json = json && |"allow_forking": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_github_acti01.
    json = json && '{'.
*  json = json && '"enabled":' not simple
*  json = json && '"allowed_actions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_add_custom_labe01.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_set_custom_labe01.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_remove_all_cust01.
    json = json && '{'.
*  json = json && '"labels":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_review_pending_de.
    json = json && '{'.
*  json = json && '"environment_ids":' not simple
    json = json && |"state": "{ data-state }",|.
    json = json && |"comment": "{ data-comment }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_create_or_updat01.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_delete_repo_secre.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_create_workflow_d.
    json = json && '{'.
    json = json && |"ref": "{ data-ref }",|.
*  json = json && '"inputs":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_autolink.
    json = json && '{'.
    json = json && |"key_prefix": "{ data-key_prefix }",|.
    json = json && |"url_template": "{ data-url_template }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_branch_prote.
    json = json && '{'.
*  json = json && '"required_status_checks":' not simple
    IF data-enforce_admins = abap_true.
      json = json && |"enforce_admins": true,|.
    ELSEIF data-enforce_admins = abap_false.
      json = json && |"enforce_admins": false,|.
    ENDIF.
*  json = json && '"required_pull_request_reviews":' not simple
*  json = json && '"restrictions":' not simple
    IF data-required_linear_history = abap_true.
      json = json && |"required_linear_history": true,|.
    ELSEIF data-required_linear_history = abap_false.
      json = json && |"required_linear_history": false,|.
    ENDIF.
    IF data-allow_force_pushes = abap_true.
      json = json && |"allow_force_pushes": true,|.
    ELSEIF data-allow_force_pushes = abap_false.
      json = json && |"allow_force_pushes": false,|.
    ENDIF.
    IF data-allow_deletions = abap_true.
      json = json && |"allow_deletions": true,|.
    ELSEIF data-allow_deletions = abap_false.
      json = json && |"allow_deletions": false,|.
    ENDIF.
    IF data-required_conversation_resoluti = abap_true.
      json = json && |"required_conversation_resolution": true,|.
    ELSEIF data-required_conversation_resoluti = abap_false.
      json = json && |"required_conversation_resolution": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_branch_prote.
    json = json && '{'.
*  json = json && '"required_status_checks":' not simple
    IF data-enforce_admins = abap_true.
      json = json && |"enforce_admins": true,|.
    ELSEIF data-enforce_admins = abap_false.
      json = json && |"enforce_admins": false,|.
    ENDIF.
*  json = json && '"required_pull_request_reviews":' not simple
*  json = json && '"restrictions":' not simple
    IF data-required_linear_history = abap_true.
      json = json && |"required_linear_history": true,|.
    ELSEIF data-required_linear_history = abap_false.
      json = json && |"required_linear_history": false,|.
    ENDIF.
    IF data-allow_force_pushes = abap_true.
      json = json && |"allow_force_pushes": true,|.
    ELSEIF data-allow_force_pushes = abap_false.
      json = json && |"allow_force_pushes": false,|.
    ENDIF.
    IF data-allow_deletions = abap_true.
      json = json && |"allow_deletions": true,|.
    ELSEIF data-allow_deletions = abap_false.
      json = json && |"allow_deletions": false,|.
    ENDIF.
    IF data-required_conversation_resoluti = abap_true.
      json = json && |"required_conversation_resolution": true,|.
    ELSEIF data-required_conversation_resoluti = abap_false.
      json = json && |"required_conversation_resolution": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_pull_request.
    json = json && '{'.
*  json = json && '"dismissal_restrictions":' not simple
    IF data-dismiss_stale_reviews = abap_true.
      json = json && |"dismiss_stale_reviews": true,|.
    ELSEIF data-dismiss_stale_reviews = abap_false.
      json = json && |"dismiss_stale_reviews": false,|.
    ENDIF.
    IF data-require_code_owner_reviews = abap_true.
      json = json && |"require_code_owner_reviews": true,|.
    ELSEIF data-require_code_owner_reviews = abap_false.
      json = json && |"require_code_owner_reviews": false,|.
    ENDIF.
    IF data-required_approving_review_coun <> cl_abap_math=>max_int4.
      json = json && |"required_approving_review_count": { data-required_approving_review_coun },|.
    ENDIF.
*  json = json && '"bypass_pull_request_allowances":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_pull_request.
    json = json && '{'.
*  json = json && '"dismissal_restrictions":' not simple
    IF data-dismiss_stale_reviews = abap_true.
      json = json && |"dismiss_stale_reviews": true,|.
    ELSEIF data-dismiss_stale_reviews = abap_false.
      json = json && |"dismiss_stale_reviews": false,|.
    ENDIF.
    IF data-require_code_owner_reviews = abap_true.
      json = json && |"require_code_owner_reviews": true,|.
    ELSEIF data-require_code_owner_reviews = abap_false.
      json = json && |"require_code_owner_reviews": false,|.
    ENDIF.
    IF data-required_approving_review_coun <> cl_abap_math=>max_int4.
      json = json && |"required_approving_review_count": { data-required_approving_review_coun },|.
    ENDIF.
*  json = json && '"bypass_pull_request_allowances":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_status_check.
    json = json && '{'.
    IF data-strict = abap_true.
      json = json && |"strict": true,|.
    ELSEIF data-strict = abap_false.
      json = json && |"strict": false,|.
    ENDIF.
*  json = json && '"contexts":' not simple
*  json = json && '"checks":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_remove_status_check.
    json = json && '{'.
    IF data-strict = abap_true.
      json = json && |"strict": true,|.
    ELSEIF data-strict = abap_false.
      json = json && |"strict": false,|.
    ENDIF.
*  json = json && '"contexts":' not simple
*  json = json && '"checks":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_rename_branch.
    json = json && '{'.
    json = json && |"new_name": "{ data-new_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_checks_create.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"head_sha": "{ data-head_sha }",|.
    json = json && |"details_url": "{ data-details_url }",|.
    json = json && |"external_id": "{ data-external_id }",|.
    json = json && |"status": "{ data-status }",|.
    json = json && |"started_at": "{ data-started_at }",|.
    json = json && |"conclusion": "{ data-conclusion }",|.
    json = json && |"completed_at": "{ data-completed_at }",|.
*  json = json && '"output":' not simple
*  json = json && '"actions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_checks_update.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"details_url": "{ data-details_url }",|.
    json = json && |"external_id": "{ data-external_id }",|.
    json = json && |"started_at": "{ data-started_at }",|.
    json = json && |"status": "{ data-status }",|.
    json = json && |"conclusion": "{ data-conclusion }",|.
    json = json && |"completed_at": "{ data-completed_at }",|.
*  json = json && '"output":' not simple
*  json = json && '"actions":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_checks_create_suite.
    json = json && '{'.
    json = json && |"head_sha": "{ data-head_sha }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_checks_set_suites_prefere.
    json = json && '{'.
*  json = json && '"auto_trigger_checks":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_code_scanning_update_aler.
    json = json && '{'.
*  json = json && '"state":' not simple
*  json = json && '"dismissed_reason":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_code_scanning_upload_sari.
    json = json && '{'.
*  json = json && '"commit_sha":' not simple
*  json = json && '"ref":' not simple
*  json = json && '"sarif":' not simple
    json = json && |"checkout_uri": "{ data-checkout_uri }",|.
    json = json && |"started_at": "{ data-started_at }",|.
    json = json && |"tool_name": "{ data-tool_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_create_with_re.
    json = json && '{'.
    json = json && |"ref": "{ data-ref }",|.
    json = json && |"location": "{ data-location }",|.
    json = json && |"machine": "{ data-machine }",|.
    json = json && |"working_directory": "{ data-working_directory }",|.
    IF data-idle_timeout_minutes <> cl_abap_math=>max_int4.
      json = json && |"idle_timeout_minutes": { data-idle_timeout_minutes },|.
    ENDIF.
    json = json && |"display_name": "{ data-display_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_add_collaborator.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = json && |"permissions": "{ data-permissions }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_remove_collaborator.
    json = json && '{'.
    json = json && |"permission": "{ data-permission }",|.
    json = json && |"permissions": "{ data-permissions }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_commit_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_commit_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_comm.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_commit_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = json && |"path": "{ data-path }",|.
    IF data-position <> cl_abap_math=>max_int4.
      json = json && |"position": { data-position },|.
    ENDIF.
    IF data-line <> cl_abap_math=>max_int4.
      json = json && |"line": { data-line },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_or_update_fi.
    json = json && '{'.
    json = json && |"message": "{ data-message }",|.
    json = json && |"content": "{ data-content }",|.
    json = json && |"sha": "{ data-sha }",|.
    json = json && |"branch": "{ data-branch }",|.
*  json = json && '"committer":' not simple
*  json = json && '"author":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_file.
    json = json && '{'.
    json = json && |"message": "{ data-message }",|.
    json = json && |"sha": "{ data-sha }",|.
    json = json && |"branch": "{ data-branch }",|.
*  json = json && '"committer":' not simple
*  json = json && '"author":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_dependabot_create_or_up01.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_dependabot_delete_repo_se.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_deployment.
    json = json && '{'.
    json = json && |"ref": "{ data-ref }",|.
    json = json && |"task": "{ data-task }",|.
    IF data-auto_merge = abap_true.
      json = json && |"auto_merge": true,|.
    ELSEIF data-auto_merge = abap_false.
      json = json && |"auto_merge": false,|.
    ENDIF.
*  json = json && '"required_contexts":' not simple
    json = json && |"payload": "{ data-payload }",|.
    json = json && |"environment": "{ data-environment }",|.
    json = json && |"description": "{ data-description }",|.
    IF data-transient_environment = abap_true.
      json = json && |"transient_environment": true,|.
    ELSEIF data-transient_environment = abap_false.
      json = json && |"transient_environment": false,|.
    ENDIF.
    IF data-production_environment = abap_true.
      json = json && |"production_environment": true,|.
    ELSEIF data-production_environment = abap_false.
      json = json && |"production_environment": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_deployment_s.
    json = json && '{'.
    json = json && |"state": "{ data-state }",|.
    json = json && |"target_url": "{ data-target_url }",|.
    json = json && |"log_url": "{ data-log_url }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"environment": "{ data-environment }",|.
    json = json && |"environment_url": "{ data-environment_url }",|.
    IF data-auto_inactive = abap_true.
      json = json && |"auto_inactive": true,|.
    ELSEIF data-auto_inactive = abap_false.
      json = json && |"auto_inactive": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_dispatch_eve.
    json = json && '{'.
    json = json && |"event_type": "{ data-event_type }",|.
*  json = json && '"client_payload":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_or_update_en.
    json = json && '{'.
*  json = json && '"wait_timer":' not simple
*  json = json && '"reviewers":' not simple
*  json = json && '"deployment_branch_policy":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_an_environme.
    json = json && '{'.
*  json = json && '"wait_timer":' not simple
*  json = json && '"reviewers":' not simple
*  json = json && '"deployment_branch_policy":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_fork.
    json = json && '{'.
    json = json && |"organization": "{ data-organization }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_create_blob.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = json && |"encoding": "{ data-encoding }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_create_commit.
    json = json && '{'.
    json = json && |"message": "{ data-message }",|.
    json = json && |"tree": "{ data-tree }",|.
*  json = json && '"parents":' not simple
*  json = json && '"author":' not simple
*  json = json && '"committer":' not simple
    json = json && |"signature": "{ data-signature }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_create_ref.
    json = json && '{'.
    json = json && |"ref": "{ data-ref }",|.
    json = json && |"sha": "{ data-sha }",|.
    json = json && |"key": "{ data-key }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_update_ref.
    json = json && '{'.
    json = json && |"sha": "{ data-sha }",|.
    IF data-force = abap_true.
      json = json && |"force": true,|.
    ELSEIF data-force = abap_false.
      json = json && |"force": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_delete_ref.
    json = json && '{'.
    json = json && |"sha": "{ data-sha }",|.
    IF data-force = abap_true.
      json = json && |"force": true,|.
    ELSEIF data-force = abap_false.
      json = json && |"force": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_create_tag.
    json = json && '{'.
    json = json && |"tag": "{ data-tag }",|.
    json = json && |"message": "{ data-message }",|.
    json = json && |"object": "{ data-object }",|.
    json = json && |"type": "{ data-type }",|.
*  json = json && '"tagger":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_git_create_tree.
    json = json && '{'.
*  json = json && '"tree":' not simple
    json = json && |"base_tree": "{ data-base_tree }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_webhook.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_webhook.
    json = json && '{'.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
*  json = json && '"add_events":' not simple
*  json = json && '"remove_events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_webhook.
    json = json && '{'.
*  json = json && '"config":' not simple
*  json = json && '"events":' not simple
*  json = json && '"add_events":' not simple
*  json = json && '"remove_events":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_webhook_conf.
    json = json && '{'.
*  json = json && '"url":' not simple
*  json = json && '"content_type":' not simple
*  json = json && '"secret":' not simple
*  json = json && '"insecure_ssl":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_start_import.
    json = json && '{'.
    json = json && |"vcs_url": "{ data-vcs_url }",|.
    json = json && |"vcs": "{ data-vcs }",|.
    json = json && |"vcs_username": "{ data-vcs_username }",|.
    json = json && |"vcs_password": "{ data-vcs_password }",|.
    json = json && |"tfvc_project": "{ data-tfvc_project }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_update_import.
    json = json && '{'.
    json = json && |"vcs_username": "{ data-vcs_username }",|.
    json = json && |"vcs_password": "{ data-vcs_password }",|.
    json = json && |"vcs": "{ data-vcs }",|.
    json = json && |"tfvc_project": "{ data-tfvc_project }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_cancel_import.
    json = json && '{'.
    json = json && |"vcs_username": "{ data-vcs_username }",|.
    json = json && |"vcs_password": "{ data-vcs_password }",|.
    json = json && |"vcs": "{ data-vcs }",|.
    json = json && |"tfvc_project": "{ data-tfvc_project }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_map_commit_aut.
    json = json && '{'.
    json = json && |"email": "{ data-email }",|.
    json = json && |"name": "{ data-name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_set_lfs_prefer.
    json = json && '{'.
    json = json && |"use_lfs": "{ data-use_lfs }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_invitation.
    json = json && '{'.
    json = json && |"permissions": "{ data-permissions }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_invitation.
    json = json && '{'.
    json = json && |"permissions": "{ data-permissions }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_create.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"assignee": "{ data-assignee }",|.
    json = json && |"milestone": "{ data-milestone }",|.
*  json = json && '"labels":' not simple
*  json = json && '"assignees":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_update_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_delete_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_issu.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_update.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"assignee": "{ data-assignee }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"milestone": "{ data-milestone }",|.
*  json = json && '"labels":' not simple
*  json = json && '"assignees":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_add_assignees.
    json = json && '{'.
*  json = json && '"assignees":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_remove_assignees.
    json = json && '{'.
*  json = json && '"assignees":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_create_comment.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_lock.
    json = json && '{'.
    json = json && |"lock_reason": "{ data-lock_reason }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_unlock.
    json = json && '{'.
    json = json && |"lock_reason": "{ data-lock_reason }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_is01.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_deploy_key.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"key": "{ data-key }",|.
    IF data-read_only = abap_true.
      json = json && |"read_only": true,|.
    ELSEIF data-read_only = abap_false.
      json = json && |"read_only": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_create_label.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"color": "{ data-color }",|.
    json = json && |"description": "{ data-description }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_update_label.
    json = json && '{'.
    json = json && |"new_name": "{ data-new_name }",|.
    json = json && |"color": "{ data-color }",|.
    json = json && |"description": "{ data-description }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_delete_label.
    json = json && '{'.
    json = json && |"new_name": "{ data-new_name }",|.
    json = json && |"color": "{ data-color }",|.
    json = json && |"description": "{ data-description }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_merge_upstream.
    json = json && '{'.
    json = json && |"branch": "{ data-branch }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_merge.
    json = json && '{'.
    json = json && |"base": "{ data-base }",|.
    json = json && |"head": "{ data-head }",|.
    json = json && |"commit_message": "{ data-commit_message }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_create_milestone.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"due_on": "{ data-due_on }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_update_milestone.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"due_on": "{ data-due_on }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_issues_delete_milestone.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"due_on": "{ data-due_on }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_mark_repo_notifi.
    json = json && '{'.
    json = json && |"last_read_at": "{ data-last_read_at }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_pages_site.
    json = json && '{'.
*  json = json && '"source":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_information_.
    json = json && '{'.
    json = json && |"cname": "{ data-cname }",|.
    IF data-https_enforced = abap_true.
      json = json && |"https_enforced": true,|.
    ELSEIF data-https_enforced = abap_false.
      json = json && |"https_enforced": false,|.
    ENDIF.
    IF data-public = abap_true.
      json = json && |"public": true,|.
    ELSEIF data-public = abap_false.
      json = json && |"public": false,|.
    ENDIF.
    json = json && |"source": "{ data-source }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_pages_site.
    json = json && '{'.
    json = json && |"cname": "{ data-cname }",|.
    IF data-https_enforced = abap_true.
      json = json && |"https_enforced": true,|.
    ELSEIF data-https_enforced = abap_false.
      json = json && |"https_enforced": false,|.
    ENDIF.
    IF data-public = abap_true.
      json = json && |"public": true,|.
    ELSEIF data-public = abap_false.
      json = json && |"public": false,|.
    ENDIF.
    json = json && |"source": "{ data-source }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_create_for_repo.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_create.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"head": "{ data-head }",|.
    json = json && |"base": "{ data-base }",|.
    json = json && |"body": "{ data-body }",|.
    IF data-maintainer_can_modify = abap_true.
      json = json && |"maintainer_can_modify": true,|.
    ELSEIF data-maintainer_can_modify = abap_false.
      json = json && |"maintainer_can_modify": false,|.
    ENDIF.
    IF data-draft = abap_true.
      json = json && |"draft": true,|.
    ELSEIF data-draft = abap_false.
      json = json && |"draft": false,|.
    ENDIF.
    IF data-issue <> cl_abap_math=>max_int4.
      json = json && |"issue": { data-issue },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_update_review_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_delete_review_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_pull.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_update.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"state": "{ data-state }",|.
    json = json && |"base": "{ data-base }",|.
    IF data-maintainer_can_modify = abap_true.
      json = json && |"maintainer_can_modify": true,|.
    ELSEIF data-maintainer_can_modify = abap_false.
      json = json && |"maintainer_can_modify": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_create_with_pr.
    json = json && '{'.
    json = json && |"location": "{ data-location }",|.
    json = json && |"machine": "{ data-machine }",|.
    json = json && |"working_directory": "{ data-working_directory }",|.
    IF data-idle_timeout_minutes <> cl_abap_math=>max_int4.
      json = json && |"idle_timeout_minutes": { data-idle_timeout_minutes },|.
    ENDIF.
    json = json && |"display_name": "{ data-display_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_create_review_comme.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = json && |"commit_id": "{ data-commit_id }",|.
    json = json && |"path": "{ data-path }",|.
    IF data-position <> cl_abap_math=>max_int4.
      json = json && |"position": { data-position },|.
    ENDIF.
    json = json && |"side": "{ data-side }",|.
    IF data-line <> cl_abap_math=>max_int4.
      json = json && |"line": { data-line },|.
    ENDIF.
    IF data-start_line <> cl_abap_math=>max_int4.
      json = json && |"start_line": { data-start_line },|.
    ENDIF.
    json = json && |"start_side": "{ data-start_side }",|.
    IF data-in_reply_to <> cl_abap_math=>max_int4.
      json = json && |"in_reply_to": { data-in_reply_to },|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_create_reply_for_re.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_merge.
    json = json && '{'.
    json = json && |"commit_title": "{ data-commit_title }",|.
    json = json && |"commit_message": "{ data-commit_message }",|.
    json = json && |"sha": "{ data-sha }",|.
    json = json && |"merge_method": "{ data-merge_method }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_request_reviewers.
    json = json && '{'.
*  json = json && '"reviewers":' not simple
*  json = json && '"team_reviewers":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_remove_requested_re.
    json = json && '{'.
*  json = json && '"reviewers":' not simple
*  json = json && '"team_reviewers":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_create_review.
    json = json && '{'.
    json = json && |"commit_id": "{ data-commit_id }",|.
    json = json && |"body": "{ data-body }",|.
    json = json && |"event": "{ data-event }",|.
*  json = json && '"comments":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_update_review.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_delete_pending_revi.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_dismiss_review.
    json = json && '{'.
    json = json && |"message": "{ data-message }",|.
    json = json && |"event": "{ data-event }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_submit_review.
    json = json && '{'.
    json = json && |"body": "{ data-body }",|.
    json = json && |"event": "{ data-event }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_pulls_update_branch.
    json = json && '{'.
    json = json && |"expected_head_sha": "{ data-expected_head_sha }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_release.
    json = json && '{'.
    json = json && |"tag_name": "{ data-tag_name }",|.
    json = json && |"target_commitish": "{ data-target_commitish }",|.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    IF data-draft = abap_true.
      json = json && |"draft": true,|.
    ELSEIF data-draft = abap_false.
      json = json && |"draft": false,|.
    ENDIF.
    IF data-prerelease = abap_true.
      json = json && |"prerelease": true,|.
    ELSEIF data-prerelease = abap_false.
      json = json && |"prerelease": false,|.
    ENDIF.
    json = json && |"discussion_category_name": "{ data-discussion_category_name }",|.
    IF data-generate_release_notes = abap_true.
      json = json && |"generate_release_notes": true,|.
    ELSEIF data-generate_release_notes = abap_false.
      json = json && |"generate_release_notes": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_release_asse.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"label": "{ data-label }",|.
    json = json && |"state": "{ data-state }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_release_asse.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"label": "{ data-label }",|.
    json = json && |"state": "{ data-state }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_generate_release_no.
    json = json && '{'.
    json = json && |"tag_name": "{ data-tag_name }",|.
    json = json && |"target_commitish": "{ data-target_commitish }",|.
    json = json && |"previous_tag_name": "{ data-previous_tag_name }",|.
    json = json && |"configuration_file_path": "{ data-configuration_file_path }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_update_release.
    json = json && '{'.
    json = json && |"tag_name": "{ data-tag_name }",|.
    json = json && |"target_commitish": "{ data-target_commitish }",|.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    IF data-draft = abap_true.
      json = json && |"draft": true,|.
    ELSEIF data-draft = abap_false.
      json = json && |"draft": false,|.
    ENDIF.
    IF data-prerelease = abap_true.
      json = json && |"prerelease": true,|.
    ELSEIF data-prerelease = abap_false.
      json = json && |"prerelease": false,|.
    ENDIF.
    json = json && |"discussion_category_name": "{ data-discussion_category_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_delete_release.
    json = json && '{'.
    json = json && |"tag_name": "{ data-tag_name }",|.
    json = json && |"target_commitish": "{ data-target_commitish }",|.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    IF data-draft = abap_true.
      json = json && |"draft": true,|.
    ELSEIF data-draft = abap_false.
      json = json && |"draft": false,|.
    ENDIF.
    IF data-prerelease = abap_true.
      json = json && |"prerelease": true,|.
    ELSEIF data-prerelease = abap_false.
      json = json && |"prerelease": false,|.
    ENDIF.
    json = json && |"discussion_category_name": "{ data-discussion_category_name }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_reactions_create_for_rele.
    json = json && '{'.
    json = json && |"content": "{ data-content }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_secret_scanning_update_al.
    json = json && '{'.
*  json = json && '"state":' not simple
*  json = json && '"resolution":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_commit_statu.
    json = json && '{'.
    json = json && |"state": "{ data-state }",|.
    json = json && |"target_url": "{ data-target_url }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"context": "{ data-context }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_set_repo_subscri.
    json = json && '{'.
    IF data-subscribed = abap_true.
      json = json && |"subscribed": true,|.
    ELSEIF data-subscribed = abap_false.
      json = json && |"subscribed": false,|.
    ENDIF.
    IF data-ignored = abap_true.
      json = json && |"ignored": true,|.
    ELSEIF data-ignored = abap_false.
      json = json && |"ignored": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_activity_delete_repo_subs.
    json = json && '{'.
    IF data-subscribed = abap_true.
      json = json && |"subscribed": true,|.
    ELSEIF data-subscribed = abap_false.
      json = json && |"subscribed": false,|.
    ENDIF.
    IF data-ignored = abap_true.
      json = json && |"ignored": true,|.
    ELSEIF data-ignored = abap_false.
      json = json && |"ignored": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_replace_all_topics.
    json = json && '{'.
*  json = json && '"names":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_transfer.
    json = json && '{'.
    json = json && |"new_owner": "{ data-new_owner }",|.
*  json = json && '"team_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_using_templa.
    json = json && '{'.
    json = json && |"owner": "{ data-owner }",|.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    IF data-include_all_branches = abap_true.
      json = json && |"include_all_branches": true,|.
    ELSEIF data-include_all_branches = abap_false.
      json = json && |"include_all_branches": false,|.
    ENDIF.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_create_or_updat02.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_actions_delete_environmen.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_provisio.
    json = json && '{'.
*  json = json && '"schemas":' not simple
    json = json && |"displayName": "{ data-displayname }",|.
*  json = json && '"members":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_info.
    json = json && '{'.
*  json = json && '"schemas":' not simple
    json = json && |"displayName": "{ data-displayname }",|.
*  json = json && '"members":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_update_a.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_delete01.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_provis01.
    json = json && '{'.
*  json = json && '"schemas":' not simple
    json = json && |"userName": "{ data-username }",|.
*  json = json && '"name":' not simple
*  json = json && '"emails":' not simple
*  json = json && '"groups":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_set_in01.
    json = json && '{'.
*  json = json && '"schemas":' not simple
    json = json && |"userName": "{ data-username }",|.
*  json = json && '"name":' not simple
*  json = json && '"emails":' not simple
*  json = json && '"groups":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_update01.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_enterprise_admin_delete_u.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_scim_provision_and_invite.
    json = json && '{'.
    json = json && |"userName": "{ data-username }",|.
    json = json && |"displayName": "{ data-displayname }",|.
*  json = json && '"name":' not simple
*  json = json && '"emails":' not simple
*  json = json && '"schemas":' not simple
    json = json && |"externalId": "{ data-externalid }",|.
*  json = json && '"groups":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_scim_set_information_for_.
    json = json && '{'.
*  json = json && '"schemas":' not simple
    json = json && |"displayName": "{ data-displayname }",|.
    json = json && |"externalId": "{ data-externalid }",|.
*  json = json && '"groups":' not simple
    IF data-active = abap_true.
      json = json && |"active": true,|.
    ELSEIF data-active = abap_false.
      json = json && |"active": false,|.
    ENDIF.
    json = json && |"userName": "{ data-username }",|.
*  json = json && '"name":' not simple
*  json = json && '"emails":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_scim_update_attribute_for.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_scim_delete_user_from_org.
    json = json && '{'.
*  json = json && '"schemas":' not simple
*  json = json && '"Operations":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_users_update_authenticate.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"email": "{ data-email }",|.
    json = json && |"blog": "{ data-blog }",|.
    json = json && |"twitter_username": "{ data-twitter_username }",|.
    json = json && |"company": "{ data-company }",|.
    json = json && |"location": "{ data-location }",|.
    IF data-hireable = abap_true.
      json = json && |"hireable": true,|.
    ELSEIF data-hireable = abap_false.
      json = json && |"hireable": false,|.
    ENDIF.
    json = json && |"bio": "{ data-bio }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_create_or_upda.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_delete_secret_.
    json = json && '{'.
    json = json && |"encrypted_value": "{ data-encrypted_value }",|.
    json = json && |"key_id": "{ data-key_id }",|.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_set_repositori.
    json = json && '{'.
*  json = json && '"selected_repository_ids":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_update_for_aut.
    json = json && '{'.
    json = json && |"machine": "{ data-machine }",|.
    json = json && |"display_name": "{ data-display_name }",|.
*  json = json && '"recent_folders":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_codespaces_delete_for_aut.
    json = json && '{'.
    json = json && |"machine": "{ data-machine }",|.
    json = json && |"display_name": "{ data-display_name }",|.
*  json = json && '"recent_folders":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_users_set_primary_email_v.
    json = json && '{'.
    json = json && |"visibility": "{ data-visibility }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_users_create_gpg_key_for_.
    json = json && '{'.
    json = json && |"armored_public_key": "{ data-armored_public_key }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_users_create_public_ssh_k.
    json = json && '{'.
    json = json && |"title": "{ data-title }",|.
    json = json && |"key": "{ data-key }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_orgs_update_membership_fo.
    json = json && '{'.
    json = json && |"state": "{ data-state }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_migrations_start_for_auth.
    json = json && '{'.
    IF data-lock_repositories = abap_true.
      json = json && |"lock_repositories": true,|.
    ELSEIF data-lock_repositories = abap_false.
      json = json && |"lock_repositories": false,|.
    ENDIF.
    IF data-exclude_attachments = abap_true.
      json = json && |"exclude_attachments": true,|.
    ELSEIF data-exclude_attachments = abap_false.
      json = json && |"exclude_attachments": false,|.
    ENDIF.
    IF data-exclude_releases = abap_true.
      json = json && |"exclude_releases": true,|.
    ELSEIF data-exclude_releases = abap_false.
      json = json && |"exclude_releases": false,|.
    ENDIF.
    IF data-exclude_owner_projects = abap_true.
      json = json && |"exclude_owner_projects": true,|.
    ELSEIF data-exclude_owner_projects = abap_false.
      json = json && |"exclude_owner_projects": false,|.
    ENDIF.
*  json = json && '"exclude":' not simple
*  json = json && '"repositories":' not simple
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_projects_create_for_authe.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"body": "{ data-body }",|.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD json_repos_create_for_authenti.
    json = json && '{'.
    json = json && |"name": "{ data-name }",|.
    json = json && |"description": "{ data-description }",|.
    json = json && |"homepage": "{ data-homepage }",|.
    IF data-private = abap_true.
      json = json && |"private": true,|.
    ELSEIF data-private = abap_false.
      json = json && |"private": false,|.
    ENDIF.
    IF data-has_issues = abap_true.
      json = json && |"has_issues": true,|.
    ELSEIF data-has_issues = abap_false.
      json = json && |"has_issues": false,|.
    ENDIF.
    IF data-has_projects = abap_true.
      json = json && |"has_projects": true,|.
    ELSEIF data-has_projects = abap_false.
      json = json && |"has_projects": false,|.
    ENDIF.
    IF data-has_wiki = abap_true.
      json = json && |"has_wiki": true,|.
    ELSEIF data-has_wiki = abap_false.
      json = json && |"has_wiki": false,|.
    ENDIF.
    IF data-team_id <> cl_abap_math=>max_int4.
      json = json && |"team_id": { data-team_id },|.
    ENDIF.
    IF data-auto_init = abap_true.
      json = json && |"auto_init": true,|.
    ELSEIF data-auto_init = abap_false.
      json = json && |"auto_init": false,|.
    ENDIF.
    json = json && |"gitignore_template": "{ data-gitignore_template }",|.
    json = json && |"license_template": "{ data-license_template }",|.
    IF data-allow_squash_merge = abap_true.
      json = json && |"allow_squash_merge": true,|.
    ELSEIF data-allow_squash_merge = abap_false.
      json = json && |"allow_squash_merge": false,|.
    ENDIF.
    IF data-allow_merge_commit = abap_true.
      json = json && |"allow_merge_commit": true,|.
    ELSEIF data-allow_merge_commit = abap_false.
      json = json && |"allow_merge_commit": false,|.
    ENDIF.
    IF data-allow_rebase_merge = abap_true.
      json = json && |"allow_rebase_merge": true,|.
    ELSEIF data-allow_rebase_merge = abap_false.
      json = json && |"allow_rebase_merge": false,|.
    ENDIF.
    IF data-allow_auto_merge = abap_true.
      json = json && |"allow_auto_merge": true,|.
    ELSEIF data-allow_auto_merge = abap_false.
      json = json && |"allow_auto_merge": false,|.
    ENDIF.
    IF data-delete_branch_on_merge = abap_true.
      json = json && |"delete_branch_on_merge": true,|.
    ELSEIF data-delete_branch_on_merge = abap_false.
      json = json && |"delete_branch_on_merge": false,|.
    ENDIF.
    IF data-has_downloads = abap_true.
      json = json && |"has_downloads": true,|.
    ELSEIF data-has_downloads = abap_false.
      json = json && |"has_downloads": false,|.
    ENDIF.
    IF data-is_template = abap_true.
      json = json && |"is_template": true,|.
    ELSEIF data-is_template = abap_false.
      json = json && |"is_template": false,|.
    ENDIF.
    json = substring( val = json off = 0 len = strlen( json ) - 1 ).
    json = json && '}'.
  ENDMETHOD.

  METHOD zif_github~meta_root.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_meta_root
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_meta_root( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/integration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_integration( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_create_from_manifest.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app-manifests/{code}/conversions'.
    lv_temp = code.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{code}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_create_from_manifest( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_webhook_config_for_ap.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/hook/config'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_update_webhook_config_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/hook/config'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_update_webhook_confi( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_webhook_deliveries.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/hook/deliveries'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF cursor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'cursor' value = cursor ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_webhook_deliveries
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_webhook_delive( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_webhook_delivery.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/hook/deliveries/{delivery_id}'.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hook-delivery
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook_delivery( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_redeliver_webhook_deliver.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/hook/deliveries/{delivery_id}/attempts'.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_installations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations'.
    IF outdated IS SUPPLIED.
      mi_client->request->set_form_field( name = 'outdated' value = outdated ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The permissions the installation has are included under the `permissions` key.
" application/json,#/components/schemas/response_apps_list_installations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_installations( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations/{installation_id}'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/installation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_installation( '' ).
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_delete_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations/{installation_id}'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_create_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations/{installation_id}/access_tokens'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_create_installation_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/installation-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_installation_token( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_suspend_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations/{installation_id}/suspended'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_unsuspend_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/app/installations/{installation_id}/suspended'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_delete_authorization.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/applications/{client_id}/grant'.
    lv_temp = client_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{client_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_delete_authorization( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_check_token.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/applications/{client_id}/token'.
    lv_temp = client_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{client_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_check_token( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/authorization
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authorization( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_reset_token.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/applications/{client_id}/token'.
    lv_temp = client_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{client_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_reset_token( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/authorization
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authorization( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_delete_token.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/applications/{client_id}/token'.
    lv_temp = client_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{client_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_delete_token( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_scope_token.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/applications/{client_id}/token/scoped'.
    lv_temp = client_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{client_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_apps_scope_token( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/authorization
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authorization( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_by_slug.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/apps/{app_slug}'.
    lv_temp = app_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{app_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/integration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_integration( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_all_codes.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/codes_of_conduct'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codes_of_conduct_get_all_codes
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codes_of_conduct_get_all( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_conduct_c.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/codes_of_conduct/{key}'.
    lv_temp = key.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-of-conduct
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_of_conduct( '' ).
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~emojis_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/emojis'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_emojis_get
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_emojis_get( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_github_ac.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-enterprise-permissions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_enterprise_permi( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_github_ac.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_gith( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_selected.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/organizations'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_selected
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_se( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_selected_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/organizations'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_sele( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_enable_select.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = org_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_disable_selec.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = org_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_allowed_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/selected-actions'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/selected-actions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_selected_actions( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_allowed_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/permissions/selected-actions'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/selected-actions
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_hos.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_self_hos
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_self_h.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_create_s( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/runner-groups-enterprise
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_enterprise( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_host.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner-groups-enterprise
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_enterprise( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_self_h.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_update_s( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner-groups-enterprise
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_enterprise( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self_h.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_delete_s( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_org_acce.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_org_acce
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_or( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_org_acces.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_org_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_org_acces.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = org_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_org_ac.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = org_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_self_h01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_02( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_self_host.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_self( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_self_host.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_self_h.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_self_h02
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_03( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_runner_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/downloads'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_list_runner_a
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_list_ru( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_regist.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/registration-token'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_remove.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/remove-token'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_ho01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_labels_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_custom_la.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_add_cust( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_custom_la.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_cust( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_all_cu.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}/labels'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_remove_a( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_custom.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_audit_log.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/audit-log'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    IF phrase IS SUPPLIED.
      mi_client->request->set_form_field( name = 'phrase' value = phrase ).
    ENDIF.
    IF include IS SUPPLIED.
      mi_client->request->set_form_field( name = 'include' value = include ).
    ENDIF.
    IF after IS SUPPLIED.
      mi_client->request->set_form_field( name = 'after' value = after ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_enterprise_admin_get_audit_log
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_enterprise_admin_get_aud( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_alerts_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/secret-scanning/alerts'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF secret_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'secret_type' value = secret_type ).
    ENDIF.
    IF resolution IS SUPPLIED.
      mi_client->request->set_form_field( name = 'resolution' value = resolution ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF after IS SUPPLIED.
      mi_client->request->set_form_field( name = 'after' value = after ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_secret_scanning_list_alerts_fo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_list_ale( '' ).
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_bil.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/settings/billing/actions'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_advanced_se.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/settings/billing/advanced-security'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Success
" application/json,#/components/schemas/advanced-security-active-committers
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_advanced_security_acti02( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_bi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/settings/billing/packages'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/packages-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_bil.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/enterprises/{enterprise}/settings/billing/shared-storage'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/combined-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_combined_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/events'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_public_events
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_public_eve( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_get_feeds.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/feeds'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/feed
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_feed( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_create.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_create( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/gist-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_simple( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_public.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/public'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_public
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_public( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_starred.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/starred'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_starred
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_starred( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gist-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_simple( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gist-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_simple( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_delete.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_delete( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_comments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/comments'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_comments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_comments( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_create_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/comments'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_create_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/gist-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_comment( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_get_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/comments/{comment_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gist-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_comment( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_update_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/comments/{comment_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_update_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gist-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_comment( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/comments/{comment_id}'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_gists_delete_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_commits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/commits'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_commits
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_commits( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_forks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/forks'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_forks
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_forks( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_fork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/forks'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/base-gist
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_base_gist( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_check_is_starred.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/star'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if gist is starred
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404. " Not Found if gist is not starred
" application/json,#/components/schemas/response_gists_check_is_starred
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_gists_check_is_starred( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_star.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/star'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_unstar.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/star'.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_get_revision.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gists/{gist_id}/{sha}'.
    lv_temp = sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH lv_temp.
    lv_temp = gist_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gist-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gist_simple( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gitignore_get_all_templates.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gitignore/templates'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gitignore_get_all_templates
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gitignore_get_all_templa( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gitignore_get_template.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/gitignore/templates/{name}'.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gitignore-template
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gitignore_template( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_repos_accessible_to_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/installation/repositories'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_repos_accessible_to_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_repos_accessib( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_revoke_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/installation/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    lv_temp = collab.
    CONDENSE lv_temp.
    IF collab IS SUPPLIED.
      mi_client->request->set_form_field( name = 'collab' value = lv_temp ).
    ENDIF.
    lv_temp = orgs.
    CONDENSE lv_temp.
    IF orgs IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orgs' value = lv_temp ).
    ENDIF.
    lv_temp = owned.
    CONDENSE lv_temp.
    IF owned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owned' value = lv_temp ).
    ENDIF.
    lv_temp = pulls.
    CONDENSE lv_temp.
    IF pulls IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pulls' value = lv_temp ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list( '' ).
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~licenses_get_all_commonly_used.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/licenses'.
    lv_temp = featured.
    CONDENSE lv_temp.
    IF featured IS SUPPLIED.
      mi_client->request->set_form_field( name = 'featured' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_licenses_get_all_commonly_used
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_licenses_get_all_commonl( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~licenses_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/licenses/{license}'.
    lv_temp = license.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{license}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/license
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_license( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~markdown_render.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/markdown'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_markdown_render( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~markdown_render_raw.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/markdown/raw'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/accounts/{account_id}'.
    lv_temp = account_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/marketplace-purchase
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_marketplace_purchase( '' ).
      WHEN 401.
" todo, raise
      WHEN 404. " Not Found when the account has not purchased the listing
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_plans.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/plans'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_plans
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_plans( '' ).
      WHEN 401.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/plans/{plan_id}/accounts'.
    lv_temp = plan_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH lv_temp.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_accounts_for_plan
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_accounts_for_p( '' ).
      WHEN 401.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_f01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/stubbed/accounts/{account_id}'.
    lv_temp = account_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/marketplace-purchase
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_marketplace_purchase( '' ).
      WHEN 401.
" todo, raise
      WHEN 404. " Not Found when the account has not purchased the listing
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_plans_stubbed.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/stubbed/plans'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_plans_stubbed
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_plans_stubbed( '' ).
      WHEN 401.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan_st.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/marketplace_listing/stubbed/plans/{plan_id}/accounts'.
    lv_temp = plan_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH lv_temp.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_accounts_for_plan_st
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_accounts_for01( '' ).
      WHEN 401.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~meta_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/api-overview
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_api_overview( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/networks/{owner}/{repo}/events'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_public_events_fo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_public_e01( '' ).
      WHEN 301.
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_notifications_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications'.
    lv_temp = all.
    CONDENSE lv_temp.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = lv_temp ).
    ENDIF.
    lv_temp = participating.
    CONDENSE lv_temp.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = lv_temp ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_notifications_fo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_notificati( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_mark_notifications_as.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_mark_notificatio( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/response_activity_mark_notifications_as
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_activity_mark_notificati( '' ).
" todo, raise
      WHEN 205. " Reset Content
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_get_thread.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications/threads/{thread_id}'.
    lv_temp = thread_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/thread
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_thread( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_mark_thread_as_read.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications/threads/{thread_id}'.
    lv_temp = thread_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 205. " Reset Content
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_get_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications/threads/{thread_id}/subscription'.
    lv_temp = thread_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/thread-subscription
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_thread_subscription( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_set_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications/threads/{thread_id}/subscription'.
    lv_temp = thread_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_set_thread_subsc( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/thread-subscription
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_thread_subscription( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_delete_thread_subscri.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/notifications/threads/{thread_id}/subscription'.
    lv_temp = thread_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_delete_thread_su( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~meta_get_octocat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/octocat'.
    IF s IS SUPPLIED.
      mi_client->request->set_form_field( name = 's' value = s ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/organizations'.
    lv_temp = since.
    CONDENSE lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_custom_roles.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/organizations/{organization_id}/custom_roles'.
    lv_temp = organization_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{organization_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response - list of custom role names
" application/json,#/components/schemas/response_orgs_list_custom_roles
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_custom_roles( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_linked_external_idp.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/organizations/{org}/team/{team_slug}/external-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/external-groups
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_external_groups( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/organization-full
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_organization_full( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/organization-full
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_organization_full( '' ).
      WHEN 409.
" todo, raise
      WHEN 422. " Validation failed
" application/json,
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_per.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-organization-permissions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_organization_per( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_per.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_github_action( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_reposito.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_selected_reposito
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_selected_re( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repositor.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_selected_repo( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_enable_selected_reposi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_disable_selected_repos.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_or.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/selected-actions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/selected-actions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_selected_actions( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_or.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/selected-actions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/selected-actions
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_def.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/workflow'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-get-default-workflow-permissions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_get_default_work( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_def.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/permissions/workflow'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/actions-set-default-workflow-permissions
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_runne.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_self_hosted_runne
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_self_hosted( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_create_self_hoste( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/runner-groups-org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner-groups-org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_update_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_update_self_hoste( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner-groups-org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner_groups_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_delete_self_hoste( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_access_to_se.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_repo_access_to_se
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_repo_access( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_repo_access_to_sel.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_repo_access_t( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_add_repo_access_to_sel.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_repo_access_to_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_self_hosted_run01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_self_host01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_self_hosted_r( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_add_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_self_hosted_run02
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_self_host02( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicatio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/downloads'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_runner_applicatio
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_runner_appl( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_to.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/registration-token'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/remove-token'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_labels_for_self_h.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_add_custom_labels_to_s.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_add_custom_labels( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_custom_labels_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_custom_labels( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_all_custom_labe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_remove_all_custom( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_custom_label_fr.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels/{name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_org_secrets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_org_secrets
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_org_secrets( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_org_public_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/public-key'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_public_key( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_org_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/organization-actions-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_organization_actions_sec( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_org_s.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_create_or_update_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when creating a secret
" application/json,#/components/schemas/empty-object
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_empty_object( '' ).
      WHEN 204. " Response when updating a secret
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_org_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_delete_org_secret( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_selected_repos_fo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_selected_01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repos_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_selected_re01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_add_selected_repo_to_o.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " No Content when repository was added to the selected list
      WHEN 409. " Conflict when visibility type is not set to selected
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_selected_repo_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response when repository was removed from the selected list
      WHEN 409. " Conflict when visibility type not set to selected
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_audit_log.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/audit-log'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF phrase IS SUPPLIED.
      mi_client->request->set_form_field( name = 'phrase' value = phrase ).
    ENDIF.
    IF include IS SUPPLIED.
      mi_client->request->set_form_field( name = 'include' value = include ).
    ENDIF.
    IF after IS SUPPLIED.
      mi_client->request->set_form_field( name = 'after' value = after ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_get_audit_log
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_get_audit_log( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_blocked_users.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/blocks'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_blocked_users
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_blocked_users( '' ).
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_check_blocked_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/blocks/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " If the user is blocked:
      WHEN 404. " If the user is not blocked:
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_block_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/blocks/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_unblock_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/blocks/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_alerts_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/code-scanning/alerts'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF after IS SUPPLIED.
      mi_client->request->set_form_field( name = 'after' value = after ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_code_scanning_list_alerts_for_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_list_alert( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_saml_sso_authorizati.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/credential-authorizations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF login IS SUPPLIED.
      mi_client->request->set_form_field( name = 'login' value = login ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_saml_sso_authorizati
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_saml_sso_autho( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_remove_saml_sso_authoriza.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/credential-authorizations/{credential_id}'.
    lv_temp = credential_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{credential_id}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_list_org_secrets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_dependabot_list_org_secrets
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_list_org_secr( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_get_org_public_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/public-key'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/dependabot-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_public_key( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_get_org_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/organization-dependabot-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_organization_dependabot_( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_create_or_update_or.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_dependabot_create_or_upda( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when creating a secret
" application/json,#/components/schemas/empty-object
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_empty_object( '' ).
      WHEN 204. " Response when updating a secret
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_delete_org_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_dependabot_delete_org_sec( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_list_selected_repos.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_dependabot_list_selected_repos
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_list_selected( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_set_selected_repos_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_dependabot_set_selected_r( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_add_selected_repo_t.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " No Content when repository was added to the selected list
      WHEN 409. " Conflict when visibility type is not set to selected
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_remove_selected_rep.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response when repository was removed from the selected list
      WHEN 409. " Conflict when visibility type not set to selected
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_public_org_event.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/events'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_public_org_event
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_public_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_external_idp_group_info_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/external-group/{group_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/external-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_external_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_external_idp_groups.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/external-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF display_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'display_name' value = display_name ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/external-groups
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_external_groups( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_failed_invitations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/failed_invitations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_failed_invitations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_failed_invitat( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_webhooks
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_webhooks( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_create_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/org-hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_hook( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_hook( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_update_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_hook( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_delete_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook_config_for_or.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/config'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook_config_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/config'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_update_webhook_confi( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_webhook_deliveries.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF cursor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'cursor' value = cursor ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_webhook_deliveries
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_webhook_delive( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook_delivery.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hook-delivery
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook_delivery( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_redeliver_webhook_deliver.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/hooks/{hook_id}/pings'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_org_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/installation'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/installation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_installation( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_app_installations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/installations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_app_installations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_app_installati( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_get_restrictions_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/interaction-limits'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_set_restrictions_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/interaction-limits'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/interaction-limit
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/interaction-limit-response
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_interaction_limit_respon( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrictio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/interaction-limits'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_pending_invitations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/invitations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_pending_invitations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_pending_invita( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_create_invitation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/invitations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_create_invitation( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/organization-invitation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_organization_invitation( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_cancel_invitation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/invitations/{invitation_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_invitation_teams.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/invitations/{invitation_id}/teams'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_invitation_teams
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_invitation_tea( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/issues'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_for_org( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_members.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/members'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_members
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_members( '' ).
      WHEN 302. " Response if requester is not an organization member
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_check_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/members/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if requester is an organization member and user is a member
      WHEN 302. " Response if requester is not an organization member
" todo, raise
      WHEN 404. " Not Found if requester is an organization member and user is not a member
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_remove_member.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/members/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_membership( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_set_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_set_membership_for_u( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_membership( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_remove_membership_for_use.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_remove_membership_fo( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = exclude.
    CONDENSE lv_temp.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_list_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_list_for_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_start_for_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/migration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migration( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations/{migration_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = exclude.
    CONDENSE lv_temp.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " *   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.
" application/json,#/components/schemas/migration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migration( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_download_archive_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations/{migration_id}/archive'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations/{migration_id}/archive'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = repo_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/migrations/{migration_id}/repositories'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_list_repos_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_list_repos_fo( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_outside_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/outside_collaborators'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_outside_collaborator
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_outside_collab( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_convert_member_to_outside.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/outside_collaborators/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " User is getting converted asynchronously
" application/json,#/components/schemas/response_orgs_convert_member_to_outside
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_orgs_convert_member_to_o( '' ).
" todo, raise
      WHEN 204. " User was converted
      WHEN 403. " Forbidden if user is the last owner of the organization or not a member of the organization
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_remove_outside_collaborat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/outside_collaborators/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422. " Unprocessable Entity if user is a member of the organization
" application/json,#/components/schemas/response_orgs_remove_outside_collaborat
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_orgs_remove_outside_coll( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_list_packages_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_form_field( name = 'package_type' value = package_type ).
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_list_packages_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_list_packages_f( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_for_organ.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_for_or.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_for_o.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF token IS SUPPLIED.
      mi_client->request->set_form_field( name = 'token' value = token ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_all_package_versi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_get_all_package_versi
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_get_all_package( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_version_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package-version
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package_version( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_versio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_versi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/projects'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_for_org( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_create_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/projects'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_create_for_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_public_members.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/public_members'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_public_members
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_public_members( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_check_public_membership_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/public_members/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if user is a public member
      WHEN 404. " Not Found if user is not a public member
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_set_public_membership_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/public_members/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_remove_public_membership_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/public_members/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/repos'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_for_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_for_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/repos'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_in_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_alerts_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/secret-scanning/alerts'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF secret_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'secret_type' value = secret_type ).
    ENDIF.
    IF resolution IS SUPPLIED.
      mi_client->request->set_form_field( name = 'resolution' value = resolution ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_secret_scanning_list_alerts_01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_list_a01( '' ).
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/settings/billing/actions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_advanced_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/settings/billing/advanced-security'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Success
" application/json,#/components/schemas/advanced-security-active-committers
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_advanced_security_acti02( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/settings/billing/packages'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/packages-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/settings/billing/shared-storage'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/combined-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_combined_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_for_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/team-sync/groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/group-mapping
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_group_mapping( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_create.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_create( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/team-full
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_full( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_get_by_name.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-full
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_full( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_update_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_update_in_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/team-full
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_full( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_delete_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_delete_in_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_discussions_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    IF pinned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pinned' value = pinned ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_discussions_in_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_discussions_i( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_create_discussion_i( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/team-discussion
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-discussion
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_update_discussion_i( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-discussion
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_delete_discussion_i( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_discussion_comments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_discussion_comments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_discussion_co( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_create_discussion_c( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/team-discussion-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion_comment( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_comment_i.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-discussion-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion_comment( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_update_discussion_c( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-discussion-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_discussion_comment( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_delete_discussion_c( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_discus.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_team_discus
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_team_( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_team( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_number}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_team_disc01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_tea01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_te01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = discussion_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{discussion_number}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_link_external_idp_group_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/external-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_link_external_idp_g( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/external-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_external_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_unlink_external_idp_grou.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/external-groups'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_unlink_external_idp( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_pending_invitations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/invitations'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_pending_invitations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_pending_invit( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_members_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/members'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_members_in_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_members_in_or( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_get_membership_for_user_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_membership( '' ).
      WHEN 404. " if user has no team membership
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_membership.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_add_or_update_membe( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_membership( '' ).
      WHEN 403. " Forbidden if team synchronization is set up
" todo, raise
      WHEN 422. " Unprocessable Entity if you attempt to add an organization to a team
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_remove_membership_for_us.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_remove_membership_f( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403. " Forbidden if team synchronization is set up
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_projects_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/projects'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_projects_in_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_projects_in_o( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_pr.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/team-project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_project( '' ).
      WHEN 404. " Not Found if project is not managed by this team
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_project_pe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_add_or_update_proje( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403. " Forbidden if the project is not owned by the organization
" application/json,#/components/schemas/response_teams_add_or_update_project_pe
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_teams_add_or_update_proj( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_remove_project_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_remove_project_in_o( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_repos_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/repos'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_repos_in_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_repos_in_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_re.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Alternative response with repository permissions
" application/json,#/components/schemas/team-repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_team_repository( '' ).
      WHEN 204. " Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.
      WHEN 404. " Not Found if team does not have permission for the repository
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_repo_permi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_add_or_update_repo_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_remove_repo_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_remove_repo_in_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/group-mapping
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_group_mapping( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_create_or_update_idp_gro.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_teams_create_or_update_id( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/group-mapping
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_group_mapping( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_child_in_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/orgs/{org}/teams/{team_slug}/teams'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = team_slug.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " if child teams exist
" application/json,#/components/schemas/response_teams_list_child_in_org
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_child_in_org( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_get_card.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/cards/{card_id}'.
    lv_temp = card_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project-card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_card( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_update_card.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/cards/{card_id}'.
    lv_temp = card_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_update_card( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project-card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_card( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_delete_card.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/cards/{card_id}'.
    lv_temp = card_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_delete_card( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403. " Forbidden
" application/json,#/components/schemas/response_projects_delete_card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_projects_delete_card( '' ).
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_move_card.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/cards/{card_id}/moves'.
    lv_temp = card_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_move_card( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/response_projects_move_card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_move_card( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403. " Forbidden
" application/json,#/components/schemas/response_projects_move_card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_move_card( '' ).
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503. " Response
" application/json,#/components/schemas/response_projects_move_card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_move_card( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_get_column.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project-column
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_column( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_update_column.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_update_column( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project-column
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_column( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_delete_column.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_delete_column( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_cards.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}/cards'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    IF archived_state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'archived_state' value = archived_state ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_cards
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_cards( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_create_card.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}/cards'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/project-card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_card( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422. " Validation failed
" application/json,
" todo, raise
      WHEN 503. " Response
" application/json,#/components/schemas/response_projects_create_card
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_projects_create_card( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_move_column.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/columns/{column_id}/moves'.
    lv_temp = column_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_move_column( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/response_projects_move_column
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_move_column( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403. " Forbidden
" application/json,#/components/schemas/response_projects_update
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_projects_update( '' ).
" todo, raise
      WHEN 404. " Not Found if the authenticated user does not have access to the project
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_delete.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_delete( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Delete Success
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403. " Forbidden
" application/json,#/components/schemas/response_projects_delete
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_projects_delete( '' ).
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/collaborators'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_collaborators
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_collaborat( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/collaborators/{username}'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_add_collaborator( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/collaborators/{username}'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_remove_collabora( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_get_permission_for_us.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/collaborators/{username}/permission'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/project-collaborator-permission
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_collaborator_per( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_columns.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/columns'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_columns
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_columns( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_create_column.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/projects/{project_id}/columns'.
    lv_temp = project_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{project_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_create_column( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/project-column
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project_column( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~rate_limit_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/rate_limit'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/rate-limit-overview
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_rate_limit_overview( '' ).
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/full-repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_full_repository( '' ).
      WHEN 301.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/full-repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_full_repository( '' ).
      WHEN 307.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 307.
" todo, raise
      WHEN 403. " If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
" application/json,#/components/schemas/response_repos_delete
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_repos_delete( '' ).
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_artifacts_for_rep.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/artifacts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_artifacts_for_rep
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_artifacts_f( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_artifact.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = artifact_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/artifact
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_artifact( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_artifact.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = artifact_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_download_artifact.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'.
    lv_temp = archive_format.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{archive_format}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = artifact_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_job_for_workflow_r.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = job_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/job
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_job( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_download_job_logs_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/logs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = job_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_p01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/permissions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-repository-permissions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_repository_permi( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_p01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/permissions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_github_acti01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_re.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/selected-actions
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_selected_actions( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_re.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/selected-actions
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run03.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_self_hosted_run03
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_self_host03( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicat01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/downloads'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_runner_applicat01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_runner_ap01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/registration-token'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/remove-token'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/authentication-token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authentication_token( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/runner
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_runner( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_labels_for_self01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_add_custom_labels_to01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_add_custom_labe01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_set_custom_labels_fo01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_set_custom_labe01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_all_custom_la01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_remove_all_cust01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_remove_custom_label_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = runner_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH lv_temp.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF created IS SUPPLIED.
      mi_client->request->set_form_field( name = 'created' value = created ).
    ENDIF.
    lv_temp = exclude_pull_requests.
    CONDENSE lv_temp.
    IF exclude_pull_requests IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude_pull_requests' value = lv_temp ).
    ENDIF.
    lv_temp = check_suite_id.
    CONDENSE lv_temp.
    IF check_suite_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_suite_id' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_workflow_runs_for
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_workflow_ru( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    lv_temp = exclude_pull_requests.
    CONDENSE lv_temp.
    IF exclude_pull_requests IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude_pull_requests' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/workflow-run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workflow_run( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_reviews_for_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approvals'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_get_reviews_for_run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_get_reviews_for_( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_approve_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approve'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/empty-object
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_empty_object( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_run_arti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_workflow_run_arti
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_workflow_01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run_attem.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    lv_temp = attempt_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{attempt_number}' IN lv_uri WITH lv_temp.
    lv_temp = exclude_pull_requests.
    CONDENSE lv_temp.
    IF exclude_pull_requests IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude_pull_requests' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/workflow-run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workflow_run( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_jobs_for_workflow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    lv_temp = attempt_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{attempt_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_jobs_for_workflow
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_jobs_for_wo( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_download_workflow_run_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    lv_temp = attempt_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{attempt_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_cancel_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/cancel'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/response_actions_cancel_workflow_run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_actions_cancel_workflow_( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_jobs_for_workfl01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/jobs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_jobs_for_workfl01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_jobs_for_01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_download_workflow_ru01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run_lo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_pending_deployment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_get_pending_deployment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_get_pending_depl( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_review_pending_deploym.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_review_pending_de( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_review_pending_deploym
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_review_pending_d( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run_usage.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/timing'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/workflow-run-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workflow_run_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_secrets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/secrets'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_repo_secrets
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_repo_secret( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_public_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_public_key( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_secret( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_repo_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_create_or_updat01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when creating a secret
" application/json,#/components/schemas/response_actions_create_or_update_repo_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_create_or_update( '' ).
      WHEN 204. " Response when updating a secret
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_delete_repo_secre( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_workflows.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_repo_workflows
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_repo_workfl( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/workflow
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workflow( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_disable_workflow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_workflow_dispat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_create_workflow_d( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_enable_workflow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF created IS SUPPLIED.
      mi_client->request->set_form_field( name = 'created' value = created ).
    ENDIF.
    lv_temp = exclude_pull_requests.
    CONDENSE lv_temp.
    IF exclude_pull_requests IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude_pull_requests' value = lv_temp ).
    ENDIF.
    lv_temp = check_suite_id.
    CONDENSE lv_temp.
    IF check_suite_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_suite_id' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_workflow_runs
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_workflow_02( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_usage.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = workflow_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{workflow_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/workflow-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workflow_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_assignees.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/assignees'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_assignees
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_assignees( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_check_user_can_be_assig.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/assignees/{assignee}'.
    lv_temp = assignee.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{assignee}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
      WHEN 404. " Otherwise a `404` status code is returned.
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_autolinks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/autolinks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_autolinks
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_autolinks( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_autolink.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/autolinks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_autolink( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " response
" application/json,#/components/schemas/autolink
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_autolink( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_autolink.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = autolink_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{autolink_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/autolink
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_autolink( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_autolink.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = autolink_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{autolink_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_enable_automated_securit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/automated-security-fixes'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_disable_automated_securi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/automated-security-fixes'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_branches.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = protected.
    CONDENSE lv_temp.
    IF protected IS SUPPLIED.
      mi_client->request->set_form_field( name = 'protected' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_branches
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_branches( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_branch.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/branch-with-protection
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_branch_with_protection( '' ).
      WHEN 301.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/branch-protection
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_branch_protection( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_branch_prote( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_branch_prote( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-admin-enforced
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_admin_e( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_set_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-admin-enforced
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_admin_e( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_admin_branch_prot.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_pull_request_review_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_pull_re( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_pull_request( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_pull_re( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_pull_request( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_signature_pro.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-admin-enforced
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_admin_e( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/protected-branch-admin-enforced
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_protected_branch_admin_e( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_status_checks_protec.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/status-check-policy
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_status_check_policy( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_status_check( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/status-check-policy
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_status_check_policy( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_remove_status_check( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_all_status_check_con.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_all_status_check_con
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_all_status_che( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_add_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_add_status_check_context
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_add_status_check_c( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_set_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_set_status_check_context
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_set_status_check_c( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_cont.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_remove_status_check_cont
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_remove_status_chec( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_access_restrictions.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/branch-restriction-policy
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_branch_restriction_polic( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_access_restrictio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_apps_with_access_to_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_apps_with_access_to_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_apps_with_acce( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_add_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_add_app_access_restricti
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_add_app_access_res( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_set_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_set_app_access_restricti
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_set_app_access_res( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_app_access_restri.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_remove_app_access_restri
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_remove_app_access_( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_teams_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_teams_with_access_to
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_teams_with_acc( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_add_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_add_team_access_restrict
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_add_team_access_re( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_set_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_set_team_access_restrict
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_set_team_access_re( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_team_access_restr.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_remove_team_access_restr
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_remove_team_access( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_users_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_users_with_access_to
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_users_with_acc( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_add_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_add_user_access_restrict
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_add_user_access_re( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_set_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_set_user_access_restrict
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_set_user_access_re( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_user_access_restr.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_remove_user_access_restr
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_remove_user_access( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_rename_branch.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/branches/{branch}/rename'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = branch.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_rename_branch( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/branch-with-protection
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_branch_with_protection( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_create.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-runs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_checks_create( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/check-run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_run( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/check-run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_run( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_checks_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/check-run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_run( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_list_annotations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_checks_list_annotations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_list_annotations( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_rerequest_run.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_run_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/response_checks_rerequest_run
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_rerequest_run( '' ).
      WHEN 403. " Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422. " Validation error if the check run is not rerequestable
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_create_suite.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-suites'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_checks_create_suite( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " when the suite already existed
" application/json,#/components/schemas/check-suite
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_suite( '' ).
      WHEN 201. " Response when the suite was created
" application/json,#/components/schemas/check-suite
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_suite( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_set_suites_preferences.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-suites/preferences'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_checks_set_suites_prefere( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/check-suite-preference
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_suite_preference( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_get_suite.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_suite_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/check-suite
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_check_suite( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_list_for_suite.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_suite_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_checks_list_for_suite
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_list_for_suite( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_rerequest_suite.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = check_suite_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/response_checks_rerequest_suite
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_rerequest_suite( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_alerts_fo01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF tool_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_name' value = tool_name ).
    ENDIF.
    IF tool_guid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_guid' value = tool_guid ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_code_scanning_list_alerts_fo01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_list_ale01( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_get_alert.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-scanning-alert
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_alert( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_update_alert.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_code_scanning_update_aler( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-scanning-alert
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_alert( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_alert_insta.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_code_scanning_list_alert_insta
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_list_ale02( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_recent_anal.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF sarif_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sarif_id' value = sarif_id ).
    ENDIF.
    IF tool_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_name' value = tool_name ).
    ENDIF.
    IF tool_guid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_guid' value = tool_guid ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_code_scanning_list_recent_anal
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_list_recen( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_get_analysis.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'.
    lv_temp = analysis_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{analysis_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-scanning-analysis
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_analysis( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_delete_analysis.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'.
    lv_temp = analysis_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{analysis_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF confirm_delete IS SUPPLIED.
      mi_client->request->set_form_field( name = 'confirm_delete' value = confirm_delete ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-scanning-analysis-deletion
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_analysis_d( '' ).
      WHEN 400.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_upload_sarif.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_code_scanning_upload_sari( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/code-scanning-sarifs-receipt
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_code_scanning_sarifs_rec( '' ).
" todo, raise
      WHEN 400. " Bad Request if the sarif field is invalid
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 413. " Payload Too Large if the sarif field is too large
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~code_scanning_get_sarif.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}'.
    lv_temp = sarif_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{sarif_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/code-scanning-sarifs-status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_code_scanning_sarifs_sta( '' ).
      WHEN 403.
" todo, raise
      WHEN 404. " Not Found if the sarif id does not match any upload
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_codeowners_errors.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/codeowners/errors'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codeowners-errors
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codeowners_errors( '' ).
      WHEN 404. " Resource not found
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_list_in_repository_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/codespaces'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_list_in_repository_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_list_in_repos( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_create_with_repo_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/codespaces'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_create_with_re( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when the codespace was successfully created
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 202. " Response when the codespace creation partially failed but is being retried in the background
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_repo_machines_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/codespaces/machines'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_form_field( name = 'location' value = location ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_repo_machines_for_a
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_repo_machines( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/collaborators'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_collaborators
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_collaborators( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_check_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/collaborators/{username}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if user is a collaborator
      WHEN 404. " Not Found if user is not a collaborator
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/collaborators/{username}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_add_collaborator( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when a new invitation is created
" application/json,#/components/schemas/repository-invitation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository_invitation( '' ).
      WHEN 204. " Response when person is already a collaborator
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/collaborators/{username}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_remove_collaborator( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_collaborator_permiss.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/collaborators/{username}/permission'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " if user has admin permissions
" application/json,#/components/schemas/repository-collaborator-permission
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository_collaborator_( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_comments_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_commit_comments_for
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_commit_commen( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/commit-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit_comment( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_commit_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/commit-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit_comment( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_commit_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_commit_comm.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_commit_comm
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_commi( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_comm( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Reaction exists
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Reaction created
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 415.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_commits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF path IS SUPPLIED.
      mi_client->request->set_form_field( name = 'path' value = path ).
    ENDIF.
    IF author IS SUPPLIED.
      mi_client->request->set_form_field( name = 'author' value = author ).
    ENDIF.
    IF until IS SUPPLIED.
      mi_client->request->set_form_field( name = 'until' value = until ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_commits
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_commits( '' ).
      WHEN 400.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_branches_for_head_c.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = commit_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_branches_for_head_c
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_branches_for_( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_comments_for_commit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = commit_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_comments_for_commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_comments_for_( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = commit_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_commit_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/commit-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit_comment( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_pull_requests_assoc.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/pulls'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = commit_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_pull_requests_assoc
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_pull_requests( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_commit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_list_for_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-runs'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    lv_temp = app_id.
    CONDENSE lv_temp.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = lv_temp ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_checks_list_for_ref
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_list_for_ref( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~checks_list_suites_for_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-suites'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = app_id.
    CONDENSE lv_temp.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = lv_temp ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_checks_list_suites_for_ref
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_checks_list_suites_for_r( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_combined_status_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{ref}/status'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/combined-commit-status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_combined_commit_status( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_statuses_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/commits/{ref}/statuses'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_commit_statuses_for
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_commit_status( '' ).
      WHEN 301.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_community_profile_me.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/community/profile'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/community-profile
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_community_profile( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_compare_commits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/compare/{basehead}'.
    lv_temp = basehead.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{basehead}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/commit-comparison
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit_comparison( '' ).
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_content.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/contents/{path}'.
    lv_temp = path.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
      WHEN 302.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_or_update_file_co.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/contents/{path}'.
    lv_temp = path.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_or_update_fi( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/file-commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_file_commit( '' ).
      WHEN 201. " Response
" application/json,#/components/schemas/file-commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_file_commit( '' ).
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_file.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/contents/{path}'.
    lv_temp = path.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_file( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/file-commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_file_commit( '' ).
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_contributors.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/contributors'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF anon IS SUPPLIED.
      mi_client->request->set_form_field( name = 'anon' value = anon ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " if repository contains content
" application/json,#/components/schemas/response_repos_list_contributors
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_contributors( '' ).
      WHEN 204. " Response if repository is empty
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_list_repo_secrets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dependabot/secrets'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_dependabot_list_repo_secrets
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_list_repo_sec( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_get_repo_public_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/public-key'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/dependabot-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_public_key( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_get_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/dependabot-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_secret( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_create_or_update_re.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_dependabot_create_or_up01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when creating a secret
" application/json,#/components/schemas/response_dependabot_create_or_update_re
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_dependabot_create_or_upd( '' ).
      WHEN 204. " Response when updating a secret
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~dependabot_delete_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_dependabot_delete_repo_se( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_deployments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF task IS SUPPLIED.
      mi_client->request->set_form_field( name = 'task' value = task ).
    ENDIF.
    IF environment IS SUPPLIED.
      mi_client->request->set_form_field( name = 'environment' value = environment ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_deployments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_deployments( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_deployment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/deployment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deployment( '' ).
      WHEN 202. " Merged branch response
" application/json,#/components/schemas/response_repos_create_deployment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_repos_create_deployment( '' ).
" todo, raise
      WHEN 409. " Conflict when there is a merge conflict or the commit's status checks failed
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = deployment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/deployment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deployment( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_deployment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = deployment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_deployment_statuses.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = deployment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_deployment_statuses
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_deployment_st( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = deployment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_deployment_s( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/deployment-status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deployment_status( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'.
    lv_temp = status_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{status_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = deployment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/deployment-status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deployment_status( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_dispatch_event.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/dispatches'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_dispatch_eve( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_all_environments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/environments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_all_environments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_all_environmen( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_environment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/environment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_environment( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_or_update_environ.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_or_update_en( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/environment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_environment( '' ).
      WHEN 422. " Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_an_environment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_an_environme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Default response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_events.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/events'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_repo_events
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_repo_event( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_forks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/forks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_forks
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_forks( '' ).
      WHEN 400.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_fork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/forks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_fork( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/full-repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_full_repository( '' ).
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_create_blob.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/blobs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_create_blob( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/short-blob
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_short_blob( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_get_blob.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/blobs/{file_sha}'.
    lv_temp = file_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{file_sha}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/blob
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_blob( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_create_commit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/commits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_create_commit( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/git-commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_commit( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_get_commit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/commits/{commit_sha}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = commit_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/git-commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_commit( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_list_matching_refs.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/matching-refs/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_git_list_matching_refs
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_list_matching_refs( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_get_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/ref/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/git-ref
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_ref( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_create_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/refs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_create_ref( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/git-ref
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_ref( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_update_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_update_ref( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/git-ref
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_ref( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_delete_ref.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_delete_ref( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_create_tag.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/tags'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_create_tag( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/git-tag
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_tag( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_get_tag.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/tags/{tag_sha}'.
    lv_temp = tag_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{tag_sha}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/git-tag
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_tag( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_create_tree.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/trees'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_git_create_tree( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/git-tree
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_tree( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~git_get_tree.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/git/trees/{tree_sha}'.
    lv_temp = tree_sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{tree_sha}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF recursive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recursive' value = recursive ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/git-tree
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_git_tree( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_webhooks
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_webhooks( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hook
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_webhook( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook_config_for_r.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook_config_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_webhook_conf( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/webhook-config
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_webhook_config( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_webhook_deliveries.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    IF cursor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'cursor' value = cursor ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_webhook_deliveries
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_webhook_deliv( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook_delivery.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hook-delivery
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hook_delivery( '' ).
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_redeliver_webhook_delive.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    lv_temp = delivery_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{delivery_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_test_push_webhook.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = hook_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{hook_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_import_status.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/import
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_import( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_start_import.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_start_import( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/import
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_import( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_update_import.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_update_import( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/import
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_import( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_cancel_import.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_cancel_import( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_commit_authors.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import/authors'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = since.
    CONDENSE lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_get_commit_authors
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_get_commit_au( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_map_commit_author.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import/authors/{author_id}'.
    lv_temp = author_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{author_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_map_commit_aut( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/porter-author
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_porter_author( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_large_files.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import/large_files'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_get_large_files
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_get_large_fil( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_set_lfs_preference.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/import/lfs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_set_lfs_prefer( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/import
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_import( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_repo_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/installation'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/installation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_installation( '' ).
      WHEN 301.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/interaction-limits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/interaction-limits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/interaction-limit
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/interaction-limit-response
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_interaction_limit_respon( '' ).
      WHEN 409. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/interaction-limits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 409. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/invitations'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_invitations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_invitations( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_invitation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_invitation( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/repository-invitation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository_invitation( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_invitation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_invitation( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF milestone IS SUPPLIED.
      mi_client->request->set_form_field( name = 'milestone' value = milestone ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF assignee IS SUPPLIED.
      mi_client->request->set_form_field( name = 'assignee' value = assignee ).
    ENDIF.
    IF creator IS SUPPLIED.
      mi_client->request->set_form_field( name = 'creator' value = creator ).
    ENDIF.
    IF mentioned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'mentioned' value = mentioned ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_for_repo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_for_repo( '' ).
      WHEN 301.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_create.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_create( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_comments_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_comments_for_repo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_comments_for( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_get_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue_comment( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_update_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_update_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue_comment( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_delete_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue_comme.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_issue_comme
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_issue( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_issu( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Reaction exists
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Reaction created
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/events'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_events_for_repo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_events_for_r( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_get_event.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/events/{event_id}'.
    lv_temp = event_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{event_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue-event
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue_event( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue( '' ).
      WHEN 301.
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue( '' ).
      WHEN 301.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_add_assignees.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_add_assignees( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_remove_assignees.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_remove_assignees( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_comments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_comments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_comments( '' ).
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_create_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_create_comment( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/issue-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issue_comment( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_events.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/events'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_events
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_events( '' ).
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_on_issue.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_labels_on_issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_labels_on_is( '' ).
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_add_labels.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_add_labels
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_add_labels( '' ).
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_set_labels.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_set_labels
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_set_labels( '' ).
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_remove_all_labels.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_remove_label.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_remove_label
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_remove_label( '' ).
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_lock.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_lock( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_unlock.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_unlock( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_issue
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_iss01( '' ).
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_is01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Response
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_timelin.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/timeline'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = issue_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_events_for_timelin
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_events_for_t( '' ).
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_deploy_keys.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/keys'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_deploy_keys
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_deploy_keys( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/keys'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_deploy_key( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/deploy-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deploy_key( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/keys/{key_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/deploy-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_deploy_key( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/keys/{key_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_labels_for_repo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_labels_for_r( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_create_label.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_create_label( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/label
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_label( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_get_label.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/labels/{name}'.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/label
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_label( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_update_label.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/labels/{name}'.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_update_label( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/label
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_label( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_delete_label.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/labels/{name}'.
    lv_temp = name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_delete_label( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_languages.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/languages'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/language
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_language( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_enable_lfs_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/lfs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202.
" todo, raise
      WHEN 403. " We will return a 403 with one of the following messages:\n\n- Git LFS support not enabled because Git LFS is globally disabled.\n- Git LFS support not enabled because Git LFS is disabled for the root repository in the network.\n- Git LFS support not enabled because Git LFS is disabled for <owner>.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_disable_lfs_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/lfs'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~licenses_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/license'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/license-content
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_license_content( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_merge_upstream.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/merge-upstream'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_merge_upstream( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The branch has been successfully synced with the upstream repository
" application/json,#/components/schemas/merged-upstream
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_merged_upstream( '' ).
      WHEN 409. " The branch could not be synced because of a merge conflict
" todo, raise
      WHEN 422. " The branch could not be synced for some other reason
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_merge.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/merges'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_merge( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Successful Response (The resulting merge commit)
" application/json,#/components/schemas/commit
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_commit( '' ).
      WHEN 204. " Response when already merged
      WHEN 403.
" todo, raise
      WHEN 404. " Not Found when the base or head does not exist
" todo, raise
      WHEN 409. " Conflict when there is a merge conflict
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_milestones.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_milestones
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_milestones( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_create_milestone.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_create_milestone( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/milestone
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_milestone( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_get_milestone.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = milestone_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/milestone
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_milestone( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_update_milestone.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = milestone_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_update_milestone( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/milestone
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_milestone( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_delete_milestone.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = milestone_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_issues_delete_milestone( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_milesto.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = milestone_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_labels_for_milesto
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_labels_for_m( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/notifications'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = all.
    CONDENSE lv_temp.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = lv_temp ).
    ENDIF.
    lv_temp = participating.
    CONDENSE lv_temp.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = lv_temp ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_repo_notificatio
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_repo_notif( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_mark_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/notifications'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_mark_repo_notifi( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/response_activity_mark_repo_notificatio
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_activity_mark_repo_notif( '' ).
" todo, raise
      WHEN 205. " Reset Content
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_pages.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/page
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_page( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_pages_site.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_pages_site( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/page
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_page( '' ).
      WHEN 409.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_information_about.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_information_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 400.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_pages_site.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_pages_site( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_pages_builds.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages/builds'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_pages_builds
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_pages_builds( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_request_pages_build.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages/builds'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/page-build-status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_page_build_status( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_pages_build.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages/builds/latest'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/page-build
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_page_build( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_pages_build.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages/builds/{build_id}'.
    lv_temp = build_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{build_id}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/page-build
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_page_build( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_pages_health_check.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pages/health'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pages-health-check
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pages_health_check( '' ).
      WHEN 202. " Empty response
" application/json,#/components/schemas/empty-object
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_empty_object( '' ).
" todo, raise
      WHEN 400. " Custom domains are not available for GitHub Pages
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422. " There isn't a CNAME for this page
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/projects'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_for_repo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_for_repo( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_create_for_repo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/projects'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_create_for_repo( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 410.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF head IS SUPPLIED.
      mi_client->request->set_form_field( name = 'head' value = head ).
    ENDIF.
    IF base IS SUPPLIED.
      mi_client->request->set_form_field( name = 'base' value = base ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list( '' ).
      WHEN 304.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_create.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_create( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/pull-request
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list_review_comments_for
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_review_commen( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_get_review_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review_comm( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_update_review_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_update_review_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review_comm( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_delete_review_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_delete_review_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_pull_reques.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_reactions_list_for_pull_reques
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reactions_list_for_pull_( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_pull( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Reaction exists
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Reaction created
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    lv_temp = reaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{reaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_get.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
" application/json,#/components/schemas/pull-request
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request( '' ).
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_update.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_update( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_create_with_pr_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/codespaces'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_create_with_pr( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when the codespace was successfully created
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 202. " Response when the codespace creation partially failed but is being retried in the background
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list_review_comments
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_review_comm01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_create_review_comment.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_create_review_comme( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/pull-request-review-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review_comm( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_create_reply_for_review_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = comment_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_create_reply_for_re( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/pull-request-review-comment
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review_comm( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_commits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/commits'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list_commits
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_commits( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_files.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/files'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list_files
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_files( '' ).
      WHEN 422.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_check_if_merged.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if pull request has been merged
      WHEN 404. " Not Found if pull request has not been merged
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_merge.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_merge( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " if merge was successful
" application/json,#/components/schemas/pull-request-merge-result
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_merge_resul( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 405. " Method Not Allowed if merge cannot be performed
" application/json,#/components/schemas/response_pulls_merge
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_pulls_merge( '' ).
" todo, raise
      WHEN 409. " Conflict if sha was provided and pull request head did not match
" application/json,#/components/schemas/response_pulls_merge
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_pulls_merge( '' ).
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_requested_reviewers.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review-request
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review_requ( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_request_reviewers.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_request_reviewers( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/pull-request-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_simple( '' ).
      WHEN 403.
" todo, raise
      WHEN 422. " Unprocessable Entity if user is not a collaborator
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_remove_requested_reviewe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_remove_requested_re( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-simple
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_simple( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_reviews.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The list of reviews returns in chronological order.
" application/json,#/components/schemas/response_pulls_list_reviews
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_reviews( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_create_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_create_review( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_get_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_update_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_update_review( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_delete_pending_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_delete_pending_revi( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_list_comments_for_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_pulls_list_comments_for_review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pulls_list_comments_for_( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_dismiss_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_dismiss_review( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_submit_review.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    lv_temp = review_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_submit_review( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/pull-request-review
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_pull_request_review( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~pulls_update_branch.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = pull_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{pull_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_pulls_update_branch( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/response_pulls_update_branch
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_pulls_update_branch( '' ).
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_readme.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/readme'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/content-file
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_content_file( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_readme_in_directory.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/readme/{dir}'.
    lv_temp = dir.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{dir}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/content-file
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_content_file( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_releases.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_releases
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_releases( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_release( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/release
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release( '' ).
      WHEN 404. " Not Found if the discussion category name is invalid
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_release_asset.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = asset_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
" application/json,#/components/schemas/release-asset
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release_asset( '' ).
      WHEN 302.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_release_asset.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = asset_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_release_asse( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/release-asset
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release_asset( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_release_asset.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = asset_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_release_asse( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_generate_release_notes.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/generate-notes'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_generate_release_no( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Name and body of generated release notes
" application/json,#/components/schemas/release-notes-content
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release_notes_content( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/latest'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/release
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_release_by_tag.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/tags/{tag}'.
    lv_temp = tag.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{tag}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/release
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
" application/json,#/components/schemas/release
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_update_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_update_release( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/release
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release( '' ).
      WHEN 404. " Not Found if the discussion category name is invalid
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_delete_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_delete_release( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_release_assets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_release_assets
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_release_asset( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_upload_release_asset.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_form_field( name = 'name' value = name ).
    IF label IS SUPPLIED.
      mi_client->request->set_form_field( name = 'label' value = label ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response for successful upload
" application/json,#/components/schemas/release-asset
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_release_asset( '' ).
      WHEN 422. " Response if you upload an asset with the same filename as another uploaded asset
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_release.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = release_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_reactions_create_for_rele( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Reaction exists
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 201. " Reaction created
" application/json,#/components/schemas/reaction
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_reaction( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_alerts_02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF secret_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'secret_type' value = secret_type ).
    ENDIF.
    IF resolution IS SUPPLIED.
      mi_client->request->set_form_field( name = 'resolution' value = resolution ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_secret_scanning_list_alerts_02
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_list_a02( '' ).
      WHEN 404. " Repository is public or secret scanning is disabled for the repository
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_get_alert.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/secret-scanning-alert
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_alert( '' ).
      WHEN 304.
" todo, raise
      WHEN 404. " Repository is public, or secret scanning is disabled for the repository, or the resource is not found
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_update_alert.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_secret_scanning_update_al( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/secret-scanning-alert
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_alert( '' ).
      WHEN 404. " Repository is public, or secret scanning is disabled for the repository, or the resource is not found
" todo, raise
      WHEN 422. " State does not match the resolution
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_locations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = alert_number.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_secret_scanning_list_locations
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_secret_scanning_list_loc( '' ).
      WHEN 404. " Repository is public, or secret scanning is disabled for the repository, or the resource is not found
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_stargazers_for_r.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stargazers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_code_frequency_stats.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stats/code_frequency'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
" application/json,#/components/schemas/response_repos_get_code_frequency_stats
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_code_frequency( '' ).
      WHEN 202.
" todo, raise
      WHEN 204.
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_activity_stat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stats/commit_activity'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_commit_activity_stat
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_commit_activit( '' ).
      WHEN 202.
" todo, raise
      WHEN 204.
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_contributors_stats.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stats/contributors'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits
" application/json,#/components/schemas/response_repos_get_contributors_stats
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_contributors_s( '' ).
      WHEN 202.
" todo, raise
      WHEN 204.
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_participation_stats.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stats/participation'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The array order is oldest week (index 0) to most recent week.
" application/json,#/components/schemas/participation-stats
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_participation_stats( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_punch_card_stats.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/stats/punch_card'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
" application/json,#/components/schemas/response_repos_get_punch_card_stats
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_punch_card_sta( '' ).
      WHEN 204.
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_status.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/statuses/{sha}'.
    lv_temp = sha.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_commit_statu( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/status
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_status( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_watchers_for_rep.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/subscribers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_watchers_for_rep
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_watchers_f( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_get_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/subscription'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " if you subscribe to the repository
" application/json,#/components/schemas/repository-subscription
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository_subscription( '' ).
      WHEN 403.
" todo, raise
      WHEN 404. " Not Found if you don't subscribe to the repository
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_set_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/subscription'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_set_repo_subscri( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/repository-subscription
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository_subscription( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_delete_repo_subscript.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/subscription'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_activity_delete_repo_subs( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_tags.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/tags'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_tags
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_tags( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_download_tarball_archive.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/tarball/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_teams.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/teams'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_teams
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_teams( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_all_topics.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/topics'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/topic
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_topic( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_replace_all_topics.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/topics'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_replace_all_topics( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/topic
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_topic( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_clones.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/traffic/clones'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/clone-traffic
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_clone_traffic( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_top_paths.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/traffic/popular/paths'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_top_paths
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_top_paths( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_top_referrers.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/traffic/popular/referrers'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_get_top_referrers
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_get_top_referrers( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_get_views.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/traffic/views'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/view-traffic
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_view_traffic( '' ).
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_transfer.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/transfer'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_transfer( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/minimal-repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_minimal_repository( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_check_vulnerability_aler.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if repository is enabled with vulnerability alerts
      WHEN 404. " Not Found if repository is not enabled with vulnerability alerts
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_enable_vulnerability_ale.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_disable_vulnerability_al.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_download_zipball_archive.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{owner}/{repo}/zipball/{ref}'.
    lv_temp = ref.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH lv_temp.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_using_template.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repos/{template_owner}/{template_repo}/generate'.
    lv_temp = template_owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{template_owner}' IN lv_uri WITH lv_temp.
    lv_temp = template_repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{template_repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_using_templa( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_public.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories'.
    lv_temp = since.
    CONDENSE lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_public
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_public( '' ).
      WHEN 304.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_list_environment_secre.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_actions_list_environment_secre
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_list_environment( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_environment_public.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/public-key'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_public_key( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_get_environment_secret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_secret( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_envir.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_create_or_updat02( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when creating a secret
" application/json,#/components/schemas/empty-object
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_empty_object( '' ).
      WHEN 204. " Response when updating a secret
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~actions_delete_environment_sec.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = environment_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{environment_name}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_actions_delete_environmen( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Default response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provisio.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF excludedattributes IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludedAttributes' value = excludedattributes ).
    ENDIF.
    lv_temp = startindex.
    CONDENSE lv_temp.
    IF startindex IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startIndex' value = lv_temp ).
    ENDIF.
    lv_temp = count.
    CONDENSE lv_temp.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-group-list-enterprise
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_group_list_enterpri( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_and.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_provisio( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/scim-enterprise-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provision.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH lv_temp.
    IF excludedattributes IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludedAttributes' value = excludedattributes ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informati.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_info( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attrib.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_update_a( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-group
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_group( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_scim_g.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_group_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_delete01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provis01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    lv_temp = startindex.
    CONDENSE lv_temp.
    IF startindex IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startIndex' value = lv_temp ).
    ENDIF.
    lv_temp = count.
    CONDENSE lv_temp.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-user-list-enterprise
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_user_list_enterpris( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_a01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_provis01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/scim-enterprise-user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provisi01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informa01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_set_in01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attr01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_update01( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/scim-enterprise-user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_scim_enterprise_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_user_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    lv_temp = enterprise.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_enterprise_admin_delete_u( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_list_provisioned_identiti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = startindex.
    CONDENSE lv_temp.
    IF startindex IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startIndex' value = lv_temp ).
    ENDIF.
    lv_temp = count.
    CONDENSE lv_temp.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = lv_temp ).
    ENDIF.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_provision_and_invite_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_scim_provision_and_invite( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
      WHEN 304.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_get_provisioning_informat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_set_information_for_provi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_scim_set_information_for_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_update_attribute_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_scim_update_attribute_for( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
      WHEN 304.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 429. " Response
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~scim_delete_user_from_org.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = scim_user_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_scim_delete_user_from_org( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_code.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/code'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_code
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_code( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_commits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/commits'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_commits
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_commits( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_issues_and_pull_request.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/issues'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_issues_and_pull_request
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_issues_and_pull_r( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_labels.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/labels'.
    lv_temp = repository_id.
    CONDENSE lv_temp.
    mi_client->request->set_form_field( name = 'repository_id' value = lv_temp ).
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_labels
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_labels( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_repos.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/repositories'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_repos
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_repos( '' ).
      WHEN 304.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_topics.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/topics'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_topics
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_topics( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~search_users.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/search/users'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_search_users
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_search_users( '' ).
      WHEN 304.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 503.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_update_authenticated.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_users_update_authenticate( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/private-user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_private_user( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_blocked_by_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/blocks'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_blocked_by_authenti
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_blocked_by_au( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_check_blocked.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/blocks/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " If the user is blocked:
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404. " If the user is not blocked:
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_block.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/blocks/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_unblock.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/blocks/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_list_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = repository_id.
    CONDENSE lv_temp.
    IF repository_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'repository_id' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_list_for_authentica
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_list_for_auth( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_create_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response when the codespace was successfully created
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 202. " Response when the codespace creation partially failed but is being retried in the background
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_list_secrets_for_au.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_list_secrets_for_au
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_list_secrets_( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_get_public_key_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/public-key'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespaces-user-public-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_user_public_k( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_get_secret_for_auth.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}'.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespaces-secret
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_secret( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_create_or_update_se.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}'.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_create_or_upda( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response after successfully creaing a secret
" application/json,#/components/schemas/response_codespaces_create_or_update_se
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_create_or_upd( '' ).
      WHEN 204. " Response after successfully updating a secret
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_delete_secret_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}'.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_delete_secret_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_list_repositories_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}/repositories'.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_list_repositories_f
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_list_reposito( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_set_repositories_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}/repositories'.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_set_repositori( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " No Content when repositories were added to the selected list
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_add_repository_for_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " No Content when repository was added to the selected list
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_remove_repository_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}'.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    lv_temp = secret_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " No Content when repository was removed from the selected list
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_get_for_authenticat.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_update_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_update_for_aut( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_delete_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_codespaces_delete_for_aut( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202.
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_export_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}/exports'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Response
" application/json,#/components/schemas/codespace-export-details
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_codespace_export_details( '' ).
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_get_export_details_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}/exports/{export_id}'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    lv_temp = export_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{export_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespace-export-details
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace_export_details( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_codespace_machines_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}/machines'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_codespaces_codespace_machines_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespaces_codespace_mac( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_start_for_authentic.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}/start'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 304.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 402. " Payment required
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~codespaces_stop_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/codespaces/{codespace_name}/stop'.
    lv_temp = codespace_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{codespace_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/codespace
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_codespace( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 500.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_set_primary_email_visibi.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/email/visibility'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_users_set_primary_email_v( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_set_primary_email_visibi
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_set_primary_email_( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_emails_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/emails'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_emails_for_authenti
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_emails_for_au( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_add_email_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/emails'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/response_users_add_email_for_authentica
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_add_email_for_auth( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_delete_email_for_authent.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/emails'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( body ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/followers'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_followers_for_authe
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_followers_for( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_followed_by_authent.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/following'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_followed_by_authent
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_followed_by_a( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_check_person_is_followed.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/following/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " if the person is followed by the authenticated user
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404. " if the person is not followed by the authenticated user
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_follow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/following/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_unfollow.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/following/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_authen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/gpg_keys'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_gpg_keys_for_authen
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_gpg_keys_for_( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_create_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/gpg_keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_users_create_gpg_key_for_( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/gpg-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gpg_key( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_get_gpg_key_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/gpg_keys/{gpg_key_id}'.
    lv_temp = gpg_key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/gpg-key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gpg_key( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_delete_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/gpg_keys/{gpg_key_id}'.
    lv_temp = gpg_key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_installations_for_au.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/installations'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " You can find the permissions for the installation under the `permissions` key.
" application/json,#/components/schemas/response_apps_list_installations_for_au
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_installations_( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 415.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_installation_repos_f.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/installations/{installation_id}/repositories'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The access the user has to each repository is included in the hash under the `permissions` key.
" application/json,#/components/schemas/response_apps_list_installation_repos_f
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_installation_r( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_add_repo_to_installation_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_remove_repo_from_installa.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}'.
    lv_temp = installation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH lv_temp.
    lv_temp = repository_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/interaction-limits'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Default response
" application/json,
      WHEN 204. " Response when there are no restrictions
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/interaction-limits'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/interaction-limit
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/interaction-limit-response
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_interaction_limit_respon( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/interaction-limits'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~issues_list_for_authenticated_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_issues_list_for_authenticated_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_issues_list_for_authenti( '' ).
      WHEN 304.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_public_ssh_keys_for.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/keys'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_public_ssh_keys_for
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_public_ssh_ke( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_create_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_users_create_public_ssh_k( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_key( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_get_public_ssh_key_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/keys/{key_id}'.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/key
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_key( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_delete_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/keys/{key_id}'.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_au.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/marketplace_purchases'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_subscriptions_for_au
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_subscriptions_( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/marketplace_purchases/stubbed'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_apps_list_subscriptions_for_01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_apps_list_subscription01( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_memberships_for_auth.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/memberships/orgs'.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_memberships_for_auth
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_memberships_fo( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_authen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/memberships/orgs/{org}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_membership( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_update_membership_for_aut.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/memberships/orgs/{org}'.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_orgs_update_membership_fo( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/org-membership
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_org_membership( '' ).
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_list_for_authentica
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_list_for_auth( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_authentic.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_migrations_start_for_auth( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/migration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migration( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_auth.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations/{migration_id}'.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = exclude.
    CONDENSE lv_temp.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/migration
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migration( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_get_archive_for_aut.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations/{migration_id}/archive'.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 302. " Response
" todo, raise
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_fo01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations/{migration_id}/archive'.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_aut.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations/{migration_id}/repos/{repo_name}/lock'.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = repo_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_auth.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/migrations/{migration_id}/repositories'.
    lv_temp = migration_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_migrations_list_repos_for_auth
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_migrations_list_repos_01( '' ).
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_authenticated_us.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/orgs'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_for_authenticated_us
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_for_authentica( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_list_packages_for_aut.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages'.
    mi_client->request->set_form_field( name = 'package_type' value = package_type ).
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_list_packages_for_aut
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_list_packages01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_for_au.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    IF token IS SUPPLIED.
      mi_client->request->set_form_field( name = 'token' value = token ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_all_package_ver01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}/versions'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_get_all_package_ver01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_get_all_packa01( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_version01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package-version
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package_version( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_vers01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_ver01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_create_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/projects'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_projects_create_for_authe( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/project
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_project( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 415.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_public_emails_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/public_emails'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_public_emails_for_a
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_public_emails( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/repos'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_for_authenticated_u
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_for_authentic( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_create_for_authenticated.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/repos'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_cdata( json_repos_create_for_authenti( body ) ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Response
" application/json,#/components/schemas/repository
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repository( '' ).
      WHEN 304.
" todo, raise
      WHEN 400.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations_for_aut.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/repository_invitations'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_invitations_for_aut
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_invitations_f( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_accept_invitation_for_au.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/repository_invitations/{invitation_id}'.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_decline_invitation_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/repository_invitations/{invitation_id}'.
    lv_temp = invitation_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
      WHEN 409.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_by.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/starred'.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_repos_starred_by
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_repos_star( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_check_repo_is_starred.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/starred/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response if this repository is starred by you
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404. " Not Found if this repository is not starred by you
" application/json,#/components/schemas/basic-error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_basic_error( '' ).
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_star_repo_for_authent.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/starred/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_unstar_repo_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/starred/{owner}/{repo}'.
    lv_temp = owner.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH lv_temp.
    lv_temp = repo.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_watched_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/subscriptions'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_watched_repos_fo
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_watched_re( '' ).
      WHEN 304.
" todo, raise
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~teams_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/user/teams'.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_teams_list_for_authenticated_u
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_teams_list_for_authentic( '' ).
      WHEN 304.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users'.
    lv_temp = since.
    CONDENSE lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = lv_temp ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list( '' ).
      WHEN 304.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_get_by_username.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_events_for_authe.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/events'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_events_for_authe
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_events_for( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_org_events_for_a.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/events/orgs/{org}'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = org.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_org_events_for_a
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_org_events( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/events/public'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_public_events_01
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_public_e02( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/followers'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_followers_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_followers_f01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/following'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_following_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_following_for( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_check_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/following/{target_user}'.
    lv_temp = target_user.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{target_user}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " if the user follows the target user
      WHEN 404. " if the user does not follow the target user
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~gists_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/gists'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_gists_list_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_gists_list_for_user( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/gpg_keys'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_gpg_keys_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_gpg_keys_fo01( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_get_context_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/hovercard'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF subject_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_type' value = subject_type ).
    ENDIF.
    IF subject_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_id' value = subject_id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/hovercard
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_hovercard( '' ).
      WHEN 404.
" todo, raise
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~apps_get_user_installation.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/installation'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/installation
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_installation( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~users_list_public_keys_for_use.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/keys'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_users_list_public_keys_for_use
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_users_list_public_keys_f( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/orgs'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_orgs_list_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_orgs_list_for_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_list_packages_for_use.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_form_field( name = 'package_type' value = package_type ).
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_list_packages_for_use
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_list_packages02( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_for_us.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_for_u.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF token IS SUPPLIED.
      mi_client->request->set_form_field( name = 'token' value = token ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_all_package_ver02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_packages_get_all_package_ver02
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_get_all_packa02( '' ).
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_get_package_version02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/package-version
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_package_version( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_delete_package_vers02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~packages_restore_package_ver02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.
    lv_temp = package_type.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_type}' IN lv_uri WITH lv_temp.
    lv_temp = package_name.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_name}' IN lv_uri WITH lv_temp.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = package_version_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{package_version_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " Response
      WHEN 401.
" todo, raise
      WHEN 403.
" todo, raise
      WHEN 404.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~projects_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/projects'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_projects_list_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_projects_list_for_user( '' ).
      WHEN 422.
" todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_received_events_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/received_events'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_received_events_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_received_e( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_received_public_.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/received_events/public'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_received_public_
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_received_p( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~repos_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/repos'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_repos_list_for_user
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_repos_list_for_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/settings/billing/actions'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/actions-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_actions_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/settings/billing/packages'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/packages-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_packages_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b02.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/settings/billing/shared-storage'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/combined-billing-usage
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_combined_billing_usage( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_01.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/starred'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_watched_by.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/users/{username}/subscriptions'.
    lv_temp = username.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH lv_temp.
    lv_temp = per_page.
    CONDENSE lv_temp.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = lv_temp ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
" application/json,#/components/schemas/response_activity_list_repos_watched_by
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_activity_list_repos_watc( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD zif_github~meta_get_zen.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE 'https://api.github.com/zen'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Response
    ENDCASE.
  ENDMETHOD.

ENDCLASS.
