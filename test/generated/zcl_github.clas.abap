CLASS zcl_github DEFINITION PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API
  PUBLIC SECTION.
    INTERFACES zif_github.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_simple_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_user) TYPE zif_github=>simple_user
      RAISING cx_static_check.
    METHODS parse_integration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(integration) TYPE zif_github=>integration
      RAISING cx_static_check.
    METHODS parse_basic_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(basic_error) TYPE zif_github=>basic_error
      RAISING cx_static_check.
    METHODS parse_validation_error_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error_simple) TYPE zif_github=>validation_error_simple
      RAISING cx_static_check.
    METHODS parse_webhook_config_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_url) TYPE zif_github=>webhook_config_url
      RAISING cx_static_check.
    METHODS parse_webhook_config_content_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_content_type) TYPE zif_github=>webhook_config_content_type
      RAISING cx_static_check.
    METHODS parse_webhook_config_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_secret) TYPE zif_github=>webhook_config_secret
      RAISING cx_static_check.
    METHODS parse_webhook_config_insecure_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_insecure_ssl) TYPE zif_github=>webhook_config_insecure_ssl
      RAISING cx_static_check.
    METHODS parse_webhook_config
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config) TYPE zif_github=>webhook_config
      RAISING cx_static_check.
    METHODS parse_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise) TYPE zif_github=>enterprise
      RAISING cx_static_check.
    METHODS parse_installation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation) TYPE zif_github=>installation
      RAISING cx_static_check.
    METHODS parse_app_permissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(app_permissions) TYPE zif_github=>app_permissions
      RAISING cx_static_check.
    METHODS parse_license_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_simple) TYPE zif_github=>license_simple
      RAISING cx_static_check.
    METHODS parse_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository) TYPE zif_github=>repository
      RAISING cx_static_check.
    METHODS parse_installation_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_token) TYPE zif_github=>installation_token
      RAISING cx_static_check.
    METHODS parse_validation_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error) TYPE zif_github=>validation_error
      RAISING cx_static_check.
    METHODS parse_application_grant
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(application_grant) TYPE zif_github=>application_grant
      RAISING cx_static_check.
    METHODS parse_scoped_installation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scoped_installation) TYPE zif_github=>scoped_installation
      RAISING cx_static_check.
    METHODS parse_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authorization) TYPE zif_github=>authorization
      RAISING cx_static_check.
    METHODS parse_code_of_conduct
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct) TYPE zif_github=>code_of_conduct
      RAISING cx_static_check.
    METHODS parse_content_reference_attach
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_reference_attachment) TYPE zif_github=>content_reference_attachment
      RAISING cx_static_check.
    METHODS parse_enabled_organizations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enabled_organizations) TYPE zif_github=>enabled_organizations
      RAISING cx_static_check.
    METHODS parse_allowed_actions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(allowed_actions) TYPE zif_github=>allowed_actions
      RAISING cx_static_check.
    METHODS parse_selected_actions_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(selected_actions_url) TYPE zif_github=>selected_actions_url
      RAISING cx_static_check.
    METHODS parse_actions_enterprise_permi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_enterprise_permissions) TYPE zif_github=>actions_enterprise_permissions
      RAISING cx_static_check.
    METHODS parse_organization_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_simple) TYPE zif_github=>organization_simple
      RAISING cx_static_check.
    METHODS parse_selected_actions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(selected_actions) TYPE zif_github=>selected_actions
      RAISING cx_static_check.
    METHODS parse_runner_groups_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_groups_enterprise) TYPE zif_github=>runner_groups_enterprise
      RAISING cx_static_check.
    METHODS parse_runner
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner) TYPE zif_github=>runner
      RAISING cx_static_check.
    METHODS parse_runner_application
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_application) TYPE zif_github=>runner_application
      RAISING cx_static_check.
    METHODS parse_authentication_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authentication_token) TYPE zif_github=>authentication_token
      RAISING cx_static_check.
    METHODS parse_audit_log_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(audit_log_event) TYPE zif_github=>audit_log_event
      RAISING cx_static_check.
    METHODS parse_actions_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_billing_usage) TYPE zif_github=>actions_billing_usage
      RAISING cx_static_check.
    METHODS parse_packages_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(packages_billing_usage) TYPE zif_github=>packages_billing_usage
      RAISING cx_static_check.
    METHODS parse_combined_billing_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_billing_usage) TYPE zif_github=>combined_billing_usage
      RAISING cx_static_check.
    METHODS parse_actor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actor) TYPE zif_github=>actor
      RAISING cx_static_check.
    METHODS parse_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label) TYPE zif_github=>label
      RAISING cx_static_check.
    METHODS parse_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(milestone) TYPE zif_github=>milestone
      RAISING cx_static_check.
    METHODS parse_author_association
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(author_association) TYPE zif_github=>author_association
      RAISING cx_static_check.
    METHODS parse_issue_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_simple) TYPE zif_github=>issue_simple
      RAISING cx_static_check.
    METHODS parse_reaction_rollup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction_rollup) TYPE zif_github=>reaction_rollup
      RAISING cx_static_check.
    METHODS parse_issue_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_comment) TYPE zif_github=>issue_comment
      RAISING cx_static_check.
    METHODS parse_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(event) TYPE zif_github=>event
      RAISING cx_static_check.
    METHODS parse_link_with_type
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link_with_type) TYPE zif_github=>link_with_type
      RAISING cx_static_check.
    METHODS parse_feed
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(feed) TYPE zif_github=>feed
      RAISING cx_static_check.
    METHODS parse_base_gist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(base_gist) TYPE zif_github=>base_gist
      RAISING cx_static_check.
    METHODS parse_gist_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_simple) TYPE zif_github=>gist_simple
      RAISING cx_static_check.
    METHODS parse_gist_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_comment) TYPE zif_github=>gist_comment
      RAISING cx_static_check.
    METHODS parse_gist_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_commit) TYPE zif_github=>gist_commit
      RAISING cx_static_check.
    METHODS parse_gitignore_template
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gitignore_template) TYPE zif_github=>gitignore_template
      RAISING cx_static_check.
    METHODS parse_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue) TYPE zif_github=>issue
      RAISING cx_static_check.
    METHODS parse_license
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license) TYPE zif_github=>license
      RAISING cx_static_check.
    METHODS parse_marketplace_listing_plan
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_listing_plan) TYPE zif_github=>marketplace_listing_plan
      RAISING cx_static_check.
    METHODS parse_marketplace_purchase
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_purchase) TYPE zif_github=>marketplace_purchase
      RAISING cx_static_check.
    METHODS parse_api_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(api_overview) TYPE zif_github=>api_overview
      RAISING cx_static_check.
    METHODS parse_minimal_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(minimal_repository) TYPE zif_github=>minimal_repository
      RAISING cx_static_check.
    METHODS parse_thread
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread) TYPE zif_github=>thread
      RAISING cx_static_check.
    METHODS parse_thread_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread_subscription) TYPE zif_github=>thread_subscription
      RAISING cx_static_check.
    METHODS parse_organization_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_full) TYPE zif_github=>organization_full
      RAISING cx_static_check.
    METHODS parse_enabled_repositories
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enabled_repositories) TYPE zif_github=>enabled_repositories
      RAISING cx_static_check.
    METHODS parse_actions_organization_per
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_organization_permissio) TYPE zif_github=>actions_organization_permissio
      RAISING cx_static_check.
    METHODS parse_runner_groups_org
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(runner_groups_org) TYPE zif_github=>runner_groups_org
      RAISING cx_static_check.
    METHODS parse_organization_actions_sec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_actions_secret) TYPE zif_github=>organization_actions_secret
      RAISING cx_static_check.
    METHODS parse_actions_public_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_public_key) TYPE zif_github=>actions_public_key
      RAISING cx_static_check.
    METHODS parse_credential_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(credential_authorization) TYPE zif_github=>credential_authorization
      RAISING cx_static_check.
    METHODS parse_organization_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_invitation) TYPE zif_github=>organization_invitation
      RAISING cx_static_check.
    METHODS parse_org_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_hook) TYPE zif_github=>org_hook
      RAISING cx_static_check.
    METHODS parse_interaction_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_group) TYPE zif_github=>interaction_group
      RAISING cx_static_check.
    METHODS parse_interaction_limit_respon
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_limit_response) TYPE zif_github=>interaction_limit_response
      RAISING cx_static_check.
    METHODS parse_interaction_expiry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_expiry) TYPE zif_github=>interaction_expiry
      RAISING cx_static_check.
    METHODS parse_interaction_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(interaction_limit) TYPE zif_github=>interaction_limit
      RAISING cx_static_check.
    METHODS parse_team_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_simple) TYPE zif_github=>team_simple
      RAISING cx_static_check.
    METHODS parse_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team) TYPE zif_github=>team
      RAISING cx_static_check.
    METHODS parse_org_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_membership) TYPE zif_github=>org_membership
      RAISING cx_static_check.
    METHODS parse_migration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(migration) TYPE zif_github=>migration
      RAISING cx_static_check.
    METHODS parse_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project) TYPE zif_github=>project
      RAISING cx_static_check.
    METHODS parse_group_mapping
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(group_mapping) TYPE zif_github=>group_mapping
      RAISING cx_static_check.
    METHODS parse_team_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_full) TYPE zif_github=>team_full
      RAISING cx_static_check.
    METHODS parse_team_discussion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion) TYPE zif_github=>team_discussion
      RAISING cx_static_check.
    METHODS parse_team_discussion_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion_comment) TYPE zif_github=>team_discussion_comment
      RAISING cx_static_check.
    METHODS parse_reaction
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction) TYPE zif_github=>reaction
      RAISING cx_static_check.
    METHODS parse_team_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_membership) TYPE zif_github=>team_membership
      RAISING cx_static_check.
    METHODS parse_team_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_project) TYPE zif_github=>team_project
      RAISING cx_static_check.
    METHODS parse_team_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_repository) TYPE zif_github=>team_repository
      RAISING cx_static_check.
    METHODS parse_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_card) TYPE zif_github=>project_card
      RAISING cx_static_check.
    METHODS parse_project_column
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_column) TYPE zif_github=>project_column
      RAISING cx_static_check.
    METHODS parse_repository_collaborator_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_collaborator_permis) TYPE zif_github=>repository_collaborator_permis
      RAISING cx_static_check.
    METHODS parse_rate_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit) TYPE zif_github=>rate_limit
      RAISING cx_static_check.
    METHODS parse_rate_limit_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit_overview) TYPE zif_github=>rate_limit_overview
      RAISING cx_static_check.
    METHODS parse_full_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(full_repository) TYPE zif_github=>full_repository
      RAISING cx_static_check.
    METHODS parse_artifact
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(artifact) TYPE zif_github=>artifact
      RAISING cx_static_check.
    METHODS parse_job
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(job) TYPE zif_github=>job
      RAISING cx_static_check.
    METHODS parse_actions_enabled
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_enabled) TYPE zif_github=>actions_enabled
      RAISING cx_static_check.
    METHODS parse_actions_repository_permi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_repository_permissions) TYPE zif_github=>actions_repository_permissions
      RAISING cx_static_check.
    METHODS parse_pull_request_minimal
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_minimal) TYPE zif_github=>pull_request_minimal
      RAISING cx_static_check.
    METHODS parse_simple_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit) TYPE zif_github=>simple_commit
      RAISING cx_static_check.
    METHODS parse_workflow_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_run) TYPE zif_github=>workflow_run
      RAISING cx_static_check.
    METHODS parse_workflow_run_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_run_usage) TYPE zif_github=>workflow_run_usage
      RAISING cx_static_check.
    METHODS parse_actions_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actions_secret) TYPE zif_github=>actions_secret
      RAISING cx_static_check.
    METHODS parse_workflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow) TYPE zif_github=>workflow
      RAISING cx_static_check.
    METHODS parse_workflow_usage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow_usage) TYPE zif_github=>workflow_usage
      RAISING cx_static_check.
    METHODS parse_protected_branch_admin_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_admin_enforce) TYPE zif_github=>protected_branch_admin_enforce
      RAISING cx_static_check.
    METHODS parse_protected_branch_pull_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_pull_request_) TYPE zif_github=>protected_branch_pull_request_
      RAISING cx_static_check.
    METHODS parse_branch_restriction_polic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_restriction_policy) TYPE zif_github=>branch_restriction_policy
      RAISING cx_static_check.
    METHODS parse_branch_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_protection) TYPE zif_github=>branch_protection
      RAISING cx_static_check.
    METHODS parse_short_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_branch) TYPE zif_github=>short_branch
      RAISING cx_static_check.
    METHODS parse_git_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_user) TYPE zif_github=>git_user
      RAISING cx_static_check.
    METHODS parse_verification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(verification) TYPE zif_github=>verification
      RAISING cx_static_check.
    METHODS parse_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit) TYPE zif_github=>commit
      RAISING cx_static_check.
    METHODS parse_branch_with_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_with_protection) TYPE zif_github=>branch_with_protection
      RAISING cx_static_check.
    METHODS parse_status_check_policy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status_check_policy) TYPE zif_github=>status_check_policy
      RAISING cx_static_check.
    METHODS parse_protected_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch) TYPE zif_github=>protected_branch
      RAISING cx_static_check.
    METHODS parse_check_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_run) TYPE zif_github=>check_run
      RAISING cx_static_check.
    METHODS parse_check_annotation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_annotation) TYPE zif_github=>check_annotation
      RAISING cx_static_check.
    METHODS parse_check_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite) TYPE zif_github=>check_suite
      RAISING cx_static_check.
    METHODS parse_check_suite_preference
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite_preference) TYPE zif_github=>check_suite_preference
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_state) TYPE zif_github=>code_scanning_alert_state
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_ref) TYPE zif_github=>code_scanning_alert_ref
      RAISING cx_static_check.
    METHODS parse_alert_number
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_number) TYPE zif_github=>alert_number
      RAISING cx_static_check.
    METHODS parse_alert_created_at
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_created_at) TYPE zif_github=>alert_created_at
      RAISING cx_static_check.
    METHODS parse_alert_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_url) TYPE zif_github=>alert_url
      RAISING cx_static_check.
    METHODS parse_alert_html_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(alert_html_url) TYPE zif_github=>alert_html_url
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_dism
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_dismissed_) TYPE zif_github=>code_scanning_alert_dismissed_
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_di01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_dismisse01) TYPE zif_github=>code_scanning_alert_dismisse01
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_rule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_rule) TYPE zif_github=>code_scanning_alert_rule
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool_na) TYPE zif_github=>code_scanning_analysis_tool_na
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_tool) TYPE zif_github=>code_scanning_analysis_tool
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_code
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_code_scann) TYPE zif_github=>code_scanning_alert_code_scann
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_a
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_analysi) TYPE zif_github=>code_scanning_analysis_analysi
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_envi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_environmen) TYPE zif_github=>code_scanning_alert_environmen
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_inst
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_instances) TYPE zif_github=>code_scanning_alert_instances
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_co01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_code_sca01) TYPE zif_github=>code_scanning_alert_code_sca01
      RAISING cx_static_check.
    METHODS parse_code_scanning_alert_set_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_alert_set_state) TYPE zif_github=>code_scanning_alert_set_state
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_r
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_ref) TYPE zif_github=>code_scanning_analysis_ref
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_c
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_commit_) TYPE zif_github=>code_scanning_analysis_commit_
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_created) TYPE zif_github=>code_scanning_analysis_created
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_environ) TYPE zif_github=>code_scanning_analysis_environ
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis03
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_code_sc) TYPE zif_github=>code_scanning_analysis_code_sc
      RAISING cx_static_check.
    METHODS parse_code_scanning_analysis_s
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_scanning_analysis_sarif_f) TYPE zif_github=>code_scanning_analysis_sarif_f
      RAISING cx_static_check.
    METHODS parse_collaborator
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(collaborator) TYPE zif_github=>collaborator
      RAISING cx_static_check.
    METHODS parse_repository_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_invitation) TYPE zif_github=>repository_invitation
      RAISING cx_static_check.
    METHODS parse_commit_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comment) TYPE zif_github=>commit_comment
      RAISING cx_static_check.
    METHODS parse_scim_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_error) TYPE zif_github=>scim_error
      RAISING cx_static_check.
    METHODS parse_branch_short
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_short) TYPE zif_github=>branch_short
      RAISING cx_static_check.
    METHODS parse_link
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link) TYPE zif_github=>link
      RAISING cx_static_check.
    METHODS parse_auto_merge
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(auto_merge) TYPE zif_github=>auto_merge
      RAISING cx_static_check.
    METHODS parse_pull_request_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_simple) TYPE zif_github=>pull_request_simple
      RAISING cx_static_check.
    METHODS parse_simple_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit_status) TYPE zif_github=>simple_commit_status
      RAISING cx_static_check.
    METHODS parse_combined_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_commit_status) TYPE zif_github=>combined_commit_status
      RAISING cx_static_check.
    METHODS parse_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status) TYPE zif_github=>status
      RAISING cx_static_check.
    METHODS parse_code_of_conduct_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct_simple) TYPE zif_github=>code_of_conduct_simple
      RAISING cx_static_check.
    METHODS parse_community_health_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(community_health_file) TYPE zif_github=>community_health_file
      RAISING cx_static_check.
    METHODS parse_community_profile
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(community_profile) TYPE zif_github=>community_profile
      RAISING cx_static_check.
    METHODS parse_diff_entry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(diff_entry) TYPE zif_github=>diff_entry
      RAISING cx_static_check.
    METHODS parse_commit_comparison
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comparison) TYPE zif_github=>commit_comparison
      RAISING cx_static_check.
    METHODS parse_content_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_tree) TYPE zif_github=>content_tree
      RAISING cx_static_check.
    METHODS parse_content_directory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_directory) TYPE zif_github=>content_directory
      RAISING cx_static_check.
    METHODS parse_content_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_file) TYPE zif_github=>content_file
      RAISING cx_static_check.
    METHODS parse_content_symlink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_symlink) TYPE zif_github=>content_symlink
      RAISING cx_static_check.
    METHODS parse_content_submodule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_submodule) TYPE zif_github=>content_submodule
      RAISING cx_static_check.
    METHODS parse_file_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(file_commit) TYPE zif_github=>file_commit
      RAISING cx_static_check.
    METHODS parse_contributor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor) TYPE zif_github=>contributor
      RAISING cx_static_check.
    METHODS parse_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment) TYPE zif_github=>deployment
      RAISING cx_static_check.
    METHODS parse_deployment_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_status) TYPE zif_github=>deployment_status
      RAISING cx_static_check.
    METHODS parse_short_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_blob) TYPE zif_github=>short_blob
      RAISING cx_static_check.
    METHODS parse_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(blob) TYPE zif_github=>blob
      RAISING cx_static_check.
    METHODS parse_git_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_commit) TYPE zif_github=>git_commit
      RAISING cx_static_check.
    METHODS parse_git_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_ref) TYPE zif_github=>git_ref
      RAISING cx_static_check.
    METHODS parse_git_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tag) TYPE zif_github=>git_tag
      RAISING cx_static_check.
    METHODS parse_git_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tree) TYPE zif_github=>git_tree
      RAISING cx_static_check.
    METHODS parse_hook_response
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_response) TYPE zif_github=>hook_response
      RAISING cx_static_check.
    METHODS parse_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook) TYPE zif_github=>hook
      RAISING cx_static_check.
    METHODS parse_import
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(import) TYPE zif_github=>import
      RAISING cx_static_check.
    METHODS parse_porter_author
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(porter_author) TYPE zif_github=>porter_author
      RAISING cx_static_check.
    METHODS parse_porter_large_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(porter_large_file) TYPE zif_github=>porter_large_file
      RAISING cx_static_check.
    METHODS parse_issue_event_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_label) TYPE zif_github=>issue_event_label
      RAISING cx_static_check.
    METHODS parse_issue_event_dismissed_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_dismissed_review) TYPE zif_github=>issue_event_dismissed_review
      RAISING cx_static_check.
    METHODS parse_issue_event_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_milestone) TYPE zif_github=>issue_event_milestone
      RAISING cx_static_check.
    METHODS parse_issue_event_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_project_card) TYPE zif_github=>issue_event_project_card
      RAISING cx_static_check.
    METHODS parse_issue_event_rename
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_rename) TYPE zif_github=>issue_event_rename
      RAISING cx_static_check.
    METHODS parse_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event) TYPE zif_github=>issue_event
      RAISING cx_static_check.
    METHODS parse_issue_event_for_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_for_issue) TYPE zif_github=>issue_event_for_issue
      RAISING cx_static_check.
    METHODS parse_deploy_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deploy_key) TYPE zif_github=>deploy_key
      RAISING cx_static_check.
    METHODS parse_language
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(language) TYPE zif_github=>language
      RAISING cx_static_check.
    METHODS parse_license_content
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_content) TYPE zif_github=>license_content
      RAISING cx_static_check.
    METHODS parse_pages_source_hash
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_source_hash) TYPE zif_github=>pages_source_hash
      RAISING cx_static_check.
    METHODS parse_page
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page) TYPE zif_github=>page
      RAISING cx_static_check.
    METHODS parse_page_build
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build) TYPE zif_github=>page_build
      RAISING cx_static_check.
    METHODS parse_page_build_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build_status) TYPE zif_github=>page_build_status
      RAISING cx_static_check.
    METHODS parse_pull_request
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request) TYPE zif_github=>pull_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review_comm
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_comment) TYPE zif_github=>pull_request_review_comment
      RAISING cx_static_check.
    METHODS parse_pull_request_merge_resul
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_merge_result) TYPE zif_github=>pull_request_merge_result
      RAISING cx_static_check.
    METHODS parse_pull_request_review_requ
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_request) TYPE zif_github=>pull_request_review_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review) TYPE zif_github=>pull_request_review
      RAISING cx_static_check.
    METHODS parse_review_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_comment) TYPE zif_github=>review_comment
      RAISING cx_static_check.
    METHODS parse_release_asset
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release_asset) TYPE zif_github=>release_asset
      RAISING cx_static_check.
    METHODS parse_release
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release) TYPE zif_github=>release
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert_st
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert_state) TYPE zif_github=>secret_scanning_alert_state
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert_resoluti) TYPE zif_github=>secret_scanning_alert_resoluti
      RAISING cx_static_check.
    METHODS parse_secret_scanning_alert
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(secret_scanning_alert) TYPE zif_github=>secret_scanning_alert
      RAISING cx_static_check.
    METHODS parse_stargazer
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(stargazer) TYPE zif_github=>stargazer
      RAISING cx_static_check.
    METHODS parse_code_frequency_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_frequency_stat) TYPE zif_github=>code_frequency_stat
      RAISING cx_static_check.
    METHODS parse_commit_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_activity) TYPE zif_github=>commit_activity
      RAISING cx_static_check.
    METHODS parse_contributor_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor_activity) TYPE zif_github=>contributor_activity
      RAISING cx_static_check.
    METHODS parse_participation_stats
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(participation_stats) TYPE zif_github=>participation_stats
      RAISING cx_static_check.
    METHODS parse_repository_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_subscription) TYPE zif_github=>repository_subscription
      RAISING cx_static_check.
    METHODS parse_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(tag) TYPE zif_github=>tag
      RAISING cx_static_check.
    METHODS parse_topic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic) TYPE zif_github=>topic
      RAISING cx_static_check.
    METHODS parse_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(traffic) TYPE zif_github=>traffic
      RAISING cx_static_check.
    METHODS parse_clone_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(clone_traffic) TYPE zif_github=>clone_traffic
      RAISING cx_static_check.
    METHODS parse_content_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_traffic) TYPE zif_github=>content_traffic
      RAISING cx_static_check.
    METHODS parse_referrer_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(referrer_traffic) TYPE zif_github=>referrer_traffic
      RAISING cx_static_check.
    METHODS parse_view_traffic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(view_traffic) TYPE zif_github=>view_traffic
      RAISING cx_static_check.
    METHODS parse_scim_group_list_enterpri
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_group_list_enterprise) TYPE zif_github=>scim_group_list_enterprise
      RAISING cx_static_check.
    METHODS parse_scim_enterprise_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_enterprise_group) TYPE zif_github=>scim_enterprise_group
      RAISING cx_static_check.
    METHODS parse_scim_user_list_enterpris
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user_list_enterprise) TYPE zif_github=>scim_user_list_enterprise
      RAISING cx_static_check.
    METHODS parse_scim_enterprise_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_enterprise_user) TYPE zif_github=>scim_enterprise_user
      RAISING cx_static_check.
    METHODS parse_scim_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user) TYPE zif_github=>scim_user
      RAISING cx_static_check.
    METHODS parse_scim_user_list
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_user_list) TYPE zif_github=>scim_user_list
      RAISING cx_static_check.
    METHODS parse_search_result_text_match
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(search_result_text_matches) TYPE zif_github=>search_result_text_matches
      RAISING cx_static_check.
    METHODS parse_code_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_search_result_item) TYPE zif_github=>code_search_result_item
      RAISING cx_static_check.
    METHODS parse_commit_search_result_ite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_search_result_item) TYPE zif_github=>commit_search_result_item
      RAISING cx_static_check.
    METHODS parse_issue_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_search_result_item) TYPE zif_github=>issue_search_result_item
      RAISING cx_static_check.
    METHODS parse_label_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label_search_result_item) TYPE zif_github=>label_search_result_item
      RAISING cx_static_check.
    METHODS parse_repo_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repo_search_result_item) TYPE zif_github=>repo_search_result_item
      RAISING cx_static_check.
    METHODS parse_topic_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic_search_result_item) TYPE zif_github=>topic_search_result_item
      RAISING cx_static_check.
    METHODS parse_user_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_search_result_item) TYPE zif_github=>user_search_result_item
      RAISING cx_static_check.
    METHODS parse_private_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(private_user) TYPE zif_github=>private_user
      RAISING cx_static_check.
    METHODS parse_public_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(public_user) TYPE zif_github=>public_user
      RAISING cx_static_check.
    METHODS parse_email
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(email) TYPE zif_github=>email
      RAISING cx_static_check.
    METHODS parse_gpg_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gpg_key) TYPE zif_github=>gpg_key
      RAISING cx_static_check.
    METHODS parse_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key) TYPE zif_github=>key
      RAISING cx_static_check.
    METHODS parse_marketplace_account
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(marketplace_account) TYPE zif_github=>marketplace_account
      RAISING cx_static_check.
    METHODS parse_user_marketplace_purchas
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_marketplace_purchase) TYPE zif_github=>user_marketplace_purchase
      RAISING cx_static_check.
    METHODS parse_starred_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(starred_repository) TYPE zif_github=>starred_repository
      RAISING cx_static_check.
    METHODS parse_hovercard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hovercard) TYPE zif_github=>hovercard
      RAISING cx_static_check.
    METHODS parse_key_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key_simple) TYPE zif_github=>key_simple
      RAISING cx_static_check.
ENDCLASS.

CLASS zcl_github IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_simple_user.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* following_url, string
* gists_url, string
* starred_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* events_url, string
* received_events_url, string
* type, string
* site_admin, boolean
* starred_at, string
  ENDMETHOD.

  METHOD parse_integration.
* sdfsdf object
* id, integer
* slug, string
* node_id, string
* owner, 
* name, string
* description, string
* external_url, string
* html_url, string
* created_at, string
* updated_at, string
* permissions, object
* events, array
* installations_count, integer
* client_id, string
* client_secret, string
* webhook_secret, string
* pem, string
  ENDMETHOD.

  METHOD parse_basic_error.
* sdfsdf object
* message, string
* documentation_url, string
  ENDMETHOD.

  METHOD parse_validation_error_simple.
* sdfsdf object
* message, string
* documentation_url, string
* errors, array
  ENDMETHOD.

  METHOD parse_webhook_config_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_content_t.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_secret.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_insecure_.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config.
* sdfsdf object
* url, 
* content_type, 
* secret, 
* insecure_ssl, 
  ENDMETHOD.

  METHOD parse_enterprise.
* sdfsdf object
* description, string
* html_url, string
* website_url, string
* id, integer
* node_id, string
* name, string
* slug, string
* created_at, string
* updated_at, string
* avatar_url, string
  ENDMETHOD.

  METHOD parse_installation.
* sdfsdf object
* id, integer
* account, 
* repository_selection, string
* access_tokens_url, string
* repositories_url, string
* html_url, string
* app_id, integer
* target_id, integer
* target_type, string
* permissions, object
* events, array
* created_at, string
* updated_at, string
* single_file_name, string
* has_multiple_single_files, boolean
* single_file_paths, array
* app_slug, string
* suspended_by, 
* suspended_at, string
* contact_email, string
  ENDMETHOD.

  METHOD parse_app_permissions.
* sdfsdf object
* actions, string
* administration, string
* checks, string
* content_references, string
* contents, string
* deployments, string
* environments, string
* issues, string
* metadata, string
* packages, string
* pages, string
* pull_requests, string
* repository_hooks, string
* repository_projects, string
* secret_scanning_alerts, string
* secrets, string
* security_events, string
* single_file, string
* statuses, string
* vulnerability_alerts, string
* workflows, string
* members, string
* organization_administration, string
* organization_hooks, string
* organization_plan, string
* organization_projects, string
* organization_secrets, string
* organization_self_hosted_runne, string
* organization_user_blocking, string
* team_discussions, string
  ENDMETHOD.

  METHOD parse_license_simple.
* sdfsdf object
* key, string
* name, string
* url, string
* spdx_id, string
* node_id, string
* html_url, string
  ENDMETHOD.

  METHOD parse_repository.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* full_name, string
* license, 
* forks, integer
* permissions, object
* owner, 
* private, boolean
* html_url, string
* description, string
* fork, boolean
* url, string
* archive_url, string
* assignees_url, string
* blobs_url, string
* branches_url, string
* collaborators_url, string
* comments_url, string
* commits_url, string
* compare_url, string
* contents_url, string
* contributors_url, string
* deployments_url, string
* downloads_url, string
* events_url, string
* forks_url, string
* git_commits_url, string
* git_refs_url, string
* git_tags_url, string
* git_url, string
* issue_comment_url, string
* issue_events_url, string
* issues_url, string
* keys_url, string
* labels_url, string
* languages_url, string
* merges_url, string
* milestones_url, string
* notifications_url, string
* pulls_url, string
* releases_url, string
* ssh_url, string
* stargazers_url, string
* statuses_url, string
* subscribers_url, string
* subscription_url, string
* tags_url, string
* teams_url, string
* trees_url, string
* clone_url, string
* mirror_url, string
* hooks_url, string
* svn_url, string
* homepage, string
* language, string
* forks_count, integer
* stargazers_count, integer
* watchers_count, integer
* size, integer
* default_branch, string
* open_issues_count, integer
* is_template, boolean
* topics, array
* has_issues, boolean
* has_projects, boolean
* has_wiki, boolean
* has_pages, boolean
* has_downloads, boolean
* archived, boolean
* disabled, boolean
* visibility, string
* pushed_at, string
* created_at, string
* updated_at, string
* allow_rebase_merge, boolean
* template_repository, object
* temp_clone_token, string
* allow_squash_merge, boolean
* delete_branch_on_merge, boolean
* allow_merge_commit, boolean
* subscribers_count, integer
* network_count, integer
* open_issues, integer
* watchers, integer
* master_branch, string
* starred_at, string
  ENDMETHOD.

  METHOD parse_installation_token.
* sdfsdf object
* token, string
* expires_at, string
* permissions, object
* repository_selection, string
* repositories, array
* single_file, string
* has_multiple_single_files, boolean
* single_file_paths, array
  ENDMETHOD.

  METHOD parse_validation_error.
* sdfsdf object
* message, string
* documentation_url, string
* errors, array
  ENDMETHOD.

  METHOD parse_application_grant.
* sdfsdf object
* id, integer
* url, string
* app, object
* created_at, string
* updated_at, string
* scopes, array
* user, 
  ENDMETHOD.

  METHOD parse_scoped_installation.
* sdfsdf object
* permissions, 
* repository_selection, string
* single_file_name, string
* has_multiple_single_files, boolean
* single_file_paths, array
* repositories_url, string
* account, 
  ENDMETHOD.

  METHOD parse_authorization.
* sdfsdf object
* id, integer
* url, string
* scopes, array
* token, string
* token_last_eight, string
* hashed_token, string
* app, object
* note, string
* note_url, string
* updated_at, string
* created_at, string
* fingerprint, string
* user, 
* installation, 
  ENDMETHOD.

  METHOD parse_code_of_conduct.
* sdfsdf object
* key, string
* name, string
* url, string
* body, string
* html_url, string
  ENDMETHOD.

  METHOD parse_content_reference_attach.
* sdfsdf object
* id, integer
* title, string
* body, string
* node_id, string
  ENDMETHOD.

  METHOD parse_enabled_organizations.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_allowed_actions.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_selected_actions_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_actions_enterprise_permi.
* sdfsdf object
* enabled_organizations, 
* selected_organizations_url, string
* allowed_actions, 
* selected_actions_url, 
  ENDMETHOD.

  METHOD parse_organization_simple.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* url, string
* repos_url, string
* events_url, string
* hooks_url, string
* issues_url, string
* members_url, string
* public_members_url, string
* avatar_url, string
* description, string
  ENDMETHOD.

  METHOD parse_selected_actions.
* sdfsdf object
* github_owned_allowed, boolean
* verified_allowed, boolean
* patterns_allowed, array
  ENDMETHOD.

  METHOD parse_runner_groups_enterprise.
* sdfsdf object
* id, number
* name, string
* visibility, string
* default, boolean
* selected_organizations_url, string
* runners_url, string
* allows_public_repositories, boolean
  ENDMETHOD.

  METHOD parse_runner.
* sdfsdf object
* id, integer
* name, string
* os, string
* status, string
* busy, boolean
* labels, array
  ENDMETHOD.

  METHOD parse_runner_application.
* sdfsdf object
* os, string
* architecture, string
* download_url, string
* filename, string
  ENDMETHOD.

  METHOD parse_authentication_token.
* sdfsdf object
* token, string
* expires_at, string
* permissions, object
* repositories, array
* single_file, string
* repository_selection, string
  ENDMETHOD.

  METHOD parse_audit_log_event.
* sdfsdf object
* timestamp, integer
* action, string
* active, boolean
* active_was, boolean
* actor, string
* blocked_user, string
* business, string
* config, array
* config_was, array
* content_type, string
* created_at, integer
* deploy_key_fingerprint, string
* emoji, string
* events, array
* events_were, array
* explanation, string
* fingerprint, string
* hook_id, integer
* limited_availability, boolean
* message, string
* name, string
* old_user, string
* openssh_public_key, string
* org, string
* previous_visibility, string
* read_only, boolean
* repo, string
* repository, string
* repository_public, boolean
* target_login, string
* team, string
* transport_protocol, integer
* transport_protocol_name, string
* user, string
* visibility, string
  ENDMETHOD.

  METHOD parse_actions_billing_usage.
* sdfsdf object
* total_minutes_used, integer
* total_paid_minutes_used, integer
* included_minutes, integer
* minutes_used_breakdown, object
  ENDMETHOD.

  METHOD parse_packages_billing_usage.
* sdfsdf object
* total_gigabytes_bandwidth_used, integer
* total_paid_gigabytes_bandwidth, integer
* included_gigabytes_bandwidth, integer
  ENDMETHOD.

  METHOD parse_combined_billing_usage.
* sdfsdf object
* days_left_in_billing_cycle, integer
* estimated_paid_storage_for_mon, integer
* estimated_storage_for_month, integer
  ENDMETHOD.

  METHOD parse_actor.
* sdfsdf object
* id, integer
* login, string
* display_login, string
* gravatar_id, string
* url, string
* avatar_url, string
  ENDMETHOD.

  METHOD parse_label.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* name, string
* description, string
* color, string
* default, boolean
  ENDMETHOD.

  METHOD parse_milestone.
* sdfsdf object
* url, string
* html_url, string
* labels_url, string
* id, integer
* node_id, string
* number, integer
* state, string
* title, string
* description, string
* creator, 
* open_issues, integer
* closed_issues, integer
* created_at, string
* updated_at, string
* closed_at, string
* due_on, string
  ENDMETHOD.

  METHOD parse_author_association.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_issue_simple.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* repository_url, string
* labels_url, string
* comments_url, string
* events_url, string
* html_url, string
* number, integer
* state, string
* title, string
* body, string
* user, 
* labels, array
* assignee, 
* assignees, array
* milestone, 
* locked, boolean
* active_lock_reason, string
* comments, integer
* pull_request, object
* closed_at, string
* created_at, string
* updated_at, string
* author_association, 
* body_html, string
* body_text, string
* timeline_url, string
* repository, 
* performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_reaction_rollup.
* sdfsdf object
* url, string
* total_count, integer
* 1, integer
* _1, integer
* laugh, integer
* confused, integer
* heart, integer
* hooray, integer
* eyes, integer
* rocket, integer
  ENDMETHOD.

  METHOD parse_issue_comment.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* body, string
* body_text, string
* body_html, string
* html_url, string
* user, 
* created_at, string
* updated_at, string
* issue_url, string
* author_association, 
* performed_via_github_app, 
* reactions, 
  ENDMETHOD.

  METHOD parse_event.
* sdfsdf object
* id, string
* type, string
* actor, 
* repo, object
* org, 
* payload, object
* public, boolean
* created_at, string
  ENDMETHOD.

  METHOD parse_link_with_type.
* sdfsdf object
* href, string
* type, string
  ENDMETHOD.

  METHOD parse_feed.
* sdfsdf object
* timeline_url, string
* user_url, string
* current_user_public_url, string
* current_user_url, string
* current_user_actor_url, string
* current_user_organization_url, string
* current_user_organization_urls, array
* security_advisories_url, string
* _links, object
  ENDMETHOD.

  METHOD parse_base_gist.
* sdfsdf object
* url, string
* forks_url, string
* commits_url, string
* id, string
* node_id, string
* git_pull_url, string
* git_push_url, string
* html_url, string
* files, object
* public, boolean
* created_at, string
* updated_at, string
* description, string
* comments, integer
* user, 
* comments_url, string
* owner, 
* truncated, boolean
* forks, array
* history, array
  ENDMETHOD.

  METHOD parse_gist_simple.
* sdfsdf object
* url, string
* forks_url, string
* commits_url, string
* id, string
* node_id, string
* git_pull_url, string
* git_push_url, string
* html_url, string
* files, object
* public, boolean
* created_at, string
* updated_at, string
* description, string
* comments, integer
* user, string
* comments_url, string
* owner, 
* truncated, boolean
  ENDMETHOD.

  METHOD parse_gist_comment.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* body, string
* user, 
* created_at, string
* updated_at, string
* author_association, 
  ENDMETHOD.

  METHOD parse_gist_commit.
* sdfsdf object
* url, string
* version, string
* user, 
* change_status, object
* committed_at, string
  ENDMETHOD.

  METHOD parse_gitignore_template.
* sdfsdf object
* name, string
* source, string
  ENDMETHOD.

  METHOD parse_issue.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* repository_url, string
* labels_url, string
* comments_url, string
* events_url, string
* html_url, string
* number, integer
* state, string
* title, string
* body, string
* user, 
* labels, array
* assignee, 
* assignees, array
* milestone, 
* locked, boolean
* active_lock_reason, string
* comments, integer
* pull_request, object
* closed_at, string
* created_at, string
* updated_at, string
* closed_by, 
* body_html, string
* body_text, string
* timeline_url, string
* repository, 
* performed_via_github_app, 
* author_association, 
* reactions, 
  ENDMETHOD.

  METHOD parse_license.
* sdfsdf object
* key, string
* name, string
* spdx_id, string
* url, string
* node_id, string
* html_url, string
* description, string
* implementation, string
* permissions, array
* conditions, array
* limitations, array
* body, string
* featured, boolean
  ENDMETHOD.

  METHOD parse_marketplace_listing_plan.
* sdfsdf object
* url, string
* accounts_url, string
* id, integer
* number, integer
* name, string
* description, string
* monthly_price_in_cents, integer
* yearly_price_in_cents, integer
* price_model, string
* has_free_trial, boolean
* unit_name, string
* state, string
* bullets, array
  ENDMETHOD.

  METHOD parse_marketplace_purchase.
* sdfsdf object
* url, string
* type, string
* id, integer
* login, string
* organization_billing_email, string
* marketplace_pending_change, object
* marketplace_purchase, object
  ENDMETHOD.

  METHOD parse_api_overview.
* sdfsdf object
* verifiable_password_authentica, boolean
* ssh_key_fingerprints, object
* hooks, array
* web, array
* api, array
* git, array
* pages, array
* importer, array
* actions, array
  ENDMETHOD.

  METHOD parse_minimal_repository.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* full_name, string
* owner, object
* private, boolean
* html_url, string
* description, string
* fork, boolean
* url, string
* archive_url, string
* assignees_url, string
* blobs_url, string
* branches_url, string
* collaborators_url, string
* comments_url, string
* commits_url, string
* compare_url, string
* contents_url, string
* contributors_url, string
* deployments_url, string
* downloads_url, string
* events_url, string
* forks_url, string
* git_commits_url, string
* git_refs_url, string
* git_tags_url, string
* git_url, string
* issue_comment_url, string
* issue_events_url, string
* issues_url, string
* keys_url, string
* labels_url, string
* languages_url, string
* merges_url, string
* milestones_url, string
* notifications_url, string
* pulls_url, string
* releases_url, string
* ssh_url, string
* stargazers_url, string
* statuses_url, string
* subscribers_url, string
* subscription_url, string
* tags_url, string
* teams_url, string
* trees_url, string
* clone_url, string
* mirror_url, string
* hooks_url, string
* svn_url, string
* homepage, string
* language, string
* forks_count, integer
* stargazers_count, integer
* watchers_count, integer
* size, integer
* default_branch, string
* open_issues_count, integer
* is_template, boolean
* topics, array
* has_issues, boolean
* has_projects, boolean
* has_wiki, boolean
* has_pages, boolean
* has_downloads, boolean
* archived, boolean
* disabled, boolean
* visibility, string
* pushed_at, string
* created_at, string
* updated_at, string
* permissions, object
* template_repository, object
* temp_clone_token, string
* delete_branch_on_merge, boolean
* subscribers_count, integer
* network_count, integer
* license, object
* forks, integer
* open_issues, integer
* watchers, integer
  ENDMETHOD.

  METHOD parse_thread.
* sdfsdf object
* id, string
* repository, 
* subject, object
* reason, string
* unread, boolean
* updated_at, string
* last_read_at, string
* url, string
* subscription_url, string
  ENDMETHOD.

  METHOD parse_thread_subscription.
* sdfsdf object
* subscribed, boolean
* ignored, boolean
* reason, string
* created_at, string
* url, string
* thread_url, string
* repository_url, string
  ENDMETHOD.

  METHOD parse_organization_full.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* url, string
* repos_url, string
* events_url, string
* hooks_url, string
* issues_url, string
* members_url, string
* public_members_url, string
* avatar_url, string
* description, string
* name, string
* company, string
* blog, string
* location, string
* email, string
* twitter_username, string
* is_verified, boolean
* has_organization_projects, boolean
* has_repository_projects, boolean
* public_repos, integer
* public_gists, integer
* followers, integer
* following, integer
* html_url, string
* created_at, string
* type, string
* total_private_repos, integer
* owned_private_repos, integer
* private_gists, integer
* disk_usage, integer
* collaborators, integer
* billing_email, string
* plan, object
* default_repository_permission, string
* members_can_create_repositorie, boolean
* two_factor_requirement_enabled, boolean
* members_allowed_repository_cre, string
* members_can_create_public_repo, boolean
* members_can_create_private_rep, boolean
* members_can_create_internal_re, boolean
* members_can_create_pages, boolean
* updated_at, string
  ENDMETHOD.

  METHOD parse_enabled_repositories.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_actions_organization_per.
* sdfsdf object
* enabled_repositories, 
* selected_repositories_url, string
* allowed_actions, 
* selected_actions_url, 
  ENDMETHOD.

  METHOD parse_runner_groups_org.
* sdfsdf object
* id, number
* name, string
* visibility, string
* default, boolean
* selected_repositories_url, string
* runners_url, string
* inherited, boolean
* inherited_allows_public_reposi, boolean
* allows_public_repositories, boolean
  ENDMETHOD.

  METHOD parse_organization_actions_sec.
* sdfsdf object
* name, string
* created_at, string
* updated_at, string
* visibility, string
* selected_repositories_url, string
  ENDMETHOD.

  METHOD parse_actions_public_key.
* sdfsdf object
* key_id, string
* key, string
* id, integer
* url, string
* title, string
* created_at, string
  ENDMETHOD.

  METHOD parse_credential_authorization.
* sdfsdf object
* login, string
* credential_id, integer
* credential_type, string
* token_last_eight, string
* credential_authorized_at, string
* scopes, array
* fingerprint, string
* credential_accessed_at, string
* authorized_credential_id, integer
* authorized_credential_title, string
* authorized_credential_note, string
  ENDMETHOD.

  METHOD parse_organization_invitation.
* sdfsdf object
* id, integer
* login, string
* email, string
* role, string
* created_at, string
* failed_at, string
* failed_reason, string
* inviter, 
* team_count, integer
* invitation_team_url, string
* node_id, string
* invitation_teams_url, string
  ENDMETHOD.

  METHOD parse_org_hook.
* sdfsdf object
* id, integer
* url, string
* ping_url, string
* name, string
* events, array
* active, boolean
* config, object
* updated_at, string
* created_at, string
* type, string
  ENDMETHOD.

  METHOD parse_interaction_group.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_interaction_limit_respon.
* sdfsdf object
* limit, 
* origin, string
* expires_at, string
  ENDMETHOD.

  METHOD parse_interaction_expiry.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_interaction_limit.
* sdfsdf object
* limit, 
* expiry, 
  ENDMETHOD.

  METHOD parse_team_simple.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* members_url, string
* name, string
* description, string
* permission, string
* privacy, string
* html_url, string
* repositories_url, string
* slug, string
* ldap_dn, string
  ENDMETHOD.

  METHOD parse_team.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* slug, string
* description, string
* privacy, string
* permission, string
* url, string
* html_url, string
* members_url, string
* repositories_url, string
* parent, 
  ENDMETHOD.

  METHOD parse_org_membership.
* sdfsdf object
* url, string
* state, string
* role, string
* organization_url, string
* organization, 
* user, 
* permissions, object
  ENDMETHOD.

  METHOD parse_migration.
* sdfsdf object
* id, integer
* owner, 
* guid, string
* state, string
* lock_repositories, boolean
* exclude_attachments, boolean
* repositories, array
* url, string
* created_at, string
* updated_at, string
* node_id, string
* archive_url, string
* exclude, array
  ENDMETHOD.

  METHOD parse_project.
* sdfsdf object
* owner_url, string
* url, string
* html_url, string
* columns_url, string
* id, integer
* node_id, string
* name, string
* body, string
* number, integer
* state, string
* creator, 
* created_at, string
* updated_at, string
* organization_permission, string
* private, boolean
  ENDMETHOD.

  METHOD parse_group_mapping.
* sdfsdf object
* groups, array
* group_id, string
* group_name, string
* group_description, string
* status, string
* synced_at, string
  ENDMETHOD.

  METHOD parse_team_full.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* html_url, string
* name, string
* slug, string
* description, string
* privacy, string
* permission, string
* members_url, string
* repositories_url, string
* parent, 
* members_count, integer
* repos_count, integer
* created_at, string
* updated_at, string
* organization, 
* ldap_dn, string
  ENDMETHOD.

  METHOD parse_team_discussion.
* sdfsdf object
* author, 
* body, string
* body_html, string
* body_version, string
* comments_count, integer
* comments_url, string
* created_at, string
* last_edited_at, string
* html_url, string
* node_id, string
* number, integer
* pinned, boolean
* private, boolean
* team_url, string
* title, string
* updated_at, string
* url, string
* reactions, 
  ENDMETHOD.

  METHOD parse_team_discussion_comment.
* sdfsdf object
* author, 
* body, string
* body_html, string
* body_version, string
* created_at, string
* last_edited_at, string
* discussion_url, string
* html_url, string
* node_id, string
* number, integer
* updated_at, string
* url, string
* reactions, 
  ENDMETHOD.

  METHOD parse_reaction.
* sdfsdf object
* id, integer
* node_id, string
* user, 
* content, string
* created_at, string
  ENDMETHOD.

  METHOD parse_team_membership.
* sdfsdf object
* url, string
* role, string
* state, string
  ENDMETHOD.

  METHOD parse_team_project.
* sdfsdf object
* owner_url, string
* url, string
* html_url, string
* columns_url, string
* id, integer
* node_id, string
* name, string
* body, string
* number, integer
* state, string
* creator, 
* created_at, string
* updated_at, string
* organization_permission, string
* private, boolean
* permissions, object
  ENDMETHOD.

  METHOD parse_team_repository.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* full_name, string
* license, 
* forks, integer
* permissions, object
* owner, 
* private, boolean
* html_url, string
* description, string
* fork, boolean
* url, string
* archive_url, string
* assignees_url, string
* blobs_url, string
* branches_url, string
* collaborators_url, string
* comments_url, string
* commits_url, string
* compare_url, string
* contents_url, string
* contributors_url, string
* deployments_url, string
* downloads_url, string
* events_url, string
* forks_url, string
* git_commits_url, string
* git_refs_url, string
* git_tags_url, string
* git_url, string
* issue_comment_url, string
* issue_events_url, string
* issues_url, string
* keys_url, string
* labels_url, string
* languages_url, string
* merges_url, string
* milestones_url, string
* notifications_url, string
* pulls_url, string
* releases_url, string
* ssh_url, string
* stargazers_url, string
* statuses_url, string
* subscribers_url, string
* subscription_url, string
* tags_url, string
* teams_url, string
* trees_url, string
* clone_url, string
* mirror_url, string
* hooks_url, string
* svn_url, string
* homepage, string
* language, string
* forks_count, integer
* stargazers_count, integer
* watchers_count, integer
* size, integer
* default_branch, string
* open_issues_count, integer
* is_template, boolean
* topics, array
* has_issues, boolean
* has_projects, boolean
* has_wiki, boolean
* has_pages, boolean
* has_downloads, boolean
* archived, boolean
* disabled, boolean
* visibility, string
* pushed_at, string
* created_at, string
* updated_at, string
* allow_rebase_merge, boolean
* template_repository, object
* temp_clone_token, string
* allow_squash_merge, boolean
* delete_branch_on_merge, boolean
* allow_merge_commit, boolean
* subscribers_count, integer
* network_count, integer
* open_issues, integer
* watchers, integer
* master_branch, string
  ENDMETHOD.

  METHOD parse_project_card.
* sdfsdf object
* url, string
* id, integer
* node_id, string
* note, string
* creator, 
* created_at, string
* updated_at, string
* archived, boolean
* column_url, string
* content_url, string
* project_url, string
  ENDMETHOD.

  METHOD parse_project_column.
* sdfsdf object
* url, string
* project_url, string
* cards_url, string
* id, integer
* node_id, string
* name, string
* created_at, string
* updated_at, string
  ENDMETHOD.

  METHOD parse_repository_collaborator_.
* sdfsdf object
* permission, string
* user, 
  ENDMETHOD.

  METHOD parse_rate_limit.
* sdfsdf object
* limit, integer
* remaining, integer
* reset, integer
  ENDMETHOD.

  METHOD parse_rate_limit_overview.
* sdfsdf object
* resources, object
* rate, 
  ENDMETHOD.

  METHOD parse_full_repository.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* full_name, string
* owner, 
* private, boolean
* html_url, string
* description, string
* fork, boolean
* url, string
* archive_url, string
* assignees_url, string
* blobs_url, string
* branches_url, string
* collaborators_url, string
* comments_url, string
* commits_url, string
* compare_url, string
* contents_url, string
* contributors_url, string
* deployments_url, string
* downloads_url, string
* events_url, string
* forks_url, string
* git_commits_url, string
* git_refs_url, string
* git_tags_url, string
* git_url, string
* issue_comment_url, string
* issue_events_url, string
* issues_url, string
* keys_url, string
* labels_url, string
* languages_url, string
* merges_url, string
* milestones_url, string
* notifications_url, string
* pulls_url, string
* releases_url, string
* ssh_url, string
* stargazers_url, string
* statuses_url, string
* subscribers_url, string
* subscription_url, string
* tags_url, string
* teams_url, string
* trees_url, string
* clone_url, string
* mirror_url, string
* hooks_url, string
* svn_url, string
* homepage, string
* language, string
* forks_count, integer
* stargazers_count, integer
* watchers_count, integer
* size, integer
* default_branch, string
* open_issues_count, integer
* is_template, boolean
* topics, array
* has_issues, boolean
* has_projects, boolean
* has_wiki, boolean
* has_pages, boolean
* has_downloads, boolean
* archived, boolean
* disabled, boolean
* visibility, string
* pushed_at, string
* created_at, string
* updated_at, string
* permissions, object
* allow_rebase_merge, boolean
* template_repository, object
* temp_clone_token, string
* allow_squash_merge, boolean
* delete_branch_on_merge, boolean
* allow_merge_commit, boolean
* subscribers_count, integer
* network_count, integer
* license, 
* organization, 
* parent, 
* source, 
* forks, integer
* master_branch, string
* open_issues, integer
* watchers, integer
* anonymous_access_enabled, boolean
  ENDMETHOD.

  METHOD parse_artifact.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* size_in_bytes, integer
* url, string
* archive_download_url, string
* expired, boolean
* created_at, string
* expires_at, string
* updated_at, string
  ENDMETHOD.

  METHOD parse_job.
* sdfsdf object
* id, integer
* run_id, integer
* run_url, string
* node_id, string
* head_sha, string
* url, string
* html_url, string
* status, string
* conclusion, string
* started_at, string
* completed_at, string
* name, string
* steps, array
* check_run_url, string
  ENDMETHOD.

  METHOD parse_actions_enabled.
* todo, handle type boolean
  ENDMETHOD.

  METHOD parse_actions_repository_permi.
* sdfsdf object
* enabled, 
* allowed_actions, 
* selected_actions_url, 
  ENDMETHOD.

  METHOD parse_pull_request_minimal.
* sdfsdf object
* id, integer
* number, integer
* url, string
* head, object
* base, object
  ENDMETHOD.

  METHOD parse_simple_commit.
* sdfsdf object
* id, string
* tree_id, string
* message, string
* timestamp, string
* author, object
* committer, object
  ENDMETHOD.

  METHOD parse_workflow_run.
* sdfsdf object
* id, integer
* name, string
* node_id, string
* head_branch, string
* head_sha, string
* run_number, integer
* event, string
* status, string
* conclusion, string
* workflow_id, integer
* url, string
* html_url, string
* pull_requests, array
* created_at, string
* updated_at, string
* jobs_url, string
* logs_url, string
* check_suite_url, string
* artifacts_url, string
* cancel_url, string
* rerun_url, string
* workflow_url, string
* head_commit, 
* repository, 
* head_repository, 
* head_repository_id, integer
  ENDMETHOD.

  METHOD parse_workflow_run_usage.
* sdfsdf object
* billable, object
* run_duration_ms, integer
  ENDMETHOD.

  METHOD parse_actions_secret.
* sdfsdf object
* name, string
* created_at, string
* updated_at, string
  ENDMETHOD.

  METHOD parse_workflow.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* path, string
* state, string
* created_at, string
* updated_at, string
* url, string
* html_url, string
* badge_url, string
* deleted_at, string
  ENDMETHOD.

  METHOD parse_workflow_usage.
* sdfsdf object
* billable, object
  ENDMETHOD.

  METHOD parse_protected_branch_admin_e.
* sdfsdf object
* url, string
* enabled, boolean
  ENDMETHOD.

  METHOD parse_protected_branch_pull_re.
* sdfsdf object
* url, string
* dismissal_restrictions, object
* dismiss_stale_reviews, boolean
* require_code_owner_reviews, boolean
* required_approving_review_coun, integer
  ENDMETHOD.

  METHOD parse_branch_restriction_polic.
* sdfsdf object
* url, string
* users_url, string
* teams_url, string
* apps_url, string
* users, array
* teams, array
* apps, array
  ENDMETHOD.

  METHOD parse_branch_protection.
* sdfsdf object
* url, string
* required_status_checks, object
* enforce_admins, 
* required_pull_request_reviews, 
* restrictions, 
* required_linear_history, object
* allow_force_pushes, object
* allow_deletions, object
* enabled, boolean
* name, string
* protection_url, string
  ENDMETHOD.

  METHOD parse_short_branch.
* sdfsdf object
* name, string
* commit, object
* protected, boolean
* protection, 
* protection_url, string
  ENDMETHOD.

  METHOD parse_git_user.
* sdfsdf object
* name, string
* email, string
* date, string
  ENDMETHOD.

  METHOD parse_verification.
* sdfsdf object
* verified, boolean
* reason, string
* payload, string
* signature, string
  ENDMETHOD.

  METHOD parse_commit.
* sdfsdf object
* url, string
* sha, string
* node_id, string
* html_url, string
* comments_url, string
* commit, object
* author, 
* committer, 
* parents, array
* stats, object
* files, array
  ENDMETHOD.

  METHOD parse_branch_with_protection.
* sdfsdf object
* name, string
* commit, 
* _links, object
* protected, boolean
* protection, 
* protection_url, string
* pattern, string
* required_approving_review_coun, integer
  ENDMETHOD.

  METHOD parse_status_check_policy.
* sdfsdf object
* url, string
* strict, boolean
* contexts, array
* contexts_url, string
  ENDMETHOD.

  METHOD parse_protected_branch.
* sdfsdf object
* url, string
* required_status_checks, 
* required_pull_request_reviews, object
* required_signatures, object
* enforce_admins, object
* required_linear_history, object
* allow_force_pushes, object
* allow_deletions, object
* restrictions, 
  ENDMETHOD.

  METHOD parse_check_run.
* sdfsdf object
* id, integer
* head_sha, string
* node_id, string
* external_id, string
* url, string
* html_url, string
* details_url, string
* status, string
* conclusion, string
* started_at, string
* completed_at, string
* output, object
* name, string
* check_suite, object
* app, 
* pull_requests, 
  ENDMETHOD.

  METHOD parse_check_annotation.
* sdfsdf object
* path, string
* start_line, integer
* end_line, integer
* start_column, integer
* end_column, integer
* annotation_level, string
* title, string
* message, string
* raw_details, string
* blob_href, string
  ENDMETHOD.

  METHOD parse_check_suite.
* sdfsdf object
* id, integer
* node_id, string
* head_branch, string
* head_sha, string
* status, string
* conclusion, string
* url, string
* before, string
* after, string
* pull_requests, array
* app, 
* repository, 
* created_at, string
* updated_at, string
* head_commit, 
* latest_check_runs_count, integer
* check_runs_url, string
  ENDMETHOD.

  METHOD parse_check_suite_preference.
* sdfsdf object
* preferences, object
* repository, 
  ENDMETHOD.

  METHOD parse_code_scanning_alert_stat.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_ref.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_number.
* todo, handle type integer
  ENDMETHOD.

  METHOD parse_alert_created_at.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_alert_html_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_dism.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_di01.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_rule.
* sdfsdf object
* id, string
* severity, string
* description, string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_t.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis01.
* sdfsdf object
* name, 
* version, string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_code.
* sdfsdf object
* number, 
* created_at, 
* url, 
* html_url, 
* state, 
* dismissed_by, 
* dismissed_at, 
* dismissed_reason, 
* rule, 
* tool, 
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_a.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_envi.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_alert_inst.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_code_scanning_alert_co01.
* sdfsdf object
* number, 
* created_at, 
* url, 
* html_url, 
* instances, 
* state, 
* dismissed_by, 
* dismissed_at, 
* dismissed_reason, 
* rule, 
* tool, 
  ENDMETHOD.

  METHOD parse_code_scanning_alert_set_.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_r.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_c.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis02.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_e.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_code_scanning_analysis03.
* sdfsdf object
* commit_sha, 
* ref, 
* analysis_key, 
* created_at, 
* tool_name, 
* error, string
* environment, 
  ENDMETHOD.

  METHOD parse_code_scanning_analysis_s.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_collaborator.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* following_url, string
* gists_url, string
* starred_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* events_url, string
* received_events_url, string
* type, string
* site_admin, boolean
* permissions, object
  ENDMETHOD.

  METHOD parse_repository_invitation.
* sdfsdf object
* id, integer
* repository, 
* invitee, 
* inviter, 
* permissions, string
* created_at, string
* expired, boolean
* url, string
* html_url, string
* node_id, string
  ENDMETHOD.

  METHOD parse_commit_comment.
* sdfsdf object
* html_url, string
* url, string
* id, integer
* node_id, string
* body, string
* path, string
* position, integer
* line, integer
* commit_id, string
* user, 
* created_at, string
* updated_at, string
* author_association, 
* reactions, 
  ENDMETHOD.

  METHOD parse_scim_error.
* sdfsdf object
* message, string
* documentation_url, string
* detail, string
* status, integer
* scimtype, string
* schemas, array
  ENDMETHOD.

  METHOD parse_branch_short.
* sdfsdf object
* name, string
* commit, object
* protected, boolean
  ENDMETHOD.

  METHOD parse_link.
* sdfsdf object
* href, string
  ENDMETHOD.

  METHOD parse_auto_merge.
* sdfsdf object
* enabled_by, 
* merge_method, string
* commit_title, string
* commit_message, string
  ENDMETHOD.

  METHOD parse_pull_request_simple.
* sdfsdf object
* url, string
* id, integer
* node_id, string
* html_url, string
* diff_url, string
* patch_url, string
* issue_url, string
* commits_url, string
* review_comments_url, string
* review_comment_url, string
* comments_url, string
* statuses_url, string
* number, integer
* state, string
* locked, boolean
* title, string
* user, 
* body, string
* labels, array
* milestone, 
* active_lock_reason, string
* created_at, string
* updated_at, string
* closed_at, string
* merged_at, string
* merge_commit_sha, string
* assignee, 
* assignees, array
* requested_reviewers, array
* requested_teams, array
* head, object
* base, object
* _links, object
* author_association, 
* auto_merge, 
* draft, boolean
  ENDMETHOD.

  METHOD parse_simple_commit_status.
* sdfsdf object
* description, string
* id, integer
* node_id, string
* state, string
* context, string
* target_url, string
* required, boolean
* avatar_url, string
* url, string
* created_at, string
* updated_at, string
  ENDMETHOD.

  METHOD parse_combined_commit_status.
* sdfsdf object
* state, string
* statuses, array
* sha, string
* total_count, integer
* repository, 
* commit_url, string
* url, string
  ENDMETHOD.

  METHOD parse_status.
* sdfsdf object
* url, string
* avatar_url, string
* id, integer
* node_id, string
* state, string
* description, string
* target_url, string
* context, string
* created_at, string
* updated_at, string
* creator, 
  ENDMETHOD.

  METHOD parse_code_of_conduct_simple.
* sdfsdf object
* url, string
* key, string
* name, string
* html_url, string
  ENDMETHOD.

  METHOD parse_community_health_file.
* sdfsdf object
* url, string
* html_url, string
  ENDMETHOD.

  METHOD parse_community_profile.
* sdfsdf object
* health_percentage, integer
* description, string
* documentation, string
* files, object
* updated_at, string
* content_reports_enabled, boolean
  ENDMETHOD.

  METHOD parse_diff_entry.
* sdfsdf object
* sha, string
* filename, string
* status, string
* additions, integer
* deletions, integer
* changes, integer
* blob_url, string
* raw_url, string
* contents_url, string
* patch, string
* previous_filename, string
  ENDMETHOD.

  METHOD parse_commit_comparison.
* sdfsdf object
* url, string
* html_url, string
* permalink_url, string
* diff_url, string
* patch_url, string
* base_commit, 
* merge_base_commit, 
* status, string
* ahead_by, integer
* behind_by, integer
* total_commits, integer
* commits, array
* files, array
  ENDMETHOD.

  METHOD parse_content_tree.
* sdfsdf object
* type, string
* size, integer
* name, string
* path, string
* sha, string
* url, string
* git_url, string
* html_url, string
* download_url, string
* entries, array
* _links, object
  ENDMETHOD.

  METHOD parse_content_directory.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_content_file.
* sdfsdf object
* type, string
* encoding, string
* size, integer
* name, string
* path, string
* content, string
* sha, string
* url, string
* git_url, string
* html_url, string
* download_url, string
* _links, object
* target, string
* submodule_git_url, string
  ENDMETHOD.

  METHOD parse_content_symlink.
* sdfsdf object
* type, string
* target, string
* size, integer
* name, string
* path, string
* sha, string
* url, string
* git_url, string
* html_url, string
* download_url, string
* _links, object
  ENDMETHOD.

  METHOD parse_content_submodule.
* sdfsdf object
* type, string
* submodule_git_url, string
* size, integer
* name, string
* path, string
* sha, string
* url, string
* git_url, string
* html_url, string
* download_url, string
* _links, object
  ENDMETHOD.

  METHOD parse_file_commit.
* sdfsdf object
* content, object
* commit, object
  ENDMETHOD.

  METHOD parse_contributor.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* following_url, string
* gists_url, string
* starred_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* events_url, string
* received_events_url, string
* type, string
* site_admin, boolean
* contributions, integer
* email, string
* name, string
  ENDMETHOD.

  METHOD parse_deployment.
* sdfsdf object
* url, string
* id, integer
* node_id, string
* sha, string
* ref, string
* task, string
* payload, object
* original_environment, string
* environment, string
* description, string
* creator, 
* created_at, string
* updated_at, string
* statuses_url, string
* repository_url, string
* transient_environment, boolean
* production_environment, boolean
* performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_deployment_status.
* sdfsdf object
* url, string
* id, integer
* node_id, string
* state, string
* creator, 
* description, string
* environment, string
* target_url, string
* created_at, string
* updated_at, string
* deployment_url, string
* repository_url, string
* environment_url, string
* log_url, string
* performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_short_blob.
* sdfsdf object
* url, string
* sha, string
  ENDMETHOD.

  METHOD parse_blob.
* sdfsdf object
* content, string
* encoding, string
* url, string
* sha, string
* size, integer
* node_id, string
* highlighted_content, string
  ENDMETHOD.

  METHOD parse_git_commit.
* sdfsdf object
* sha, string
* node_id, string
* url, string
* author, object
* committer, object
* message, string
* tree, object
* parents, array
* verification, object
* html_url, string
  ENDMETHOD.

  METHOD parse_git_ref.
* sdfsdf object
* ref, string
* node_id, string
* url, string
* object, object
  ENDMETHOD.

  METHOD parse_git_tag.
* sdfsdf object
* node_id, string
* tag, string
* sha, string
* url, string
* message, string
* tagger, object
* object, object
* verification, 
  ENDMETHOD.

  METHOD parse_git_tree.
* sdfsdf object
* sha, string
* url, string
* truncated, boolean
* tree, array
  ENDMETHOD.

  METHOD parse_hook_response.
* sdfsdf object
* code, integer
* status, string
* message, string
  ENDMETHOD.

  METHOD parse_hook.
* sdfsdf object
* type, string
* id, integer
* name, string
* active, boolean
* events, array
* config, object
* updated_at, string
* created_at, string
* url, string
* test_url, string
* ping_url, string
* last_response, 
  ENDMETHOD.

  METHOD parse_import.
* sdfsdf object
* vcs, string
* use_lfs, string
* vcs_url, string
* svc_root, string
* tfvc_project, string
* status, string
* status_text, string
* failed_step, string
* error_message, string
* import_percent, integer
* commit_count, integer
* push_percent, integer
* has_large_files, boolean
* large_files_size, integer
* large_files_count, integer
* project_choices, array
* message, string
* authors_count, integer
* url, string
* html_url, string
* authors_url, string
* repository_url, string
* svn_root, string
  ENDMETHOD.

  METHOD parse_porter_author.
* sdfsdf object
* id, integer
* remote_id, string
* remote_name, string
* email, string
* name, string
* url, string
* import_url, string
  ENDMETHOD.

  METHOD parse_porter_large_file.
* sdfsdf object
* ref_name, string
* path, string
* oid, string
* size, integer
  ENDMETHOD.

  METHOD parse_issue_event_label.
* sdfsdf object
* name, string
* color, string
  ENDMETHOD.

  METHOD parse_issue_event_dismissed_re.
* sdfsdf object
* state, string
* review_id, integer
* dismissal_message, string
* dismissal_commit_id, string
  ENDMETHOD.

  METHOD parse_issue_event_milestone.
* sdfsdf object
* title, string
  ENDMETHOD.

  METHOD parse_issue_event_project_card.
* sdfsdf object
* url, string
* id, integer
* project_url, string
* project_id, integer
* column_name, string
* previous_column_name, string
  ENDMETHOD.

  METHOD parse_issue_event_rename.
* sdfsdf object
* from, string
* to, string
  ENDMETHOD.

  METHOD parse_issue_event.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* actor, 
* event, string
* commit_id, string
* commit_url, string
* created_at, string
* issue, 
* label, 
* assignee, 
* assigner, 
* review_requester, 
* requested_reviewer, 
* requested_team, 
* dismissed_review, 
* milestone, 
* project_card, 
* rename, 
* author_association, 
* lock_reason, string
  ENDMETHOD.

  METHOD parse_issue_event_for_issue.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* actor, 
* event, string
* commit_id, string
* commit_url, string
* created_at, string
* sha, string
* html_url, string
* message, string
* issue_url, string
* updated_at, string
* author_association, 
* body, string
* lock_reason, string
* submitted_at, string
* state, string
* pull_request_url, string
* body_html, string
* body_text, string
  ENDMETHOD.

  METHOD parse_deploy_key.
* sdfsdf object
* id, integer
* key, string
* url, string
* title, string
* verified, boolean
* created_at, string
* read_only, boolean
  ENDMETHOD.

  METHOD parse_language.
* sdfsdf object
  ENDMETHOD.

  METHOD parse_license_content.
* sdfsdf object
* name, string
* path, string
* sha, string
* size, integer
* url, string
* html_url, string
* git_url, string
* download_url, string
* type, string
* content, string
* encoding, string
* _links, object
* license, 
  ENDMETHOD.

  METHOD parse_pages_source_hash.
* sdfsdf object
* branch, string
* path, string
  ENDMETHOD.

  METHOD parse_page.
* sdfsdf object
* url, string
* status, string
* cname, string
* custom_404, boolean
* html_url, string
* source, 
* public, boolean
  ENDMETHOD.

  METHOD parse_page_build.
* sdfsdf object
* url, string
* status, string
* error, object
* pusher, 
* commit, string
* duration, integer
* created_at, string
* updated_at, string
  ENDMETHOD.

  METHOD parse_page_build_status.
* sdfsdf object
* url, string
* status, string
  ENDMETHOD.

  METHOD parse_pull_request.
* sdfsdf object
* url, string
* id, integer
* node_id, string
* html_url, string
* diff_url, string
* patch_url, string
* issue_url, string
* commits_url, string
* review_comments_url, string
* review_comment_url, string
* comments_url, string
* statuses_url, string
* number, integer
* state, string
* locked, boolean
* title, string
* user, 
* body, string
* labels, array
* milestone, 
* active_lock_reason, string
* created_at, string
* updated_at, string
* closed_at, string
* merged_at, string
* merge_commit_sha, string
* assignee, 
* assignees, array
* requested_reviewers, array
* requested_teams, array
* head, object
* base, object
* _links, object
* author_association, 
* auto_merge, 
* draft, boolean
* merged, boolean
* mergeable, boolean
* rebaseable, boolean
* mergeable_state, string
* merged_by, 
* comments, integer
* review_comments, integer
* maintainer_can_modify, boolean
* commits, integer
* additions, integer
* deletions, integer
* changed_files, integer
  ENDMETHOD.

  METHOD parse_pull_request_review_comm.
* sdfsdf object
* url, string
* pull_request_review_id, integer
* id, integer
* node_id, string
* diff_hunk, string
* path, string
* position, integer
* original_position, integer
* commit_id, string
* original_commit_id, string
* in_reply_to_id, integer
* user, 
* body, string
* created_at, string
* updated_at, string
* html_url, string
* pull_request_url, string
* author_association, 
* _links, object
* start_line, integer
* original_start_line, integer
* start_side, string
* line, integer
* original_line, integer
* side, string
* reactions, 
* body_html, string
* body_text, string
  ENDMETHOD.

  METHOD parse_pull_request_merge_resul.
* sdfsdf object
* sha, string
* merged, boolean
* message, string
  ENDMETHOD.

  METHOD parse_pull_request_review_requ.
* sdfsdf object
* users, array
* teams, array
  ENDMETHOD.

  METHOD parse_pull_request_review.
* sdfsdf object
* id, integer
* node_id, string
* user, 
* body, string
* state, string
* html_url, string
* pull_request_url, string
* _links, object
* submitted_at, string
* commit_id, string
* body_html, string
* body_text, string
* author_association, 
  ENDMETHOD.

  METHOD parse_review_comment.
* sdfsdf object
* url, string
* pull_request_review_id, integer
* id, integer
* node_id, string
* diff_hunk, string
* path, string
* position, integer
* original_position, integer
* commit_id, string
* original_commit_id, string
* in_reply_to_id, integer
* user, 
* body, string
* created_at, string
* updated_at, string
* html_url, string
* pull_request_url, string
* author_association, 
* _links, object
* body_text, string
* body_html, string
* side, string
* start_side, string
* line, integer
* original_line, integer
* start_line, integer
* original_start_line, integer
  ENDMETHOD.

  METHOD parse_release_asset.
* sdfsdf object
* url, string
* browser_download_url, string
* id, integer
* node_id, string
* name, string
* label, string
* state, string
* content_type, string
* size, integer
* download_count, integer
* created_at, string
* updated_at, string
* uploader, 
  ENDMETHOD.

  METHOD parse_release.
* sdfsdf object
* url, string
* html_url, string
* assets_url, string
* upload_url, string
* tarball_url, string
* zipball_url, string
* id, integer
* node_id, string
* tag_name, string
* target_commitish, string
* name, string
* body, string
* draft, boolean
* prerelease, boolean
* created_at, string
* published_at, string
* author, 
* assets, array
* body_html, string
* body_text, string
  ENDMETHOD.

  METHOD parse_secret_scanning_alert_st.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_secret_scanning_alert_re.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_secret_scanning_alert.
* sdfsdf object
* number, 
* created_at, 
* url, 
* html_url, 
* state, 
* resolution, 
* resolved_at, string
* resolved_by, 
* secret_type, string
* secret, string
  ENDMETHOD.

  METHOD parse_stargazer.
* sdfsdf object
* starred_at, string
* user, 
  ENDMETHOD.

  METHOD parse_code_frequency_stat.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_commit_activity.
* sdfsdf object
* days, array
* total, integer
* week, integer
  ENDMETHOD.

  METHOD parse_contributor_activity.
* sdfsdf object
* author, 
* total, integer
* weeks, array
  ENDMETHOD.

  METHOD parse_participation_stats.
* sdfsdf object
* all, array
* owner, array
  ENDMETHOD.

  METHOD parse_repository_subscription.
* sdfsdf object
* subscribed, boolean
* ignored, boolean
* reason, string
* created_at, string
* url, string
* repository_url, string
  ENDMETHOD.

  METHOD parse_tag.
* sdfsdf object
* name, string
* commit, object
* zipball_url, string
* tarball_url, string
* node_id, string
  ENDMETHOD.

  METHOD parse_topic.
* sdfsdf object
* names, array
  ENDMETHOD.

  METHOD parse_traffic.
* sdfsdf object
* timestamp, string
* uniques, integer
* count, integer
  ENDMETHOD.

  METHOD parse_clone_traffic.
* sdfsdf object
* count, integer
* uniques, integer
* clones, array
  ENDMETHOD.

  METHOD parse_content_traffic.
* sdfsdf object
* path, string
* title, string
* count, integer
* uniques, integer
  ENDMETHOD.

  METHOD parse_referrer_traffic.
* sdfsdf object
* referrer, string
* count, integer
* uniques, integer
  ENDMETHOD.

  METHOD parse_view_traffic.
* sdfsdf object
* count, integer
* uniques, integer
* views, array
  ENDMETHOD.

  METHOD parse_scim_group_list_enterpri.
* sdfsdf object
* schemas, array
* totalresults, number
* itemsperpage, number
* startindex, number
* resources, array
  ENDMETHOD.

  METHOD parse_scim_enterprise_group.
* sdfsdf object
* schemas, array
* id, string
* externalid, string
* displayname, string
* members, array
* meta, object
  ENDMETHOD.

  METHOD parse_scim_user_list_enterpris.
* sdfsdf object
* schemas, array
* totalresults, number
* itemsperpage, number
* startindex, number
* resources, array
  ENDMETHOD.

  METHOD parse_scim_enterprise_user.
* sdfsdf object
* schemas, array
* id, string
* externalid, string
* username, string
* name, object
* emails, array
* groups, array
* active, boolean
* meta, object
  ENDMETHOD.

  METHOD parse_scim_user.
* sdfsdf object
* schemas, array
* id, string
* externalid, string
* username, string
* displayname, string
* name, object
* emails, array
* active, boolean
* meta, object
* organization_id, integer
* operations, array
* groups, array
  ENDMETHOD.

  METHOD parse_scim_user_list.
* sdfsdf object
* schemas, array
* totalresults, integer
* itemsperpage, integer
* startindex, integer
* resources, array
  ENDMETHOD.

  METHOD parse_search_result_text_match.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_code_search_result_item.
* sdfsdf object
* name, string
* path, string
* sha, string
* url, string
* git_url, string
* html_url, string
* repository, 
* score, integer
* file_size, integer
* language, string
* last_modified_at, string
* line_numbers, array
* text_matches, 
  ENDMETHOD.

  METHOD parse_commit_search_result_ite.
* sdfsdf object
* url, string
* sha, string
* html_url, string
* comments_url, string
* commit, object
* author, 
* committer, 
* parents, array
* repository, 
* score, integer
* node_id, string
* text_matches, 
  ENDMETHOD.

  METHOD parse_issue_search_result_item.
* sdfsdf object
* url, string
* repository_url, string
* labels_url, string
* comments_url, string
* events_url, string
* html_url, string
* id, integer
* node_id, string
* number, integer
* title, string
* locked, boolean
* active_lock_reason, string
* assignees, array
* user, 
* labels, array
* state, string
* assignee, 
* milestone, 
* comments, integer
* created_at, string
* updated_at, string
* closed_at, string
* text_matches, 
* pull_request, object
* body, string
* score, integer
* author_association, 
* draft, boolean
* repository, 
* body_html, string
* body_text, string
* timeline_url, string
* performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_label_search_result_item.
* sdfsdf object
* id, integer
* node_id, string
* url, string
* name, string
* color, string
* default, boolean
* description, string
* score, integer
* text_matches, 
  ENDMETHOD.

  METHOD parse_repo_search_result_item.
* sdfsdf object
* id, integer
* node_id, string
* name, string
* full_name, string
* owner, 
* private, boolean
* html_url, string
* description, string
* fork, boolean
* url, string
* created_at, string
* updated_at, string
* pushed_at, string
* homepage, string
* size, integer
* stargazers_count, integer
* watchers_count, integer
* language, string
* forks_count, integer
* open_issues_count, integer
* master_branch, string
* default_branch, string
* score, integer
* forks_url, string
* keys_url, string
* collaborators_url, string
* teams_url, string
* hooks_url, string
* issue_events_url, string
* events_url, string
* assignees_url, string
* branches_url, string
* tags_url, string
* blobs_url, string
* git_tags_url, string
* git_refs_url, string
* trees_url, string
* statuses_url, string
* languages_url, string
* stargazers_url, string
* contributors_url, string
* subscribers_url, string
* subscription_url, string
* commits_url, string
* git_commits_url, string
* comments_url, string
* issue_comment_url, string
* contents_url, string
* compare_url, string
* merges_url, string
* archive_url, string
* downloads_url, string
* issues_url, string
* pulls_url, string
* milestones_url, string
* notifications_url, string
* labels_url, string
* releases_url, string
* deployments_url, string
* git_url, string
* ssh_url, string
* clone_url, string
* svn_url, string
* forks, integer
* open_issues, integer
* watchers, integer
* topics, array
* mirror_url, string
* has_issues, boolean
* has_projects, boolean
* has_pages, boolean
* has_wiki, boolean
* has_downloads, boolean
* archived, boolean
* disabled, boolean
* license, 
* permissions, object
* text_matches, 
* temp_clone_token, string
* allow_merge_commit, boolean
* allow_squash_merge, boolean
* allow_rebase_merge, boolean
* delete_branch_on_merge, boolean
  ENDMETHOD.

  METHOD parse_topic_search_result_item.
* sdfsdf object
* name, string
* display_name, string
* short_description, string
* description, string
* created_by, string
* released, string
* created_at, string
* updated_at, string
* featured, boolean
* curated, boolean
* score, integer
* repository_count, integer
* logo_url, string
* text_matches, 
* related, array
* aliases, array
  ENDMETHOD.

  METHOD parse_user_search_result_item.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* received_events_url, string
* type, string
* score, integer
* following_url, string
* gists_url, string
* starred_url, string
* events_url, string
* public_repos, integer
* public_gists, integer
* followers, integer
* following, integer
* created_at, string
* updated_at, string
* name, string
* bio, string
* email, string
* location, string
* site_admin, boolean
* hireable, boolean
* text_matches, 
* blog, string
* company, string
* suspended_at, string
  ENDMETHOD.

  METHOD parse_private_user.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* following_url, string
* gists_url, string
* starred_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* events_url, string
* received_events_url, string
* type, string
* site_admin, boolean
* name, string
* company, string
* blog, string
* location, string
* email, string
* hireable, boolean
* bio, string
* twitter_username, string
* public_repos, integer
* public_gists, integer
* followers, integer
* following, integer
* created_at, string
* updated_at, string
* private_gists, integer
* total_private_repos, integer
* owned_private_repos, integer
* disk_usage, integer
* collaborators, integer
* two_factor_authentication, boolean
* plan, object
* suspended_at, string
* business_plus, boolean
* ldap_dn, string
  ENDMETHOD.

  METHOD parse_public_user.
* sdfsdf object
* login, string
* id, integer
* node_id, string
* avatar_url, string
* gravatar_id, string
* url, string
* html_url, string
* followers_url, string
* following_url, string
* gists_url, string
* starred_url, string
* subscriptions_url, string
* organizations_url, string
* repos_url, string
* events_url, string
* received_events_url, string
* type, string
* site_admin, boolean
* name, string
* company, string
* blog, string
* location, string
* email, string
* hireable, boolean
* bio, string
* twitter_username, string
* public_repos, integer
* public_gists, integer
* followers, integer
* following, integer
* created_at, string
* updated_at, string
* plan, object
* suspended_at, string
* private_gists, integer
* total_private_repos, integer
* owned_private_repos, integer
* disk_usage, integer
* collaborators, integer
  ENDMETHOD.

  METHOD parse_email.
* sdfsdf object
* email, string
* primary, boolean
* verified, boolean
* visibility, string
  ENDMETHOD.

  METHOD parse_gpg_key.
* sdfsdf object
* id, integer
* primary_key_id, integer
* key_id, string
* public_key, string
* emails, array
* subkeys, array
* can_sign, boolean
* can_encrypt_comms, boolean
* can_encrypt_storage, boolean
* can_certify, boolean
* created_at, string
* expires_at, string
* raw_key, string
  ENDMETHOD.

  METHOD parse_key.
* sdfsdf object
* key_id, string
* key, string
* id, integer
* url, string
* title, string
* created_at, string
* verified, boolean
* read_only, boolean
  ENDMETHOD.

  METHOD parse_marketplace_account.
* sdfsdf object
* url, string
* id, integer
* type, string
* node_id, string
* login, string
* email, string
* organization_billing_email, string
  ENDMETHOD.

  METHOD parse_user_marketplace_purchas.
* sdfsdf object
* billing_cycle, string
* next_billing_date, string
* unit_count, integer
* on_free_trial, boolean
* free_trial_ends_on, string
* updated_at, string
* account, 
* plan, 
  ENDMETHOD.

  METHOD parse_starred_repository.
* sdfsdf object
* starred_at, string
* repo, 
  ENDMETHOD.

  METHOD parse_hovercard.
* sdfsdf object
* contexts, array
  ENDMETHOD.

  METHOD parse_key_simple.
* sdfsdf object
* id, integer
* key, string
  ENDMETHOD.

  METHOD zif_github~meta_root.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_create_from_manifest.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app-manifests/{code}/conversions'.
    REPLACE ALL OCCURRENCES OF '{code}' IN lv_uri WITH code.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_webhook_config_for_ap.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/hook/config'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_update_webhook_config_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/hook/config'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_list_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations'.
    IF outdated IS SUPPLIED.
      mi_client->request->set_form_field( name = 'outdated' value = outdated ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_delete_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_create_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/access_tokens'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_suspend_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/suspended'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_unsuspend_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/suspended'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_list_gran.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/grants'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_grant.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_application_grant( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_delete_gr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_delete_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/grant'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_revoke_grant_for_applicat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/grants/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_check_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_reset_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_delete_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_scope_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token/scoped'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_check_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_reset_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_revoke_authorization_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_by_slug.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/apps/{app_slug}'.
    REPLACE ALL OCCURRENCES OF '{app_slug}' IN lv_uri WITH app_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_list_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_create_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_or_cr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations/clients/{client_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_or_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations/clients/{client_id}/{fingerprint}'.
    REPLACE ALL OCCURRENCES OF '{fingerprint}' IN lv_uri WITH fingerprint.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_autho.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_update_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_delete_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_all_codes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/codes_of_conduct'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_conduct_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/codes_of_conduct/{key}'.
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH key.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_create_content_attachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/content_references/{content_reference_id}/attachments'.
    REPLACE ALL OCCURRENCES OF '{content_reference_id}' IN lv_uri WITH content_reference_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_reference_attach( '' ).
  ENDMETHOD.

  METHOD zif_github~emojis_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/emojis'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_github_ac.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_enterprise_permi( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_github_ac.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_selected.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_selected_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_enable_select.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_disable_selec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_allowed_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_selected_actions( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_allowed_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_hos.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_self_h.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_host.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner_groups_enterprise( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_self_h.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner_groups_enterprise( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self_h.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_org_acce.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_org_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_org_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_org_ac.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_self_host.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_self_host.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_self_h.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_runner_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_regist.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_remove.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_ho01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~audit_log_get_audit_log.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/audit-log'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_bil.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_bi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_packages_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_bil.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/events'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_get_feeds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/feeds'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_feed( '' ).
  ENDMETHOD.

  METHOD zif_github~gists_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/public'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/starred'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_github~gists_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_github~gists_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~gists_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~gists_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/commits'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_check_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_star.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_unstar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_get_revision.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_github~gitignore_get_all_templates.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gitignore/templates'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gitignore_get_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/gitignore/templates/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gitignore_template( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_list_repos_accessible_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/installation/repositories'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_revoke_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/installation/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF collab IS SUPPLIED.
      mi_client->request->set_form_field( name = 'collab' value = collab ).
    ENDIF.
    IF orgs IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orgs' value = orgs ).
    ENDIF.
    IF owned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owned' value = owned ).
    ENDIF.
    IF pulls IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pulls' value = pulls ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~licenses_get_all_commonly_used.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/licenses'.
    IF featured IS SUPPLIED.
      mi_client->request->set_form_field( name = 'featured' value = featured ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~licenses_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/licenses/{license}'.
    REPLACE ALL OCCURRENCES OF '{license}' IN lv_uri WITH license.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license( '' ).
  ENDMETHOD.

  METHOD zif_github~markdown_render.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/markdown'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~markdown_render_raw.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/markdown/raw'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/accounts/{account_id}'.
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH account_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_marketplace_purchase( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_list_plans.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/plans'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/plans/{plan_id}/accounts'.
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH plan_id.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_f01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/accounts/{account_id}'.
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH account_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_marketplace_purchase( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_list_plans_stubbed.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/plans'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan_st.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/plans/{plan_id}/accounts'.
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH plan_id.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~meta_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_api_overview( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/networks/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_notifications_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications'.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_mark_notifications_as.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_get_thread.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_mark_thread_as_read.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_get_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_set_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_delete_thread_subscri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~meta_get_octocat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/octocat'.
    IF s IS SUPPLIED.
      mi_client->request->set_form_field( name = 's' value = s ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/organizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_per.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_organization_per( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_per.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_reposito.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repositor.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_enable_selected_reposi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_disable_selected_repos.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_or.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_selected_actions( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_or.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_runne.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner_groups_org( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_update_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner_groups_org( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_access_to_se.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_set_repo_access_to_sel.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_add_repo_access_to_sel.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_remove_repo_access_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_set_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_add_self_hosted_runner.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_remove_self_hosted_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_org_secrets.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_org_public_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/public-key'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_public_key( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_get_org_secret.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_actions_sec( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_org_s.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_delete_org_secret.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repos_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_add_selected_repo_to_o.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_remove_selected_repo_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get_audit_log.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/audit-log'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_blocked_users.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_check_blocked_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_block_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_unblock_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_saml_sso_authorizati.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/credential-authorizations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_remove_saml_sso_authoriza.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/credential-authorizations/{credential_id}'.
    REPLACE ALL OCCURRENCES OF '{credential_id}' IN lv_uri WITH credential_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_public_org_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/events'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_failed_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/failed_invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook_config_for_or.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook_config_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_get_org_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/installation'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_app_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/installations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~interactions_get_restrictions_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restrictions_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrictio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_pending_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_create_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_cancel_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_invitation_teams.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations/{invitation_id}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/issues'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_check_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_remove_member.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_set_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_membership_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_migration( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_download_archive_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH repo_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_outside_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_convert_member_to_outside.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_remove_outside_collaborat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_create_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_public_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_check_public_membership_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_set_public_membership_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_remove_public_membership_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_packages_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/team-sync/groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group_mapping( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_by_name.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_delete_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_discussions_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_discussion_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_comment_i.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_discus.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_pending_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_members_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_membership_for_user_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_membership.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_membership_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_projects_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_pr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_project_pe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_remove_project_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_repos_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_repo_permi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_remove_repo_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group_mapping( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_create_or_update_idp_gro.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group_mapping( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_list_child_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_get_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_update_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_delete_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_move_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_get_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_update_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_delete_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_list_cards.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    IF archived_state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'archived_state' value = archived_state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_create_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_move_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators'.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_get_permission_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_list_columns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/columns'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_create_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/columns'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~rate_limit_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rate_limit'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_rate_limit_overview( '' ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/reactions/{reaction_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_artifacts_for_rep.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_artifact.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_artifact( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_artifact.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_download_artifact.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'.
    REPLACE ALL OCCURRENCES OF '{archive_format}' IN lv_uri WITH archive_format.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_job_for_workflow_r.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/jobs/{job_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH job_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_download_job_logs_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH job_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_p01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_repository_permi( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_p01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_selected_actions( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicat01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_runner( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflow_run( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_run_arti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_cancel_workflow_run.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_jobs_for_workflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_download_workflow_run_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run_lo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_re_run_workflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run_usage.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/timing'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflow_run_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_secrets.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_public_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/public-key'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_public_key( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_secret( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_repo_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_delete_repo_secret.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_workflows.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflow( '' ).
  ENDMETHOD.

  METHOD zif_github~actions_disable_workflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_create_workflow_dispat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_enable_workflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_usage.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflow_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_list_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_check_user_can_be_assig.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/assignees/{assignee}'.
    REPLACE ALL OCCURRENCES OF '{assignee}' IN lv_uri WITH assignee.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_enable_automated_securit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/automated-security-fixes'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_disable_automated_securi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/automated-security-fixes'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_branches.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF protected IS SUPPLIED.
      mi_client->request->set_form_field( name = 'protected' value = protected ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_with_protection( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_protection( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_set_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_admin_branch_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_pull_request_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_update_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_pull_re( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_signature_pro.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_status_checks_protec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_all_status_check_con.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_add_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_set_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_cont.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_access_restrictions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_restriction_polic( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_access_restrictio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_apps_with_access_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_add_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_set_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_remove_app_access_restri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_teams_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_add_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_set_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_remove_team_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_users_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_add_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_set_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_remove_user_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_rename_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/rename'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_github~checks_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_github~checks_list_annotations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_create_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_set_suites_preferences.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/preferences'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite_preference( '' ).
  ENDMETHOD.

  METHOD zif_github~checks_get_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite( '' ).
  ENDMETHOD.

  METHOD zif_github~checks_list_for_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_rerequest_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_alerts_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~code_scanning_get_alert.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_scanning_alert_co01( '' ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_update_alert.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_scanning_alert_co01( '' ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_recent_anal.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/analyses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF tool_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_name' value = tool_name ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~code_scanning_upload_sarif.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/sarifs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_check_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_collaborator_permiss.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_commit_comm.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF path IS SUPPLIED.
      mi_client->request->set_form_field( name = 'path' value = path ).
    ENDIF.
    IF author IS SUPPLIED.
      mi_client->request->set_form_field( name = 'author' value = author ).
    ENDIF.
    IF until IS SUPPLIED.
      mi_client->request->set_form_field( name = 'until' value = until ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_branches_for_head_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_comments_for_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_pull_requests_assoc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit( '' ).
  ENDMETHOD.

  METHOD zif_github~checks_list_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~checks_list_suites_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = app_id ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_combined_status_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/status'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_commit_status( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_statuses_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/statuses'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/community/code_of_conduct'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_community_profile_me.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/community/profile'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_community_profile( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_compare_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/compare/{base}...{head}'.
    REPLACE ALL OCCURRENCES OF '{base}' IN lv_uri WITH base.
    REPLACE ALL OCCURRENCES OF '{head}' IN lv_uri WITH head.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comparison( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_content.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_or_update_file_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_file.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_list_contributors.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF anon IS SUPPLIED.
      mi_client->request->set_form_field( name = 'anon' value = anon ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_deployments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF task IS SUPPLIED.
      mi_client->request->set_form_field( name = 'task' value = task ).
    ENDIF.
    IF environment IS SUPPLIED.
      mi_client->request->set_form_field( name = 'environment' value = environment ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_deployment_statuses.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'.
    REPLACE ALL OCCURRENCES OF '{status_id}' IN lv_uri WITH status_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment_status( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_create_dispatch_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_create_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/blobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_get_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/blobs/{file_sha}'.
    REPLACE ALL OCCURRENCES OF '{file_sha}' IN lv_uri WITH file_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_blob( '' ).
  ENDMETHOD.

  METHOD zif_github~git_create_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/commits/{commit_sha}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_commit( '' ).
  ENDMETHOD.

  METHOD zif_github~git_list_matching_refs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/matching-refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_get_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/ref/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_github~git_create_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_update_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_github~git_delete_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_create_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_get_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/tags/{tag_sha}'.
    REPLACE ALL OCCURRENCES OF '{tag_sha}' IN lv_uri WITH tag_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tag( '' ).
  ENDMETHOD.

  METHOD zif_github~git_create_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/trees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~git_get_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/trees/{tree_sha}'.
    REPLACE ALL OCCURRENCES OF '{tree_sha}' IN lv_uri WITH tree_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF recursive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recursive' value = recursive ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tree( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook_config_for_r.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook_config_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhook_config( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_test_push_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/tests'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_get_import_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_import( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_start_import.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_update_import.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_import( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_cancel_import.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_get_commit_authors.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/authors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_map_commit_author.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/authors/{author_id}'.
    REPLACE ALL OCCURRENCES OF '{author_id}' IN lv_uri WITH author_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_porter_author( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_large_files.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/large_files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_set_lfs_preference.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/lfs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_import( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_get_repo_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/installation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_update_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_invitation( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF milestone IS SUPPLIED.
      mi_client->request->set_form_field( name = 'milestone' value = milestone ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF assignee IS SUPPLIED.
      mi_client->request->set_form_field( name = 'assignee' value = assignee ).
    ENDIF.
    IF creator IS SUPPLIED.
      mi_client->request->set_form_field( name = 'creator' value = creator ).
    ENDIF.
    IF mentioned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'mentioned' value = mentioned ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_comments_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue_comme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_get_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/events/{event_id}'.
    REPLACE ALL OCCURRENCES OF '{event_id}' IN lv_uri WITH event_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_event( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_add_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_remove_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_simple( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_on_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_add_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_set_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_remove_all_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_remove_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_lock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_unlock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_timelin.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/timeline'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_deploy_keys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deploy_key( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_create_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_get_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_update_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_languages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/languages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_language( '' ).
  ENDMETHOD.

  METHOD zif_github~licenses_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/license'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license_content( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/merges'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_milestones.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_create_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_get_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_update_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_milesto.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_mark_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_pages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_create_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_update_information_about.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_delete_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_pages_builds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_request_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds/{build_id}'.
    REPLACE ALL OCCURRENCES OF '{build_id}' IN lv_uri WITH build_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_github~projects_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_create_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF head IS SUPPLIED.
      mi_client->request->set_form_field( name = 'head' value = head ).
    ENDIF.
    IF base IS SUPPLIED.
      mi_client->request->set_form_field( name = 'base' value = base ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_get_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_delete_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_pull_reques.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_create_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_create_reply_for_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_list_files.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_check_if_merged.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_merge_resul( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_requested_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_requ( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_request_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_remove_requested_reviewe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_list_reviews.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_create_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_get_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_delete_pending_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_comments_for_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~pulls_dismiss_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_submit_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_readme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/readme'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_file( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_list_releases.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_release_by_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/tags/{tag}'.
    REPLACE ALL OCCURRENCES OF '{tag}' IN lv_uri WITH tag.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_update_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_release_assets.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_upload_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'name' value = name ).
    ENDIF.
    IF label IS SUPPLIED.
      mi_client->request->set_form_field( name = 'label' value = label ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_alerts_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~secret_scanning_get_alert.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_secret_scanning_alert( '' ).
  ENDMETHOD.

  METHOD zif_github~secret_scanning_update_alert.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_secret_scanning_alert( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_list_stargazers_for_r.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stargazers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_code_frequency_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/code_frequency'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_activity_stat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/commit_activity'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_contributors_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_participation_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/participation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_participation_stats( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_punch_card_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/punch_card'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/statuses/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_watchers_for_rep.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscribers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_get_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_set_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_delete_repo_subscript.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_tags.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_download_tarball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/tarball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_teams.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_replace_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_clones.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/clones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_clone_traffic( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_get_top_paths.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/popular/paths'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_top_referrers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/popular/referrers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_get_views.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/views'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_view_traffic( '' ).
  ENDMETHOD.

  METHOD zif_github~repos_transfer.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/transfer'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_check_vulnerability_aler.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_enable_vulnerability_ale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_disable_vulnerability_al.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_download_zipball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/zipball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_using_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repos/{template_owner}/{template_repo}/generate'.
    REPLACE ALL OCCURRENCES OF '{template_owner}' IN lv_uri WITH template_owner.
    REPLACE ALL OCCURRENCES OF '{template_repo}' IN lv_uri WITH template_repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/repositories'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provisio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_group_list_enterpri( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_and.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provision.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_group( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informati.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_group( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attrib.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_group( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_scim_g.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provis01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_user_list_enterpris( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_a01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provisi01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_user( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informa01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_user( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attr01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_scim_enterprise_user( '' ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_user_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_list_provisioned_identiti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF startindex IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startIndex' value = startindex ).
    ENDIF.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_provision_and_invite_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_get_provisioning_informat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_set_information_for_provi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_update_attribute_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~scim_delete_user_from_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_code.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/code'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/commits'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_issues_and_pull_request.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/issues'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/labels'.
    mi_client->request->set_form_field( name = 'repository_id' value = repository_id ).
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_repos.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/repositories'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/topics'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~search_users.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/search/users'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_discussions_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_discussion_commen01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_comment_l.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_pending_invitatio01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_members_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members'.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_add_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_remove_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_get_membership_for_use01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_membersh01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_membership_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_projects_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_project_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_remove_project_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_repos_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_repo_per01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_remove_repo_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_for_lega.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/team-sync/group-mappings'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group_mapping( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_create_or_update_idp_g01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/team-sync/group-mappings'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group_mapping( '' ).
  ENDMETHOD.

  METHOD zif_github~teams_list_child_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_update_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_private_user( '' ).
  ENDMETHOD.

  METHOD zif_github~users_list_blocked_by_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/blocks'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_check_blocked.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_block.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_unblock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_set_primary_email_visibi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/email/visibility'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_emails_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_add_email_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_delete_email_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/followers'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_followed_by_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/following'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_check_person_is_followed.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_follow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_unfollow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_create_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_get_gpg_key_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gpg_key( '' ).
  ENDMETHOD.

  METHOD zif_github~users_delete_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_installations_for_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_installation_repos_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_add_repo_to_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_remove_repo_from_installa.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_interaction_limit_respon( '' ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~issues_list_for_authenticated_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_public_ssh_keys_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_create_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_get_public_ssh_key_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_key( '' ).
  ENDMETHOD.

  METHOD zif_github~users_delete_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/marketplace_purchases'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/marketplace_purchases/stubbed'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_memberships_for_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs'.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_membership_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_authentic.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = exclude ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_migration( '' ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_archive_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_fo01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/repos/{repo_name}/lock'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH repo_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_authenticated_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/orgs'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_create_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/projects'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_public_emails_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/public_emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/repos'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_create_for_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/repos'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_accept_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_decline_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/starred'.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_check_repo_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_star_repo_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_unstar_repo_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_watched_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/subscriptions'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~teams_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/user/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_get_by_username.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_events_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_org_events_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/events/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/followers'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/following'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_check_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/following/{target_user}'.
    REPLACE ALL OCCURRENCES OF '{target_user}' IN lv_uri WITH target_user.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~gists_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/gists'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/gpg_keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~users_get_context_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/hovercard'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF subject_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_type' value = subject_type ).
    ENDIF.
    IF subject_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_id' value = subject_id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hovercard( '' ).
  ENDMETHOD.

  METHOD zif_github~apps_get_user_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/installation'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation( '' ).
  ENDMETHOD.

  METHOD zif_github~users_list_public_keys_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/orgs'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~projects_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/projects'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_received_events_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/received_events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_received_public_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/received_events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~repos_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/repos'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_actions_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_packages_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_billing_usage( '' ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/starred'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_watched_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/users/{username}/subscriptions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_github~meta_get_zen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/zen'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

ENDCLASS.