CLASS zcl_github DEFINITION PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API
  PUBLIC SECTION.
    INTERFACES zif_github.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PRIVATE SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    METHODS send_receive.
ENDCLASS.

CLASS zcl_github IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    DATA lv_code TYPE i.
    DATA lv_cdata TYPE string.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = lv_code ).
  ENDMETHOD.

  METHOD zif_github~meta_root.
    DATA lv_uri TYPE string VALUE '/'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_authenticated.
    DATA lv_uri TYPE string VALUE '/app'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_create_from_manifest.
    DATA lv_uri TYPE string VALUE '/app-manifests/{code}/conversions'.
    REPLACE ALL OCCURRENCES OF '{code}' IN lv_uri WITH code.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_webhook_config_for_ap.
    DATA lv_uri TYPE string VALUE '/app/hook/config'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_update_webhook_config_for.
    DATA lv_uri TYPE string VALUE '/app/hook/config'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_installations.
    DATA lv_uri TYPE string VALUE '/app/installations'.
    IF outdated IS SUPPLIED.
      mi_client->request->set_form_field( name = 'outdated' value = outdated ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_installation.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_delete_installation.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_create_installation_acces.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/access_tokens'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_suspend_installation.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/suspended'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_unsuspend_installation.
    DATA lv_uri TYPE string VALUE '/app/installations/{installation_id}/suspended'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_list_gran.
    DATA lv_uri TYPE string VALUE '/applications/grants'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_grant.
    DATA lv_uri TYPE string VALUE '/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_delete_gr.
    DATA lv_uri TYPE string VALUE '/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_delete_authorization.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/grant'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_revoke_grant_for_applicat.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/grants/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_check_token.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_reset_token.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_delete_token.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_scope_token.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/token/scoped'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_check_authorization.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_reset_authorization.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_revoke_authorization_for_.
    DATA lv_uri TYPE string VALUE '/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_by_slug.
    DATA lv_uri TYPE string VALUE '/apps/{app_slug}'.
    REPLACE ALL OCCURRENCES OF '{app_slug}' IN lv_uri WITH app_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_list_auth.
    DATA lv_uri TYPE string VALUE '/authorizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_create_au.
    DATA lv_uri TYPE string VALUE '/authorizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_or_cr.
    DATA lv_uri TYPE string VALUE '/authorizations/clients/{client_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_or_01.
    DATA lv_uri TYPE string VALUE '/authorizations/clients/{client_id}/{fingerprint}'.
    REPLACE ALL OCCURRENCES OF '{fingerprint}' IN lv_uri WITH fingerprint.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_get_autho.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_update_au.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~oauth_authorizations_delete_au.
    DATA lv_uri TYPE string VALUE '/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_all_codes.
    DATA lv_uri TYPE string VALUE '/codes_of_conduct'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_conduct_c.
    DATA lv_uri TYPE string VALUE '/codes_of_conduct/{key}'.
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH key.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_create_content_attachment.
    DATA lv_uri TYPE string VALUE '/content_references/{content_reference_id}/attachments'.
    REPLACE ALL OCCURRENCES OF '{content_reference_id}' IN lv_uri WITH content_reference_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~emojis_get.
    DATA lv_uri TYPE string VALUE '/emojis'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_github_ac.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_github_ac.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_selected.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_selected_.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_enable_select.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_disable_selec.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_allowed_a.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_allowed_a.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_hos.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_self_h.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_host.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_self_h.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self_h.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_org_acce.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_org_acces.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_org_acces.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_org_ac.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{org_id}' IN lv_uri WITH org_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h01.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_self_host.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_add_self_host.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_remove_self_h.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_self_h02.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_runner_a.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_regist.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_create_remove.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_self_ho01.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_self01.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~audit_log_get_audit_log.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/audit-log'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_bil.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_bi.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_bil.
    DATA lv_uri TYPE string VALUE '/enterprises/{enterprise}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events.
    DATA lv_uri TYPE string VALUE '/events'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_get_feeds.
    DATA lv_uri TYPE string VALUE '/feeds'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list.
    DATA lv_uri TYPE string VALUE '/gists'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_create.
    DATA lv_uri TYPE string VALUE '/gists'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_public.
    DATA lv_uri TYPE string VALUE '/gists/public'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_starred.
    DATA lv_uri TYPE string VALUE '/gists/starred'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_get.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_update.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_delete.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_comments.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_create_comment.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_get_comment.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_update_comment.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_delete_comment.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_commits.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/commits'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_forks.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_fork.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_check_is_starred.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_star.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_unstar.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_get_revision.
    DATA lv_uri TYPE string VALUE '/gists/{gist_id}/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gitignore_get_all_templates.
    DATA lv_uri TYPE string VALUE '/gitignore/templates'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gitignore_get_template.
    DATA lv_uri TYPE string VALUE '/gitignore/templates/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_repos_accessible_to_.
    DATA lv_uri TYPE string VALUE '/installation/repositories'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_revoke_installation_acces.
    DATA lv_uri TYPE string VALUE '/installation/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list.
    DATA lv_uri TYPE string VALUE '/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF collab IS SUPPLIED.
      mi_client->request->set_form_field( name = 'collab' value = collab ).
    ENDIF.
    IF orgs IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orgs' value = orgs ).
    ENDIF.
    IF owned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owned' value = owned ).
    ENDIF.
    IF pulls IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pulls' value = pulls ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~licenses_get_all_commonly_used.
    DATA lv_uri TYPE string VALUE '/licenses'.
    IF featured IS SUPPLIED.
      mi_client->request->set_form_field( name = 'featured' value = featured ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~licenses_get.
    DATA lv_uri TYPE string VALUE '/licenses/{license}'.
    REPLACE ALL OCCURRENCES OF '{license}' IN lv_uri WITH license.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~markdown_render.
    DATA lv_uri TYPE string VALUE '/markdown'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~markdown_render_raw.
    DATA lv_uri TYPE string VALUE '/markdown/raw'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_for.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/accounts/{account_id}'.
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH account_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_plans.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/plans'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/plans/{plan_id}/accounts'.
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH plan_id.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_subscription_plan_f01.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/accounts/{account_id}'.
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH account_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_plans_stubbed.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/plans'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_accounts_for_plan_st.
    DATA lv_uri TYPE string VALUE '/marketplace_listing/stubbed/plans/{plan_id}/accounts'.
    REPLACE ALL OCCURRENCES OF '{plan_id}' IN lv_uri WITH plan_id.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~meta_get.
    DATA lv_uri TYPE string VALUE '/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_fo.
    DATA lv_uri TYPE string VALUE '/networks/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_notifications_fo.
    DATA lv_uri TYPE string VALUE '/notifications'.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_mark_notifications_as.
    DATA lv_uri TYPE string VALUE '/notifications'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_get_thread.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_mark_thread_as_read.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_get_thread_subscripti.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_set_thread_subscripti.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_delete_thread_subscri.
    DATA lv_uri TYPE string VALUE '/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~meta_get_octocat.
    DATA lv_uri TYPE string VALUE '/octocat'.
    IF s IS SUPPLIED.
      mi_client->request->set_form_field( name = 's' value = s ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list.
    DATA lv_uri TYPE string VALUE '/organizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get.
    DATA lv_uri TYPE string VALUE '/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_update.
    DATA lv_uri TYPE string VALUE '/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_per.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_per.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_reposito.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repositor.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_enable_selected_reposi.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_disable_selected_repos.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_or.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_or.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_runne.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_self_hosted_run.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runner.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_update_self_hosted_run.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_run.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_access_to_se.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_repo_access_to_sel.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_add_repo_access_to_sel.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_remove_repo_access_to_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_self_hosted_runner.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_add_self_hosted_runner.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_remove_self_hosted_run.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_group_id}' IN lv_uri WITH runner_group_id.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run02.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicatio.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_to.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_fo.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_org_secrets.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_org_public_key.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/public-key'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_org_secret.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_org_s.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_org_secret.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_selected_repos_fo.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_selected_repos_for.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_add_selected_repo_to_o.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_remove_selected_repo_f.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get_audit_log.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/audit-log'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_blocked_users.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_check_blocked_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_block_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_unblock_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_saml_sso_authorizati.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/credential-authorizations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_saml_sso_authoriza.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/credential-authorizations/{credential_id}'.
    REPLACE ALL OCCURRENCES OF '{credential_id}' IN lv_uri WITH credential_id.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_org_event.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/events'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_failed_invitations.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/failed_invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_webhooks.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_create_webhook.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_delete_webhook.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get_webhook_config_for_or.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_webhook_config_for.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_ping_webhook.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_org_installation.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/installation'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_app_installations.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/installations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_get_restrictions_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restrictions_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrictio.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_pending_invitations.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_create_invitation.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_cancel_invitation.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_invitation_teams.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/invitations/{invitation_id}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/issues'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_members.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_check_membership_for_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_member.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_set_membership_for_user.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_membership_for_use.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_download_archive_fo.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_for_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH repo_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/migrations/{migration_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_outside_collaborator.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_convert_member_to_outside.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_outside_collaborat.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_create_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_public_members.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_check_public_membership_f.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_set_public_membership_for.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_remove_public_membership_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_for_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/team-sync/groups'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_by_name.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_discussions_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_discussion_comments.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_commen.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_comment_i.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_commen.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_commen.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_discus.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_disc.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_disc.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_team_di01.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_pending_invitations.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/invitations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_members_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_membership_for_user_.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_membership.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_membership_for_us.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_projects_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_pr.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_project_pe.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_project_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_repos_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_re.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_repo_permi.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_repo_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_or_update_idp_gro.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_child_in_org.
    DATA lv_uri TYPE string VALUE '/orgs/{org}/teams/{team_slug}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_get_card.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_update_card.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_delete_card.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_move_card.
    DATA lv_uri TYPE string VALUE '/projects/columns/cards/{card_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_get_column.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_update_column.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_delete_column.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_cards.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    IF archived_state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'archived_state' value = archived_state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_create_card.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_move_column.
    DATA lv_uri TYPE string VALUE '/projects/columns/{column_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_get.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_update.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_delete.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_collaborators.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators'.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_add_collaborator.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_remove_collaborator.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_get_permission_for_us.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_columns.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/columns'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_create_column.
    DATA lv_uri TYPE string VALUE '/projects/{project_id}/columns'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~rate_limit_get.
    DATA lv_uri TYPE string VALUE '/rate_limit'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_legacy.
    DATA lv_uri TYPE string VALUE '/reactions/{reaction_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_artifacts_for_rep.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_artifact.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_artifact.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_download_artifact.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'.
    REPLACE ALL OCCURRENCES OF '{archive_format}' IN lv_uri WITH archive_format.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{artifact_id}' IN lv_uri WITH artifact_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_job_for_workflow_r.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/jobs/{job_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH job_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_download_job_logs_for_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{job_id}' IN lv_uri WITH job_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_github_actions_p01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_github_actions_p01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_allowed_actions_re.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_set_allowed_actions_re.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/permissions/selected-actions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_self_hosted_run03.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_runner_applicat01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/downloads'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_registration_01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/registration-token'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_remove_token_01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/remove-token'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_self_hosted_runn02.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_self_hosted_r02.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runners/{runner_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{runner_id}' IN lv_uri WITH runner_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs_for.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_run_arti.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_cancel_workflow_run.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_jobs_for_workflow.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_download_workflow_run_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_workflow_run_lo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_re_run_workflow.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_run_usage.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/runs/{run_id}/timing'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_secrets.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_public_key.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/public-key'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_repo_secret.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_or_update_repo_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_delete_repo_secret.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{secret_name}' IN lv_uri WITH secret_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_repo_workflows.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_disable_workflow.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_create_workflow_dispat.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_enable_workflow.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_list_workflow_runs.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF actor IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actor' value = actor ).
    ENDIF.
    IF event IS SUPPLIED.
      mi_client->request->set_form_field( name = 'event' value = event ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~actions_get_workflow_usage.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_assignees.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_check_user_can_be_assig.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/assignees/{assignee}'.
    REPLACE ALL OCCURRENCES OF '{assignee}' IN lv_uri WITH assignee.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_enable_automated_securit.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/automated-security-fixes'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_disable_automated_securi.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/automated-security-fixes'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_branches.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF protected IS SUPPLIED.
      mi_client->request->set_form_field( name = 'protected' value = protected ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_branch.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_branch_protection.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_branch_protection.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_branch_protection.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_admin_branch_protect.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_set_admin_branch_protect.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_admin_branch_prot.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_pull_request_review_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_pull_request_revi.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_pull_request_revi.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_signature_pro.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_signature_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_signature_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_status_checks_protec.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_status_check_prot.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_prot.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_all_status_check_con.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_add_status_check_context.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_set_status_check_context.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_status_check_cont.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_access_restrictions.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_access_restrictio.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_apps_with_access_to_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_add_app_access_restricti.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_set_app_access_restricti.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_app_access_restri.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_teams_with_access_to.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_add_team_access_restrict.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_set_team_access_restrict.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_team_access_restr.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_users_with_access_to.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_add_user_access_restrict.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_set_user_access_restrict.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_user_access_restr.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_rename_branch.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/branches/{branch}/rename'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF branch IS SUPPLIED.
      mi_client->request->set_form_field( name = 'branch' value = branch ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_create.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_get.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_update.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_list_annotations.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_create_suite.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_set_suites_preferences.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/preferences'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_get_suite.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_list_for_suite.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_rerequest_suite.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_alerts_for_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_get_alert.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_update_alert.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_list_recent_anal.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/analyses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF tool_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'tool_name' value = tool_name ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~code_scanning_upload_sarif.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/code-scanning/sarifs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_collaborators.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_check_collaborator.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_add_collaborator.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_remove_collaborator.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_collaborator_permiss.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_comments_for.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_commit_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_commit_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_commit_comm.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_commit_co.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_commit_co.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_commits.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF path IS SUPPLIED.
      mi_client->request->set_form_field( name = 'path' value = path ).
    ENDIF.
    IF author IS SUPPLIED.
      mi_client->request->set_form_field( name = 'author' value = author ).
    ENDIF.
    IF until IS SUPPLIED.
      mi_client->request->set_form_field( name = 'until' value = until ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_branches_for_head_c.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_comments_for_commit.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_pull_requests_assoc.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{commit_sha}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_commit.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_list_for_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~checks_list_suites_for_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = app_id ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_combined_status_for_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/status'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_commit_statuses_for.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/commits/{ref}/statuses'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~codes_of_conduct_get_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/community/code_of_conduct'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_community_profile_me.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/community/profile'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_compare_commits.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/compare/{base}...{head}'.
    REPLACE ALL OCCURRENCES OF '{base}' IN lv_uri WITH base.
    REPLACE ALL OCCURRENCES OF '{head}' IN lv_uri WITH head.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_content.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_or_update_file_co.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_file.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_contributors.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF anon IS SUPPLIED.
      mi_client->request->set_form_field( name = 'anon' value = anon ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_deployments.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF task IS SUPPLIED.
      mi_client->request->set_form_field( name = 'task' value = task ).
    ENDIF.
    IF environment IS SUPPLIED.
      mi_client->request->set_form_field( name = 'environment' value = environment ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_deployment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_deployment_statuses.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_deployment_status.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_deployment_status.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'.
    REPLACE ALL OCCURRENCES OF '{status_id}' IN lv_uri WITH status_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_dispatch_event.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_events.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_forks.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_fork.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_create_blob.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/blobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_get_blob.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/blobs/{file_sha}'.
    REPLACE ALL OCCURRENCES OF '{file_sha}' IN lv_uri WITH file_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_create_commit.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_get_commit.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/commits/{commit_sha}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_list_matching_refs.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/matching-refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_get_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/ref/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_create_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_update_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_delete_ref.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_create_tag.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_get_tag.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/tags/{tag_sha}'.
    REPLACE ALL OCCURRENCES OF '{tag_sha}' IN lv_uri WITH tag_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_create_tree.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/trees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~git_get_tree.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/git/trees/{tree_sha}'.
    REPLACE ALL OCCURRENCES OF '{tree_sha}' IN lv_uri WITH tree_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF recursive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recursive' value = recursive ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_webhooks.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_webhook_config_for_r.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_webhook_config_fo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/config'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_ping_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_test_push_webhook.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/hooks/{hook_id}/tests'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_import_status.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_start_import.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_update_import.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_cancel_import.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_commit_authors.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/authors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_map_commit_author.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/authors/{author_id}'.
    REPLACE ALL OCCURRENCES OF '{author_id}' IN lv_uri WITH author_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_large_files.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/large_files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_set_lfs_preference.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/import/lfs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_repo_installation.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/installation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict01.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/interaction-limits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_invitation.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_invitation.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF milestone IS SUPPLIED.
      mi_client->request->set_form_field( name = 'milestone' value = milestone ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF assignee IS SUPPLIED.
      mi_client->request->set_form_field( name = 'assignee' value = assignee ).
    ENDIF.
    IF creator IS SUPPLIED.
      mi_client->request->set_form_field( name = 'creator' value = creator ).
    ENDIF.
    IF mentioned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'mentioned' value = mentioned ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_create.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_comments_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_get_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_update_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue_comme.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue_com.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue_com.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_get_event.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/events/{event_id}'.
    REPLACE ALL OCCURRENCES OF '{event_id}' IN lv_uri WITH event_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_get.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_update.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_add_assignees.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_remove_assignees.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_comments.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_create_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_events.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_on_issue.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_add_labels.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_set_labels.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_remove_all_labels.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_remove_label.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_lock.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_unlock.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_issue.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_issue.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_issue.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_events_for_timelin.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/issues/{issue_number}/timeline'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_deploy_keys.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_deploy_key.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_deploy_key.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_deploy_key.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_create_label.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_get_label.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_update_label.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_label.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_languages.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/languages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~licenses_get_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/license'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_merge.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/merges'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_milestones.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_create_milestone.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_get_milestone.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_update_milestone.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_delete_milestone.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_labels_for_milesto.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repo_notificatio.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_mark_repo_notificatio.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_pages.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_pages_site.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_information_about.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_pages_site.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_pages_builds.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_request_pages_build.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_pages_build.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_pages_build.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pages/builds/{build_id}'.
    REPLACE ALL OCCURRENCES OF '{build_id}' IN lv_uri WITH build_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_create_for_repo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF head IS SUPPLIED.
      mi_client->request->set_form_field( name = 'head' value = head ).
    ENDIF.
    IF base IS SUPPLIED.
      mi_client->request->set_form_field( name = 'base' value = base ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_create.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments_for.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_get_review_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_review_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_delete_review_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_pull_reques.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_pull_requ.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_delete_for_pull_requ.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_get.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_update.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_review_comments.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_create_review_comment.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_create_reply_for_review_.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_commits.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_files.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_check_if_merged.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_merge.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_requested_reviewers.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_request_reviewers.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_remove_requested_reviewe.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_reviews.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_create_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_get_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_delete_pending_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_list_comments_for_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_dismiss_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_submit_review.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~pulls_update_branch.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_readme.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/readme'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_releases.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_release.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_release_asset.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_release_asset.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_release_asset.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_latest_release.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_release_by_tag.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/tags/{tag}'.
    REPLACE ALL OCCURRENCES OF '{tag}' IN lv_uri WITH tag.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_release.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_update_release.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_delete_release.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_release_assets.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_upload_release_asset.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'name' value = name ).
    ENDIF.
    IF label IS SUPPLIED.
      mi_client->request->set_form_field( name = 'label' value = label ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~secret_scanning_list_alerts_fo.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~secret_scanning_get_alert.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~secret_scanning_update_alert.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{alert_number}' IN lv_uri WITH alert_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_stargazers_for_r.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stargazers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_code_frequency_stats.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/code_frequency'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_commit_activity_stat.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/commit_activity'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_contributors_stats.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_participation_stats.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/participation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_punch_card_stats.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/stats/punch_card'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_commit_status.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/statuses/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_watchers_for_rep.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscribers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_get_repo_subscription.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_set_repo_subscription.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_delete_repo_subscript.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_tags.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_download_tarball_archive.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/tarball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_teams.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_all_topics.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_replace_all_topics.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_clones.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/clones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_top_paths.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/popular/paths'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_top_referrers.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/popular/referrers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_get_views.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/traffic/views'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per' value = per ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_transfer.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/transfer'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_check_vulnerability_aler.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_enable_vulnerability_ale.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_disable_vulnerability_al.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_download_zipball_archive.
    DATA lv_uri TYPE string VALUE '/repos/{owner}/{repo}/zipball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_using_template.
    DATA lv_uri TYPE string VALUE '/repos/{template_owner}/{template_repo}/generate'.
    REPLACE ALL OCCURRENCES OF '{template_owner}' IN lv_uri WITH template_owner.
    REPLACE ALL OCCURRENCES OF '{template_repo}' IN lv_uri WITH template_repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_public.
    DATA lv_uri TYPE string VALUE '/repositories'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provisio.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_and.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provision.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informati.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attrib.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_scim_g.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_group_id}' IN lv_uri WITH scim_group_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_list_provis01.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_provision_a01.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_get_provisi01.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_set_informa01.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_update_attr01.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~enterprise_admin_delete_user_f.
    DATA lv_uri TYPE string VALUE '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{enterprise}' IN lv_uri WITH enterprise.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_list_provisioned_identiti.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF startindex IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startIndex' value = startindex ).
    ENDIF.
    IF count IS SUPPLIED.
      mi_client->request->set_form_field( name = 'count' value = count ).
    ENDIF.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_provision_and_invite_user.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_get_provisioning_informat.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_set_information_for_provi.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_update_attribute_for_user.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~scim_delete_user_from_org.
    DATA lv_uri TYPE string VALUE '/scim/v2/organizations/{org}/Users/{scim_user_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{scim_user_id}' IN lv_uri WITH scim_user_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_code.
    DATA lv_uri TYPE string VALUE '/search/code'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_commits.
    DATA lv_uri TYPE string VALUE '/search/commits'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_issues_and_pull_request.
    DATA lv_uri TYPE string VALUE '/search/issues'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_labels.
    DATA lv_uri TYPE string VALUE '/search/labels'.
    mi_client->request->set_form_field( name = 'repository_id' value = repository_id ).
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_repos.
    DATA lv_uri TYPE string VALUE '/search/repositories'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_topics.
    DATA lv_uri TYPE string VALUE '/search/topics'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~search_users.
    DATA lv_uri TYPE string VALUE '/search/users'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_discussions_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_discussion_commen01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_discussion_comm01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_discussion_comment_l.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_update_discussion_comm01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_delete_discussion_comm01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc02.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di02.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_list_for_team_disc03.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~reactions_create_for_team_di03.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/discussions/{discussion_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_pending_invitatio01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_members_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members'.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_member_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_member_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_member_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_get_membership_for_use01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_membersh01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_membership_for_01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_projects_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_project_01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_project_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_repos_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_check_permissions_for_02.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_add_or_update_repo_per01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_remove_repo_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_idp_groups_for_lega.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/team-sync/group-mappings'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_create_or_update_idp_g01.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/team-sync/group-mappings'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_child_legacy.
    DATA lv_uri TYPE string VALUE '/teams/{team_id}/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_get_authenticated.
    DATA lv_uri TYPE string VALUE '/user'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_update_authenticated.
    DATA lv_uri TYPE string VALUE '/user'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_blocked_by_authenti.
    DATA lv_uri TYPE string VALUE '/user/blocks'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_check_blocked.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_block.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_unblock.
    DATA lv_uri TYPE string VALUE '/user/blocks/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_set_primary_email_visibi.
    DATA lv_uri TYPE string VALUE '/user/email/visibility'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_emails_for_authenti.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_add_email_for_authentica.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_delete_email_for_authent.
    DATA lv_uri TYPE string VALUE '/user/emails'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_authe.
    DATA lv_uri TYPE string VALUE '/user/followers'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_followed_by_authent.
    DATA lv_uri TYPE string VALUE '/user/following'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_check_person_is_followed.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_follow.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_unfollow.
    DATA lv_uri TYPE string VALUE '/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_authen.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_create_gpg_key_for_authe.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_get_gpg_key_for_authenti.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_delete_gpg_key_for_authe.
    DATA lv_uri TYPE string VALUE '/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_installations_for_au.
    DATA lv_uri TYPE string VALUE '/user/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_installation_repos_f.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_add_repo_to_installation.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_remove_repo_from_installa.
    DATA lv_uri TYPE string VALUE '/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_get_restriction02.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_set_restriction02.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~interactions_remove_restrict02.
    DATA lv_uri TYPE string VALUE '/user/interaction-limits'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~issues_list_for_authenticated_.
    DATA lv_uri TYPE string VALUE '/user/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_public_ssh_keys_for.
    DATA lv_uri TYPE string VALUE '/user/keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_create_public_ssh_key_fo.
    DATA lv_uri TYPE string VALUE '/user/keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_get_public_ssh_key_for_a.
    DATA lv_uri TYPE string VALUE '/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_delete_public_ssh_key_fo.
    DATA lv_uri TYPE string VALUE '/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_au.
    DATA lv_uri TYPE string VALUE '/user/marketplace_purchases'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_list_subscriptions_for_01.
    DATA lv_uri TYPE string VALUE '/user/marketplace_purchases/stubbed'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_memberships_for_auth.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs'.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_get_membership_for_authen.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_update_membership_for_aut.
    DATA lv_uri TYPE string VALUE '/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_list_for_authentica.
    DATA lv_uri TYPE string VALUE '/user/migrations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_start_for_authentic.
    DATA lv_uri TYPE string VALUE '/user/migrations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_status_for_auth.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = exclude ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_get_archive_for_aut.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_delete_archive_fo01.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/archive'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_unlock_repo_for_aut.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/repos/{repo_name}/lock'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    REPLACE ALL OCCURRENCES OF '{repo_name}' IN lv_uri WITH repo_name.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~migrations_list_repos_for_user.
    DATA lv_uri TYPE string VALUE '/user/migrations/{migration_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{migration_id}' IN lv_uri WITH migration_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_authenticated_us.
    DATA lv_uri TYPE string VALUE '/user/orgs'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_create_for_authentica.
    DATA lv_uri TYPE string VALUE '/user/projects'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_public_emails_for_a.
    DATA lv_uri TYPE string VALUE '/user/public_emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_for_authenticated_u.
    DATA lv_uri TYPE string VALUE '/user/repos'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_create_for_authenticated.
    DATA lv_uri TYPE string VALUE '/user/repos'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_invitations_for_aut.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_accept_invitation.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_decline_invitation.
    DATA lv_uri TYPE string VALUE '/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_by.
    DATA lv_uri TYPE string VALUE '/user/starred'.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_check_repo_is_starred.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_star_repo_for_authent.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_unstar_repo_for_authe.
    DATA lv_uri TYPE string VALUE '/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_watched_repos_fo.
    DATA lv_uri TYPE string VALUE '/user/subscriptions'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~teams_list_for_authenticated_u.
    DATA lv_uri TYPE string VALUE '/user/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list.
    DATA lv_uri TYPE string VALUE '/users'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_get_by_username.
    DATA lv_uri TYPE string VALUE '/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_events_for_authe.
    DATA lv_uri TYPE string VALUE '/users/{username}/events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_org_events_for_a.
    DATA lv_uri TYPE string VALUE '/users/{username}/events/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_public_events_01.
    DATA lv_uri TYPE string VALUE '/users/{username}/events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_followers_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/followers'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_following_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/following'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_check_following_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/following/{target_user}'.
    REPLACE ALL OCCURRENCES OF '{target_user}' IN lv_uri WITH target_user.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~gists_list_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/gists'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_gpg_keys_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/gpg_keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_get_context_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/hovercard'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF subject_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_type' value = subject_type ).
    ENDIF.
    IF subject_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_id' value = subject_id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~apps_get_user_installation.
    DATA lv_uri TYPE string VALUE '/users/{username}/installation'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~users_list_public_keys_for_use.
    DATA lv_uri TYPE string VALUE '/users/{username}/keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~orgs_list_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/orgs'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~projects_list_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/projects'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_received_events_.
    DATA lv_uri TYPE string VALUE '/users/{username}/received_events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_received_public_.
    DATA lv_uri TYPE string VALUE '/users/{username}/received_events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~repos_list_for_user.
    DATA lv_uri TYPE string VALUE '/users/{username}/repos'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_actions_b02.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/actions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_github_packages_02.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/packages'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~billing_get_shared_storage_b02.
    DATA lv_uri TYPE string VALUE '/users/{username}/settings/billing/shared-storage'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_starred_01.
    DATA lv_uri TYPE string VALUE '/users/{username}/starred'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~activity_list_repos_watched_by.
    DATA lv_uri TYPE string VALUE '/users/{username}/subscriptions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

  METHOD zif_github~meta_get_zen.
    DATA lv_uri TYPE string VALUE '/zen'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
*    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).
*    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).
    send_receive( ).
    WRITE / mi_client->response->get_cdata( ).
  ENDMETHOD.

ENDCLASS.