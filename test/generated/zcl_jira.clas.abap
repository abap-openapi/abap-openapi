CLASS zcl_jira DEFINITION PUBLIC.
* Generated by abap-openapi-client
* The Jira Cloud platform REST API
  PUBLIC SECTION.
    INTERFACES zif_jira.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_healthcheckresult
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(healthcheckresult) TYPE zif_jira=>healthcheckresult
      RAISING cx_static_check.
    METHODS parse_serverinformation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(serverinformation) TYPE zif_jira=>serverinformation
      RAISING cx_static_check.
    METHODS parse_issuesandjqlqueries
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuesandjqlqueries) TYPE zif_jira=>issuesandjqlqueries
      RAISING cx_static_check.
    METHODS parse_issuematches
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuematches) TYPE zif_jira=>issuematches
      RAISING cx_static_check.
    METHODS parse_issuematchesforjql
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuematchesforjql) TYPE zif_jira=>issuematchesforjql
      RAISING cx_static_check.
    METHODS parse_avatarurlsbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(avatarurlsbean) TYPE zif_jira=>avatarurlsbean
      RAISING cx_static_check.
    METHODS parse_eventnotification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(eventnotification) TYPE zif_jira=>eventnotification
      RAISING cx_static_check.
    METHODS parse_fielddetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fielddetails) TYPE zif_jira=>fielddetails
      RAISING cx_static_check.
    METHODS parse_groupname
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(groupname) TYPE zif_jira=>groupname
      RAISING cx_static_check.
    METHODS parse_jsontypebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jsontypebean) TYPE zif_jira=>jsontypebean
      RAISING cx_static_check.
    METHODS parse_notificationevent
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notificationevent) TYPE zif_jira=>notificationevent
      RAISING cx_static_check.
    METHODS parse_notificationscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notificationscheme) TYPE zif_jira=>notificationscheme
      RAISING cx_static_check.
    METHODS parse_notificationschemeevent
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notificationschemeevent) TYPE zif_jira=>notificationschemeevent
      RAISING cx_static_check.
    METHODS parse_projectforscope
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectforscope) TYPE zif_jira=>projectforscope
      RAISING cx_static_check.
    METHODS parse_projectrole
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectrole) TYPE zif_jira=>projectrole
      RAISING cx_static_check.
    METHODS parse_projectrolegroup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectrolegroup) TYPE zif_jira=>projectrolegroup
      RAISING cx_static_check.
    METHODS parse_projectroleuser
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectroleuser) TYPE zif_jira=>projectroleuser
      RAISING cx_static_check.
    METHODS parse_roleactor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(roleactor) TYPE zif_jira=>roleactor
      RAISING cx_static_check.
    METHODS parse_scope
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scope) TYPE zif_jira=>scope
      RAISING cx_static_check.
    METHODS parse_updatedprojectcategory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatedprojectcategory) TYPE zif_jira=>updatedprojectcategory
      RAISING cx_static_check.
    METHODS parse_userdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userdetails) TYPE zif_jira=>userdetails
      RAISING cx_static_check.
    METHODS parse_pagebeannotificationsche
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeannotificationscheme) TYPE zif_jira=>pagebeannotificationscheme
      RAISING cx_static_check.
    METHODS parse_projectissuesecurityleve
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuesecuritylevels) TYPE zif_jira=>projectissuesecuritylevels
      RAISING cx_static_check.
    METHODS parse_securitylevel
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(securitylevel) TYPE zif_jira=>securitylevel
      RAISING cx_static_check.
    METHODS parse_pagebeanstring
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanstring) TYPE zif_jira=>pagebeanstring
      RAISING cx_static_check.
    METHODS parse_groupdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(groupdetails) TYPE zif_jira=>groupdetails
      RAISING cx_static_check.
    METHODS parse_pagebeangroupdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeangroupdetails) TYPE zif_jira=>pagebeangroupdetails
      RAISING cx_static_check.
    METHODS parse_locale
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(locale) TYPE zif_jira=>locale
      RAISING cx_static_check.
    METHODS parse_failedwebhook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(failedwebhook) TYPE zif_jira=>failedwebhook
      RAISING cx_static_check.
    METHODS parse_failedwebhooks
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(failedwebhooks) TYPE zif_jira=>failedwebhooks
      RAISING cx_static_check.
    METHODS parse_errorcollection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(errorcollection) TYPE zif_jira=>errorcollection
      RAISING cx_static_check.
    METHODS parse_webhookdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhookdetails) TYPE zif_jira=>webhookdetails
      RAISING cx_static_check.
    METHODS parse_webhookregistrationdetai
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhookregistrationdetails) TYPE zif_jira=>webhookregistrationdetails
      RAISING cx_static_check.
    METHODS parse_containerforregisteredwe
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(containerforregisteredwebhooks) TYPE zif_jira=>containerforregisteredwebhooks
      RAISING cx_static_check.
    METHODS parse_registeredwebhook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(registeredwebhook) TYPE zif_jira=>registeredwebhook
      RAISING cx_static_check.
    METHODS parse_pagebeanwebhook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanwebhook) TYPE zif_jira=>pagebeanwebhook
      RAISING cx_static_check.
    METHODS parse_webhook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook) TYPE zif_jira=>webhook
      RAISING cx_static_check.
    METHODS parse_containerforwebhookids
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(containerforwebhookids) TYPE zif_jira=>containerforwebhookids
      RAISING cx_static_check.
    METHODS parse_webhooksexpirationdate
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhooksexpirationdate) TYPE zif_jira=>webhooksexpirationdate
      RAISING cx_static_check.
    METHODS parse_bulkissuepropertyupdater
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkissuepropertyupdaterequest) TYPE zif_jira=>bulkissuepropertyupdaterequest
      RAISING cx_static_check.
    METHODS parse_issuefilterforbulkproper
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefilterforbulkpropertyset) TYPE zif_jira=>issuefilterforbulkpropertyset
      RAISING cx_static_check.
    METHODS parse_issuefilterforbulkprop01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefilterforbulkpropertydele) TYPE zif_jira=>issuefilterforbulkpropertydele
      RAISING cx_static_check.
    METHODS parse_issueentityproperties
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issueentityproperties) TYPE zif_jira=>issueentityproperties
      RAISING cx_static_check.
    METHODS parse_jsonnode
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jsonnode) TYPE zif_jira=>jsonnode
      RAISING cx_static_check.
    METHODS parse_applicationrole
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(applicationrole) TYPE zif_jira=>applicationrole
      RAISING cx_static_check.
    METHODS parse_component
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(component) TYPE zif_jira=>component
      RAISING cx_static_check.
    METHODS parse_dashboard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dashboard) TYPE zif_jira=>dashboard
      RAISING cx_static_check.
    METHODS parse_hierarchy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hierarchy) TYPE zif_jira=>hierarchy
      RAISING cx_static_check.
    METHODS parse_hierarchylevel
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hierarchylevel) TYPE zif_jira=>hierarchylevel
      RAISING cx_static_check.
    METHODS parse_issuetypedetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypedetails) TYPE zif_jira=>issuetypedetails
      RAISING cx_static_check.
    METHODS parse_listwrappercallbackappli
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(listwrappercallbackapplication) TYPE zif_jira=>listwrappercallbackapplication
      RAISING cx_static_check.
    METHODS parse_listwrappercallbackgroup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(listwrappercallbackgroupname) TYPE zif_jira=>listwrappercallbackgroupname
      RAISING cx_static_check.
    METHODS parse_pageofdashboards
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pageofdashboards) TYPE zif_jira=>pageofdashboards
      RAISING cx_static_check.
    METHODS parse_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project) TYPE zif_jira=>project
      RAISING cx_static_check.
    METHODS parse_projectcategory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectcategory) TYPE zif_jira=>projectcategory
      RAISING cx_static_check.
    METHODS parse_projectinsight
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectinsight) TYPE zif_jira=>projectinsight
      RAISING cx_static_check.
    METHODS parse_projectpermissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectpermissions) TYPE zif_jira=>projectpermissions
      RAISING cx_static_check.
    METHODS parse_sharepermission
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(sharepermission) TYPE zif_jira=>sharepermission
      RAISING cx_static_check.
    METHODS parse_simplelink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simplelink) TYPE zif_jira=>simplelink
      RAISING cx_static_check.
    METHODS parse_simplelistwrapperapplica
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simplelistwrapperapplicationro) TYPE zif_jira=>simplelistwrapperapplicationro
      RAISING cx_static_check.
    METHODS parse_simplelistwrappergroupna
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simplelistwrappergroupname) TYPE zif_jira=>simplelistwrappergroupname
      RAISING cx_static_check.
    METHODS parse_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user) TYPE zif_jira=>user
      RAISING cx_static_check.
    METHODS parse_userbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userbean) TYPE zif_jira=>userbean
      RAISING cx_static_check.
    METHODS parse_userbeanavatarurls
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userbeanavatarurls) TYPE zif_jira=>userbeanavatarurls
      RAISING cx_static_check.
    METHODS parse_version
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(version) TYPE zif_jira=>version
      RAISING cx_static_check.
    METHODS parse_versionissuesstatus
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(versionissuesstatus) TYPE zif_jira=>versionissuesstatus
      RAISING cx_static_check.
    METHODS parse_pagebeandashboard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeandashboard) TYPE zif_jira=>pagebeandashboard
      RAISING cx_static_check.
    METHODS parse_dashboarddetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dashboarddetails) TYPE zif_jira=>dashboarddetails
      RAISING cx_static_check.
    METHODS parse_propertykey
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(propertykey) TYPE zif_jira=>propertykey
      RAISING cx_static_check.
    METHODS parse_propertykeys
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(propertykeys) TYPE zif_jira=>propertykeys
      RAISING cx_static_check.
    METHODS parse_entityproperty
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(entityproperty) TYPE zif_jira=>entityproperty
      RAISING cx_static_check.
    METHODS parse_projectemailaddress
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectemailaddress) TYPE zif_jira=>projectemailaddress
      RAISING cx_static_check.
    METHODS parse_projecttype
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projecttype) TYPE zif_jira=>projecttype
      RAISING cx_static_check.
    METHODS parse_pagebeanuser
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanuser) TYPE zif_jira=>pagebeanuser
      RAISING cx_static_check.
    METHODS parse_usermigrationbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(usermigrationbean) TYPE zif_jira=>usermigrationbean
      RAISING cx_static_check.
    METHODS parse_unrestricteduseremail
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(unrestricteduseremail) TYPE zif_jira=>unrestricteduseremail
      RAISING cx_static_check.
    METHODS parse_taskprogressbeanobject
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(taskprogressbeanobject) TYPE zif_jira=>taskprogressbeanobject
      RAISING cx_static_check.
    METHODS parse_idbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(idbean) TYPE zif_jira=>idbean
      RAISING cx_static_check.
    METHODS parse_permissiongrant
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissiongrant) TYPE zif_jira=>permissiongrant
      RAISING cx_static_check.
    METHODS parse_permissionholder
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissionholder) TYPE zif_jira=>permissionholder
      RAISING cx_static_check.
    METHODS parse_permissionscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissionscheme) TYPE zif_jira=>permissionscheme
      RAISING cx_static_check.
    METHODS parse_permissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissions) TYPE zif_jira=>permissions
      RAISING cx_static_check.
    METHODS parse_userpermission
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userpermission) TYPE zif_jira=>userpermission
      RAISING cx_static_check.
    METHODS parse_bulkpermissionsrequestbe
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkpermissionsrequestbean) TYPE zif_jira=>bulkpermissionsrequestbean
      RAISING cx_static_check.
    METHODS parse_bulkprojectpermissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkprojectpermissions) TYPE zif_jira=>bulkprojectpermissions
      RAISING cx_static_check.
    METHODS parse_bulkpermissiongrants
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkpermissiongrants) TYPE zif_jira=>bulkpermissiongrants
      RAISING cx_static_check.
    METHODS parse_bulkprojectpermissiongra
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkprojectpermissiongrants) TYPE zif_jira=>bulkprojectpermissiongrants
      RAISING cx_static_check.
    METHODS parse_permissionskeysbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissionskeysbean) TYPE zif_jira=>permissionskeysbean
      RAISING cx_static_check.
    METHODS parse_permittedprojects
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permittedprojects) TYPE zif_jira=>permittedprojects
      RAISING cx_static_check.
    METHODS parse_projectidentifierbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectidentifierbean) TYPE zif_jira=>projectidentifierbean
      RAISING cx_static_check.
    METHODS parse_deprecatedworkflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deprecatedworkflow) TYPE zif_jira=>deprecatedworkflow
      RAISING cx_static_check.
    METHODS parse_workflowtransitionproper
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionproperty) TYPE zif_jira=>workflowtransitionproperty
      RAISING cx_static_check.
    METHODS parse_columnitem
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(columnitem) TYPE zif_jira=>columnitem
      RAISING cx_static_check.
    METHODS parse_configuration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(configuration) TYPE zif_jira=>configuration
      RAISING cx_static_check.
    METHODS parse_timetrackingconfiguratio
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timetrackingconfiguration) TYPE zif_jira=>timetrackingconfiguration
      RAISING cx_static_check.
    METHODS parse_applicationproperty
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(applicationproperty) TYPE zif_jira=>applicationproperty
      RAISING cx_static_check.
    METHODS parse_simpleapplicationpropert
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simpleapplicationpropertybean) TYPE zif_jira=>simpleapplicationpropertybean
      RAISING cx_static_check.
    METHODS parse_permissionschemes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissionschemes) TYPE zif_jira=>permissionschemes
      RAISING cx_static_check.
    METHODS parse_permissiongrants
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(permissiongrants) TYPE zif_jira=>permissiongrants
      RAISING cx_static_check.
    METHODS parse_associateditembean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(associateditembean) TYPE zif_jira=>associateditembean
      RAISING cx_static_check.
    METHODS parse_auditrecordbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(auditrecordbean) TYPE zif_jira=>auditrecordbean
      RAISING cx_static_check.
    METHODS parse_auditrecords
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(auditrecords) TYPE zif_jira=>auditrecords
      RAISING cx_static_check.
    METHODS parse_changedvaluebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(changedvaluebean) TYPE zif_jira=>changedvaluebean
      RAISING cx_static_check.
    METHODS parse_pagebeanworkflowscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanworkflowscheme) TYPE zif_jira=>pagebeanworkflowscheme
      RAISING cx_static_check.
    METHODS parse_workflowscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowscheme) TYPE zif_jira=>workflowscheme
      RAISING cx_static_check.
    METHODS parse_issuetypesworkflowmappin
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypesworkflowmapping) TYPE zif_jira=>issuetypesworkflowmapping
      RAISING cx_static_check.
    METHODS parse_issuetypeworkflowmapping
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeworkflowmapping) TYPE zif_jira=>issuetypeworkflowmapping
      RAISING cx_static_check.
    METHODS parse_defaultworkflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(defaultworkflow) TYPE zif_jira=>defaultworkflow
      RAISING cx_static_check.
    METHODS parse_containerofworkflowschem
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(containerofworkflowschemeassoc) TYPE zif_jira=>containerofworkflowschemeassoc
      RAISING cx_static_check.
    METHODS parse_workflowschemeassociatio
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowschemeassociations) TYPE zif_jira=>workflowschemeassociations
      RAISING cx_static_check.
    METHODS parse_workflowschemeprojectass
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowschemeprojectassociati) TYPE zif_jira=>workflowschemeprojectassociati
      RAISING cx_static_check.
    METHODS parse_timetrackingprovider
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timetrackingprovider) TYPE zif_jira=>timetrackingprovider
      RAISING cx_static_check.
    METHODS parse_pagebeanworkflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanworkflow) TYPE zif_jira=>pagebeanworkflow
      RAISING cx_static_check.
    METHODS parse_publishedworkflowid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(publishedworkflowid) TYPE zif_jira=>publishedworkflowid
      RAISING cx_static_check.
    METHODS parse_screenid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenid) TYPE zif_jira=>screenid
      RAISING cx_static_check.
    METHODS parse_transition
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(transition) TYPE zif_jira=>transition
      RAISING cx_static_check.
    METHODS parse_workflow
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflow) TYPE zif_jira=>workflow
      RAISING cx_static_check.
    METHODS parse_workflowrules
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowrules) TYPE zif_jira=>workflowrules
      RAISING cx_static_check.
    METHODS parse_workflowstatus
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowstatus) TYPE zif_jira=>workflowstatus
      RAISING cx_static_check.
    METHODS parse_workflowstatusproperties
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowstatusproperties) TYPE zif_jira=>workflowstatusproperties
      RAISING cx_static_check.
    METHODS parse_workflowtransitionrule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionrule) TYPE zif_jira=>workflowtransitionrule
      RAISING cx_static_check.
    METHODS parse_connectworkflowtransitio
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(connectworkflowtransitionrule) TYPE zif_jira=>connectworkflowtransitionrule
      RAISING cx_static_check.
    METHODS parse_pagebeanworkflowtransiti
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanworkflowtransitionrule) TYPE zif_jira=>pagebeanworkflowtransitionrule
      RAISING cx_static_check.
    METHODS parse_ruleconfiguration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ruleconfiguration) TYPE zif_jira=>ruleconfiguration
      RAISING cx_static_check.
    METHODS parse_workflowid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowid) TYPE zif_jira=>workflowid
      RAISING cx_static_check.
    METHODS parse_workflowtransition
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransition) TYPE zif_jira=>workflowtransition
      RAISING cx_static_check.
    METHODS parse_workflowtransitionrules
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionrules) TYPE zif_jira=>workflowtransitionrules
      RAISING cx_static_check.
    METHODS parse_workflowtransitionrulesu
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionrulesupdate) TYPE zif_jira=>workflowtransitionrulesupdate
      RAISING cx_static_check.
    METHODS parse_workflowtransitionrule01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionrulesupdatee) TYPE zif_jira=>workflowtransitionrulesupdatee
      RAISING cx_static_check.
    METHODS parse_workflowtransitionrule02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(workflowtransitionrulesupdat01) TYPE zif_jira=>workflowtransitionrulesupdat01
      RAISING cx_static_check.
    METHODS parse_issuetypeinfo
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeinfo) TYPE zif_jira=>issuetypeinfo
      RAISING cx_static_check.
    METHODS parse_projectissuetypehierarch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuetypehierarchy) TYPE zif_jira=>projectissuetypehierarchy
      RAISING cx_static_check.
    METHODS parse_projectissuetypeshierarc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuetypeshierarchyleve) TYPE zif_jira=>projectissuetypeshierarchyleve
      RAISING cx_static_check.
    METHODS parse_pagebeanuserkey
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanuserkey) TYPE zif_jira=>pagebeanuserkey
      RAISING cx_static_check.
    METHODS parse_userkey
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userkey) TYPE zif_jira=>userkey
      RAISING cx_static_check.
    METHODS parse_changedetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(changedetails) TYPE zif_jira=>changedetails
      RAISING cx_static_check.
    METHODS parse_changelog
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(changelog) TYPE zif_jira=>changelog
      RAISING cx_static_check.
    METHODS parse_fieldmetadata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldmetadata) TYPE zif_jira=>fieldmetadata
      RAISING cx_static_check.
    METHODS parse_historymetadata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(historymetadata) TYPE zif_jira=>historymetadata
      RAISING cx_static_check.
    METHODS parse_historymetadataparticipa
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(historymetadataparticipant) TYPE zif_jira=>historymetadataparticipant
      RAISING cx_static_check.
    METHODS parse_includedfields
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(includedfields) TYPE zif_jira=>includedfields
      RAISING cx_static_check.
    METHODS parse_issuebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuebean) TYPE zif_jira=>issuebean
      RAISING cx_static_check.
    METHODS parse_issuetransition
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetransition) TYPE zif_jira=>issuetransition
      RAISING cx_static_check.
    METHODS parse_issueupdatemetadata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issueupdatemetadata) TYPE zif_jira=>issueupdatemetadata
      RAISING cx_static_check.
    METHODS parse_linkgroup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(linkgroup) TYPE zif_jira=>linkgroup
      RAISING cx_static_check.
    METHODS parse_operations
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(operations) TYPE zif_jira=>operations
      RAISING cx_static_check.
    METHODS parse_pageofchangelogs
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pageofchangelogs) TYPE zif_jira=>pageofchangelogs
      RAISING cx_static_check.
    METHODS parse_searchresults
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(searchresults) TYPE zif_jira=>searchresults
      RAISING cx_static_check.
    METHODS parse_statuscategory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(statuscategory) TYPE zif_jira=>statuscategory
      RAISING cx_static_check.
    METHODS parse_statusdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(statusdetails) TYPE zif_jira=>statusdetails
      RAISING cx_static_check.
    METHODS parse_searchrequestbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(searchrequestbean) TYPE zif_jira=>searchrequestbean
      RAISING cx_static_check.
    METHODS parse_fieldreferencedata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldreferencedata) TYPE zif_jira=>fieldreferencedata
      RAISING cx_static_check.
    METHODS parse_functionreferencedata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(functionreferencedata) TYPE zif_jira=>functionreferencedata
      RAISING cx_static_check.
    METHODS parse_jqlreferencedata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlreferencedata) TYPE zif_jira=>jqlreferencedata
      RAISING cx_static_check.
    METHODS parse_autocompletesuggestion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(autocompletesuggestion) TYPE zif_jira=>autocompletesuggestion
      RAISING cx_static_check.
    METHODS parse_autocompletesuggestions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(autocompletesuggestions) TYPE zif_jira=>autocompletesuggestions
      RAISING cx_static_check.
    METHODS parse_jqlpersonaldatamigration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlpersonaldatamigrationreques) TYPE zif_jira=>jqlpersonaldatamigrationreques
      RAISING cx_static_check.
    METHODS parse_convertedjqlqueries
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(convertedjqlqueries) TYPE zif_jira=>convertedjqlqueries
      RAISING cx_static_check.
    METHODS parse_jqlquerywithunknownusers
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlquerywithunknownusers) TYPE zif_jira=>jqlquerywithunknownusers
      RAISING cx_static_check.
    METHODS parse_filter
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(filter) TYPE zif_jira=>filter
      RAISING cx_static_check.
    METHODS parse_filtersubscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(filtersubscription) TYPE zif_jira=>filtersubscription
      RAISING cx_static_check.
    METHODS parse_filtersubscriptionslist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(filtersubscriptionslist) TYPE zif_jira=>filtersubscriptionslist
      RAISING cx_static_check.
    METHODS parse_userlist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userlist) TYPE zif_jira=>userlist
      RAISING cx_static_check.
    METHODS parse_filterdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(filterdetails) TYPE zif_jira=>filterdetails
      RAISING cx_static_check.
    METHODS parse_pagebeanfilterdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfilterdetails) TYPE zif_jira=>pagebeanfilterdetails
      RAISING cx_static_check.
    METHODS parse_defaultsharescope
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(defaultsharescope) TYPE zif_jira=>defaultsharescope
      RAISING cx_static_check.
    METHODS parse_sharepermissioninputbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(sharepermissioninputbean) TYPE zif_jira=>sharepermissioninputbean
      RAISING cx_static_check.
    METHODS parse_customfieldreplacement
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldreplacement) TYPE zif_jira=>customfieldreplacement
      RAISING cx_static_check.
    METHODS parse_deleteandreplaceversionb
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deleteandreplaceversionbean) TYPE zif_jira=>deleteandreplaceversionbean
      RAISING cx_static_check.
    METHODS parse_versionissuecounts
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(versionissuecounts) TYPE zif_jira=>versionissuecounts
      RAISING cx_static_check.
    METHODS parse_versionusageincustomfiel
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(versionusageincustomfield) TYPE zif_jira=>versionusageincustomfield
      RAISING cx_static_check.
    METHODS parse_versionunresolvedissuesc
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(versionunresolvedissuescount) TYPE zif_jira=>versionunresolvedissuescount
      RAISING cx_static_check.
    METHODS parse_versionmovebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(versionmovebean) TYPE zif_jira=>versionmovebean
      RAISING cx_static_check.
    METHODS parse_foundusers
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(foundusers) TYPE zif_jira=>foundusers
      RAISING cx_static_check.
    METHODS parse_userpickeruser
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userpickeruser) TYPE zif_jira=>userpickeruser
      RAISING cx_static_check.
    METHODS parse_userwritebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(userwritebean) TYPE zif_jira=>userwritebean
      RAISING cx_static_check.
    METHODS parse_avatar
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(avatar) TYPE zif_jira=>avatar
      RAISING cx_static_check.
    METHODS parse_avatars
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(avatars) TYPE zif_jira=>avatars
      RAISING cx_static_check.
    METHODS parse_screenabletab
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenabletab) TYPE zif_jira=>screenabletab
      RAISING cx_static_check.
    METHODS parse_pagebeanscreen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanscreen) TYPE zif_jira=>pagebeanscreen
      RAISING cx_static_check.
    METHODS parse_screen
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screen) TYPE zif_jira=>screen
      RAISING cx_static_check.
    METHODS parse_screenablefield
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenablefield) TYPE zif_jira=>screenablefield
      RAISING cx_static_check.
    METHODS parse_movefieldbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(movefieldbean) TYPE zif_jira=>movefieldbean
      RAISING cx_static_check.
    METHODS parse_addfieldbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(addfieldbean) TYPE zif_jira=>addfieldbean
      RAISING cx_static_check.
    METHODS parse_screendetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screendetails) TYPE zif_jira=>screendetails
      RAISING cx_static_check.
    METHODS parse_updatescreendetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatescreendetails) TYPE zif_jira=>updatescreendetails
      RAISING cx_static_check.
    METHODS parse_resolution
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(resolution) TYPE zif_jira=>resolution
      RAISING cx_static_check.
    METHODS parse_projectinputbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectinputbean) TYPE zif_jira=>projectinputbean
      RAISING cx_static_check.
    METHODS parse_projectidentifiers
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectidentifiers) TYPE zif_jira=>projectidentifiers
      RAISING cx_static_check.
    METHODS parse_pagebeanversion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanversion) TYPE zif_jira=>pagebeanversion
      RAISING cx_static_check.
    METHODS parse_componentwithissuecount
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(componentwithissuecount) TYPE zif_jira=>componentwithissuecount
      RAISING cx_static_check.
    METHODS parse_pagebeancomponentwithiss
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancomponentwithissuecoun) TYPE zif_jira=>pagebeancomponentwithissuecoun
      RAISING cx_static_check.
    METHODS parse_stringlist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(stringlist) TYPE zif_jira=>stringlist
      RAISING cx_static_check.
    METHODS parse_pagebeanproject
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanproject) TYPE zif_jira=>pagebeanproject
      RAISING cx_static_check.
    METHODS parse_projectavatars
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectavatars) TYPE zif_jira=>projectavatars
      RAISING cx_static_check.
    METHODS parse_issuetypewithstatus
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypewithstatus) TYPE zif_jira=>issuetypewithstatus
      RAISING cx_static_check.
    METHODS parse_securityscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(securityscheme) TYPE zif_jira=>securityscheme
      RAISING cx_static_check.
    METHODS parse_priority
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(priority) TYPE zif_jira=>priority
      RAISING cx_static_check.
    METHODS parse_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(comment) TYPE zif_jira=>comment
      RAISING cx_static_check.
    METHODS parse_fields
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fields) TYPE zif_jira=>fields
      RAISING cx_static_check.
    METHODS parse_issuelinktype
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuelinktype) TYPE zif_jira=>issuelinktype
      RAISING cx_static_check.
    METHODS parse_linkissuerequestjsonbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(linkissuerequestjsonbean) TYPE zif_jira=>linkissuerequestjsonbean
      RAISING cx_static_check.
    METHODS parse_linkedissue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(linkedissue) TYPE zif_jira=>linkedissue
      RAISING cx_static_check.
    METHODS parse_richtext
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(richtext) TYPE zif_jira=>richtext
      RAISING cx_static_check.
    METHODS parse_timetrackingdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(timetrackingdetails) TYPE zif_jira=>timetrackingdetails
      RAISING cx_static_check.
    METHODS parse_visibility
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(visibility) TYPE zif_jira=>visibility
      RAISING cx_static_check.
    METHODS parse_issuelink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuelink) TYPE zif_jira=>issuelink
      RAISING cx_static_check.
    METHODS parse_pageofworklogs
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pageofworklogs) TYPE zif_jira=>pageofworklogs
      RAISING cx_static_check.
    METHODS parse_worklog
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(worklog) TYPE zif_jira=>worklog
      RAISING cx_static_check.
    METHODS parse_issuetypecreatebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypecreatebean) TYPE zif_jira=>issuetypecreatebean
      RAISING cx_static_check.
    METHODS parse_issuetypeupdatebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeupdatebean) TYPE zif_jira=>issuetypeupdatebean
      RAISING cx_static_check.
    METHODS parse_securityschemes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(securityschemes) TYPE zif_jira=>securityschemes
      RAISING cx_static_check.
    METHODS parse_issuesecuritylevelmember
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuesecuritylevelmember) TYPE zif_jira=>issuesecuritylevelmember
      RAISING cx_static_check.
    METHODS parse_pagebeanissuesecuritylev
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuesecuritylevelmemb) TYPE zif_jira=>pagebeanissuesecuritylevelmemb
      RAISING cx_static_check.
    METHODS parse_transitions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(transitions) TYPE zif_jira=>transitions
      RAISING cx_static_check.
    METHODS parse_issuepickersuggestions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuepickersuggestions) TYPE zif_jira=>issuepickersuggestions
      RAISING cx_static_check.
    METHODS parse_issuepickersuggestionsis
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuepickersuggestionsissuetyp) TYPE zif_jira=>issuepickersuggestionsissuetyp
      RAISING cx_static_check.
    METHODS parse_suggestedissue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(suggestedissue) TYPE zif_jira=>suggestedissue
      RAISING cx_static_check.
    METHODS parse_fieldupdateoperation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldupdateoperation) TYPE zif_jira=>fieldupdateoperation
      RAISING cx_static_check.
    METHODS parse_issueupdatedetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issueupdatedetails) TYPE zif_jira=>issueupdatedetails
      RAISING cx_static_check.
    METHODS parse_votes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(votes) TYPE zif_jira=>votes
      RAISING cx_static_check.
    METHODS parse_watchers
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(watchers) TYPE zif_jira=>watchers
      RAISING cx_static_check.
    METHODS parse_createdissue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createdissue) TYPE zif_jira=>createdissue
      RAISING cx_static_check.
    METHODS parse_nestedresponse
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(nestedresponse) TYPE zif_jira=>nestedresponse
      RAISING cx_static_check.
    METHODS parse_issuesupdatebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuesupdatebean) TYPE zif_jira=>issuesupdatebean
      RAISING cx_static_check.
    METHODS parse_bulkoperationerrorresult
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkoperationerrorresult) TYPE zif_jira=>bulkoperationerrorresult
      RAISING cx_static_check.
    METHODS parse_createdissues
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createdissues) TYPE zif_jira=>createdissues
      RAISING cx_static_check.
    METHODS parse_issuecreatemetadata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuecreatemetadata) TYPE zif_jira=>issuecreatemetadata
      RAISING cx_static_check.
    METHODS parse_issuetypeissuecreatemeta
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeissuecreatemetadata) TYPE zif_jira=>issuetypeissuecreatemetadata
      RAISING cx_static_check.
    METHODS parse_projectissuecreatemetada
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuecreatemetadata) TYPE zif_jira=>projectissuecreatemetadata
      RAISING cx_static_check.
    METHODS parse_application
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(application) TYPE zif_jira=>application
      RAISING cx_static_check.
    METHODS parse_iconbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(iconbean) TYPE zif_jira=>iconbean
      RAISING cx_static_check.
    METHODS parse_remoteissuelink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(remoteissuelink) TYPE zif_jira=>remoteissuelink
      RAISING cx_static_check.
    METHODS parse_remoteobject
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(remoteobject) TYPE zif_jira=>remoteobject
      RAISING cx_static_check.
    METHODS parse_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status) TYPE zif_jira=>status
      RAISING cx_static_check.
    METHODS parse_icon
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(icon) TYPE zif_jira=>icon
      RAISING cx_static_check.
    METHODS parse_remoteissuelinkrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(remoteissuelinkrequest) TYPE zif_jira=>remoteissuelinkrequest
      RAISING cx_static_check.
    METHODS parse_remoteissuelinkidentifie
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(remoteissuelinkidentifies) TYPE zif_jira=>remoteissuelinkidentifies
      RAISING cx_static_check.
    METHODS parse_notification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notification) TYPE zif_jira=>notification
      RAISING cx_static_check.
    METHODS parse_notificationrecipients
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notificationrecipients) TYPE zif_jira=>notificationrecipients
      RAISING cx_static_check.
    METHODS parse_notificationrecipientsre
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(notificationrecipientsrestrict) TYPE zif_jira=>notificationrecipientsrestrict
      RAISING cx_static_check.
    METHODS parse_restrictedpermission
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(restrictedpermission) TYPE zif_jira=>restrictedpermission
      RAISING cx_static_check.
    METHODS parse_issuelinktypes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuelinktypes) TYPE zif_jira=>issuelinktypes
      RAISING cx_static_check.
    METHODS parse_pageofcomments
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pageofcomments) TYPE zif_jira=>pageofcomments
      RAISING cx_static_check.
    METHODS parse_paginatedresponsecomment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(paginatedresponsecomment) TYPE zif_jira=>paginatedresponsecomment
      RAISING cx_static_check.
    METHODS parse_issuecommentlistrequestb
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuecommentlistrequestbean) TYPE zif_jira=>issuecommentlistrequestbean
      RAISING cx_static_check.
    METHODS parse_pagebeancomment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancomment) TYPE zif_jira=>pagebeancomment
      RAISING cx_static_check.
    METHODS parse_pagebeanchangelog
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanchangelog) TYPE zif_jira=>pagebeanchangelog
      RAISING cx_static_check.
    METHODS parse_attachment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachment) TYPE zif_jira=>attachment
      RAISING cx_static_check.
    METHODS parse_group
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(group) TYPE zif_jira=>group
      RAISING cx_static_check.
    METHODS parse_pagedlistuserdetailsappl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagedlistuserdetailsapplicatio) TYPE zif_jira=>pagedlistuserdetailsapplicatio
      RAISING cx_static_check.
    METHODS parse_pagebeanuserdetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanuserdetails) TYPE zif_jira=>pagebeanuserdetails
      RAISING cx_static_check.
    METHODS parse_addgroupbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(addgroupbean) TYPE zif_jira=>addgroupbean
      RAISING cx_static_check.
    METHODS parse_updateusertogroupbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updateusertogroupbean) TYPE zif_jira=>updateusertogroupbean
      RAISING cx_static_check.
    METHODS parse_foundgroup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(foundgroup) TYPE zif_jira=>foundgroup
      RAISING cx_static_check.
    METHODS parse_foundgroups
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(foundgroups) TYPE zif_jira=>foundgroups
      RAISING cx_static_check.
    METHODS parse_grouplabel
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(grouplabel) TYPE zif_jira=>grouplabel
      RAISING cx_static_check.
    METHODS parse_foundusersandgroups
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(foundusersandgroups) TYPE zif_jira=>foundusersandgroups
      RAISING cx_static_check.
    METHODS parse_customfielddefinitionjso
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfielddefinitionjsonbean) TYPE zif_jira=>customfielddefinitionjsonbean
      RAISING cx_static_check.
    METHODS parse_context
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(context) TYPE zif_jira=>context
      RAISING cx_static_check.
    METHODS parse_pagebeancontext
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancontext) TYPE zif_jira=>pagebeancontext
      RAISING cx_static_check.
    METHODS parse_customfieldcontextoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldcontextoption) TYPE zif_jira=>customfieldcontextoption
      RAISING cx_static_check.
    METHODS parse_pagebeancustomfieldconte
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancustomfieldcontextopti) TYPE zif_jira=>pagebeancustomfieldcontextopti
      RAISING cx_static_check.
    METHODS parse_bulkcustomfieldoptioncre
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkcustomfieldoptioncreatereq) TYPE zif_jira=>bulkcustomfieldoptioncreatereq
      RAISING cx_static_check.
    METHODS parse_customfieldoptioncreate
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldoptioncreate) TYPE zif_jira=>customfieldoptioncreate
      RAISING cx_static_check.
    METHODS parse_customfieldcreatedcontex
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldcreatedcontextoptio) TYPE zif_jira=>customfieldcreatedcontextoptio
      RAISING cx_static_check.
    METHODS parse_orderofcustomfieldoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(orderofcustomfieldoptions) TYPE zif_jira=>orderofcustomfieldoptions
      RAISING cx_static_check.
    METHODS parse_bulkcustomfieldoptionupd
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkcustomfieldoptionupdatereq) TYPE zif_jira=>bulkcustomfieldoptionupdatereq
      RAISING cx_static_check.
    METHODS parse_customfieldoptionupdate
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldoptionupdate) TYPE zif_jira=>customfieldoptionupdate
      RAISING cx_static_check.
    METHODS parse_customfieldupdatedcontex
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldupdatedcontextoptio) TYPE zif_jira=>customfieldupdatedcontextoptio
      RAISING cx_static_check.
    METHODS parse_componentissuescount
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(componentissuescount) TYPE zif_jira=>componentissuescount
      RAISING cx_static_check.
    METHODS parse_bulkcreatecustomfieldopt
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(bulkcreatecustomfieldoptionreq) TYPE zif_jira=>bulkcreatecustomfieldoptionreq
      RAISING cx_static_check.
    METHODS parse_customfieldoptionvalue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldoptionvalue) TYPE zif_jira=>customfieldoptionvalue
      RAISING cx_static_check.
    METHODS parse_renamedcascadingoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(renamedcascadingoption) TYPE zif_jira=>renamedcascadingoption
      RAISING cx_static_check.
    METHODS parse_renamedoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(renamedoption) TYPE zif_jira=>renamedoption
      RAISING cx_static_check.
    METHODS parse_updatecustomfieldoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatecustomfieldoption) TYPE zif_jira=>updatecustomfieldoption
      RAISING cx_static_check.
    METHODS parse_customfieldoptiondetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldoptiondetails) TYPE zif_jira=>customfieldoptiondetails
      RAISING cx_static_check.
    METHODS parse_pagebeancustomfieldoptio
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancustomfieldoptiondetai) TYPE zif_jira=>pagebeancustomfieldoptiondetai
      RAISING cx_static_check.
    METHODS parse_systemavatars
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(systemavatars) TYPE zif_jira=>systemavatars
      RAISING cx_static_check.
    METHODS parse_globalscopebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(globalscopebean) TYPE zif_jira=>globalscopebean
      RAISING cx_static_check.
    METHODS parse_issuefieldoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefieldoption) TYPE zif_jira=>issuefieldoption
      RAISING cx_static_check.
    METHODS parse_issuefieldoptionconfigur
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefieldoptionconfiguration) TYPE zif_jira=>issuefieldoptionconfiguration
      RAISING cx_static_check.
    METHODS parse_issuefieldoptionscopebea
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefieldoptionscopebean) TYPE zif_jira=>issuefieldoptionscopebean
      RAISING cx_static_check.
    METHODS parse_pagebeanissuefieldoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuefieldoption) TYPE zif_jira=>pagebeanissuefieldoption
      RAISING cx_static_check.
    METHODS parse_projectscopebean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectscopebean) TYPE zif_jira=>projectscopebean
      RAISING cx_static_check.
    METHODS parse_issuefieldoptioncreatebe
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuefieldoptioncreatebean) TYPE zif_jira=>issuefieldoptioncreatebean
      RAISING cx_static_check.
    METHODS parse_removeoptionfromissuesre
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(removeoptionfromissuesresult) TYPE zif_jira=>removeoptionfromissuesresult
      RAISING cx_static_check.
    METHODS parse_simpleerrorcollection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simpleerrorcollection) TYPE zif_jira=>simpleerrorcollection
      RAISING cx_static_check.
    METHODS parse_taskprogressbeanremoveop
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(taskprogressbeanremoveoptionfr) TYPE zif_jira=>taskprogressbeanremoveoptionfr
      RAISING cx_static_check.
    METHODS parse_field
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(field) TYPE zif_jira=>field
      RAISING cx_static_check.
    METHODS parse_fieldlastused
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldlastused) TYPE zif_jira=>fieldlastused
      RAISING cx_static_check.
    METHODS parse_pagebeanfield
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfield) TYPE zif_jira=>pagebeanfield
      RAISING cx_static_check.
    METHODS parse_fieldconfigurationscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfigurationscheme) TYPE zif_jira=>fieldconfigurationscheme
      RAISING cx_static_check.
    METHODS parse_pagebeanfieldconfigurati
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfieldconfigurationsche) TYPE zif_jira=>pagebeanfieldconfigurationsche
      RAISING cx_static_check.
    METHODS parse_fieldconfigurationissuet
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfigurationissuetypeite) TYPE zif_jira=>fieldconfigurationissuetypeite
      RAISING cx_static_check.
    METHODS parse_pagebeanfieldconfigura01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfieldconfigurationissu) TYPE zif_jira=>pagebeanfieldconfigurationissu
      RAISING cx_static_check.
    METHODS parse_fieldconfigurationsche01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfigurationschemeprojec) TYPE zif_jira=>fieldconfigurationschemeprojec
      RAISING cx_static_check.
    METHODS parse_pagebeanfieldconfigura02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfieldconfigurationsc01) TYPE zif_jira=>pagebeanfieldconfigurationsc01
      RAISING cx_static_check.
    METHODS parse_fieldconfigurationsche02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfigurationschemeproj01) TYPE zif_jira=>fieldconfigurationschemeproj01
      RAISING cx_static_check.
    METHODS parse_fieldconfiguration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfiguration) TYPE zif_jira=>fieldconfiguration
      RAISING cx_static_check.
    METHODS parse_pagebeanfieldconfigura03
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfieldconfiguration) TYPE zif_jira=>pagebeanfieldconfiguration
      RAISING cx_static_check.
    METHODS parse_fieldconfigurationitem
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldconfigurationitem) TYPE zif_jira=>fieldconfigurationitem
      RAISING cx_static_check.
    METHODS parse_pagebeanfieldconfigura04
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanfieldconfigurationitem) TYPE zif_jira=>pagebeanfieldconfigurationitem
      RAISING cx_static_check.
    METHODS parse_pagebeanscreenscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanscreenscheme) TYPE zif_jira=>pagebeanscreenscheme
      RAISING cx_static_check.
    METHODS parse_screenscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenscheme) TYPE zif_jira=>screenscheme
      RAISING cx_static_check.
    METHODS parse_screentypes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screentypes) TYPE zif_jira=>screentypes
      RAISING cx_static_check.
    METHODS parse_screenschemedetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenschemedetails) TYPE zif_jira=>screenschemedetails
      RAISING cx_static_check.
    METHODS parse_screenschemeid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(screenschemeid) TYPE zif_jira=>screenschemeid
      RAISING cx_static_check.
    METHODS parse_updatescreenschemedetail
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatescreenschemedetails) TYPE zif_jira=>updatescreenschemedetails
      RAISING cx_static_check.
    METHODS parse_updatescreentypes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatescreentypes) TYPE zif_jira=>updatescreentypes
      RAISING cx_static_check.
    METHODS parse_createupdaterolerequestb
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createupdaterolerequestbean) TYPE zif_jira=>createupdaterolerequestbean
      RAISING cx_static_check.
    METHODS parse_actorinputbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actorinputbean) TYPE zif_jira=>actorinputbean
      RAISING cx_static_check.
    METHODS parse_projectroleactorsupdateb
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectroleactorsupdatebean) TYPE zif_jira=>projectroleactorsupdatebean
      RAISING cx_static_check.
    METHODS parse_actorsmap
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actorsmap) TYPE zif_jira=>actorsmap
      RAISING cx_static_check.
    METHODS parse_projectroledetail
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectroledetail) TYPE zif_jira=>projectroledetail
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemeite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemeitem) TYPE zif_jira=>issuetypescreenschemeitem
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypescreens
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypescreenschemei) TYPE zif_jira=>pagebeanissuetypescreenschemei
      RAISING cx_static_check.
    METHODS parse_issuetypescreenscheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenscheme) TYPE zif_jira=>issuetypescreenscheme
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemespr
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemesprojects) TYPE zif_jira=>issuetypescreenschemesprojects
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypescree01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypescreenschemes) TYPE zif_jira=>pagebeanissuetypescreenschemes
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypescree02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypescreenscheme) TYPE zif_jira=>pagebeanissuetypescreenscheme
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemepro
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemeprojectas) TYPE zif_jira=>issuetypescreenschemeprojectas
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemedet
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemedetails) TYPE zif_jira=>issuetypescreenschemedetails
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschememap
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschememapping) TYPE zif_jira=>issuetypescreenschememapping
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemeid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemeid) TYPE zif_jira=>issuetypescreenschemeid
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemeupd
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschemeupdatedet) TYPE zif_jira=>issuetypescreenschemeupdatedet
      RAISING cx_static_check.
    METHODS parse_issuetypescreenschemem01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescreenschememappingde) TYPE zif_jira=>issuetypescreenschememappingde
      RAISING cx_static_check.
    METHODS parse_updatedefaultscreenschem
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(updatedefaultscreenscheme) TYPE zif_jira=>updatedefaultscreenscheme
      RAISING cx_static_check.
    METHODS parse_issuetypeids
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeids) TYPE zif_jira=>issuetypeids
      RAISING cx_static_check.
    METHODS parse_customfieldoption
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldoption) TYPE zif_jira=>customfieldoption
      RAISING cx_static_check.
    METHODS parse_customfieldcontextprojec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldcontextprojectmappi) TYPE zif_jira=>customfieldcontextprojectmappi
      RAISING cx_static_check.
    METHODS parse_pagebeancustomfieldcon01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancustomfieldcontextproj) TYPE zif_jira=>pagebeancustomfieldcontextproj
      RAISING cx_static_check.
    METHODS parse_customfieldcontext
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldcontext) TYPE zif_jira=>customfieldcontext
      RAISING cx_static_check.
    METHODS parse_pagebeancustomfieldcon02
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancustomfieldcontext) TYPE zif_jira=>pagebeancustomfieldcontext
      RAISING cx_static_check.
    METHODS parse_createcustomfieldcontext
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createcustomfieldcontext) TYPE zif_jira=>createcustomfieldcontext
      RAISING cx_static_check.
    METHODS parse_projectids
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectids) TYPE zif_jira=>projectids
      RAISING cx_static_check.
    METHODS parse_customfieldcontextupdate
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(customfieldcontextupdatedetail) TYPE zif_jira=>customfieldcontextupdatedetail
      RAISING cx_static_check.
    METHODS parse_projectissuetypemapping
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuetypemapping) TYPE zif_jira=>projectissuetypemapping
      RAISING cx_static_check.
    METHODS parse_projectissuetypemappings
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(projectissuetypemappings) TYPE zif_jira=>projectissuetypemappings
      RAISING cx_static_check.
    METHODS parse_contextforprojectandissu
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contextforprojectandissuetype) TYPE zif_jira=>contextforprojectandissuetype
      RAISING cx_static_check.
    METHODS parse_pagebeancontextforprojec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeancontextforprojectandis) TYPE zif_jira=>pagebeancontextforprojectandis
      RAISING cx_static_check.
    METHODS parse_issuetypetocontextmappin
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypetocontextmapping) TYPE zif_jira=>issuetypetocontextmapping
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypetoconte
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypetocontextmapp) TYPE zif_jira=>pagebeanissuetypetocontextmapp
      RAISING cx_static_check.
    METHODS parse_attachmentmetadata
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentmetadata) TYPE zif_jira=>attachmentmetadata
      RAISING cx_static_check.
    METHODS parse_attachmentsettings
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentsettings) TYPE zif_jira=>attachmentsettings
      RAISING cx_static_check.
    METHODS parse_attachmentarchiveentry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentarchiveentry) TYPE zif_jira=>attachmentarchiveentry
      RAISING cx_static_check.
    METHODS parse_attachmentarchiveimpl
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentarchiveimpl) TYPE zif_jira=>attachmentarchiveimpl
      RAISING cx_static_check.
    METHODS parse_attachmentarchive
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentarchive) TYPE zif_jira=>attachmentarchive
      RAISING cx_static_check.
    METHODS parse_attachmentarchiveitemrea
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentarchiveitemreadable) TYPE zif_jira=>attachmentarchiveitemreadable
      RAISING cx_static_check.
    METHODS parse_attachmentarchivemetadat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(attachmentarchivemetadatareada) TYPE zif_jira=>attachmentarchivemetadatareada
      RAISING cx_static_check.
    METHODS parse_changedworklog
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(changedworklog) TYPE zif_jira=>changedworklog
      RAISING cx_static_check.
    METHODS parse_changedworklogs
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(changedworklogs) TYPE zif_jira=>changedworklogs
      RAISING cx_static_check.
    METHODS parse_worklogidsrequestbean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(worklogidsrequestbean) TYPE zif_jira=>worklogidsrequestbean
      RAISING cx_static_check.
    METHODS parse_issuetypescheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypescheme) TYPE zif_jira=>issuetypescheme
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypescheme
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypescheme) TYPE zif_jira=>pagebeanissuetypescheme
      RAISING cx_static_check.
    METHODS parse_issuetypeschemeprojects
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschemeprojects) TYPE zif_jira=>issuetypeschemeprojects
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypeschemep
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypeschemeproject) TYPE zif_jira=>pagebeanissuetypeschemeproject
      RAISING cx_static_check.
    METHODS parse_issuetypeschememapping
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschememapping) TYPE zif_jira=>issuetypeschememapping
      RAISING cx_static_check.
    METHODS parse_pagebeanissuetypeschemem
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pagebeanissuetypeschememapping) TYPE zif_jira=>pagebeanissuetypeschememapping
      RAISING cx_static_check.
    METHODS parse_issuetypeschemeprojectas
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschemeprojectassociat) TYPE zif_jira=>issuetypeschemeprojectassociat
      RAISING cx_static_check.
    METHODS parse_issuetypeschemedetails
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschemedetails) TYPE zif_jira=>issuetypeschemedetails
      RAISING cx_static_check.
    METHODS parse_issuetypeschemeid
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschemeid) TYPE zif_jira=>issuetypeschemeid
      RAISING cx_static_check.
    METHODS parse_issuetypeids01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeids01) TYPE zif_jira=>issuetypeids01
      RAISING cx_static_check.
    METHODS parse_issuetypeschemeupdatedet
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuetypeschemeupdatedetails) TYPE zif_jira=>issuetypeschemeupdatedetails
      RAISING cx_static_check.
    METHODS parse_orderofissuetypes
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(orderofissuetypes) TYPE zif_jira=>orderofissuetypes
      RAISING cx_static_check.
    METHODS parse_jqlqueriestoparse
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueriestoparse) TYPE zif_jira=>jqlqueriestoparse
      RAISING cx_static_check.
    METHODS parse_compoundclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(compoundclause) TYPE zif_jira=>compoundclause
      RAISING cx_static_check.
    METHODS parse_fieldchangedclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldchangedclause) TYPE zif_jira=>fieldchangedclause
      RAISING cx_static_check.
    METHODS parse_fieldvalueclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldvalueclause) TYPE zif_jira=>fieldvalueclause
      RAISING cx_static_check.
    METHODS parse_fieldwasclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(fieldwasclause) TYPE zif_jira=>fieldwasclause
      RAISING cx_static_check.
    METHODS parse_functionoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(functionoperand) TYPE zif_jira=>functionoperand
      RAISING cx_static_check.
    METHODS parse_jqlquery
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlquery) TYPE zif_jira=>jqlquery
      RAISING cx_static_check.
    METHODS parse_jqlqueryclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryclause) TYPE zif_jira=>jqlqueryclause
      RAISING cx_static_check.
    METHODS parse_jqlqueryclauseoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryclauseoperand) TYPE zif_jira=>jqlqueryclauseoperand
      RAISING cx_static_check.
    METHODS parse_jqlqueryclausetimepredic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryclausetimepredicate) TYPE zif_jira=>jqlqueryclausetimepredicate
      RAISING cx_static_check.
    METHODS parse_jqlqueryfield
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryfield) TYPE zif_jira=>jqlqueryfield
      RAISING cx_static_check.
    METHODS parse_jqlqueryfieldentityprope
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryfieldentityproperty) TYPE zif_jira=>jqlqueryfieldentityproperty
      RAISING cx_static_check.
    METHODS parse_jqlqueryorderbyclause
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryorderbyclause) TYPE zif_jira=>jqlqueryorderbyclause
      RAISING cx_static_check.
    METHODS parse_jqlqueryorderbyclauseele
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryorderbyclauseelement) TYPE zif_jira=>jqlqueryorderbyclauseelement
      RAISING cx_static_check.
    METHODS parse_jqlqueryunitaryoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jqlqueryunitaryoperand) TYPE zif_jira=>jqlqueryunitaryoperand
      RAISING cx_static_check.
    METHODS parse_keywordoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(keywordoperand) TYPE zif_jira=>keywordoperand
      RAISING cx_static_check.
    METHODS parse_listoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(listoperand) TYPE zif_jira=>listoperand
      RAISING cx_static_check.
    METHODS parse_parsedjqlqueries
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(parsedjqlqueries) TYPE zif_jira=>parsedjqlqueries
      RAISING cx_static_check.
    METHODS parse_parsedjqlquery
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(parsedjqlquery) TYPE zif_jira=>parsedjqlquery
      RAISING cx_static_check.
    METHODS parse_valueoperand
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(valueoperand) TYPE zif_jira=>valueoperand
      RAISING cx_static_check.
    METHODS parse_idorkeybean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(idorkeybean) TYPE zif_jira=>idorkeybean
      RAISING cx_static_check.
    METHODS parse_jexpissues
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jexpissues) TYPE zif_jira=>jexpissues
      RAISING cx_static_check.
    METHODS parse_jexpjqlissues
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jexpjqlissues) TYPE zif_jira=>jexpjqlissues
      RAISING cx_static_check.
    METHODS parse_jiraexpressionevalcontex
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionevalcontextbean) TYPE zif_jira=>jiraexpressionevalcontextbean
      RAISING cx_static_check.
    METHODS parse_jiraexpressionevalreques
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionevalrequestbean) TYPE zif_jira=>jiraexpressionevalrequestbean
      RAISING cx_static_check.
    METHODS parse_issuesjqlmetadatabean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuesjqlmetadatabean) TYPE zif_jira=>issuesjqlmetadatabean
      RAISING cx_static_check.
    METHODS parse_issuesmetabean
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issuesmetabean) TYPE zif_jira=>issuesmetabean
      RAISING cx_static_check.
    METHODS parse_jiraexpressionevaluation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionevaluationmetada) TYPE zif_jira=>jiraexpressionevaluationmetada
      RAISING cx_static_check.
    METHODS parse_jiraexpressionresult
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionresult) TYPE zif_jira=>jiraexpressionresult
      RAISING cx_static_check.
    METHODS parse_jiraexpressionscomplexit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionscomplexitybean) TYPE zif_jira=>jiraexpressionscomplexitybean
      RAISING cx_static_check.
    METHODS parse_jiraexpressionscomplex01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionscomplexityvalue) TYPE zif_jira=>jiraexpressionscomplexityvalue
      RAISING cx_static_check.
    METHODS parse_jiraexpressionforanalysi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionforanalysis) TYPE zif_jira=>jiraexpressionforanalysis
      RAISING cx_static_check.
    METHODS parse_jiraexpressionanalysis
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionanalysis) TYPE zif_jira=>jiraexpressionanalysis
      RAISING cx_static_check.
    METHODS parse_jiraexpressioncomplexity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressioncomplexity) TYPE zif_jira=>jiraexpressioncomplexity
      RAISING cx_static_check.
    METHODS parse_jiraexpressionvalidation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionvalidationerror) TYPE zif_jira=>jiraexpressionvalidationerror
      RAISING cx_static_check.
    METHODS parse_jiraexpressionsanalysis
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(jiraexpressionsanalysis) TYPE zif_jira=>jiraexpressionsanalysis
      RAISING cx_static_check.
    METHODS parse_operationmessage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(operationmessage) TYPE zif_jira=>operationmessage
      RAISING cx_static_check.
    METHODS parse_errormessage
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(errormessage) TYPE zif_jira=>errormessage
      RAISING cx_static_check.
    METHODS parse_connectmodules
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(connectmodules) TYPE zif_jira=>connectmodules
      RAISING cx_static_check.
    METHODS parse_connectmodule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(connectmodule) TYPE zif_jira=>connectmodule
      RAISING cx_static_check.
ENDCLASS.

CLASS zcl_jira IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_healthcheckresult.
  ENDMETHOD.

  METHOD parse_serverinformation.
  ENDMETHOD.

  METHOD parse_issuesandjqlqueries.
  ENDMETHOD.

  METHOD parse_issuematches.
  ENDMETHOD.

  METHOD parse_issuematchesforjql.
  ENDMETHOD.

  METHOD parse_avatarurlsbean.
  ENDMETHOD.

  METHOD parse_eventnotification.
  ENDMETHOD.

  METHOD parse_fielddetails.
  ENDMETHOD.

  METHOD parse_groupname.
  ENDMETHOD.

  METHOD parse_jsontypebean.
  ENDMETHOD.

  METHOD parse_notificationevent.
  ENDMETHOD.

  METHOD parse_notificationscheme.
  ENDMETHOD.

  METHOD parse_notificationschemeevent.
  ENDMETHOD.

  METHOD parse_projectforscope.
  ENDMETHOD.

  METHOD parse_projectrole.
  ENDMETHOD.

  METHOD parse_projectrolegroup.
  ENDMETHOD.

  METHOD parse_projectroleuser.
  ENDMETHOD.

  METHOD parse_roleactor.
  ENDMETHOD.

  METHOD parse_scope.
  ENDMETHOD.

  METHOD parse_updatedprojectcategory.
  ENDMETHOD.

  METHOD parse_userdetails.
  ENDMETHOD.

  METHOD parse_pagebeannotificationsche.
  ENDMETHOD.

  METHOD parse_projectissuesecurityleve.
  ENDMETHOD.

  METHOD parse_securitylevel.
  ENDMETHOD.

  METHOD parse_pagebeanstring.
  ENDMETHOD.

  METHOD parse_groupdetails.
  ENDMETHOD.

  METHOD parse_pagebeangroupdetails.
  ENDMETHOD.

  METHOD parse_locale.
  ENDMETHOD.

  METHOD parse_failedwebhook.
  ENDMETHOD.

  METHOD parse_failedwebhooks.
  ENDMETHOD.

  METHOD parse_errorcollection.
  ENDMETHOD.

  METHOD parse_webhookdetails.
  ENDMETHOD.

  METHOD parse_webhookregistrationdetai.
  ENDMETHOD.

  METHOD parse_containerforregisteredwe.
  ENDMETHOD.

  METHOD parse_registeredwebhook.
  ENDMETHOD.

  METHOD parse_pagebeanwebhook.
  ENDMETHOD.

  METHOD parse_webhook.
  ENDMETHOD.

  METHOD parse_containerforwebhookids.
  ENDMETHOD.

  METHOD parse_webhooksexpirationdate.
  ENDMETHOD.

  METHOD parse_bulkissuepropertyupdater.
  ENDMETHOD.

  METHOD parse_issuefilterforbulkproper.
  ENDMETHOD.

  METHOD parse_issuefilterforbulkprop01.
  ENDMETHOD.

  METHOD parse_issueentityproperties.
  ENDMETHOD.

  METHOD parse_jsonnode.
  ENDMETHOD.

  METHOD parse_applicationrole.
  ENDMETHOD.

  METHOD parse_component.
  ENDMETHOD.

  METHOD parse_dashboard.
  ENDMETHOD.

  METHOD parse_hierarchy.
  ENDMETHOD.

  METHOD parse_hierarchylevel.
  ENDMETHOD.

  METHOD parse_issuetypedetails.
  ENDMETHOD.

  METHOD parse_listwrappercallbackappli.
  ENDMETHOD.

  METHOD parse_listwrappercallbackgroup.
  ENDMETHOD.

  METHOD parse_pageofdashboards.
  ENDMETHOD.

  METHOD parse_project.
  ENDMETHOD.

  METHOD parse_projectcategory.
  ENDMETHOD.

  METHOD parse_projectinsight.
  ENDMETHOD.

  METHOD parse_projectpermissions.
  ENDMETHOD.

  METHOD parse_sharepermission.
  ENDMETHOD.

  METHOD parse_simplelink.
  ENDMETHOD.

  METHOD parse_simplelistwrapperapplica.
  ENDMETHOD.

  METHOD parse_simplelistwrappergroupna.
  ENDMETHOD.

  METHOD parse_user.
  ENDMETHOD.

  METHOD parse_userbean.
  ENDMETHOD.

  METHOD parse_userbeanavatarurls.
  ENDMETHOD.

  METHOD parse_version.
  ENDMETHOD.

  METHOD parse_versionissuesstatus.
  ENDMETHOD.

  METHOD parse_pagebeandashboard.
  ENDMETHOD.

  METHOD parse_dashboarddetails.
  ENDMETHOD.

  METHOD parse_propertykey.
  ENDMETHOD.

  METHOD parse_propertykeys.
  ENDMETHOD.

  METHOD parse_entityproperty.
  ENDMETHOD.

  METHOD parse_projectemailaddress.
  ENDMETHOD.

  METHOD parse_projecttype.
  ENDMETHOD.

  METHOD parse_pagebeanuser.
  ENDMETHOD.

  METHOD parse_usermigrationbean.
  ENDMETHOD.

  METHOD parse_unrestricteduseremail.
  ENDMETHOD.

  METHOD parse_taskprogressbeanobject.
  ENDMETHOD.

  METHOD parse_idbean.
  ENDMETHOD.

  METHOD parse_permissiongrant.
  ENDMETHOD.

  METHOD parse_permissionholder.
  ENDMETHOD.

  METHOD parse_permissionscheme.
  ENDMETHOD.

  METHOD parse_permissions.
  ENDMETHOD.

  METHOD parse_userpermission.
  ENDMETHOD.

  METHOD parse_bulkpermissionsrequestbe.
  ENDMETHOD.

  METHOD parse_bulkprojectpermissions.
  ENDMETHOD.

  METHOD parse_bulkpermissiongrants.
  ENDMETHOD.

  METHOD parse_bulkprojectpermissiongra.
  ENDMETHOD.

  METHOD parse_permissionskeysbean.
  ENDMETHOD.

  METHOD parse_permittedprojects.
  ENDMETHOD.

  METHOD parse_projectidentifierbean.
  ENDMETHOD.

  METHOD parse_deprecatedworkflow.
  ENDMETHOD.

  METHOD parse_workflowtransitionproper.
  ENDMETHOD.

  METHOD parse_columnitem.
  ENDMETHOD.

  METHOD parse_configuration.
  ENDMETHOD.

  METHOD parse_timetrackingconfiguratio.
  ENDMETHOD.

  METHOD parse_applicationproperty.
  ENDMETHOD.

  METHOD parse_simpleapplicationpropert.
  ENDMETHOD.

  METHOD parse_permissionschemes.
  ENDMETHOD.

  METHOD parse_permissiongrants.
  ENDMETHOD.

  METHOD parse_associateditembean.
  ENDMETHOD.

  METHOD parse_auditrecordbean.
  ENDMETHOD.

  METHOD parse_auditrecords.
  ENDMETHOD.

  METHOD parse_changedvaluebean.
  ENDMETHOD.

  METHOD parse_pagebeanworkflowscheme.
  ENDMETHOD.

  METHOD parse_workflowscheme.
  ENDMETHOD.

  METHOD parse_issuetypesworkflowmappin.
  ENDMETHOD.

  METHOD parse_issuetypeworkflowmapping.
  ENDMETHOD.

  METHOD parse_defaultworkflow.
  ENDMETHOD.

  METHOD parse_containerofworkflowschem.
  ENDMETHOD.

  METHOD parse_workflowschemeassociatio.
  ENDMETHOD.

  METHOD parse_workflowschemeprojectass.
  ENDMETHOD.

  METHOD parse_timetrackingprovider.
  ENDMETHOD.

  METHOD parse_pagebeanworkflow.
  ENDMETHOD.

  METHOD parse_publishedworkflowid.
  ENDMETHOD.

  METHOD parse_screenid.
  ENDMETHOD.

  METHOD parse_transition.
  ENDMETHOD.

  METHOD parse_workflow.
  ENDMETHOD.

  METHOD parse_workflowrules.
  ENDMETHOD.

  METHOD parse_workflowstatus.
  ENDMETHOD.

  METHOD parse_workflowstatusproperties.
  ENDMETHOD.

  METHOD parse_workflowtransitionrule.
  ENDMETHOD.

  METHOD parse_connectworkflowtransitio.
  ENDMETHOD.

  METHOD parse_pagebeanworkflowtransiti.
  ENDMETHOD.

  METHOD parse_ruleconfiguration.
  ENDMETHOD.

  METHOD parse_workflowid.
  ENDMETHOD.

  METHOD parse_workflowtransition.
  ENDMETHOD.

  METHOD parse_workflowtransitionrules.
  ENDMETHOD.

  METHOD parse_workflowtransitionrulesu.
  ENDMETHOD.

  METHOD parse_workflowtransitionrule01.
  ENDMETHOD.

  METHOD parse_workflowtransitionrule02.
  ENDMETHOD.

  METHOD parse_issuetypeinfo.
  ENDMETHOD.

  METHOD parse_projectissuetypehierarch.
  ENDMETHOD.

  METHOD parse_projectissuetypeshierarc.
  ENDMETHOD.

  METHOD parse_pagebeanuserkey.
  ENDMETHOD.

  METHOD parse_userkey.
  ENDMETHOD.

  METHOD parse_changedetails.
  ENDMETHOD.

  METHOD parse_changelog.
  ENDMETHOD.

  METHOD parse_fieldmetadata.
  ENDMETHOD.

  METHOD parse_historymetadata.
  ENDMETHOD.

  METHOD parse_historymetadataparticipa.
  ENDMETHOD.

  METHOD parse_includedfields.
  ENDMETHOD.

  METHOD parse_issuebean.
  ENDMETHOD.

  METHOD parse_issuetransition.
  ENDMETHOD.

  METHOD parse_issueupdatemetadata.
  ENDMETHOD.

  METHOD parse_linkgroup.
  ENDMETHOD.

  METHOD parse_operations.
  ENDMETHOD.

  METHOD parse_pageofchangelogs.
  ENDMETHOD.

  METHOD parse_searchresults.
  ENDMETHOD.

  METHOD parse_statuscategory.
  ENDMETHOD.

  METHOD parse_statusdetails.
  ENDMETHOD.

  METHOD parse_searchrequestbean.
  ENDMETHOD.

  METHOD parse_fieldreferencedata.
  ENDMETHOD.

  METHOD parse_functionreferencedata.
  ENDMETHOD.

  METHOD parse_jqlreferencedata.
  ENDMETHOD.

  METHOD parse_autocompletesuggestion.
  ENDMETHOD.

  METHOD parse_autocompletesuggestions.
  ENDMETHOD.

  METHOD parse_jqlpersonaldatamigration.
  ENDMETHOD.

  METHOD parse_convertedjqlqueries.
  ENDMETHOD.

  METHOD parse_jqlquerywithunknownusers.
  ENDMETHOD.

  METHOD parse_filter.
  ENDMETHOD.

  METHOD parse_filtersubscription.
  ENDMETHOD.

  METHOD parse_filtersubscriptionslist.
  ENDMETHOD.

  METHOD parse_userlist.
  ENDMETHOD.

  METHOD parse_filterdetails.
  ENDMETHOD.

  METHOD parse_pagebeanfilterdetails.
  ENDMETHOD.

  METHOD parse_defaultsharescope.
  ENDMETHOD.

  METHOD parse_sharepermissioninputbean.
  ENDMETHOD.

  METHOD parse_customfieldreplacement.
  ENDMETHOD.

  METHOD parse_deleteandreplaceversionb.
  ENDMETHOD.

  METHOD parse_versionissuecounts.
  ENDMETHOD.

  METHOD parse_versionusageincustomfiel.
  ENDMETHOD.

  METHOD parse_versionunresolvedissuesc.
  ENDMETHOD.

  METHOD parse_versionmovebean.
  ENDMETHOD.

  METHOD parse_foundusers.
  ENDMETHOD.

  METHOD parse_userpickeruser.
  ENDMETHOD.

  METHOD parse_userwritebean.
  ENDMETHOD.

  METHOD parse_avatar.
  ENDMETHOD.

  METHOD parse_avatars.
  ENDMETHOD.

  METHOD parse_screenabletab.
  ENDMETHOD.

  METHOD parse_pagebeanscreen.
  ENDMETHOD.

  METHOD parse_screen.
  ENDMETHOD.

  METHOD parse_screenablefield.
  ENDMETHOD.

  METHOD parse_movefieldbean.
  ENDMETHOD.

  METHOD parse_addfieldbean.
  ENDMETHOD.

  METHOD parse_screendetails.
  ENDMETHOD.

  METHOD parse_updatescreendetails.
  ENDMETHOD.

  METHOD parse_resolution.
  ENDMETHOD.

  METHOD parse_projectinputbean.
  ENDMETHOD.

  METHOD parse_projectidentifiers.
  ENDMETHOD.

  METHOD parse_pagebeanversion.
  ENDMETHOD.

  METHOD parse_componentwithissuecount.
  ENDMETHOD.

  METHOD parse_pagebeancomponentwithiss.
  ENDMETHOD.

  METHOD parse_stringlist.
  ENDMETHOD.

  METHOD parse_pagebeanproject.
  ENDMETHOD.

  METHOD parse_projectavatars.
  ENDMETHOD.

  METHOD parse_issuetypewithstatus.
  ENDMETHOD.

  METHOD parse_securityscheme.
  ENDMETHOD.

  METHOD parse_priority.
  ENDMETHOD.

  METHOD parse_comment.
  ENDMETHOD.

  METHOD parse_fields.
  ENDMETHOD.

  METHOD parse_issuelinktype.
  ENDMETHOD.

  METHOD parse_linkissuerequestjsonbean.
  ENDMETHOD.

  METHOD parse_linkedissue.
  ENDMETHOD.

  METHOD parse_richtext.
  ENDMETHOD.

  METHOD parse_timetrackingdetails.
  ENDMETHOD.

  METHOD parse_visibility.
  ENDMETHOD.

  METHOD parse_issuelink.
  ENDMETHOD.

  METHOD parse_pageofworklogs.
  ENDMETHOD.

  METHOD parse_worklog.
  ENDMETHOD.

  METHOD parse_issuetypecreatebean.
  ENDMETHOD.

  METHOD parse_issuetypeupdatebean.
  ENDMETHOD.

  METHOD parse_securityschemes.
  ENDMETHOD.

  METHOD parse_issuesecuritylevelmember.
  ENDMETHOD.

  METHOD parse_pagebeanissuesecuritylev.
  ENDMETHOD.

  METHOD parse_transitions.
  ENDMETHOD.

  METHOD parse_issuepickersuggestions.
  ENDMETHOD.

  METHOD parse_issuepickersuggestionsis.
  ENDMETHOD.

  METHOD parse_suggestedissue.
  ENDMETHOD.

  METHOD parse_fieldupdateoperation.
  ENDMETHOD.

  METHOD parse_issueupdatedetails.
  ENDMETHOD.

  METHOD parse_votes.
  ENDMETHOD.

  METHOD parse_watchers.
  ENDMETHOD.

  METHOD parse_createdissue.
  ENDMETHOD.

  METHOD parse_nestedresponse.
  ENDMETHOD.

  METHOD parse_issuesupdatebean.
  ENDMETHOD.

  METHOD parse_bulkoperationerrorresult.
  ENDMETHOD.

  METHOD parse_createdissues.
  ENDMETHOD.

  METHOD parse_issuecreatemetadata.
  ENDMETHOD.

  METHOD parse_issuetypeissuecreatemeta.
  ENDMETHOD.

  METHOD parse_projectissuecreatemetada.
  ENDMETHOD.

  METHOD parse_application.
  ENDMETHOD.

  METHOD parse_iconbean.
  ENDMETHOD.

  METHOD parse_remoteissuelink.
  ENDMETHOD.

  METHOD parse_remoteobject.
  ENDMETHOD.

  METHOD parse_status.
  ENDMETHOD.

  METHOD parse_icon.
  ENDMETHOD.

  METHOD parse_remoteissuelinkrequest.
  ENDMETHOD.

  METHOD parse_remoteissuelinkidentifie.
  ENDMETHOD.

  METHOD parse_notification.
  ENDMETHOD.

  METHOD parse_notificationrecipients.
  ENDMETHOD.

  METHOD parse_notificationrecipientsre.
  ENDMETHOD.

  METHOD parse_restrictedpermission.
  ENDMETHOD.

  METHOD parse_issuelinktypes.
  ENDMETHOD.

  METHOD parse_pageofcomments.
  ENDMETHOD.

  METHOD parse_paginatedresponsecomment.
  ENDMETHOD.

  METHOD parse_issuecommentlistrequestb.
  ENDMETHOD.

  METHOD parse_pagebeancomment.
  ENDMETHOD.

  METHOD parse_pagebeanchangelog.
  ENDMETHOD.

  METHOD parse_attachment.
  ENDMETHOD.

  METHOD parse_group.
  ENDMETHOD.

  METHOD parse_pagedlistuserdetailsappl.
  ENDMETHOD.

  METHOD parse_pagebeanuserdetails.
  ENDMETHOD.

  METHOD parse_addgroupbean.
  ENDMETHOD.

  METHOD parse_updateusertogroupbean.
  ENDMETHOD.

  METHOD parse_foundgroup.
  ENDMETHOD.

  METHOD parse_foundgroups.
  ENDMETHOD.

  METHOD parse_grouplabel.
  ENDMETHOD.

  METHOD parse_foundusersandgroups.
  ENDMETHOD.

  METHOD parse_customfielddefinitionjso.
  ENDMETHOD.

  METHOD parse_context.
  ENDMETHOD.

  METHOD parse_pagebeancontext.
  ENDMETHOD.

  METHOD parse_customfieldcontextoption.
  ENDMETHOD.

  METHOD parse_pagebeancustomfieldconte.
  ENDMETHOD.

  METHOD parse_bulkcustomfieldoptioncre.
  ENDMETHOD.

  METHOD parse_customfieldoptioncreate.
  ENDMETHOD.

  METHOD parse_customfieldcreatedcontex.
  ENDMETHOD.

  METHOD parse_orderofcustomfieldoption.
  ENDMETHOD.

  METHOD parse_bulkcustomfieldoptionupd.
  ENDMETHOD.

  METHOD parse_customfieldoptionupdate.
  ENDMETHOD.

  METHOD parse_customfieldupdatedcontex.
  ENDMETHOD.

  METHOD parse_componentissuescount.
  ENDMETHOD.

  METHOD parse_bulkcreatecustomfieldopt.
  ENDMETHOD.

  METHOD parse_customfieldoptionvalue.
  ENDMETHOD.

  METHOD parse_renamedcascadingoption.
  ENDMETHOD.

  METHOD parse_renamedoption.
  ENDMETHOD.

  METHOD parse_updatecustomfieldoption.
  ENDMETHOD.

  METHOD parse_customfieldoptiondetails.
  ENDMETHOD.

  METHOD parse_pagebeancustomfieldoptio.
  ENDMETHOD.

  METHOD parse_systemavatars.
  ENDMETHOD.

  METHOD parse_globalscopebean.
  ENDMETHOD.

  METHOD parse_issuefieldoption.
  ENDMETHOD.

  METHOD parse_issuefieldoptionconfigur.
  ENDMETHOD.

  METHOD parse_issuefieldoptionscopebea.
  ENDMETHOD.

  METHOD parse_pagebeanissuefieldoption.
  ENDMETHOD.

  METHOD parse_projectscopebean.
  ENDMETHOD.

  METHOD parse_issuefieldoptioncreatebe.
  ENDMETHOD.

  METHOD parse_removeoptionfromissuesre.
  ENDMETHOD.

  METHOD parse_simpleerrorcollection.
  ENDMETHOD.

  METHOD parse_taskprogressbeanremoveop.
  ENDMETHOD.

  METHOD parse_field.
  ENDMETHOD.

  METHOD parse_fieldlastused.
  ENDMETHOD.

  METHOD parse_pagebeanfield.
  ENDMETHOD.

  METHOD parse_fieldconfigurationscheme.
  ENDMETHOD.

  METHOD parse_pagebeanfieldconfigurati.
  ENDMETHOD.

  METHOD parse_fieldconfigurationissuet.
  ENDMETHOD.

  METHOD parse_pagebeanfieldconfigura01.
  ENDMETHOD.

  METHOD parse_fieldconfigurationsche01.
  ENDMETHOD.

  METHOD parse_pagebeanfieldconfigura02.
  ENDMETHOD.

  METHOD parse_fieldconfigurationsche02.
  ENDMETHOD.

  METHOD parse_fieldconfiguration.
  ENDMETHOD.

  METHOD parse_pagebeanfieldconfigura03.
  ENDMETHOD.

  METHOD parse_fieldconfigurationitem.
  ENDMETHOD.

  METHOD parse_pagebeanfieldconfigura04.
  ENDMETHOD.

  METHOD parse_pagebeanscreenscheme.
  ENDMETHOD.

  METHOD parse_screenscheme.
  ENDMETHOD.

  METHOD parse_screentypes.
  ENDMETHOD.

  METHOD parse_screenschemedetails.
  ENDMETHOD.

  METHOD parse_screenschemeid.
  ENDMETHOD.

  METHOD parse_updatescreenschemedetail.
  ENDMETHOD.

  METHOD parse_updatescreentypes.
  ENDMETHOD.

  METHOD parse_createupdaterolerequestb.
  ENDMETHOD.

  METHOD parse_actorinputbean.
  ENDMETHOD.

  METHOD parse_projectroleactorsupdateb.
  ENDMETHOD.

  METHOD parse_actorsmap.
  ENDMETHOD.

  METHOD parse_projectroledetail.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemeite.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypescreens.
  ENDMETHOD.

  METHOD parse_issuetypescreenscheme.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemespr.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypescree01.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypescree02.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemepro.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemedet.
  ENDMETHOD.

  METHOD parse_issuetypescreenschememap.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemeid.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemeupd.
  ENDMETHOD.

  METHOD parse_issuetypescreenschemem01.
  ENDMETHOD.

  METHOD parse_updatedefaultscreenschem.
  ENDMETHOD.

  METHOD parse_issuetypeids.
  ENDMETHOD.

  METHOD parse_customfieldoption.
  ENDMETHOD.

  METHOD parse_customfieldcontextprojec.
  ENDMETHOD.

  METHOD parse_pagebeancustomfieldcon01.
  ENDMETHOD.

  METHOD parse_customfieldcontext.
  ENDMETHOD.

  METHOD parse_pagebeancustomfieldcon02.
  ENDMETHOD.

  METHOD parse_createcustomfieldcontext.
  ENDMETHOD.

  METHOD parse_projectids.
  ENDMETHOD.

  METHOD parse_customfieldcontextupdate.
  ENDMETHOD.

  METHOD parse_projectissuetypemapping.
  ENDMETHOD.

  METHOD parse_projectissuetypemappings.
  ENDMETHOD.

  METHOD parse_contextforprojectandissu.
  ENDMETHOD.

  METHOD parse_pagebeancontextforprojec.
  ENDMETHOD.

  METHOD parse_issuetypetocontextmappin.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypetoconte.
  ENDMETHOD.

  METHOD parse_attachmentmetadata.
  ENDMETHOD.

  METHOD parse_attachmentsettings.
  ENDMETHOD.

  METHOD parse_attachmentarchiveentry.
  ENDMETHOD.

  METHOD parse_attachmentarchiveimpl.
  ENDMETHOD.

  METHOD parse_attachmentarchive.
  ENDMETHOD.

  METHOD parse_attachmentarchiveitemrea.
  ENDMETHOD.

  METHOD parse_attachmentarchivemetadat.
  ENDMETHOD.

  METHOD parse_changedworklog.
  ENDMETHOD.

  METHOD parse_changedworklogs.
  ENDMETHOD.

  METHOD parse_worklogidsrequestbean.
  ENDMETHOD.

  METHOD parse_issuetypescheme.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypescheme.
  ENDMETHOD.

  METHOD parse_issuetypeschemeprojects.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypeschemep.
  ENDMETHOD.

  METHOD parse_issuetypeschememapping.
  ENDMETHOD.

  METHOD parse_pagebeanissuetypeschemem.
  ENDMETHOD.

  METHOD parse_issuetypeschemeprojectas.
  ENDMETHOD.

  METHOD parse_issuetypeschemedetails.
  ENDMETHOD.

  METHOD parse_issuetypeschemeid.
  ENDMETHOD.

  METHOD parse_issuetypeids01.
  ENDMETHOD.

  METHOD parse_issuetypeschemeupdatedet.
  ENDMETHOD.

  METHOD parse_orderofissuetypes.
  ENDMETHOD.

  METHOD parse_jqlqueriestoparse.
  ENDMETHOD.

  METHOD parse_compoundclause.
  ENDMETHOD.

  METHOD parse_fieldchangedclause.
  ENDMETHOD.

  METHOD parse_fieldvalueclause.
  ENDMETHOD.

  METHOD parse_fieldwasclause.
  ENDMETHOD.

  METHOD parse_functionoperand.
  ENDMETHOD.

  METHOD parse_jqlquery.
  ENDMETHOD.

  METHOD parse_jqlqueryclause.
  ENDMETHOD.

  METHOD parse_jqlqueryclauseoperand.
  ENDMETHOD.

  METHOD parse_jqlqueryclausetimepredic.
  ENDMETHOD.

  METHOD parse_jqlqueryfield.
  ENDMETHOD.

  METHOD parse_jqlqueryfieldentityprope.
  ENDMETHOD.

  METHOD parse_jqlqueryorderbyclause.
  ENDMETHOD.

  METHOD parse_jqlqueryorderbyclauseele.
  ENDMETHOD.

  METHOD parse_jqlqueryunitaryoperand.
  ENDMETHOD.

  METHOD parse_keywordoperand.
  ENDMETHOD.

  METHOD parse_listoperand.
  ENDMETHOD.

  METHOD parse_parsedjqlqueries.
  ENDMETHOD.

  METHOD parse_parsedjqlquery.
  ENDMETHOD.

  METHOD parse_valueoperand.
  ENDMETHOD.

  METHOD parse_idorkeybean.
  ENDMETHOD.

  METHOD parse_jexpissues.
  ENDMETHOD.

  METHOD parse_jexpjqlissues.
  ENDMETHOD.

  METHOD parse_jiraexpressionevalcontex.
  ENDMETHOD.

  METHOD parse_jiraexpressionevalreques.
  ENDMETHOD.

  METHOD parse_issuesjqlmetadatabean.
  ENDMETHOD.

  METHOD parse_issuesmetabean.
  ENDMETHOD.

  METHOD parse_jiraexpressionevaluation.
  ENDMETHOD.

  METHOD parse_jiraexpressionresult.
  ENDMETHOD.

  METHOD parse_jiraexpressionscomplexit.
  ENDMETHOD.

  METHOD parse_jiraexpressionscomplex01.
  ENDMETHOD.

  METHOD parse_jiraexpressionforanalysi.
  ENDMETHOD.

  METHOD parse_jiraexpressionanalysis.
  ENDMETHOD.

  METHOD parse_jiraexpressioncomplexity.
  ENDMETHOD.

  METHOD parse_jiraexpressionvalidation.
  ENDMETHOD.

  METHOD parse_jiraexpressionsanalysis.
  ENDMETHOD.

  METHOD parse_operationmessage.
  ENDMETHOD.

  METHOD parse_errormessage.
  ENDMETHOD.

  METHOD parse_connectmodules.
  ENDMETHOD.

  METHOD parse_connectmodule.
  ENDMETHOD.

  METHOD zif_jira~getapplicationproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/application-properties'.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    IF permissionlevel IS SUPPLIED.
      mi_client->request->set_form_field( name = 'permissionLevel' value = permissionlevel ).
    ENDIF.
    IF keyfilter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'keyFilter' value = keyfilter ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getadvancedsettings.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/application-properties/advanced-settings'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setapplicationproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/application-properties/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_applicationproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallapplicationroles.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/applicationrole'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getapplicationrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/applicationrole/{key}'.
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH key.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_applicationrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~getattachmentmeta.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/attachment/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_attachmentsettings( '' ).
  ENDMETHOD.

  METHOD zif_jira~getattachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/attachment/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_attachmentmetadata( '' ).
  ENDMETHOD.

  METHOD zif_jira~removeattachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/attachment/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~expandattachmentforhumans.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/attachment/{id}/expand/human'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_attachmentarchivemetadat( '' ).
  ENDMETHOD.

  METHOD zif_jira~expandattachmentformachines.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/attachment/{id}/expand/raw'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_attachmentarchiveimpl( '' ).
  ENDMETHOD.

  METHOD zif_jira~getauditrecords.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/auditing/record'.
    IF offset IS SUPPLIED.
      mi_client->request->set_form_field( name = 'offset' value = offset ).
    ENDIF.
    IF limit IS SUPPLIED.
      mi_client->request->set_form_field( name = 'limit' value = limit ).
    ENDIF.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF from IS SUPPLIED.
      mi_client->request->set_form_field( name = 'from' value = from ).
    ENDIF.
    IF to IS SUPPLIED.
      mi_client->request->set_form_field( name = 'to' value = to ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_auditrecords( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallsystemavatars.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/avatar/{type}/system'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_systemavatars( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcommentsbyids.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/comment/list'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancomment( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcommentpropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/comment/{commentId}/properties'.
    REPLACE ALL OCCURRENCES OF '{commentId}' IN lv_uri WITH commentid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcommentproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/comment/{commentId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{commentId}' IN lv_uri WITH commentid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setcommentproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/comment/{commentId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{commentId}' IN lv_uri WITH commentid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletecommentproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/comment/{commentId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{commentId}' IN lv_uri WITH commentid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createcomponent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/component'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcomponent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/component/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_component( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatecomponent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/component/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_component( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletecomponent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/component/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF moveissuesto IS SUPPLIED.
      mi_client->request->set_form_field( name = 'moveIssuesTo' value = moveissuesto ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcomponentrelatedissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/component/{id}/relatedIssueCounts'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_componentissuescount( '' ).
  ENDMETHOD.

  METHOD zif_jira~getconfiguration.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_configuration( '' ).
  ENDMETHOD.

  METHOD zif_jira~getselectedtimetrackingimpleme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration/timetracking'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_timetrackingprovider( '' ).
  ENDMETHOD.

  METHOD zif_jira~selecttimetrackingimplementati.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration/timetracking'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getavailabletimetrackingimplem.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration/timetracking/list'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getsharedtimetrackingconfigura.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration/timetracking/options'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_timetrackingconfiguratio( '' ).
  ENDMETHOD.

  METHOD zif_jira~setsharedtimetrackingconfigura.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/configuration/timetracking/options'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_timetrackingconfiguratio( '' ).
  ENDMETHOD.

  METHOD zif_jira~getoptionsforfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/customField/{fieldId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancustomfieldoptio( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatecustomfieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/customField/{fieldId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createcustomfieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/customField/{fieldId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcustomfieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/customFieldOption/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_customfieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~getalldashboards.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pageofdashboards( '' ).
  ENDMETHOD.

  METHOD zif_jira~createdashboard.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_dashboard( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdashboardspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/search'.
    IF dashboardname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'dashboardName' value = dashboardname ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF owner IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owner' value = owner ).
    ENDIF.
    IF groupname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeandashboard( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdashboarditempropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties'.
    REPLACE ALL OCCURRENCES OF '{dashboardId}' IN lv_uri WITH dashboardid.
    REPLACE ALL OCCURRENCES OF '{itemId}' IN lv_uri WITH itemid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdashboarditemproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{dashboardId}' IN lv_uri WITH dashboardid.
    REPLACE ALL OCCURRENCES OF '{itemId}' IN lv_uri WITH itemid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setdashboarditemproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{dashboardId}' IN lv_uri WITH dashboardid.
    REPLACE ALL OCCURRENCES OF '{itemId}' IN lv_uri WITH itemid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletedashboarditemproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{dashboardId}' IN lv_uri WITH dashboardid.
    REPLACE ALL OCCURRENCES OF '{itemId}' IN lv_uri WITH itemid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getdashboard.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_dashboard( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatedashboard.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_dashboard( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletedashboard.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~copydashboard.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/dashboard/{id}/copy'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_dashboard( '' ).
  ENDMETHOD.

  METHOD zif_jira~analyseexpression.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/expression/analyse'.
    IF check IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check' value = check ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_jiraexpressionsanalysis( '' ).
  ENDMETHOD.

  METHOD zif_jira~evaluatejiraexpression.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/expression/eval'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_jiraexpressionresult( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfields.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createcustomfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getfieldspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/search'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfield( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcontextsforfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF isanyissuetype IS SUPPLIED.
      mi_client->request->set_form_field( name = 'isAnyIssueType' value = isanyissuetype ).
    ENDIF.
    IF isglobalcontext IS SUPPLIED.
      mi_client->request->set_form_field( name = 'isGlobalContext' value = isglobalcontext ).
    ENDIF.
    IF contextid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'contextId' value = contextid ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancustomfieldcon02( '' ).
  ENDMETHOD.

  METHOD zif_jira~createcustomfieldcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetypemappingsforcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/issueTypeMapping'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF contextid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'contextId' value = contextid ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypetoconte( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcustomfieldcontextsforproje.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/mapping'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancontextforprojec( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectcontextmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/projectmapping'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF contextid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'contextId' value = contextid ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancustomfieldcon01( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatecustomfieldcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletecustomfieldcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addissuetypestocontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removeissuetypesfromcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getoptionsforcontext.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    IF optionid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'optionId' value = optionid ).
    ENDIF.
    IF onlyoptions IS SUPPLIED.
      mi_client->request->set_form_field( name = 'onlyOptions' value = onlyoptions ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancustomfieldconte( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatecustomfieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_customfieldupdatedcontex( '' ).
  ENDMETHOD.

  METHOD zif_jira~createcustomfieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_customfieldcreatedcontex( '' ).
  ENDMETHOD.

  METHOD zif_jira~reordercustomfieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/option/move'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletecustomfieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    REPLACE ALL OCCURRENCES OF '{optionId}' IN lv_uri WITH optionid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~assignprojectstocustomfieldcon.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/project'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removecustomfieldcontextfrompr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    REPLACE ALL OCCURRENCES OF '{contextId}' IN lv_uri WITH contextid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcontextsforfielddeprecated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/contexts'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancontext( '' ).
  ENDMETHOD.

  METHOD zif_jira~getscreensforfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldId}/screens'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanscreen( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallissuefieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~createissuefieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~getselectableissuefieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/suggestions/edit'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~getvisibleissuefieldoptions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/suggestions/search'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuefieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/{optionId}'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    REPLACE ALL OCCURRENCES OF '{optionId}' IN lv_uri WITH optionid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateissuefieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/{optionId}'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    REPLACE ALL OCCURRENCES OF '{optionId}' IN lv_uri WITH optionid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuefieldoption( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteissuefieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/{optionId}'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    REPLACE ALL OCCURRENCES OF '{optionId}' IN lv_uri WITH optionid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~replaceissuefieldoption.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/field/{fieldKey}/option/{optionId}/issue'.
    REPLACE ALL OCCURRENCES OF '{fieldKey}' IN lv_uri WITH fieldkey.
    REPLACE ALL OCCURRENCES OF '{optionId}' IN lv_uri WITH optionid.
    IF replacewith IS SUPPLIED.
      mi_client->request->set_form_field( name = 'replaceWith' value = replacewith ).
    ENDIF.
    IF jql IS SUPPLIED.
      mi_client->request->set_form_field( name = 'jql' value = jql ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallfieldconfigurations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfiguration'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    IF isdefault IS SUPPLIED.
      mi_client->request->set_form_field( name = 'isDefault' value = isdefault ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfieldconfigura03( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfieldconfigurationitems.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfiguration/{id}/fields'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfieldconfigura04( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallfieldconfigurationscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfigurationscheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfieldconfigurati( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfieldconfigurationschememap.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfigurationscheme/mapping'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF fieldconfigurationschemeid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldConfigurationSchemeId' value = fieldconfigurationschemeid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfieldconfigura01( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfieldconfigurationschemepro.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfigurationscheme/project'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfieldconfigura02( '' ).
  ENDMETHOD.

  METHOD zif_jira~assignfieldconfigurationscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/fieldconfigurationscheme/project'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getfilters.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createfilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_filter( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdefaultsharescope.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/defaultShareScope'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_defaultsharescope( '' ).
  ENDMETHOD.

  METHOD zif_jira~setdefaultsharescope.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/defaultShareScope'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_defaultsharescope( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfavouritefilters.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/favourite'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getmyfilters.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/my'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF includefavourites IS SUPPLIED.
      mi_client->request->set_form_field( name = 'includeFavourites' value = includefavourites ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getfilterspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/search'.
    IF filtername IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filterName' value = filtername ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF owner IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owner' value = owner ).
    ENDIF.
    IF groupname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanfilterdetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_filter( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatefilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_filter( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletefilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/columns'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setcolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/columns'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~resetcolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/columns'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setfavouriteforfilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/favourite'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_filter( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletefavouriteforfilter.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/favourite'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_filter( '' ).
  ENDMETHOD.

  METHOD zif_jira~getsharepermissions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/permission'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addsharepermission.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/permission'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getsharepermission.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/permission/{permissionId}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{permissionId}' IN lv_uri WITH permissionid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_sharepermission( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletesharepermission.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/filter/{id}/permission/{permissionId}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{permissionId}' IN lv_uri WITH permissionid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getgroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group'.
    mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_group( '' ).
  ENDMETHOD.

  METHOD zif_jira~creategroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removegroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group'.
    mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    IF swapgroup IS SUPPLIED.
      mi_client->request->set_form_field( name = 'swapGroup' value = swapgroup ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~bulkgetgroups.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group/bulk'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF groupid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'groupId' value = groupid ).
    ENDIF.
    IF groupname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'groupName' value = groupname ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeangroupdetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~getusersfromgroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group/member'.
    mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    IF includeinactiveusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'includeInactiveUsers' value = includeinactiveusers ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanuserdetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~addusertogroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group/user'.
    mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removeuserfromgroup.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/group/user'.
    mi_client->request->set_form_field( name = 'groupname' value = groupname ).
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findgroups.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/groups/picker'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = exclude ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'userName' value = username ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_foundgroups( '' ).
  ENDMETHOD.

  METHOD zif_jira~findusersandgroups.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/groupuserpicker'.
    mi_client->request->set_form_field( name = 'query' value = query ).
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF showavatar IS SUPPLIED.
      mi_client->request->set_form_field( name = 'showAvatar' value = showavatar ).
    ENDIF.
    IF fieldid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldId' value = fieldid ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    IF issuetypeid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueTypeId' value = issuetypeid ).
    ENDIF.
    IF avatarsize IS SUPPLIED.
      mi_client->request->set_form_field( name = 'avatarSize' value = avatarsize ).
    ENDIF.
    IF caseinsensitive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'caseInsensitive' value = caseinsensitive ).
    ENDIF.
    IF excludeconnectaddons IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludeConnectAddons' value = excludeconnectaddons ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_foundusersandgroups( '' ).
  ENDMETHOD.

  METHOD zif_jira~createissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue'.
    IF updatehistory IS SUPPLIED.
      mi_client->request->set_form_field( name = 'updateHistory' value = updatehistory ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/bulk'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcreateissuemeta.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/createmeta'.
    IF projectids IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectIds' value = projectids ).
    ENDIF.
    IF projectkeys IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKeys' value = projectkeys ).
    ENDIF.
    IF issuetypeids IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issuetypeIds' value = issuetypeids ).
    ENDIF.
    IF issuetypenames IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issuetypeNames' value = issuetypenames ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuecreatemetadata( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuepickerresource.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/picker'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF currentjql IS SUPPLIED.
      mi_client->request->set_form_field( name = 'currentJQL' value = currentjql ).
    ENDIF.
    IF currentissuekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'currentIssueKey' value = currentissuekey ).
    ENDIF.
    IF currentprojectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'currentProjectId' value = currentprojectid ).
    ENDIF.
    IF showsubtasks IS SUPPLIED.
      mi_client->request->set_form_field( name = 'showSubTasks' value = showsubtasks ).
    ENDIF.
    IF showsubtaskparent IS SUPPLIED.
      mi_client->request->set_form_field( name = 'showSubTaskParent' value = showsubtaskparent ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuepickersuggestions( '' ).
  ENDMETHOD.

  METHOD zif_jira~bulksetissuesproperties.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/properties'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~bulksetissueproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~bulkdeleteissueproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF fields IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fields' value = fields ).
    ENDIF.
    IF fieldsbykeys IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldsByKeys' value = fieldsbykeys ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF properties IS SUPPLIED.
      mi_client->request->set_form_field( name = 'properties' value = properties ).
    ENDIF.
    IF updatehistory IS SUPPLIED.
      mi_client->request->set_form_field( name = 'updateHistory' value = updatehistory ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuebean( '' ).
  ENDMETHOD.

  METHOD zif_jira~editissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF notifyusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'notifyUsers' value = notifyusers ).
    ENDIF.
    IF overridescreensecurity IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideScreenSecurity' value = overridescreensecurity ).
    ENDIF.
    IF overrideeditableflag IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideEditableFlag' value = overrideeditableflag ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF deletesubtasks IS SUPPLIED.
      mi_client->request->set_form_field( name = 'deleteSubtasks' value = deletesubtasks ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~assignissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/assignee'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addattachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/attachments'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getchangelogs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/changelog'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanchangelog( '' ).
  ENDMETHOD.

  METHOD zif_jira~getcomments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/comment'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pageofcomments( '' ).
  ENDMETHOD.

  METHOD zif_jira~addcomment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/comment'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcomment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/comment/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_comment( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatecomment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/comment/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_comment( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletecomment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/comment/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~geteditissuemeta.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/editmeta'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF overridescreensecurity IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideScreenSecurity' value = overridescreensecurity ).
    ENDIF.
    IF overrideeditableflag IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideEditableFlag' value = overrideeditableflag ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issueupdatemetadata( '' ).
  ENDMETHOD.

  METHOD zif_jira~notify.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/notify'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuepropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/properties'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissueproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setissueproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteissueproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getremoteissuelinks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF globalid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'globalId' value = globalid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_remoteissuelink( '' ).
  ENDMETHOD.

  METHOD zif_jira~createorupdateremoteissuelink.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_remoteissuelinkidentifie( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteremoteissuelinkbyglobali.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_form_field( name = 'globalId' value = globalid ).
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getremoteissuelinkbyid.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{linkId}' IN lv_uri WITH linkid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_remoteissuelink( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateremoteissuelink.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{linkId}' IN lv_uri WITH linkid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteremoteissuelinkbyid.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{linkId}' IN lv_uri WITH linkid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~gettransitions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/transitions'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF transitionid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'transitionId' value = transitionid ).
    ENDIF.
    IF skipremoteonlycondition IS SUPPLIED.
      mi_client->request->set_form_field( name = 'skipRemoteOnlyCondition' value = skipremoteonlycondition ).
    ENDIF.
    IF includeunavailabletransitions IS SUPPLIED.
      mi_client->request->set_form_field( name = 'includeUnavailableTransitions' value = includeunavailabletransitions ).
    ENDIF.
    IF sortbyopsbarandstatus IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sortByOpsBarAndStatus' value = sortbyopsbarandstatus ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_transitions( '' ).
  ENDMETHOD.

  METHOD zif_jira~dotransition.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/transitions'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getvotes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/votes'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_votes( '' ).
  ENDMETHOD.

  METHOD zif_jira~addvote.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/votes'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removevote.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/votes'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuewatchers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/watchers'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_watchers( '' ).
  ENDMETHOD.

  METHOD zif_jira~addwatcher.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/watchers'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removewatcher.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/watchers'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissueworklog.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF startedafter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startedAfter' value = startedafter ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pageofworklogs( '' ).
  ENDMETHOD.

  METHOD zif_jira~addworklog.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    IF notifyusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'notifyUsers' value = notifyusers ).
    ENDIF.
    IF adjustestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'adjustEstimate' value = adjustestimate ).
    ENDIF.
    IF newestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'newEstimate' value = newestimate ).
    ENDIF.
    IF reduceby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'reduceBy' value = reduceby ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF overrideeditableflag IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideEditableFlag' value = overrideeditableflag ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworklog.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_worklog( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworklog.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF notifyusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'notifyUsers' value = notifyusers ).
    ENDIF.
    IF adjustestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'adjustEstimate' value = adjustestimate ).
    ENDIF.
    IF newestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'newEstimate' value = newestimate ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF overrideeditableflag IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideEditableFlag' value = overrideeditableflag ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_worklog( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworklog.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF notifyusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'notifyUsers' value = notifyusers ).
    ENDIF.
    IF adjustestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'adjustEstimate' value = adjustestimate ).
    ENDIF.
    IF newestimate IS SUPPLIED.
      mi_client->request->set_form_field( name = 'newEstimate' value = newestimate ).
    ENDIF.
    IF increaseby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'increaseBy' value = increaseby ).
    ENDIF.
    IF overrideeditableflag IS SUPPLIED.
      mi_client->request->set_form_field( name = 'overrideEditableFlag' value = overrideeditableflag ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworklogpropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{worklogId}' IN lv_uri WITH worklogid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworklogproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{worklogId}' IN lv_uri WITH worklogid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setworklogproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{worklogId}' IN lv_uri WITH worklogid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteworklogproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueIdOrKey}' IN lv_uri WITH issueidorkey.
    REPLACE ALL OCCURRENCES OF '{worklogId}' IN lv_uri WITH worklogid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~linkissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLink'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuelink.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLink/{linkId}'.
    REPLACE ALL OCCURRENCES OF '{linkId}' IN lv_uri WITH linkid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuelink( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteissuelink.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLink/{linkId}'.
    REPLACE ALL OCCURRENCES OF '{linkId}' IN lv_uri WITH linkid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuelinktypes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLinkType'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuelinktypes( '' ).
  ENDMETHOD.

  METHOD zif_jira~createissuelinktype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLinkType'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuelinktype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLinkType/{issueLinkTypeId}'.
    REPLACE ALL OCCURRENCES OF '{issueLinkTypeId}' IN lv_uri WITH issuelinktypeid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuelinktype( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateissuelinktype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLinkType/{issueLinkTypeId}'.
    REPLACE ALL OCCURRENCES OF '{issueLinkTypeId}' IN lv_uri WITH issuelinktypeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuelinktype( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteissuelinktype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issueLinkType/{issueLinkTypeId}'.
    REPLACE ALL OCCURRENCES OF '{issueLinkTypeId}' IN lv_uri WITH issuelinktypeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuesecurityschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuesecurityschemes'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_securityschemes( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuesecurityscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuesecurityschemes/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_securityscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuesecuritylevelmembers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members'.
    REPLACE ALL OCCURRENCES OF '{issueSecuritySchemeId}' IN lv_uri WITH issuesecurityschemeid.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF issuesecuritylevelid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueSecurityLevelId' value = issuesecuritylevelid ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuesecuritylev( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuealltypes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypedetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypedetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF alternativeissuetypeid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'alternativeIssueTypeId' value = alternativeissuetypeid ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getalternativeissuetypes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{id}/alternatives'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createissuetypeavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{id}/avatar2'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF x IS SUPPLIED.
      mi_client->request->set_form_field( name = 'x' value = x ).
    ENDIF.
    IF y IS SUPPLIED.
      mi_client->request->set_form_field( name = 'y' value = y ).
    ENDIF.
    mi_client->request->set_form_field( name = 'size' value = size ).
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetypepropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{issueTypeId}/properties'.
    REPLACE ALL OCCURRENCES OF '{issueTypeId}' IN lv_uri WITH issuetypeid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuetypeproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeId}' IN lv_uri WITH issuetypeid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setissuetypeproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeId}' IN lv_uri WITH issuetypeid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteissuetypeproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeId}' IN lv_uri WITH issuetypeid.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallissuetypeschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypescheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~createissuetypescheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetypeschemesmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/mapping'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF issuetypeschemeid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueTypeSchemeId' value = issuetypeschemeid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypeschemem( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuetypeschemeforprojects.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/project'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypeschemep( '' ).
  ENDMETHOD.

  METHOD zif_jira~assignissuetypeschemetoproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/project'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updateissuetypescheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/{issueTypeSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeSchemeId}' IN lv_uri WITH issuetypeschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteissuetypescheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/{issueTypeSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeSchemeId}' IN lv_uri WITH issuetypeschemeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addissuetypestoissuetypescheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype'.
    REPLACE ALL OCCURRENCES OF '{issueTypeSchemeId}' IN lv_uri WITH issuetypeschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~reorderissuetypesinissuetypesc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move'.
    REPLACE ALL OCCURRENCES OF '{issueTypeSchemeId}' IN lv_uri WITH issuetypeschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removeissuetypefromissuetypesc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeSchemeId}' IN lv_uri WITH issuetypeschemeid.
    REPLACE ALL OCCURRENCES OF '{issueTypeId}' IN lv_uri WITH issuetypeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetypescreenschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypescree02( '' ).
  ENDMETHOD.

  METHOD zif_jira~createissuetypescreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getissuetypescreenschememappin.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/mapping'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF issuetypescreenschemeid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueTypeScreenSchemeId' value = issuetypescreenschemeid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypescreens( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuetypescreenschemeprojec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/project'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanissuetypescree01( '' ).
  ENDMETHOD.

  METHOD zif_jira~assignissuetypescreenschemetop.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/project'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updateissuetypescreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeScreenSchemeId}' IN lv_uri WITH issuetypescreenschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteissuetypescreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{issueTypeScreenSchemeId}' IN lv_uri WITH issuetypescreenschemeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~appendmappingsforissuetypescre.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping'.
    REPLACE ALL OCCURRENCES OF '{issueTypeScreenSchemeId}' IN lv_uri WITH issuetypescreenschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updatedefaultscreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default'.
    REPLACE ALL OCCURRENCES OF '{issueTypeScreenSchemeId}' IN lv_uri WITH issuetypescreenschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removemappingsfromissuetypescr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove'.
    REPLACE ALL OCCURRENCES OF '{issueTypeScreenSchemeId}' IN lv_uri WITH issuetypescreenschemeid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getautocomplete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/jql/autocompletedata'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_jqlreferencedata( '' ).
  ENDMETHOD.

  METHOD zif_jira~getfieldautocompleteforqueryst.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/jql/autocompletedata/suggestions'.
    IF fieldname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldName' value = fieldname ).
    ENDIF.
    IF fieldvalue IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldValue' value = fieldvalue ).
    ENDIF.
    IF predicatename IS SUPPLIED.
      mi_client->request->set_form_field( name = 'predicateName' value = predicatename ).
    ENDIF.
    IF predicatevalue IS SUPPLIED.
      mi_client->request->set_form_field( name = 'predicateValue' value = predicatevalue ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_autocompletesuggestions( '' ).
  ENDMETHOD.

  METHOD zif_jira~matchissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/jql/match'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuematches( '' ).
  ENDMETHOD.

  METHOD zif_jira~parsejqlqueries.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/jql/parse'.
    IF validation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'validation' value = validation ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_parsedjqlqueries( '' ).
  ENDMETHOD.

  METHOD zif_jira~migratequeries.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/jql/pdcleaner'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_convertedjqlqueries( '' ).
  ENDMETHOD.

  METHOD zif_jira~getalllabels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/label'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanstring( '' ).
  ENDMETHOD.

  METHOD zif_jira~getmypermissions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypermissions'.
    IF projectkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKey' value = projectkey ).
    ENDIF.
    IF projectid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    ENDIF.
    IF issuekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueKey' value = issuekey ).
    ENDIF.
    IF issueid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueId' value = issueid ).
    ENDIF.
    IF permissions IS SUPPLIED.
      mi_client->request->set_form_field( name = 'permissions' value = permissions ).
    ENDIF.
    IF projectuuid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectUuid' value = projectuuid ).
    ENDIF.
    IF projectconfigurationuuid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectConfigurationUuid' value = projectconfigurationuuid ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissions( '' ).
  ENDMETHOD.

  METHOD zif_jira~getpreference.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences'.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setpreference.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences'.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removepreference.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences'.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getlocale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences/locale'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_locale( '' ).
  ENDMETHOD.

  METHOD zif_jira~setlocale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences/locale'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletelocale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/mypreferences/locale'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getcurrentuser.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/myself'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_user( '' ).
  ENDMETHOD.

  METHOD zif_jira~getnotificationschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/notificationscheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeannotificationsche( '' ).
  ENDMETHOD.

  METHOD zif_jira~getnotificationscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/notificationscheme/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_notificationscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallpermissions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissions'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissions( '' ).
  ENDMETHOD.

  METHOD zif_jira~getbulkpermissions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissions/check'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_bulkpermissiongrants( '' ).
  ENDMETHOD.

  METHOD zif_jira~getpermittedprojects.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissions/project'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permittedprojects( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallpermissionschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissionschemes( '' ).
  ENDMETHOD.

  METHOD zif_jira~createpermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getpermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissionscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatepermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissionscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletepermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getpermissionschemegrants.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}/permission'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissiongrants( '' ).
  ENDMETHOD.

  METHOD zif_jira~createpermissiongrant.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}/permission'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getpermissionschemegrant.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    REPLACE ALL OCCURRENCES OF '{permissionId}' IN lv_uri WITH permissionid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissiongrant( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletepermissionschemeentity.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}'.
    REPLACE ALL OCCURRENCES OF '{schemeId}' IN lv_uri WITH schemeid.
    REPLACE ALL OCCURRENCES OF '{permissionId}' IN lv_uri WITH permissionid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getpriorities.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/priority'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getpriority.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/priority/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_priority( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallprojects.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF recent IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recent' value = recent ).
    ENDIF.
    IF properties IS SUPPLIED.
      mi_client->request->set_form_field( name = 'properties' value = properties ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~searchprojects.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/search'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF typekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'typeKey' value = typekey ).
    ENDIF.
    IF categoryid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'categoryId' value = categoryid ).
    ENDIF.
    IF action IS SUPPLIED.
      mi_client->request->set_form_field( name = 'action' value = action ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF properties IS SUPPLIED.
      mi_client->request->set_form_field( name = 'properties' value = properties ).
    ENDIF.
    IF property IS SUPPLIED.
      mi_client->request->set_form_field( name = 'property' value = property ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanproject( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallprojecttypes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/type'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallaccessibleprojecttypes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/type/accessible'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojecttypebykey.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/type/{projectTypeKey}'.
    REPLACE ALL OCCURRENCES OF '{projectTypeKey}' IN lv_uri WITH projecttypekey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projecttype( '' ).
  ENDMETHOD.

  METHOD zif_jira~getaccessibleprojecttypebykey.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/type/{projectTypeKey}/accessible'.
    REPLACE ALL OCCURRENCES OF '{projectTypeKey}' IN lv_uri WITH projecttypekey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projecttype( '' ).
  ENDMETHOD.

  METHOD zif_jira~getproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF properties IS SUPPLIED.
      mi_client->request->set_form_field( name = 'properties' value = properties ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF enableundo IS SUPPLIED.
      mi_client->request->set_form_field( name = 'enableUndo' value = enableundo ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~archiveproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/archive'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updateprojectavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/avatar'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteprojectavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/avatar/{id}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createprojectavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/avatar2'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF x IS SUPPLIED.
      mi_client->request->set_form_field( name = 'x' value = x ).
    ENDIF.
    IF y IS SUPPLIED.
      mi_client->request->set_form_field( name = 'y' value = y ).
    ENDIF.
    IF size IS SUPPLIED.
      mi_client->request->set_form_field( name = 'size' value = size ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallprojectavatars.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/avatars'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectavatars( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectcomponentspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/component'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeancomponentwithiss( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectcomponents.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/components'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteprojectasynchronously.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/delete'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectpropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/properties'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setprojectproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteprojectproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~restore.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/restore'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectroles.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/role'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~setactors.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~addactorusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteactor.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF user IS SUPPLIED.
      mi_client->request->set_form_field( name = 'user' value = user ).
    ENDIF.
    IF group IS SUPPLIED.
      mi_client->request->set_form_field( name = 'group' value = group ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectroledetails.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/roledetails'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF currentmember IS SUPPLIED.
      mi_client->request->set_form_field( name = 'currentMember' value = currentmember ).
    ENDIF.
    IF excludeconnectaddons IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludeConnectAddons' value = excludeconnectaddons ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallstatuses.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/statuses'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updateprojecttype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    REPLACE ALL OCCURRENCES OF '{newProjectTypeKey}' IN lv_uri WITH newprojecttypekey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectversionspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/version'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF orderby IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orderBy' value = orderby ).
    ENDIF.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanversion( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectversions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectIdOrKey}/versions'.
    REPLACE ALL OCCURRENCES OF '{projectIdOrKey}' IN lv_uri WITH projectidorkey.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectemail.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectId}/email'.
    REPLACE ALL OCCURRENCES OF '{projectId}' IN lv_uri WITH projectid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectemailaddress( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateprojectemail.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectId}/email'.
    REPLACE ALL OCCURRENCES OF '{projectId}' IN lv_uri WITH projectid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~gethierarchy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectId}/hierarchy'.
    REPLACE ALL OCCURRENCES OF '{projectId}' IN lv_uri WITH projectid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectissuetypehierarch( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectissuesecurityscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme'.
    REPLACE ALL OCCURRENCES OF '{projectKeyOrId}' IN lv_uri WITH projectkeyorid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_securityscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getnotificationschemeforprojec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectKeyOrId}/notificationscheme'.
    REPLACE ALL OCCURRENCES OF '{projectKeyOrId}' IN lv_uri WITH projectkeyorid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_notificationscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getassignedpermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectKeyOrId}/permissionscheme'.
    REPLACE ALL OCCURRENCES OF '{projectKeyOrId}' IN lv_uri WITH projectkeyorid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissionscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~assignpermissionscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectKeyOrId}/permissionscheme'.
    REPLACE ALL OCCURRENCES OF '{projectKeyOrId}' IN lv_uri WITH projectkeyorid.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_permissionscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getsecuritylevelsforproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/project/{projectKeyOrId}/securitylevel'.
    REPLACE ALL OCCURRENCES OF '{projectKeyOrId}' IN lv_uri WITH projectkeyorid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectissuesecurityleve( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallprojectcategories.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectCategory'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createprojectcategory.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectCategory'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectcategorybyid.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectCategory/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectcategory( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateprojectcategory.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectCategory/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_updatedprojectcategory( '' ).
  ENDMETHOD.

  METHOD zif_jira~removeprojectcategory.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectCategory/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~validateprojectkey.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectvalidate/key'.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_errorcollection( '' ).
  ENDMETHOD.

  METHOD zif_jira~getvalidprojectkey.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectvalidate/validProjectKey'.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getvalidprojectname.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/projectvalidate/validProjectName'.
    mi_client->request->set_form_field( name = 'name' value = name ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getresolutions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/resolution'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getresolution.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/resolution/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_resolution( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallprojectroles.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createprojectrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~getprojectrolebyid.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~fullyupdateprojectrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~partialupdateprojectrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteprojectrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF swap IS SUPPLIED.
      mi_client->request->set_form_field( name = 'swap' value = swap ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getprojectroleactorsforrole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}/actors'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~addprojectroleactorstorole.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}/actors'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteprojectroleactorsfromrol.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/role/{id}/actors'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF user IS SUPPLIED.
      mi_client->request->set_form_field( name = 'user' value = user ).
    ENDIF.
    IF group IS SUPPLIED.
      mi_client->request->set_form_field( name = 'group' value = group ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_projectrole( '' ).
  ENDMETHOD.

  METHOD zif_jira~getscreens.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanscreen( '' ).
  ENDMETHOD.

  METHOD zif_jira~createscreen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addfieldtodefaultscreen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/addToDefault/{fieldId}'.
    REPLACE ALL OCCURRENCES OF '{fieldId}' IN lv_uri WITH fieldid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updatescreen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_screen( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletescreen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getavailablescreenfields.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/availableFields'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallscreentabs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    IF projectkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKey' value = projectkey ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addscreentab.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_screenabletab( '' ).
  ENDMETHOD.

  METHOD zif_jira~renamescreentab.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_screenabletab( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletescreentab.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallscreentabfields.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    IF projectkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKey' value = projectkey ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~addscreentabfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_screenablefield( '' ).
  ENDMETHOD.

  METHOD zif_jira~removescreentabfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~movescreentabfield.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~movescreentab.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}'.
    REPLACE ALL OCCURRENCES OF '{screenId}' IN lv_uri WITH screenid.
    REPLACE ALL OCCURRENCES OF '{tabId}' IN lv_uri WITH tabid.
    REPLACE ALL OCCURRENCES OF '{pos}' IN lv_uri WITH pos.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getscreenschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screenscheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'id' value = id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanscreenscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~createscreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screenscheme'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~updatescreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screenscheme/{screenSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{screenSchemeId}' IN lv_uri WITH screenschemeid.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deletescreenscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/screenscheme/{screenSchemeId}'.
    REPLACE ALL OCCURRENCES OF '{screenSchemeId}' IN lv_uri WITH screenschemeid.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~searchforissuesusingjql.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/search'.
    IF jql IS SUPPLIED.
      mi_client->request->set_form_field( name = 'jql' value = jql ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF validatequery IS SUPPLIED.
      mi_client->request->set_form_field( name = 'validateQuery' value = validatequery ).
    ENDIF.
    IF fields IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fields' value = fields ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    IF properties IS SUPPLIED.
      mi_client->request->set_form_field( name = 'properties' value = properties ).
    ENDIF.
    IF fieldsbykeys IS SUPPLIED.
      mi_client->request->set_form_field( name = 'fieldsByKeys' value = fieldsbykeys ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_searchresults( '' ).
  ENDMETHOD.

  METHOD zif_jira~searchforissuesusingjqlpost.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/search'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_searchresults( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuesecuritylevel.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/securitylevel/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_securitylevel( '' ).
  ENDMETHOD.

  METHOD zif_jira~getserverinfo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/serverInfo'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_serverinformation( '' ).
  ENDMETHOD.

  METHOD zif_jira~getissuenavigatordefaultcolumn.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/settings/columns'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setissuenavigatordefaultcolumn.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/settings/columns'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getstatuses.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/status'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getstatus.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/status/{idOrName}'.
    REPLACE ALL OCCURRENCES OF '{idOrName}' IN lv_uri WITH idorname.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_statusdetails( '' ).
  ENDMETHOD.

  METHOD zif_jira~getstatuscategories.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/statuscategory'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getstatuscategory.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/statuscategory/{idOrKey}'.
    REPLACE ALL OCCURRENCES OF '{idOrKey}' IN lv_uri WITH idorkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_statuscategory( '' ).
  ENDMETHOD.

  METHOD zif_jira~gettask.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/task/{taskId}'.
    REPLACE ALL OCCURRENCES OF '{taskId}' IN lv_uri WITH taskid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_taskprogressbeanobject( '' ).
  ENDMETHOD.

  METHOD zif_jira~canceltask.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/task/{taskId}/cancel'.
    REPLACE ALL OCCURRENCES OF '{taskId}' IN lv_uri WITH taskid.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getavatars.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    REPLACE ALL OCCURRENCES OF '{entityId}' IN lv_uri WITH entityid.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_avatars( '' ).
  ENDMETHOD.

  METHOD zif_jira~storeavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    REPLACE ALL OCCURRENCES OF '{entityId}' IN lv_uri WITH entityid.
    IF x IS SUPPLIED.
      mi_client->request->set_form_field( name = 'x' value = x ).
    ENDIF.
    IF y IS SUPPLIED.
      mi_client->request->set_form_field( name = 'y' value = y ).
    ENDIF.
    mi_client->request->set_form_field( name = 'size' value = size ).
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteavatar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    REPLACE ALL OCCURRENCES OF '{owningObjectId}' IN lv_uri WITH owningobjectid.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getuser.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_user( '' ).
  ENDMETHOD.

  METHOD zif_jira~createuser.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~removeuser.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user'.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findbulkassignableusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/assignable/multiProjectSearch'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    mi_client->request->set_form_field( name = 'projectKeys' value = projectkeys ).
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findassignableusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/assignable/search'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF sessionid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sessionId' value = sessionid ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF project IS SUPPLIED.
      mi_client->request->set_form_field( name = 'project' value = project ).
    ENDIF.
    IF issuekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueKey' value = issuekey ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF actiondescriptorid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'actionDescriptorId' value = actiondescriptorid ).
    ENDIF.
    IF recommend IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recommend' value = recommend ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~bulkgetusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/bulk'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanuser( '' ).
  ENDMETHOD.

  METHOD zif_jira~bulkgetusersmigration.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/bulk/migration'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getuserdefaultcolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/columns'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~setusercolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/columns'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~resetusercolumns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/columns'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getuseremail.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/email'.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_unrestricteduseremail( '' ).
  ENDMETHOD.

  METHOD zif_jira~getuseremailbulk.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/email/bulk'.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_unrestricteduseremail( '' ).
  ENDMETHOD.

  METHOD zif_jira~getusergroups.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/groups'.
    mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~finduserswithallpermissions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/permission/search'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    mi_client->request->set_form_field( name = 'permissions' value = permissions ).
    IF issuekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueKey' value = issuekey ).
    ENDIF.
    IF projectkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKey' value = projectkey ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findusersforpicker.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/picker'.
    mi_client->request->set_form_field( name = 'query' value = query ).
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF showavatar IS SUPPLIED.
      mi_client->request->set_form_field( name = 'showAvatar' value = showavatar ).
    ENDIF.
    IF exclude IS SUPPLIED.
      mi_client->request->set_form_field( name = 'exclude' value = exclude ).
    ENDIF.
    IF excludeaccountids IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludeAccountIds' value = excludeaccountids ).
    ENDIF.
    IF avatarsize IS SUPPLIED.
      mi_client->request->set_form_field( name = 'avatarSize' value = avatarsize ).
    ENDIF.
    IF excludeconnectusers IS SUPPLIED.
      mi_client->request->set_form_field( name = 'excludeConnectUsers' value = excludeconnectusers ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_foundusers( '' ).
  ENDMETHOD.

  METHOD zif_jira~getuserpropertykeys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/properties'.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF userkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'userKey' value = userkey ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~getuserproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF userkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'userKey' value = userkey ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~setuserproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF userkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'userKey' value = userkey ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~deleteuserproperty.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF userkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'userKey' value = userkey ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/search'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF property IS SUPPLIED.
      mi_client->request->set_form_field( name = 'property' value = property ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~findusersbyquery.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/search/query'.
    mi_client->request->set_form_field( name = 'query' value = query ).
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanuser( '' ).
  ENDMETHOD.

  METHOD zif_jira~finduserkeysbyquery.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/search/query/key'.
    mi_client->request->set_form_field( name = 'query' value = query ).
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanuserkey( '' ).
  ENDMETHOD.

  METHOD zif_jira~finduserswithbrowsepermission.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/user/viewissue/search'.
    IF query IS SUPPLIED.
      mi_client->request->set_form_field( name = 'query' value = query ).
    ENDIF.
    IF username IS SUPPLIED.
      mi_client->request->set_form_field( name = 'username' value = username ).
    ENDIF.
    IF accountid IS SUPPLIED.
      mi_client->request->set_form_field( name = 'accountId' value = accountid ).
    ENDIF.
    IF issuekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'issueKey' value = issuekey ).
    ENDIF.
    IF projectkey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'projectKey' value = projectkey ).
    ENDIF.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallusersdefault.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/users'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallusers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/users/search'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_version( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_version( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF movefixissuesto IS SUPPLIED.
      mi_client->request->set_form_field( name = 'moveFixIssuesTo' value = movefixissuesto ).
    ENDIF.
    IF moveaffectedissuesto IS SUPPLIED.
      mi_client->request->set_form_field( name = 'moveAffectedIssuesTo' value = moveaffectedissuesto ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~mergeversions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}/mergeto/{moveIssuesTo}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{moveIssuesTo}' IN lv_uri WITH moveissuesto.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~moveversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}/move'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_version( '' ).
  ENDMETHOD.

  METHOD zif_jira~getversionrelatedissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}/relatedIssueCounts'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_versionissuecounts( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteandreplaceversion.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}/removeAndSwap'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getversionunresolvedissues.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/version/{id}/unresolvedIssueCount'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_versionunresolvedissuesc( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdynamicwebhooksforapp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/webhook'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanwebhook( '' ).
  ENDMETHOD.

  METHOD zif_jira~registerdynamicwebhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/webhook'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_containerforregisteredwe( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletewebhookbyid.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/webhook'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getfailedwebhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/webhook/failed'.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF after IS SUPPLIED.
      mi_client->request->set_form_field( name = 'after' value = after ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_failedwebhooks( '' ).
  ENDMETHOD.

  METHOD zif_jira~refreshwebhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/webhook/refresh'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_webhooksexpirationdate( '' ).
  ENDMETHOD.

  METHOD zif_jira~getallworkflows.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow'.
    IF workflowname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworkflowtransitionruleconfi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/rule/config'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_form_field( name = 'types' value = types ).
    IF keys IS SUPPLIED.
      mi_client->request->set_form_field( name = 'keys' value = keys ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanworkflowtransiti( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworkflowtransitionruleco.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/rule/config'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowtransitionrule02( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworkflowspaginated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/search'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    IF workflowname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanworkflow( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworkflowtransitionpropertie.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/transitions/{transitionId}/properties'.
    REPLACE ALL OCCURRENCES OF '{transitionId}' IN lv_uri WITH transitionid.
    IF includereservedkeys IS SUPPLIED.
      mi_client->request->set_form_field( name = 'includeReservedKeys' value = includereservedkeys ).
    ENDIF.
    IF key IS SUPPLIED.
      mi_client->request->set_form_field( name = 'key' value = key ).
    ENDIF.
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    IF workflowmode IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowMode' value = workflowmode ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowtransitionproper( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworkflowtransitionproper.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/transitions/{transitionId}/properties'.
    REPLACE ALL OCCURRENCES OF '{transitionId}' IN lv_uri WITH transitionid.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    IF workflowmode IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowMode' value = workflowmode ).
    ENDIF.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowtransitionproper( '' ).
  ENDMETHOD.

  METHOD zif_jira~createworkflowtransitionproper.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/transitions/{transitionId}/properties'.
    REPLACE ALL OCCURRENCES OF '{transitionId}' IN lv_uri WITH transitionid.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    IF workflowmode IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowMode' value = workflowmode ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowtransitionproper( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowtransitionproper.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflow/transitions/{transitionId}/properties'.
    REPLACE ALL OCCURRENCES OF '{transitionId}' IN lv_uri WITH transitionid.
    mi_client->request->set_form_field( name = 'key' value = key ).
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    IF workflowmode IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowMode' value = workflowmode ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getallworkflowschemes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme'.
    IF startat IS SUPPLIED.
      mi_client->request->set_form_field( name = 'startAt' value = startat ).
    ENDIF.
    IF maxresults IS SUPPLIED.
      mi_client->request->set_form_field( name = 'maxResults' value = maxresults ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pagebeanworkflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~createworkflowscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworkflowschemeprojectassoci.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/project'.
    mi_client->request->set_form_field( name = 'projectId' value = projectid ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_containerofworkflowschem( '' ).
  ENDMETHOD.

  METHOD zif_jira~associateschemewithproject.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/project'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworkflowscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF returndraftifexists IS SUPPLIED.
      mi_client->request->set_form_field( name = 'returnDraftIfExists' value = returndraftifexists ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworkflowscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowscheme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~createworkflowschemedraftfromp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/createdraft'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getdefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF returndraftifexists IS SUPPLIED.
      mi_client->request->set_form_field( name = 'returnDraftIfExists' value = returndraftifexists ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_defaultworkflow( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatedefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletedefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF updatedraftifneeded IS SUPPLIED.
      mi_client->request->set_form_field( name = 'updateDraftIfNeeded' value = updatedraftifneeded ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworkflowschemedraft.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworkflowschemedraft.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowschemedraft.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getdraftdefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_defaultworkflow( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatedraftdefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletedraftdefaultworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/default'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworkflowschemedraftissuetyp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypeworkflowmapping( '' ).
  ENDMETHOD.

  METHOD zif_jira~setworkflowschemedraftissuetyp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowschemedraftissue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getdraftworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF workflowname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypesworkflowmappin( '' ).
  ENDMETHOD.

  METHOD zif_jira~updatedraftworkflowmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deletedraftworkflowmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/draft/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getworkflowschemeissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    IF returndraftifexists IS SUPPLIED.
      mi_client->request->set_form_field( name = 'returnDraftIfExists' value = returndraftifexists ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypeworkflowmapping( '' ).
  ENDMETHOD.

  METHOD zif_jira~setworkflowschemeissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowschemeissuetype.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    REPLACE ALL OCCURRENCES OF '{issueType}' IN lv_uri WITH issuetype.
    IF updatedraftifneeded IS SUPPLIED.
      mi_client->request->set_form_field( name = 'updateDraftIfNeeded' value = updatedraftifneeded ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworkflow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    IF workflowname IS SUPPLIED.
      mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    ENDIF.
    IF returndraftifexists IS SUPPLIED.
      mi_client->request->set_form_field( name = 'returnDraftIfExists' value = returndraftifexists ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issuetypesworkflowmappin( '' ).
  ENDMETHOD.

  METHOD zif_jira~updateworkflowmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_workflowscheme( '' ).
  ENDMETHOD.

  METHOD zif_jira~deleteworkflowmapping.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/workflowscheme/{id}/workflow'.
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH id.
    mi_client->request->set_form_field( name = 'workflowName' value = workflowname ).
    IF updatedraftifneeded IS SUPPLIED.
      mi_client->request->set_form_field( name = 'updateDraftIfNeeded' value = updatedraftifneeded ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getidsofworklogsdeletedsince.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/worklog/deleted'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_changedworklogs( '' ).
  ENDMETHOD.

  METHOD zif_jira~getworklogsforids.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/worklog/list'.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~getidsofworklogsmodifiedsince.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/api/3/worklog/updated'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF expand IS SUPPLIED.
      mi_client->request->set_form_field( name = 'expand' value = expand ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_changedworklogs( '' ).
  ENDMETHOD.

  METHOD zif_jira~addonpropertiesresource_getadd.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/addons/{addonKey}/properties'.
    REPLACE ALL OCCURRENCES OF '{addonKey}' IN lv_uri WITH addonkey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_propertykeys( '' ).
  ENDMETHOD.

  METHOD zif_jira~addonpropertiesresource_geta01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{addonKey}' IN lv_uri WITH addonkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_entityproperty( '' ).
  ENDMETHOD.

  METHOD zif_jira~addonpropertiesresource_putadd.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{addonKey}' IN lv_uri WITH addonkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_operationmessage( '' ).
  ENDMETHOD.

  METHOD zif_jira~addonpropertiesresource_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}'.
    REPLACE ALL OCCURRENCES OF '{addonKey}' IN lv_uri WITH addonkey.
    REPLACE ALL OCCURRENCES OF '{propertyKey}' IN lv_uri WITH propertykey.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~dynamicmodulesresource_getmodu.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/app/module/dynamic'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_connectmodules( '' ).
  ENDMETHOD.

  METHOD zif_jira~dynamicmodulesresource_registe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/app/module/dynamic'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_jira~dynamicmodulesresource_removem.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '/rest/atlassian-connect/1/app/module/dynamic'.
    IF modulekey IS SUPPLIED.
      mi_client->request->set_form_field( name = 'moduleKey' value = modulekey ).
    ENDIF.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

ENDCLASS.