INTERFACE zif_petstore.
* Generated by abap-openapi-client
* Swagger Petstore - OpenAPI 3.0

* Component schema: Order, object
  TYPES order TYPE string.
* Component schema: Customer, object
  TYPES customer TYPE string.
* Component schema: Address, object
  TYPES address TYPE string.
* Component schema: Category, object
  TYPES category TYPE string.
* Component schema: User, object
  TYPES user TYPE string.
* Component schema: Tag, object
  TYPES tag TYPE string.
* Component schema: Pet, object
  TYPES pet TYPE string.
* Component schema: ApiResponse, object
  TYPES apiresponse TYPE string.

* PUT - "Update an existing pet"
* Response: 200
*     application/xml
*     application/json
* Response: 400
* Response: 404
* Response: 405
  METHODS updatepet
    RAISING cx_static_check.
* POST - "Add a new pet to the store"
* Response: 200
*     application/xml
*     application/json
* Response: 405
  METHODS addpet
    RAISING cx_static_check.
* GET - "Finds Pets by status"
* Parameter: status, optional, query
* Response: 200
*     application/xml
*     application/json
* Response: 400
  METHODS findpetsbystatus
    IMPORTING
      status TYPE string DEFAULT 'available' OPTIONAL
    RAISING cx_static_check.
* GET - "Finds Pets by tags"
* Parameter: tags, optional, query
* Response: 200
*     application/xml
*     application/json
* Response: 400
  METHODS findpetsbytags
    IMPORTING
      tags TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Find pet by ID"
* Parameter: petId, required, path
* Response: 200
*     application/xml
*     application/json
* Response: 400
* Response: 404
  METHODS getpetbyid
    IMPORTING
      petid TYPE i
    RAISING cx_static_check.
* POST - "Updates a pet in the store with form data"
* Parameter: petId, required, path
* Parameter: name, optional, query
* Parameter: status, optional, query
* Response: 405
  METHODS updatepetwithform
    IMPORTING
      petid TYPE i
      name TYPE string OPTIONAL
      status TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Deletes a pet"
* Parameter: api_key, optional, header
* Parameter: petId, required, path
* Response: 400
  METHODS deletepet
    IMPORTING
      api_key TYPE string OPTIONAL
      petid TYPE i
    RAISING cx_static_check.
* POST - "uploads an image"
* Parameter: petId, required, path
* Parameter: additionalMetadata, optional, query
* Response: 200
*     application/json
  METHODS uploadfile
    IMPORTING
      petid TYPE i
      additionalmetadata TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Returns pet inventories by status"
* Response: 200
*     application/json
  METHODS getinventory
    RAISING cx_static_check.
* POST - "Place an order for a pet"
* Response: 200
*     application/json
* Response: 405
  METHODS placeorder
    RAISING cx_static_check.
* GET - "Find purchase order by ID"
* Parameter: orderId, required, path
* Response: 200
*     application/xml
*     application/json
* Response: 400
* Response: 404
  METHODS getorderbyid
    IMPORTING
      orderid TYPE i
    RAISING cx_static_check.
* DELETE - "Delete purchase order by ID"
* Parameter: orderId, required, path
* Response: 400
* Response: 404
  METHODS deleteorder
    IMPORTING
      orderid TYPE i
    RAISING cx_static_check.
* POST - "Create user"
* Response: default
*     application/json
*     application/xml
  METHODS createuser
    RAISING cx_static_check.
* POST - "Creates list of users with given input array"
* Response: 200
*     application/xml
*     application/json
* Response: default
  METHODS createuserswithlistinput
    RAISING cx_static_check.
* GET - "Logs user into the system"
* Parameter: username, optional, query
* Parameter: password, optional, query
* Response: 200
*     application/xml
*     application/json
* Response: 400
  METHODS loginuser
    IMPORTING
      username TYPE string OPTIONAL
      password TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Logs out current logged in user session"
* Response: default
  METHODS logoutuser
    RAISING cx_static_check.
* GET - "Get user by user name"
* Parameter: username, required, path
* Response: 200
*     application/xml
*     application/json
* Response: 400
* Response: 404
  METHODS getuserbyname
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Update user"
* Parameter: username, required, path
* Response: default
  METHODS updateuser
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Delete user"
* Parameter: username, required, path
* Response: 400
* Response: 404
  METHODS deleteuser
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
ENDINTERFACE.