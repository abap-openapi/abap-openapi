INTERFACE zif_github PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API

* Component schema: simple-user, object
  TYPES: BEGIN OF simple_user,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
           starred_at TYPE string,
         END OF simple_user.

* Component schema: integration, object
  TYPES: BEGIN OF integration_permissions,
           issues TYPE string,
           checks TYPE string,
           metadata TYPE string,
           contents TYPE string,
           deployments TYPE string,
         END OF integration_permissions.
  TYPES integration_owner TYPE string. "   todo
  TYPES: BEGIN OF integration,
           id TYPE i,
           slug TYPE string,
           node_id TYPE string,
           owner TYPE integration_owner,
           name TYPE string,
           description TYPE string,
           external_url TYPE string,
           html_url TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           permissions TYPE integration_permissions,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           installations_count TYPE i,
           client_id TYPE string,
           client_secret TYPE string,
           webhook_secret TYPE string,
           pem TYPE string,
         END OF integration.

* Component schema: basic-error, object
  TYPES: BEGIN OF basic_error,
           message TYPE string,
           documentation_url TYPE string,
         END OF basic_error.

* Component schema: validation-error-simple, object
  TYPES: BEGIN OF validation_error_simple,
           message TYPE string,
           documentation_url TYPE string,
           errors TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF validation_error_simple.

* Component schema: webhook-config-url, string
  TYPES webhook_config_url TYPE string.

* Component schema: webhook-config-content-type, string
  TYPES webhook_config_content_type TYPE string.

* Component schema: webhook-config-secret, string
  TYPES webhook_config_secret TYPE string.

* Component schema: webhook-config-insecure-ssl, string
  TYPES webhook_config_insecure_ssl TYPE string.

* Component schema: webhook-config, object
  TYPES: BEGIN OF webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF webhook_config.

* Component schema: enterprise, object
  TYPES: BEGIN OF enterprise,
           description TYPE string,
           html_url TYPE string,
           website_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           slug TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           avatar_url TYPE string,
         END OF enterprise.

* Component schema: installation, object
  TYPES installation_suspended_by TYPE string. "   todo
  TYPES: BEGIN OF installation_permissions,
           deployments TYPE string,
           checks TYPE string,
           metadata TYPE string,
           contents TYPE string,
           pull_requests TYPE string,
           statuses TYPE string,
           issues TYPE string,
           organization_administration TYPE string,
         END OF installation_permissions.
  TYPES installation_account TYPE string. "   todo
  TYPES: BEGIN OF installation,
           id TYPE i,
           account TYPE installation_account,
           repository_selection TYPE string,
           access_tokens_url TYPE string,
           repositories_url TYPE string,
           html_url TYPE string,
           app_id TYPE i,
           target_id TYPE i,
           target_type TYPE string,
           permissions TYPE installation_permissions,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           created_at TYPE string,
           updated_at TYPE string,
           single_file_name TYPE string,
           has_multiple_single_files TYPE abap_bool,
           single_file_paths TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           app_slug TYPE string,
           suspended_by TYPE installation_suspended_by,
           suspended_at TYPE string,
           contact_email TYPE string,
         END OF installation.

* Component schema: app-permissions, object
  TYPES: BEGIN OF app_permissions,
           actions TYPE string,
           administration TYPE string,
           checks TYPE string,
           content_references TYPE string,
           contents TYPE string,
           deployments TYPE string,
           environments TYPE string,
           issues TYPE string,
           metadata TYPE string,
           packages TYPE string,
           pages TYPE string,
           pull_requests TYPE string,
           repository_hooks TYPE string,
           repository_projects TYPE string,
           secret_scanning_alerts TYPE string,
           secrets TYPE string,
           security_events TYPE string,
           single_file TYPE string,
           statuses TYPE string,
           vulnerability_alerts TYPE string,
           workflows TYPE string,
           members TYPE string,
           organization_administration TYPE string,
           organization_hooks TYPE string,
           organization_plan TYPE string,
           organization_projects TYPE string,
           organization_secrets TYPE string,
           organization_self_hosted_runne TYPE string,
           organization_user_blocking TYPE string,
           team_discussions TYPE string,
         END OF app_permissions.

* Component schema: license-simple, object
  TYPES: BEGIN OF license_simple,
           key TYPE string,
           name TYPE string,
           url TYPE string,
           spdx_id TYPE string,
           node_id TYPE string,
           html_url TYPE string,
         END OF license_simple.

* Component schema: repository, object
  TYPES: BEGIN OF repository_template_reposito02,
           admin TYPE abap_bool,
           push TYPE abap_bool,
           pull TYPE abap_bool,
         END OF repository_template_reposito02.
  TYPES: BEGIN OF repository_template_reposito01,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
         END OF repository_template_reposito01.
  TYPES: BEGIN OF repository_template_repository,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           owner TYPE repository_template_reposito01,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           forks_url TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           git_url TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           pulls_url TYPE string,
           releases_url TYPE string,
           ssh_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           clone_url TYPE string,
           mirror_url TYPE string,
           hooks_url TYPE string,
           svn_url TYPE string,
           homepage TYPE string,
           language TYPE string,
           forks_count TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           size TYPE i,
           default_branch TYPE string,
           open_issues_count TYPE i,
           is_template TYPE abap_bool,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           visibility TYPE string,
           pushed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           permissions TYPE repository_template_reposito02,
           allow_rebase_merge TYPE abap_bool,
           temp_clone_token TYPE string,
           allow_squash_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           subscribers_count TYPE i,
           network_count TYPE i,
         END OF repository_template_repository.
  TYPES repository_owner TYPE string. "   todo
  TYPES: BEGIN OF repository_permissions,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           triage TYPE abap_bool,
           push TYPE abap_bool,
           maintain TYPE abap_bool,
         END OF repository_permissions.
  TYPES repository_license TYPE string. "   todo
  TYPES: BEGIN OF repository,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           license TYPE repository_license,
           forks TYPE i,
           permissions TYPE repository_permissions,
           owner TYPE repository_owner,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           forks_url TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           git_url TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           pulls_url TYPE string,
           releases_url TYPE string,
           ssh_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           clone_url TYPE string,
           mirror_url TYPE string,
           hooks_url TYPE string,
           svn_url TYPE string,
           homepage TYPE string,
           language TYPE string,
           forks_count TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           size TYPE i,
           default_branch TYPE string,
           open_issues_count TYPE i,
           is_template TYPE abap_bool,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           visibility TYPE string,
           pushed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           allow_rebase_merge TYPE abap_bool,
           template_repository TYPE repository_template_repository,
           temp_clone_token TYPE string,
           allow_squash_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           subscribers_count TYPE i,
           network_count TYPE i,
           open_issues TYPE i,
           watchers TYPE i,
           master_branch TYPE string,
           starred_at TYPE string,
         END OF repository.

* Component schema: installation-token, object
  TYPES: BEGIN OF installation_token_permissions,
           issues TYPE string,
           contents TYPE string,
           metadata TYPE string,
           single_file TYPE string,
         END OF installation_token_permissions.
  TYPES: BEGIN OF installation_token,
           token TYPE string,
           expires_at TYPE string,
           permissions TYPE installation_token_permissions,
           repository_selection TYPE string,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           single_file TYPE string,
           has_multiple_single_files TYPE abap_bool,
           single_file_paths TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF installation_token.

* Component schema: validation-error, object
  TYPES: BEGIN OF validation_error,
           message TYPE string,
           documentation_url TYPE string,
           errors TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF validation_error.

* Component schema: application-grant, object
  TYPES application_grant_user TYPE string. "   todo
  TYPES: BEGIN OF application_grant_app,
           client_id TYPE string,
           name TYPE string,
           url TYPE string,
         END OF application_grant_app.
  TYPES: BEGIN OF application_grant,
           id TYPE i,
           url TYPE string,
           app TYPE application_grant_app,
           created_at TYPE string,
           updated_at TYPE string,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           user TYPE application_grant_user,
         END OF application_grant.

* Component schema: scoped-installation, object
  TYPES: BEGIN OF scoped_installation,
           permissions TYPE app_permissions,
           repository_selection TYPE string,
           single_file_name TYPE string,
           has_multiple_single_files TYPE abap_bool,
           single_file_paths TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repositories_url TYPE string,
           account TYPE simple_user,
         END OF scoped_installation.

* Component schema: authorization, object
  TYPES authorization_installation TYPE string. "   todo
  TYPES authorization_user TYPE string. "   todo
  TYPES: BEGIN OF authorization_app,
           client_id TYPE string,
           name TYPE string,
           url TYPE string,
         END OF authorization_app.
  TYPES: BEGIN OF authorization,
           id TYPE i,
           url TYPE string,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           token TYPE string,
           token_last_eight TYPE string,
           hashed_token TYPE string,
           app TYPE authorization_app,
           note TYPE string,
           note_url TYPE string,
           updated_at TYPE string,
           created_at TYPE string,
           fingerprint TYPE string,
           user TYPE authorization_user,
           installation TYPE authorization_installation,
         END OF authorization.

* Component schema: code-of-conduct, object
  TYPES: BEGIN OF code_of_conduct,
           key TYPE string,
           name TYPE string,
           url TYPE string,
           body TYPE string,
           html_url TYPE string,
         END OF code_of_conduct.

* Component schema: content-reference-attachment, object
  TYPES: BEGIN OF content_reference_attachment,
           id TYPE i,
           title TYPE string,
           body TYPE string,
           node_id TYPE string,
         END OF content_reference_attachment.

* Component schema: enabled-organizations, string
  TYPES enabled_organizations TYPE string.

* Component schema: allowed-actions, string
  TYPES allowed_actions TYPE string.

* Component schema: selected-actions-url, string
  TYPES selected_actions_url TYPE string.

* Component schema: actions-enterprise-permissions, object
  TYPES: BEGIN OF actions_enterprise_permissions,
           enabled_organizations TYPE enabled_organizations,
           selected_organizations_url TYPE string,
           allowed_actions TYPE allowed_actions,
           selected_actions_url TYPE selected_actions_url,
         END OF actions_enterprise_permissions.

* Component schema: organization-simple, object
  TYPES: BEGIN OF organization_simple,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           hooks_url TYPE string,
           issues_url TYPE string,
           members_url TYPE string,
           public_members_url TYPE string,
           avatar_url TYPE string,
           description TYPE string,
         END OF organization_simple.

* Component schema: selected-actions, object
  TYPES: BEGIN OF selected_actions,
           github_owned_allowed TYPE abap_bool,
           verified_allowed TYPE abap_bool,
           patterns_allowed TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF selected_actions.

* Component schema: runner-groups-enterprise, object
  TYPES: BEGIN OF runner_groups_enterprise,
           id TYPE f,
           name TYPE string,
           visibility TYPE string,
           default TYPE abap_bool,
           selected_organizations_url TYPE string,
           runners_url TYPE string,
           allows_public_repositories TYPE abap_bool,
         END OF runner_groups_enterprise.

* Component schema: runner, object
  TYPES: BEGIN OF runner,
           id TYPE i,
           name TYPE string,
           os TYPE string,
           status TYPE string,
           busy TYPE abap_bool,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF runner.

* Component schema: runner-application, object
  TYPES: BEGIN OF runner_application,
           os TYPE string,
           architecture TYPE string,
           download_url TYPE string,
           filename TYPE string,
         END OF runner_application.

* Component schema: authentication-token, object
  TYPES: BEGIN OF authentication_token_permissio,
           dummy_workaround TYPE i,
         END OF authentication_token_permissio.
  TYPES: BEGIN OF authentication_token,
           token TYPE string,
           expires_at TYPE string,
           permissions TYPE authentication_token_permissio,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           single_file TYPE string,
           repository_selection TYPE string,
         END OF authentication_token.

* Component schema: audit-log-event, object
  TYPES: BEGIN OF audit_log_event,
           timestamp TYPE i,
           action TYPE string,
           active TYPE abap_bool,
           active_was TYPE abap_bool,
           actor TYPE string,
           blocked_user TYPE string,
           business TYPE string,
           config TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           config_was TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           content_type TYPE string,
           created_at TYPE i,
           deploy_key_fingerprint TYPE string,
           emoji TYPE string,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           events_were TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           explanation TYPE string,
           fingerprint TYPE string,
           hook_id TYPE i,
           limited_availability TYPE abap_bool,
           message TYPE string,
           name TYPE string,
           old_user TYPE string,
           openssh_public_key TYPE string,
           org TYPE string,
           previous_visibility TYPE string,
           read_only TYPE abap_bool,
           repo TYPE string,
           repository TYPE string,
           repository_public TYPE abap_bool,
           target_login TYPE string,
           team TYPE string,
           transport_protocol TYPE i,
           transport_protocol_name TYPE string,
           user TYPE string,
           visibility TYPE string,
         END OF audit_log_event.

* Component schema: actions-billing-usage, object
  TYPES: BEGIN OF actions_billing_usage_minutes_,
           ubuntu TYPE i,
           macos TYPE i,
           windows TYPE i,
         END OF actions_billing_usage_minutes_.
  TYPES: BEGIN OF actions_billing_usage,
           total_minutes_used TYPE i,
           total_paid_minutes_used TYPE i,
           included_minutes TYPE i,
           minutes_used_breakdown TYPE actions_billing_usage_minutes_,
         END OF actions_billing_usage.

* Component schema: packages-billing-usage, object
  TYPES: BEGIN OF packages_billing_usage,
           total_gigabytes_bandwidth_used TYPE i,
           total_paid_gigabytes_bandwidth TYPE i,
           included_gigabytes_bandwidth TYPE i,
         END OF packages_billing_usage.

* Component schema: combined-billing-usage, object
  TYPES: BEGIN OF combined_billing_usage,
           days_left_in_billing_cycle TYPE i,
           estimated_paid_storage_for_mon TYPE i,
           estimated_storage_for_month TYPE i,
         END OF combined_billing_usage.

* Component schema: actor, object
  TYPES: BEGIN OF actor,
           id TYPE i,
           login TYPE string,
           display_login TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           avatar_url TYPE string,
         END OF actor.

* Component schema: label, object
  TYPES: BEGIN OF label,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           name TYPE string,
           description TYPE string,
           color TYPE string,
           default TYPE abap_bool,
         END OF label.

* Component schema: milestone, object
  TYPES milestone_creator TYPE string. "   todo
  TYPES: BEGIN OF milestone,
           url TYPE string,
           html_url TYPE string,
           labels_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           number TYPE i,
           state TYPE string,
           title TYPE string,
           description TYPE string,
           creator TYPE milestone_creator,
           open_issues TYPE i,
           closed_issues TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           closed_at TYPE string,
           due_on TYPE string,
         END OF milestone.

* Component schema: author_association, string
  TYPES author_association TYPE string.

* Component schema: issue-simple, object
  TYPES issue_simple_performed_via_git TYPE string. "   todo
  TYPES: BEGIN OF issue_simple_pull_request,
           merged_at TYPE string,
           diff_url TYPE string,
           html_url TYPE string,
           patch_url TYPE string,
           url TYPE string,
         END OF issue_simple_pull_request.
  TYPES issue_simple_milestone TYPE string. "   todo
  TYPES issue_simple_assignee TYPE string. "   todo
  TYPES issue_simple_user TYPE string. "   todo
  TYPES: BEGIN OF issue_simple,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           repository_url TYPE string,
           labels_url TYPE string,
           comments_url TYPE string,
           events_url TYPE string,
           html_url TYPE string,
           number TYPE i,
           state TYPE string,
           title TYPE string,
           body TYPE string,
           user TYPE issue_simple_user,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assignee TYPE issue_simple_assignee,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           milestone TYPE issue_simple_milestone,
           locked TYPE abap_bool,
           active_lock_reason TYPE string,
           comments TYPE i,
           pull_request TYPE issue_simple_pull_request,
           closed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           author_association TYPE author_association,
           body_html TYPE string,
           body_text TYPE string,
           timeline_url TYPE string,
           repository TYPE repository,
           performed_via_github_app TYPE issue_simple_performed_via_git,
         END OF issue_simple.

* Component schema: reaction-rollup, object
  TYPES: BEGIN OF reaction_rollup,
           url TYPE string,
           total_count TYPE i,
           n1 TYPE i,
           _1 TYPE i,
           laugh TYPE i,
           confused TYPE i,
           heart TYPE i,
           hooray TYPE i,
           eyes TYPE i,
           rocket TYPE i,
         END OF reaction_rollup.

* Component schema: issue-comment, object
  TYPES issue_comment_performed_via_gi TYPE string. "   todo
  TYPES issue_comment_user TYPE string. "   todo
  TYPES: BEGIN OF issue_comment,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           body TYPE string,
           body_text TYPE string,
           body_html TYPE string,
           html_url TYPE string,
           user TYPE issue_comment_user,
           created_at TYPE string,
           updated_at TYPE string,
           issue_url TYPE string,
           author_association TYPE author_association,
           performed_via_github_app TYPE issue_comment_performed_via_gi,
           reactions TYPE reaction_rollup,
         END OF issue_comment.

* Component schema: event, object
  TYPES: BEGIN OF event_payload,
           action TYPE string,
           issue TYPE issue_simple,
           comment TYPE issue_comment,
           pages TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF event_payload.
  TYPES: BEGIN OF event_repo,
           id TYPE i,
           name TYPE string,
           url TYPE string,
         END OF event_repo.
  TYPES: BEGIN OF event,
           id TYPE string,
           type TYPE string,
           actor TYPE actor,
           repo TYPE event_repo,
           org TYPE actor,
           payload TYPE event_payload,
           public TYPE abap_bool,
           created_at TYPE string,
         END OF event.

* Component schema: link-with-type, object
  TYPES: BEGIN OF link_with_type,
           href TYPE string,
           type TYPE string,
         END OF link_with_type.

* Component schema: feed, object
  TYPES: BEGIN OF feed__links,
           timeline TYPE link_with_type,
           user TYPE link_with_type,
           security_advisories TYPE link_with_type,
           current_user TYPE link_with_type,
           current_user_public TYPE link_with_type,
           current_user_actor TYPE link_with_type,
           current_user_organization TYPE link_with_type,
           current_user_organizations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF feed__links.
  TYPES: BEGIN OF feed,
           timeline_url TYPE string,
           user_url TYPE string,
           current_user_public_url TYPE string,
           current_user_url TYPE string,
           current_user_actor_url TYPE string,
           current_user_organization_url TYPE string,
           current_user_organization_urls TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           security_advisories_url TYPE string,
           _links TYPE feed__links,
         END OF feed.

* Component schema: base-gist, object
  TYPES base_gist_owner TYPE string. "   todo
  TYPES base_gist_user TYPE string. "   todo
  TYPES: BEGIN OF base_gist_files,
           dummy_workaround TYPE i,
         END OF base_gist_files.
  TYPES: BEGIN OF base_gist,
           url TYPE string,
           forks_url TYPE string,
           commits_url TYPE string,
           id TYPE string,
           node_id TYPE string,
           git_pull_url TYPE string,
           git_push_url TYPE string,
           html_url TYPE string,
           files TYPE base_gist_files,
           public TYPE abap_bool,
           created_at TYPE string,
           updated_at TYPE string,
           description TYPE string,
           comments TYPE i,
           user TYPE base_gist_user,
           comments_url TYPE string,
           owner TYPE base_gist_owner,
           truncated TYPE abap_bool,
           forks TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           history TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF base_gist.

* Component schema: gist-simple, object
  TYPES: BEGIN OF gist_simple_files,
           dummy_workaround TYPE i,
         END OF gist_simple_files.
  TYPES: BEGIN OF gist_simple,
           url TYPE string,
           forks_url TYPE string,
           commits_url TYPE string,
           id TYPE string,
           node_id TYPE string,
           git_pull_url TYPE string,
           git_push_url TYPE string,
           html_url TYPE string,
           files TYPE gist_simple_files,
           public TYPE abap_bool,
           created_at TYPE string,
           updated_at TYPE string,
           description TYPE string,
           comments TYPE i,
           user TYPE string,
           comments_url TYPE string,
           owner TYPE simple_user,
           truncated TYPE abap_bool,
         END OF gist_simple.

* Component schema: gist-comment, object
  TYPES gist_comment_user TYPE string. "   todo
  TYPES: BEGIN OF gist_comment,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           body TYPE string,
           user TYPE gist_comment_user,
           created_at TYPE string,
           updated_at TYPE string,
           author_association TYPE author_association,
         END OF gist_comment.

* Component schema: gist-commit, object
  TYPES: BEGIN OF gist_commit_change_status,
           total TYPE i,
           additions TYPE i,
           deletions TYPE i,
         END OF gist_commit_change_status.
  TYPES gist_commit_user TYPE string. "   todo
  TYPES: BEGIN OF gist_commit,
           url TYPE string,
           version TYPE string,
           user TYPE gist_commit_user,
           change_status TYPE gist_commit_change_status,
           committed_at TYPE string,
         END OF gist_commit.

* Component schema: gitignore-template, object
  TYPES: BEGIN OF gitignore_template,
           name TYPE string,
           source TYPE string,
         END OF gitignore_template.

* Component schema: issue, object
  TYPES issue_performed_via_github_app TYPE string. "   todo
  TYPES issue_closed_by TYPE string. "   todo
  TYPES: BEGIN OF issue_pull_request,
           merged_at TYPE string,
           diff_url TYPE string,
           html_url TYPE string,
           patch_url TYPE string,
           url TYPE string,
         END OF issue_pull_request.
  TYPES issue_milestone TYPE string. "   todo
  TYPES issue_assignee TYPE string. "   todo
  TYPES issue_user TYPE string. "   todo
  TYPES: BEGIN OF issue,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           repository_url TYPE string,
           labels_url TYPE string,
           comments_url TYPE string,
           events_url TYPE string,
           html_url TYPE string,
           number TYPE i,
           state TYPE string,
           title TYPE string,
           body TYPE string,
           user TYPE issue_user,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assignee TYPE issue_assignee,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           milestone TYPE issue_milestone,
           locked TYPE abap_bool,
           active_lock_reason TYPE string,
           comments TYPE i,
           pull_request TYPE issue_pull_request,
           closed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           closed_by TYPE issue_closed_by,
           body_html TYPE string,
           body_text TYPE string,
           timeline_url TYPE string,
           repository TYPE repository,
           performed_via_github_app TYPE issue_performed_via_github_app,
           author_association TYPE author_association,
           reactions TYPE reaction_rollup,
         END OF issue.

* Component schema: license, object
  TYPES: BEGIN OF license,
           key TYPE string,
           name TYPE string,
           spdx_id TYPE string,
           url TYPE string,
           node_id TYPE string,
           html_url TYPE string,
           description TYPE string,
           implementation TYPE string,
           permissions TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           conditions TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           limitations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           body TYPE string,
           featured TYPE abap_bool,
         END OF license.

* Component schema: marketplace-listing-plan, object
  TYPES: BEGIN OF marketplace_listing_plan,
           url TYPE string,
           accounts_url TYPE string,
           id TYPE i,
           number TYPE i,
           name TYPE string,
           description TYPE string,
           monthly_price_in_cents TYPE i,
           yearly_price_in_cents TYPE i,
           price_model TYPE string,
           has_free_trial TYPE abap_bool,
           unit_name TYPE string,
           state TYPE string,
           bullets TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF marketplace_listing_plan.

* Component schema: marketplace-purchase, object
  TYPES: BEGIN OF marketplace_purchase_marketp01,
           billing_cycle TYPE string,
           next_billing_date TYPE string,
           is_installed TYPE abap_bool,
           unit_count TYPE i,
           on_free_trial TYPE abap_bool,
           free_trial_ends_on TYPE string,
           updated_at TYPE string,
           plan TYPE marketplace_listing_plan,
         END OF marketplace_purchase_marketp01.
  TYPES: BEGIN OF marketplace_purchase_marketpla,
           is_installed TYPE abap_bool,
           effective_date TYPE string,
           unit_count TYPE i,
           id TYPE i,
           plan TYPE marketplace_listing_plan,
         END OF marketplace_purchase_marketpla.
  TYPES: BEGIN OF marketplace_purchase,
           url TYPE string,
           type TYPE string,
           id TYPE i,
           login TYPE string,
           organization_billing_email TYPE string,
           marketplace_pending_change TYPE marketplace_purchase_marketpla,
           marketplace_purchase TYPE marketplace_purchase_marketp01,
         END OF marketplace_purchase.

* Component schema: api-overview, object
  TYPES: BEGIN OF api_overview_ssh_key_fingerpri,
           sha256_rsa TYPE string,
           sha256_dsa TYPE string,
         END OF api_overview_ssh_key_fingerpri.
  TYPES: BEGIN OF api_overview,
           verifiable_password_authentica TYPE abap_bool,
           ssh_key_fingerprints TYPE api_overview_ssh_key_fingerpri,
           hooks TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           web TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           api TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           git TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           pages TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           importer TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           actions TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF api_overview.

* Component schema: minimal-repository, object
  TYPES: BEGIN OF minimal_repository_license,
           key TYPE string,
           name TYPE string,
           spdx_id TYPE string,
           url TYPE string,
           node_id TYPE string,
         END OF minimal_repository_license.
  TYPES: BEGIN OF minimal_repository_template_re,
           dummy_workaround TYPE i,
         END OF minimal_repository_template_re.
  TYPES: BEGIN OF minimal_repository_permissions,
           admin TYPE abap_bool,
           push TYPE abap_bool,
           pull TYPE abap_bool,
         END OF minimal_repository_permissions.
  TYPES: BEGIN OF minimal_repository_owner,
           dummy_workaround TYPE i,
         END OF minimal_repository_owner.
  TYPES: BEGIN OF minimal_repository,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           owner TYPE minimal_repository_owner,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           forks_url TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           git_url TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           pulls_url TYPE string,
           releases_url TYPE string,
           ssh_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           clone_url TYPE string,
           mirror_url TYPE string,
           hooks_url TYPE string,
           svn_url TYPE string,
           homepage TYPE string,
           language TYPE string,
           forks_count TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           size TYPE i,
           default_branch TYPE string,
           open_issues_count TYPE i,
           is_template TYPE abap_bool,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           visibility TYPE string,
           pushed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           permissions TYPE minimal_repository_permissions,
           template_repository TYPE minimal_repository_template_re,
           temp_clone_token TYPE string,
           delete_branch_on_merge TYPE abap_bool,
           subscribers_count TYPE i,
           network_count TYPE i,
           license TYPE minimal_repository_license,
           forks TYPE i,
           open_issues TYPE i,
           watchers TYPE i,
         END OF minimal_repository.

* Component schema: thread, object
  TYPES: BEGIN OF thread_subject,
           title TYPE string,
           url TYPE string,
           latest_comment_url TYPE string,
           type TYPE string,
         END OF thread_subject.
  TYPES: BEGIN OF thread,
           id TYPE string,
           repository TYPE minimal_repository,
           subject TYPE thread_subject,
           reason TYPE string,
           unread TYPE abap_bool,
           updated_at TYPE string,
           last_read_at TYPE string,
           url TYPE string,
           subscription_url TYPE string,
         END OF thread.

* Component schema: thread-subscription, object
  TYPES: BEGIN OF thread_subscription,
           subscribed TYPE abap_bool,
           ignored TYPE abap_bool,
           reason TYPE string,
           created_at TYPE string,
           url TYPE string,
           thread_url TYPE string,
           repository_url TYPE string,
         END OF thread_subscription.

* Component schema: organization-full, object
  TYPES: BEGIN OF organization_full_plan,
           name TYPE string,
           space TYPE i,
           private_repos TYPE i,
           filled_seats TYPE i,
           seats TYPE i,
         END OF organization_full_plan.
  TYPES: BEGIN OF organization_full,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           hooks_url TYPE string,
           issues_url TYPE string,
           members_url TYPE string,
           public_members_url TYPE string,
           avatar_url TYPE string,
           description TYPE string,
           name TYPE string,
           company TYPE string,
           blog TYPE string,
           location TYPE string,
           email TYPE string,
           twitter_username TYPE string,
           is_verified TYPE abap_bool,
           has_organization_projects TYPE abap_bool,
           has_repository_projects TYPE abap_bool,
           public_repos TYPE i,
           public_gists TYPE i,
           followers TYPE i,
           following TYPE i,
           html_url TYPE string,
           created_at TYPE string,
           type TYPE string,
           total_private_repos TYPE i,
           owned_private_repos TYPE i,
           private_gists TYPE i,
           disk_usage TYPE i,
           collaborators TYPE i,
           billing_email TYPE string,
           plan TYPE organization_full_plan,
           default_repository_permission TYPE string,
           members_can_create_repositorie TYPE abap_bool,
           two_factor_requirement_enabled TYPE abap_bool,
           members_allowed_repository_cre TYPE string,
           members_can_create_public_repo TYPE abap_bool,
           members_can_create_private_rep TYPE abap_bool,
           members_can_create_internal_re TYPE abap_bool,
           members_can_create_pages TYPE abap_bool,
           updated_at TYPE string,
         END OF organization_full.

* Component schema: enabled-repositories, string
  TYPES enabled_repositories TYPE string.

* Component schema: actions-organization-permissions, object
  TYPES: BEGIN OF actions_organization_permissio,
           enabled_repositories TYPE enabled_repositories,
           selected_repositories_url TYPE string,
           allowed_actions TYPE allowed_actions,
           selected_actions_url TYPE selected_actions_url,
         END OF actions_organization_permissio.

* Component schema: runner-groups-org, object
  TYPES: BEGIN OF runner_groups_org,
           id TYPE f,
           name TYPE string,
           visibility TYPE string,
           default TYPE abap_bool,
           selected_repositories_url TYPE string,
           runners_url TYPE string,
           inherited TYPE abap_bool,
           inherited_allows_public_reposi TYPE abap_bool,
           allows_public_repositories TYPE abap_bool,
         END OF runner_groups_org.

* Component schema: organization-actions-secret, object
  TYPES: BEGIN OF organization_actions_secret,
           name TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           visibility TYPE string,
           selected_repositories_url TYPE string,
         END OF organization_actions_secret.

* Component schema: actions-public-key, object
  TYPES: BEGIN OF actions_public_key,
           key_id TYPE string,
           key TYPE string,
           id TYPE i,
           url TYPE string,
           title TYPE string,
           created_at TYPE string,
         END OF actions_public_key.

* Component schema: credential-authorization, object
  TYPES: BEGIN OF credential_authorization,
           login TYPE string,
           credential_id TYPE i,
           credential_type TYPE string,
           token_last_eight TYPE string,
           credential_authorized_at TYPE string,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           fingerprint TYPE string,
           credential_accessed_at TYPE string,
           authorized_credential_id TYPE i,
           authorized_credential_title TYPE string,
           authorized_credential_note TYPE string,
         END OF credential_authorization.

* Component schema: organization-invitation, object
  TYPES: BEGIN OF organization_invitation,
           id TYPE i,
           login TYPE string,
           email TYPE string,
           role TYPE string,
           created_at TYPE string,
           failed_at TYPE string,
           failed_reason TYPE string,
           inviter TYPE simple_user,
           team_count TYPE i,
           invitation_team_url TYPE string,
           node_id TYPE string,
           invitation_teams_url TYPE string,
         END OF organization_invitation.

* Component schema: org-hook, object
  TYPES: BEGIN OF org_hook_config,
           url TYPE string,
           insecure_ssl TYPE string,
           content_type TYPE string,
           secret TYPE string,
         END OF org_hook_config.
  TYPES: BEGIN OF org_hook,
           id TYPE i,
           url TYPE string,
           ping_url TYPE string,
           name TYPE string,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           config TYPE org_hook_config,
           updated_at TYPE string,
           created_at TYPE string,
           type TYPE string,
         END OF org_hook.

* Component schema: interaction-group, string
  TYPES interaction_group TYPE string.

* Component schema: interaction-limit-response, object
  TYPES: BEGIN OF interaction_limit_response,
           limit TYPE interaction_group,
           origin TYPE string,
           expires_at TYPE string,
         END OF interaction_limit_response.

* Component schema: interaction-expiry, string
  TYPES interaction_expiry TYPE string.

* Component schema: interaction-limit, object
  TYPES: BEGIN OF interaction_limit,
           limit TYPE interaction_group,
           expiry TYPE interaction_expiry,
         END OF interaction_limit.

* Component schema: team-simple, object
  TYPES: BEGIN OF team_simple,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           members_url TYPE string,
           name TYPE string,
           description TYPE string,
           permission TYPE string,
           privacy TYPE string,
           html_url TYPE string,
           repositories_url TYPE string,
           slug TYPE string,
           ldap_dn TYPE string,
         END OF team_simple.

* Component schema: team, object
  TYPES team_parent TYPE string. "   todo
  TYPES: BEGIN OF team,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           slug TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           url TYPE string,
           html_url TYPE string,
           members_url TYPE string,
           repositories_url TYPE string,
           parent TYPE team_parent,
         END OF team.

* Component schema: org-membership, object
  TYPES: BEGIN OF org_membership_permissions,
           can_create_repository TYPE abap_bool,
         END OF org_membership_permissions.
  TYPES org_membership_user TYPE string. "   todo
  TYPES: BEGIN OF org_membership,
           url TYPE string,
           state TYPE string,
           role TYPE string,
           organization_url TYPE string,
           organization TYPE organization_simple,
           user TYPE org_membership_user,
           permissions TYPE org_membership_permissions,
         END OF org_membership.

* Component schema: migration, object
  TYPES migration_owner TYPE string. "   todo
  TYPES: BEGIN OF migration,
           id TYPE i,
           owner TYPE migration_owner,
           guid TYPE string,
           state TYPE string,
           lock_repositories TYPE abap_bool,
           exclude_attachments TYPE abap_bool,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           url TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           node_id TYPE string,
           archive_url TYPE string,
           exclude TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF migration.

* Component schema: project, object
  TYPES project_creator TYPE string. "   todo
  TYPES: BEGIN OF project,
           owner_url TYPE string,
           url TYPE string,
           html_url TYPE string,
           columns_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           body TYPE string,
           number TYPE i,
           state TYPE string,
           creator TYPE project_creator,
           created_at TYPE string,
           updated_at TYPE string,
           organization_permission TYPE string,
           private TYPE abap_bool,
         END OF project.

* Component schema: group-mapping, object
  TYPES: BEGIN OF group_mapping,
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           group_id TYPE string,
           group_name TYPE string,
           group_description TYPE string,
           status TYPE string,
           synced_at TYPE string,
         END OF group_mapping.

* Component schema: team-full, object
  TYPES team_full_parent TYPE string. "   todo
  TYPES: BEGIN OF team_full,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           name TYPE string,
           slug TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           members_url TYPE string,
           repositories_url TYPE string,
           parent TYPE team_full_parent,
           members_count TYPE i,
           repos_count TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           organization TYPE organization_full,
           ldap_dn TYPE string,
         END OF team_full.

* Component schema: team-discussion, object
  TYPES team_discussion_author TYPE string. "   todo
  TYPES: BEGIN OF team_discussion,
           author TYPE team_discussion_author,
           body TYPE string,
           body_html TYPE string,
           body_version TYPE string,
           comments_count TYPE i,
           comments_url TYPE string,
           created_at TYPE string,
           last_edited_at TYPE string,
           html_url TYPE string,
           node_id TYPE string,
           number TYPE i,
           pinned TYPE abap_bool,
           private TYPE abap_bool,
           team_url TYPE string,
           title TYPE string,
           updated_at TYPE string,
           url TYPE string,
           reactions TYPE reaction_rollup,
         END OF team_discussion.

* Component schema: team-discussion-comment, object
  TYPES team_discussion_comment_author TYPE string. "   todo
  TYPES: BEGIN OF team_discussion_comment,
           author TYPE team_discussion_comment_author,
           body TYPE string,
           body_html TYPE string,
           body_version TYPE string,
           created_at TYPE string,
           last_edited_at TYPE string,
           discussion_url TYPE string,
           html_url TYPE string,
           node_id TYPE string,
           number TYPE i,
           updated_at TYPE string,
           url TYPE string,
           reactions TYPE reaction_rollup,
         END OF team_discussion_comment.

* Component schema: reaction, object
  TYPES reaction_user TYPE string. "   todo
  TYPES: BEGIN OF reaction,
           id TYPE i,
           node_id TYPE string,
           user TYPE reaction_user,
           content TYPE string,
           created_at TYPE string,
         END OF reaction.

* Component schema: team-membership, object
  TYPES: BEGIN OF team_membership,
           url TYPE string,
           role TYPE string,
           state TYPE string,
         END OF team_membership.

* Component schema: team-project, object
  TYPES: BEGIN OF team_project_permissions,
           read TYPE abap_bool,
           write TYPE abap_bool,
           admin TYPE abap_bool,
         END OF team_project_permissions.
  TYPES: BEGIN OF team_project,
           owner_url TYPE string,
           url TYPE string,
           html_url TYPE string,
           columns_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           body TYPE string,
           number TYPE i,
           state TYPE string,
           creator TYPE simple_user,
           created_at TYPE string,
           updated_at TYPE string,
           organization_permission TYPE string,
           private TYPE abap_bool,
           permissions TYPE team_project_permissions,
         END OF team_project.

* Component schema: team-repository, object
  TYPES: BEGIN OF team_repository_template_repos,
           dummy_workaround TYPE i,
         END OF team_repository_template_repos.
  TYPES team_repository_owner TYPE string. "   todo
  TYPES: BEGIN OF team_repository_permissions,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           triage TYPE abap_bool,
           push TYPE abap_bool,
           maintain TYPE abap_bool,
         END OF team_repository_permissions.
  TYPES team_repository_license TYPE string. "   todo
  TYPES: BEGIN OF team_repository,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           license TYPE team_repository_license,
           forks TYPE i,
           permissions TYPE team_repository_permissions,
           owner TYPE team_repository_owner,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           forks_url TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           git_url TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           pulls_url TYPE string,
           releases_url TYPE string,
           ssh_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           clone_url TYPE string,
           mirror_url TYPE string,
           hooks_url TYPE string,
           svn_url TYPE string,
           homepage TYPE string,
           language TYPE string,
           forks_count TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           size TYPE i,
           default_branch TYPE string,
           open_issues_count TYPE i,
           is_template TYPE abap_bool,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           visibility TYPE string,
           pushed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           allow_rebase_merge TYPE abap_bool,
           template_repository TYPE team_repository_template_repos,
           temp_clone_token TYPE string,
           allow_squash_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           subscribers_count TYPE i,
           network_count TYPE i,
           open_issues TYPE i,
           watchers TYPE i,
           master_branch TYPE string,
         END OF team_repository.

* Component schema: project-card, object
  TYPES project_card_creator TYPE string. "   todo
  TYPES: BEGIN OF project_card,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           note TYPE string,
           creator TYPE project_card_creator,
           created_at TYPE string,
           updated_at TYPE string,
           archived TYPE abap_bool,
           column_url TYPE string,
           content_url TYPE string,
           project_url TYPE string,
         END OF project_card.

* Component schema: project-column, object
  TYPES: BEGIN OF project_column,
           url TYPE string,
           project_url TYPE string,
           cards_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
         END OF project_column.

* Component schema: repository-collaborator-permission, object
  TYPES repository_collaborator_perm01 TYPE string. "   todo
  TYPES: BEGIN OF repository_collaborator_permis,
           permission TYPE string,
           user TYPE repository_collaborator_perm01,
         END OF repository_collaborator_permis.

* Component schema: rate-limit, object
  TYPES: BEGIN OF rate_limit,
           limit TYPE i,
           remaining TYPE i,
           reset TYPE i,
         END OF rate_limit.

* Component schema: rate-limit-overview, object
  TYPES: BEGIN OF rate_limit_overview_resources,
           core TYPE rate_limit,
           graphql TYPE rate_limit,
           search TYPE rate_limit,
           source_import TYPE rate_limit,
           integration_manifest TYPE rate_limit,
           code_scanning_upload TYPE rate_limit,
         END OF rate_limit_overview_resources.
  TYPES: BEGIN OF rate_limit_overview,
           resources TYPE rate_limit_overview_resources,
           rate TYPE rate_limit,
         END OF rate_limit_overview.

* Component schema: full-repository, object
  TYPES full_repository_organization TYPE string. "   todo
  TYPES full_repository_license TYPE string. "   todo
  TYPES: BEGIN OF full_repository_template_repos,
           dummy_workaround TYPE i,
         END OF full_repository_template_repos.
  TYPES: BEGIN OF full_repository_permissions,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           push TYPE abap_bool,
         END OF full_repository_permissions.
  TYPES full_repository_owner TYPE string. "   todo
  TYPES: BEGIN OF full_repository,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           owner TYPE full_repository_owner,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           forks_url TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           git_url TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           pulls_url TYPE string,
           releases_url TYPE string,
           ssh_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           clone_url TYPE string,
           mirror_url TYPE string,
           hooks_url TYPE string,
           svn_url TYPE string,
           homepage TYPE string,
           language TYPE string,
           forks_count TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           size TYPE i,
           default_branch TYPE string,
           open_issues_count TYPE i,
           is_template TYPE abap_bool,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           visibility TYPE string,
           pushed_at TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           permissions TYPE full_repository_permissions,
           allow_rebase_merge TYPE abap_bool,
           template_repository TYPE full_repository_template_repos,
           temp_clone_token TYPE string,
           allow_squash_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           subscribers_count TYPE i,
           network_count TYPE i,
           license TYPE full_repository_license,
           organization TYPE full_repository_organization,
           parent TYPE repository,
           source TYPE repository,
           forks TYPE i,
           master_branch TYPE string,
           open_issues TYPE i,
           watchers TYPE i,
           anonymous_access_enabled TYPE abap_bool,
         END OF full_repository.

* Component schema: artifact, object
  TYPES: BEGIN OF artifact,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           size_in_bytes TYPE i,
           url TYPE string,
           archive_download_url TYPE string,
           expired TYPE abap_bool,
           created_at TYPE string,
           expires_at TYPE string,
           updated_at TYPE string,
         END OF artifact.

* Component schema: job, object
  TYPES: BEGIN OF job,
           id TYPE i,
           run_id TYPE i,
           run_url TYPE string,
           node_id TYPE string,
           head_sha TYPE string,
           url TYPE string,
           html_url TYPE string,
           status TYPE string,
           conclusion TYPE string,
           started_at TYPE string,
           completed_at TYPE string,
           name TYPE string,
           steps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           check_run_url TYPE string,
         END OF job.

* Component schema: actions-enabled, boolean
  TYPES actions_enabled TYPE abap_bool.

* Component schema: actions-repository-permissions, object
  TYPES: BEGIN OF actions_repository_permissions,
           enabled TYPE actions_enabled,
           allowed_actions TYPE allowed_actions,
           selected_actions_url TYPE selected_actions_url,
         END OF actions_repository_permissions.

* Component schema: pull-request-minimal, object
  TYPES: BEGIN OF pull_request_minimal_base_repo,
           id TYPE i,
           url TYPE string,
           name TYPE string,
         END OF pull_request_minimal_base_repo.
  TYPES: BEGIN OF pull_request_minimal_base,
           ref TYPE string,
           sha TYPE string,
           repo TYPE pull_request_minimal_base_repo,
         END OF pull_request_minimal_base.
  TYPES: BEGIN OF pull_request_minimal_head_repo,
           id TYPE i,
           url TYPE string,
           name TYPE string,
         END OF pull_request_minimal_head_repo.
  TYPES: BEGIN OF pull_request_minimal_head,
           ref TYPE string,
           sha TYPE string,
           repo TYPE pull_request_minimal_head_repo,
         END OF pull_request_minimal_head.
  TYPES: BEGIN OF pull_request_minimal,
           id TYPE i,
           number TYPE i,
           url TYPE string,
           head TYPE pull_request_minimal_head,
           base TYPE pull_request_minimal_base,
         END OF pull_request_minimal.

* Component schema: simple-commit, object
  TYPES: BEGIN OF simple_commit_committer,
           name TYPE string,
           email TYPE string,
         END OF simple_commit_committer.
  TYPES: BEGIN OF simple_commit_author,
           name TYPE string,
           email TYPE string,
         END OF simple_commit_author.
  TYPES: BEGIN OF simple_commit,
           id TYPE string,
           tree_id TYPE string,
           message TYPE string,
           timestamp TYPE string,
           author TYPE simple_commit_author,
           committer TYPE simple_commit_committer,
         END OF simple_commit.

* Component schema: workflow-run, object
  TYPES: BEGIN OF workflow_run,
           id TYPE i,
           name TYPE string,
           node_id TYPE string,
           head_branch TYPE string,
           head_sha TYPE string,
           run_number TYPE i,
           event TYPE string,
           status TYPE string,
           conclusion TYPE string,
           workflow_id TYPE i,
           url TYPE string,
           html_url TYPE string,
           pull_requests TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           created_at TYPE string,
           updated_at TYPE string,
           jobs_url TYPE string,
           logs_url TYPE string,
           check_suite_url TYPE string,
           artifacts_url TYPE string,
           cancel_url TYPE string,
           rerun_url TYPE string,
           workflow_url TYPE string,
           head_commit TYPE simple_commit,
           repository TYPE minimal_repository,
           head_repository TYPE minimal_repository,
           head_repository_id TYPE i,
         END OF workflow_run.

* Component schema: workflow-run-usage, object
  TYPES: BEGIN OF workflow_run_usage_billable_wi,
           total_ms TYPE i,
           jobs TYPE i,
         END OF workflow_run_usage_billable_wi.
  TYPES: BEGIN OF workflow_run_usage_billable_ma,
           total_ms TYPE i,
           jobs TYPE i,
         END OF workflow_run_usage_billable_ma.
  TYPES: BEGIN OF workflow_run_usage_billable_ub,
           total_ms TYPE i,
           jobs TYPE i,
         END OF workflow_run_usage_billable_ub.
  TYPES: BEGIN OF workflow_run_usage_billable,
           ubuntu TYPE workflow_run_usage_billable_ub,
           macos TYPE workflow_run_usage_billable_ma,
           windows TYPE workflow_run_usage_billable_wi,
         END OF workflow_run_usage_billable.
  TYPES: BEGIN OF workflow_run_usage,
           billable TYPE workflow_run_usage_billable,
           run_duration_ms TYPE i,
         END OF workflow_run_usage.

* Component schema: actions-secret, object
  TYPES: BEGIN OF actions_secret,
           name TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
         END OF actions_secret.

* Component schema: workflow, object
  TYPES: BEGIN OF workflow,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           path TYPE string,
           state TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           url TYPE string,
           html_url TYPE string,
           badge_url TYPE string,
           deleted_at TYPE string,
         END OF workflow.

* Component schema: workflow-usage, object
  TYPES: BEGIN OF workflow_usage_billable_window,
           total_ms TYPE i,
         END OF workflow_usage_billable_window.
  TYPES: BEGIN OF workflow_usage_billable_macos,
           total_ms TYPE i,
         END OF workflow_usage_billable_macos.
  TYPES: BEGIN OF workflow_usage_billable_ubuntu,
           total_ms TYPE i,
         END OF workflow_usage_billable_ubuntu.
  TYPES: BEGIN OF workflow_usage_billable,
           ubuntu TYPE workflow_usage_billable_ubuntu,
           macos TYPE workflow_usage_billable_macos,
           windows TYPE workflow_usage_billable_window,
         END OF workflow_usage_billable.
  TYPES: BEGIN OF workflow_usage,
           billable TYPE workflow_usage_billable,
         END OF workflow_usage.

* Component schema: protected-branch-admin-enforced, object
  TYPES: BEGIN OF protected_branch_admin_enforce,
           url TYPE string,
           enabled TYPE abap_bool,
         END OF protected_branch_admin_enforce.

* Component schema: protected-branch-pull-request-review, object
  TYPES: BEGIN OF protected_branch_pull_reques01,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           url TYPE string,
           users_url TYPE string,
           teams_url TYPE string,
         END OF protected_branch_pull_reques01.
  TYPES: BEGIN OF protected_branch_pull_request_,
           url TYPE string,
           dismissal_restrictions TYPE protected_branch_pull_reques01,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
         END OF protected_branch_pull_request_.

* Component schema: branch-restriction-policy, object
  TYPES: BEGIN OF branch_restriction_policy,
           url TYPE string,
           users_url TYPE string,
           teams_url TYPE string,
           apps_url TYPE string,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF branch_restriction_policy.

* Component schema: branch-protection, object
  TYPES: BEGIN OF branch_protection_allow_deleti,
           enabled TYPE abap_bool,
         END OF branch_protection_allow_deleti.
  TYPES: BEGIN OF branch_protection_allow_force_,
           enabled TYPE abap_bool,
         END OF branch_protection_allow_force_.
  TYPES: BEGIN OF branch_protection_required_lin,
           enabled TYPE abap_bool,
         END OF branch_protection_required_lin.
  TYPES: BEGIN OF branch_protection_required_sta,
           url TYPE string,
           enforcement_level TYPE string,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           contexts_url TYPE string,
         END OF branch_protection_required_sta.
  TYPES: BEGIN OF branch_protection,
           url TYPE string,
           required_status_checks TYPE branch_protection_required_sta,
           enforce_admins TYPE protected_branch_admin_enforce,
           required_pull_request_reviews TYPE protected_branch_pull_request_,
           restrictions TYPE branch_restriction_policy,
           required_linear_history TYPE branch_protection_required_lin,
           allow_force_pushes TYPE branch_protection_allow_force_,
           allow_deletions TYPE branch_protection_allow_deleti,
           enabled TYPE abap_bool,
           name TYPE string,
           protection_url TYPE string,
         END OF branch_protection.

* Component schema: short-branch, object
  TYPES: BEGIN OF short_branch_commit,
           sha TYPE string,
           url TYPE string,
         END OF short_branch_commit.
  TYPES: BEGIN OF short_branch,
           name TYPE string,
           commit TYPE short_branch_commit,
           protected TYPE abap_bool,
           protection TYPE branch_protection,
           protection_url TYPE string,
         END OF short_branch.

* Component schema: git-user, object
  TYPES: BEGIN OF git_user,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF git_user.

* Component schema: verification, object
  TYPES: BEGIN OF verification,
           verified TYPE abap_bool,
           reason TYPE string,
           payload TYPE string,
           signature TYPE string,
         END OF verification.

* Component schema: commit, object
  TYPES: BEGIN OF commit_stats,
           additions TYPE i,
           deletions TYPE i,
           total TYPE i,
         END OF commit_stats.
  TYPES commit_committer TYPE string. "   todo
  TYPES commit_author TYPE string. "   todo
  TYPES: BEGIN OF commit_commit_tree,
           sha TYPE string,
           url TYPE string,
         END OF commit_commit_tree.
  TYPES commit_commit_committer TYPE string. "   todo
  TYPES commit_commit_author TYPE string. "   todo
  TYPES: BEGIN OF commit_commit,
           url TYPE string,
           author TYPE commit_commit_author,
           committer TYPE commit_commit_committer,
           message TYPE string,
           comment_count TYPE i,
           tree TYPE commit_commit_tree,
           verification TYPE verification,
         END OF commit_commit.
  TYPES: BEGIN OF commit,
           url TYPE string,
           sha TYPE string,
           node_id TYPE string,
           html_url TYPE string,
           comments_url TYPE string,
           commit TYPE commit_commit,
           author TYPE commit_author,
           committer TYPE commit_committer,
           parents TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           stats TYPE commit_stats,
           files TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF commit.

* Component schema: branch-with-protection, object
  TYPES: BEGIN OF branch_with_protection__links,
           html TYPE string,
           self TYPE string,
         END OF branch_with_protection__links.
  TYPES: BEGIN OF branch_with_protection,
           name TYPE string,
           commit TYPE commit,
           _links TYPE branch_with_protection__links,
           protected TYPE abap_bool,
           protection TYPE branch_protection,
           protection_url TYPE string,
           pattern TYPE string,
           required_approving_review_coun TYPE i,
         END OF branch_with_protection.

* Component schema: status-check-policy, object
  TYPES: BEGIN OF status_check_policy,
           url TYPE string,
           strict TYPE abap_bool,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           contexts_url TYPE string,
         END OF status_check_policy.

* Component schema: protected-branch, object
  TYPES: BEGIN OF protected_branch_allow_deletio,
           enabled TYPE abap_bool,
         END OF protected_branch_allow_deletio.
  TYPES: BEGIN OF protected_branch_allow_force_p,
           enabled TYPE abap_bool,
         END OF protected_branch_allow_force_p.
  TYPES: BEGIN OF protected_branch_required_line,
           enabled TYPE abap_bool,
         END OF protected_branch_required_line.
  TYPES: BEGIN OF protected_branch_enforce_admin,
           url TYPE string,
           enabled TYPE abap_bool,
         END OF protected_branch_enforce_admin.
  TYPES: BEGIN OF protected_branch_required_sign,
           url TYPE string,
           enabled TYPE abap_bool,
         END OF protected_branch_required_sign.
  TYPES: BEGIN OF protected_branch_required_pu01,
           url TYPE string,
           users_url TYPE string,
           teams_url TYPE string,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF protected_branch_required_pu01.
  TYPES: BEGIN OF protected_branch_required_pull,
           url TYPE string,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
           dismissal_restrictions TYPE protected_branch_required_pu01,
         END OF protected_branch_required_pull.
  TYPES: BEGIN OF protected_branch,
           url TYPE string,
           required_status_checks TYPE status_check_policy,
           required_pull_request_reviews TYPE protected_branch_required_pull,
           required_signatures TYPE protected_branch_required_sign,
           enforce_admins TYPE protected_branch_enforce_admin,
           required_linear_history TYPE protected_branch_required_line,
           allow_force_pushes TYPE protected_branch_allow_force_p,
           allow_deletions TYPE protected_branch_allow_deletio,
           restrictions TYPE branch_restriction_policy,
         END OF protected_branch.

* Component schema: check-run, object
  TYPES check_run_pull_requests TYPE string. "  #/components/schemas/pull-request-minimal todo
  TYPES check_run_app TYPE string. "   todo
  TYPES: BEGIN OF check_run_check_suite,
           id TYPE i,
         END OF check_run_check_suite.
  TYPES: BEGIN OF check_run_output,
           title TYPE string,
           summary TYPE string,
           text TYPE string,
           annotations_count TYPE i,
           annotations_url TYPE string,
         END OF check_run_output.
  TYPES: BEGIN OF check_run,
           id TYPE i,
           head_sha TYPE string,
           node_id TYPE string,
           external_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           details_url TYPE string,
           status TYPE string,
           conclusion TYPE string,
           started_at TYPE string,
           completed_at TYPE string,
           output TYPE check_run_output,
           name TYPE string,
           check_suite TYPE check_run_check_suite,
           app TYPE check_run_app,
           pull_requests TYPE check_run_pull_requests,
         END OF check_run.

* Component schema: check-annotation, object
  TYPES: BEGIN OF check_annotation,
           path TYPE string,
           start_line TYPE i,
           end_line TYPE i,
           start_column TYPE i,
           end_column TYPE i,
           annotation_level TYPE string,
           title TYPE string,
           message TYPE string,
           raw_details TYPE string,
           blob_href TYPE string,
         END OF check_annotation.

* Component schema: check-suite, object
  TYPES check_suite_app TYPE string. "   todo
  TYPES: BEGIN OF check_suite,
           id TYPE i,
           node_id TYPE string,
           head_branch TYPE string,
           head_sha TYPE string,
           status TYPE string,
           conclusion TYPE string,
           url TYPE string,
           before TYPE string,
           after TYPE string,
           pull_requests TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           app TYPE check_suite_app,
           repository TYPE minimal_repository,
           created_at TYPE string,
           updated_at TYPE string,
           head_commit TYPE simple_commit,
           latest_check_runs_count TYPE i,
           check_runs_url TYPE string,
         END OF check_suite.

* Component schema: check-suite-preference, object
  TYPES: BEGIN OF check_suite_preference_prefere,
           auto_trigger_checks TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF check_suite_preference_prefere.
  TYPES: BEGIN OF check_suite_preference,
           preferences TYPE check_suite_preference_prefere,
           repository TYPE repository,
         END OF check_suite_preference.

* Component schema: code-scanning-alert-state, string
  TYPES code_scanning_alert_state TYPE string.

* Component schema: code-scanning-alert-ref, string
  TYPES code_scanning_alert_ref TYPE string.

* Component schema: alert-number, integer
  TYPES alert_number TYPE i.

* Component schema: alert-created-at, string
  TYPES alert_created_at TYPE string.

* Component schema: alert-url, string
  TYPES alert_url TYPE string.

* Component schema: alert-html-url, string
  TYPES alert_html_url TYPE string.

* Component schema: code-scanning-alert-dismissed-at, string
  TYPES code_scanning_alert_dismissed_ TYPE string.

* Component schema: code-scanning-alert-dismissed-reason, string
  TYPES code_scanning_alert_dismisse01 TYPE string.

* Component schema: code-scanning-alert-rule, object
  TYPES: BEGIN OF code_scanning_alert_rule,
           id TYPE string,
           severity TYPE string,
           description TYPE string,
         END OF code_scanning_alert_rule.

* Component schema: code-scanning-analysis-tool-name, string
  TYPES code_scanning_analysis_tool_na TYPE string.

* Component schema: code-scanning-analysis-tool, object
  TYPES: BEGIN OF code_scanning_analysis_tool,
           name TYPE code_scanning_analysis_tool_na,
           version TYPE string,
         END OF code_scanning_analysis_tool.

* Component schema: code-scanning-alert-code-scanning-alert-items, object
  TYPES: BEGIN OF code_scanning_alert_code_scann,
           number TYPE alert_number,
           created_at TYPE alert_created_at,
           url TYPE alert_url,
           html_url TYPE alert_html_url,
           state TYPE code_scanning_alert_state,
           dismissed_by TYPE simple_user,
           dismissed_at TYPE code_scanning_alert_dismissed_,
           dismissed_reason TYPE code_scanning_alert_dismisse01,
           rule TYPE code_scanning_alert_rule,
           tool TYPE code_scanning_analysis_tool,
         END OF code_scanning_alert_code_scann.

* Component schema: code-scanning-analysis-analysis-key, string
  TYPES code_scanning_analysis_analysi TYPE string.

* Component schema: code-scanning-alert-environment, string
  TYPES code_scanning_alert_environmen TYPE string.

* Component schema: code-scanning-alert-instances, array
  TYPES code_scanning_alert_instances TYPE string. " array  todo

* Component schema: code-scanning-alert-code-scanning-alert, object
  TYPES: BEGIN OF code_scanning_alert_code_sca01,
           number TYPE alert_number,
           created_at TYPE alert_created_at,
           url TYPE alert_url,
           html_url TYPE alert_html_url,
           instances TYPE code_scanning_alert_instances,
           state TYPE code_scanning_alert_state,
           dismissed_by TYPE simple_user,
           dismissed_at TYPE code_scanning_alert_dismissed_,
           dismissed_reason TYPE code_scanning_alert_dismisse01,
           rule TYPE code_scanning_alert_rule,
           tool TYPE code_scanning_analysis_tool,
         END OF code_scanning_alert_code_sca01.

* Component schema: code-scanning-alert-set-state, string
  TYPES code_scanning_alert_set_state TYPE string.

* Component schema: code-scanning-analysis-ref, string
  TYPES code_scanning_analysis_ref TYPE string.

* Component schema: code-scanning-analysis-commit-sha, string
  TYPES code_scanning_analysis_commit_ TYPE string.

* Component schema: code-scanning-analysis-created-at, string
  TYPES code_scanning_analysis_created TYPE string.

* Component schema: code-scanning-analysis-environment, string
  TYPES code_scanning_analysis_environ TYPE string.

* Component schema: code-scanning-analysis-code-scanning-analysis, object
  TYPES: BEGIN OF code_scanning_analysis_code_sc,
           commit_sha TYPE code_scanning_analysis_commit_,
           ref TYPE code_scanning_analysis_ref,
           analysis_key TYPE code_scanning_analysis_analysi,
           created_at TYPE code_scanning_analysis_created,
           tool_name TYPE code_scanning_analysis_tool_na,
           error TYPE string,
           environment TYPE code_scanning_analysis_environ,
         END OF code_scanning_analysis_code_sc.

* Component schema: code-scanning-analysis-sarif-file, string
  TYPES code_scanning_analysis_sarif_f TYPE string.

* Component schema: collaborator, object
  TYPES: BEGIN OF collaborator_permissions,
           pull TYPE abap_bool,
           push TYPE abap_bool,
           admin TYPE abap_bool,
         END OF collaborator_permissions.
  TYPES: BEGIN OF collaborator,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
           permissions TYPE collaborator_permissions,
         END OF collaborator.

* Component schema: repository-invitation, object
  TYPES repository_invitation_inviter TYPE string. "   todo
  TYPES repository_invitation_invitee TYPE string. "   todo
  TYPES: BEGIN OF repository_invitation,
           id TYPE i,
           repository TYPE minimal_repository,
           invitee TYPE repository_invitation_invitee,
           inviter TYPE repository_invitation_inviter,
           permissions TYPE string,
           created_at TYPE string,
           expired TYPE abap_bool,
           url TYPE string,
           html_url TYPE string,
           node_id TYPE string,
         END OF repository_invitation.

* Component schema: commit-comment, object
  TYPES commit_comment_user TYPE string. "   todo
  TYPES: BEGIN OF commit_comment,
           html_url TYPE string,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           body TYPE string,
           path TYPE string,
           position TYPE i,
           line TYPE i,
           commit_id TYPE string,
           user TYPE commit_comment_user,
           created_at TYPE string,
           updated_at TYPE string,
           author_association TYPE author_association,
           reactions TYPE reaction_rollup,
         END OF commit_comment.

* Component schema: scim-error, object
  TYPES: BEGIN OF scim_error,
           message TYPE string,
           documentation_url TYPE string,
           detail TYPE string,
           status TYPE i,
           scimtype TYPE string,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF scim_error.

* Component schema: branch-short, object
  TYPES: BEGIN OF branch_short_commit,
           sha TYPE string,
           url TYPE string,
         END OF branch_short_commit.
  TYPES: BEGIN OF branch_short,
           name TYPE string,
           commit TYPE branch_short_commit,
           protected TYPE abap_bool,
         END OF branch_short.

* Component schema: link, object
  TYPES: BEGIN OF link,
           href TYPE string,
         END OF link.

* Component schema: auto_merge, object
  TYPES: BEGIN OF auto_merge,
           enabled_by TYPE simple_user,
           merge_method TYPE string,
           commit_title TYPE string,
           commit_message TYPE string,
         END OF auto_merge.

* Component schema: pull-request-simple, object
  TYPES: BEGIN OF pull_request_simple__links,
           comments TYPE link,
           commits TYPE link,
           statuses TYPE link,
           html TYPE link,
           issue TYPE link,
           review_comments TYPE link,
           review_comment TYPE link,
           self TYPE link,
         END OF pull_request_simple__links.
  TYPES pull_request_simple_base_user TYPE string. "   todo
  TYPES: BEGIN OF pull_request_simple_base,
           label TYPE string,
           ref TYPE string,
           repo TYPE repository,
           sha TYPE string,
           user TYPE pull_request_simple_base_user,
         END OF pull_request_simple_base.
  TYPES pull_request_simple_head_user TYPE string. "   todo
  TYPES: BEGIN OF pull_request_simple_head,
           label TYPE string,
           ref TYPE string,
           repo TYPE repository,
           sha TYPE string,
           user TYPE pull_request_simple_head_user,
         END OF pull_request_simple_head.
  TYPES pull_request_simple_assignee TYPE string. "   todo
  TYPES pull_request_simple_milestone TYPE string. "   todo
  TYPES pull_request_simple_user TYPE string. "   todo
  TYPES: BEGIN OF pull_request_simple,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           html_url TYPE string,
           diff_url TYPE string,
           patch_url TYPE string,
           issue_url TYPE string,
           commits_url TYPE string,
           review_comments_url TYPE string,
           review_comment_url TYPE string,
           comments_url TYPE string,
           statuses_url TYPE string,
           number TYPE i,
           state TYPE string,
           locked TYPE abap_bool,
           title TYPE string,
           user TYPE pull_request_simple_user,
           body TYPE string,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           milestone TYPE pull_request_simple_milestone,
           active_lock_reason TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           closed_at TYPE string,
           merged_at TYPE string,
           merge_commit_sha TYPE string,
           assignee TYPE pull_request_simple_assignee,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           requested_reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           requested_teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           head TYPE pull_request_simple_head,
           base TYPE pull_request_simple_base,
           _links TYPE pull_request_simple__links,
           author_association TYPE author_association,
           auto_merge TYPE auto_merge,
           draft TYPE abap_bool,
         END OF pull_request_simple.

* Component schema: simple-commit-status, object
  TYPES: BEGIN OF simple_commit_status,
           description TYPE string,
           id TYPE i,
           node_id TYPE string,
           state TYPE string,
           context TYPE string,
           target_url TYPE string,
           required TYPE abap_bool,
           avatar_url TYPE string,
           url TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
         END OF simple_commit_status.

* Component schema: combined-commit-status, object
  TYPES: BEGIN OF combined_commit_status,
           state TYPE string,
           statuses TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           sha TYPE string,
           total_count TYPE i,
           repository TYPE minimal_repository,
           commit_url TYPE string,
           url TYPE string,
         END OF combined_commit_status.

* Component schema: status, object
  TYPES: BEGIN OF status,
           url TYPE string,
           avatar_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           state TYPE string,
           description TYPE string,
           target_url TYPE string,
           context TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           creator TYPE simple_user,
         END OF status.

* Component schema: code-of-conduct-simple, object
  TYPES: BEGIN OF code_of_conduct_simple,
           url TYPE string,
           key TYPE string,
           name TYPE string,
           html_url TYPE string,
         END OF code_of_conduct_simple.

* Component schema: community-health-file, object
  TYPES: BEGIN OF community_health_file,
           url TYPE string,
           html_url TYPE string,
         END OF community_health_file.

* Component schema: community-profile, object
  TYPES community_profile_files_pull_r TYPE string. "   todo
  TYPES community_profile_files_issue_ TYPE string. "   todo
  TYPES community_profile_files_readme TYPE string. "   todo
  TYPES community_profile_files_contri TYPE string. "   todo
  TYPES community_profile_files_licens TYPE string. "   todo
  TYPES community_profile_files_code_o TYPE string. "   todo
  TYPES: BEGIN OF community_profile_files,
           code_of_conduct TYPE community_profile_files_code_o,
           license TYPE community_profile_files_licens,
           contributing TYPE community_profile_files_contri,
           readme TYPE community_profile_files_readme,
           issue_template TYPE community_profile_files_issue_,
           pull_request_template TYPE community_profile_files_pull_r,
         END OF community_profile_files.
  TYPES: BEGIN OF community_profile,
           health_percentage TYPE i,
           description TYPE string,
           documentation TYPE string,
           files TYPE community_profile_files,
           updated_at TYPE string,
           content_reports_enabled TYPE abap_bool,
         END OF community_profile.

* Component schema: diff-entry, object
  TYPES: BEGIN OF diff_entry,
           sha TYPE string,
           filename TYPE string,
           status TYPE string,
           additions TYPE i,
           deletions TYPE i,
           changes TYPE i,
           blob_url TYPE string,
           raw_url TYPE string,
           contents_url TYPE string,
           patch TYPE string,
           previous_filename TYPE string,
         END OF diff_entry.

* Component schema: commit-comparison, object
  TYPES: BEGIN OF commit_comparison,
           url TYPE string,
           html_url TYPE string,
           permalink_url TYPE string,
           diff_url TYPE string,
           patch_url TYPE string,
           base_commit TYPE commit,
           merge_base_commit TYPE commit,
           status TYPE string,
           ahead_by TYPE i,
           behind_by TYPE i,
           total_commits TYPE i,
           commits TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           files TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF commit_comparison.

* Component schema: content-tree, object
  TYPES: BEGIN OF content_tree__links,
           git TYPE string,
           html TYPE string,
           self TYPE string,
         END OF content_tree__links.
  TYPES: BEGIN OF content_tree,
           type TYPE string,
           size TYPE i,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           url TYPE string,
           git_url TYPE string,
           html_url TYPE string,
           download_url TYPE string,
           entries TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           _links TYPE content_tree__links,
         END OF content_tree.

* Component schema: content-directory, array
  TYPES content_directory TYPE string. " array  todo

* Component schema: content-file, object
  TYPES: BEGIN OF content_file__links,
           git TYPE string,
           html TYPE string,
           self TYPE string,
         END OF content_file__links.
  TYPES: BEGIN OF content_file,
           type TYPE string,
           encoding TYPE string,
           size TYPE i,
           name TYPE string,
           path TYPE string,
           content TYPE string,
           sha TYPE string,
           url TYPE string,
           git_url TYPE string,
           html_url TYPE string,
           download_url TYPE string,
           _links TYPE content_file__links,
           target TYPE string,
           submodule_git_url TYPE string,
         END OF content_file.

* Component schema: content-symlink, object
  TYPES: BEGIN OF content_symlink__links,
           git TYPE string,
           html TYPE string,
           self TYPE string,
         END OF content_symlink__links.
  TYPES: BEGIN OF content_symlink,
           type TYPE string,
           target TYPE string,
           size TYPE i,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           url TYPE string,
           git_url TYPE string,
           html_url TYPE string,
           download_url TYPE string,
           _links TYPE content_symlink__links,
         END OF content_symlink.

* Component schema: content-submodule, object
  TYPES: BEGIN OF content_submodule__links,
           git TYPE string,
           html TYPE string,
           self TYPE string,
         END OF content_submodule__links.
  TYPES: BEGIN OF content_submodule,
           type TYPE string,
           submodule_git_url TYPE string,
           size TYPE i,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           url TYPE string,
           git_url TYPE string,
           html_url TYPE string,
           download_url TYPE string,
           _links TYPE content_submodule__links,
         END OF content_submodule.

* Component schema: file-commit, object
  TYPES: BEGIN OF file_commit_commit_verificatio,
           verified TYPE abap_bool,
           reason TYPE string,
           signature TYPE string,
           payload TYPE string,
         END OF file_commit_commit_verificatio.
  TYPES: BEGIN OF file_commit_commit_tree,
           url TYPE string,
           sha TYPE string,
         END OF file_commit_commit_tree.
  TYPES: BEGIN OF file_commit_commit_committer,
           date TYPE string,
           name TYPE string,
           email TYPE string,
         END OF file_commit_commit_committer.
  TYPES: BEGIN OF file_commit_commit_author,
           date TYPE string,
           name TYPE string,
           email TYPE string,
         END OF file_commit_commit_author.
  TYPES: BEGIN OF file_commit_commit,
           sha TYPE string,
           node_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           author TYPE file_commit_commit_author,
           committer TYPE file_commit_commit_committer,
           message TYPE string,
           tree TYPE file_commit_commit_tree,
           parents TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           verification TYPE file_commit_commit_verificatio,
         END OF file_commit_commit.
  TYPES: BEGIN OF file_commit_content__links,
           self TYPE string,
           git TYPE string,
           html TYPE string,
         END OF file_commit_content__links.
  TYPES: BEGIN OF file_commit_content,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           size TYPE i,
           url TYPE string,
           html_url TYPE string,
           git_url TYPE string,
           download_url TYPE string,
           type TYPE string,
           _links TYPE file_commit_content__links,
         END OF file_commit_content.
  TYPES: BEGIN OF file_commit,
           content TYPE file_commit_content,
           commit TYPE file_commit_commit,
         END OF file_commit.

* Component schema: contributor, object
  TYPES: BEGIN OF contributor,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
           contributions TYPE i,
           email TYPE string,
           name TYPE string,
         END OF contributor.

* Component schema: deployment, object
  TYPES deployment_performed_via_githu TYPE string. "   todo
  TYPES deployment_creator TYPE string. "   todo
  TYPES: BEGIN OF deployment_payload,
           dummy_workaround TYPE i,
         END OF deployment_payload.
  TYPES: BEGIN OF deployment,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           sha TYPE string,
           ref TYPE string,
           task TYPE string,
           payload TYPE deployment_payload,
           original_environment TYPE string,
           environment TYPE string,
           description TYPE string,
           creator TYPE deployment_creator,
           created_at TYPE string,
           updated_at TYPE string,
           statuses_url TYPE string,
           repository_url TYPE string,
           transient_environment TYPE abap_bool,
           production_environment TYPE abap_bool,
           performed_via_github_app TYPE deployment_performed_via_githu,
         END OF deployment.

* Component schema: deployment-status, object
  TYPES deployment_status_performed_vi TYPE string. "   todo
  TYPES deployment_status_creator TYPE string. "   todo
  TYPES: BEGIN OF deployment_status,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           state TYPE string,
           creator TYPE deployment_status_creator,
           description TYPE string,
           environment TYPE string,
           target_url TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           deployment_url TYPE string,
           repository_url TYPE string,
           environment_url TYPE string,
           log_url TYPE string,
           performed_via_github_app TYPE deployment_status_performed_vi,
         END OF deployment_status.

* Component schema: short-blob, object
  TYPES: BEGIN OF short_blob,
           url TYPE string,
           sha TYPE string,
         END OF short_blob.

* Component schema: blob, object
  TYPES: BEGIN OF blob,
           content TYPE string,
           encoding TYPE string,
           url TYPE string,
           sha TYPE string,
           size TYPE i,
           node_id TYPE string,
           highlighted_content TYPE string,
         END OF blob.

* Component schema: git-commit, object
  TYPES: BEGIN OF git_commit_verification,
           verified TYPE abap_bool,
           reason TYPE string,
           signature TYPE string,
           payload TYPE string,
         END OF git_commit_verification.
  TYPES: BEGIN OF git_commit_tree,
           sha TYPE string,
           url TYPE string,
         END OF git_commit_tree.
  TYPES: BEGIN OF git_commit_committer,
           date TYPE string,
           email TYPE string,
           name TYPE string,
         END OF git_commit_committer.
  TYPES: BEGIN OF git_commit_author,
           date TYPE string,
           email TYPE string,
           name TYPE string,
         END OF git_commit_author.
  TYPES: BEGIN OF git_commit,
           sha TYPE string,
           node_id TYPE string,
           url TYPE string,
           author TYPE git_commit_author,
           committer TYPE git_commit_committer,
           message TYPE string,
           tree TYPE git_commit_tree,
           parents TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           verification TYPE git_commit_verification,
           html_url TYPE string,
         END OF git_commit.

* Component schema: git-ref, object
  TYPES: BEGIN OF git_ref_object,
           type TYPE string,
           sha TYPE string,
           url TYPE string,
         END OF git_ref_object.
  TYPES: BEGIN OF git_ref,
           ref TYPE string,
           node_id TYPE string,
           url TYPE string,
           object TYPE git_ref_object,
         END OF git_ref.

* Component schema: git-tag, object
  TYPES: BEGIN OF git_tag_object,
           sha TYPE string,
           type TYPE string,
           url TYPE string,
         END OF git_tag_object.
  TYPES: BEGIN OF git_tag_tagger,
           date TYPE string,
           email TYPE string,
           name TYPE string,
         END OF git_tag_tagger.
  TYPES: BEGIN OF git_tag,
           node_id TYPE string,
           tag TYPE string,
           sha TYPE string,
           url TYPE string,
           message TYPE string,
           tagger TYPE git_tag_tagger,
           object TYPE git_tag_object,
           verification TYPE verification,
         END OF git_tag.

* Component schema: git-tree, object
  TYPES: BEGIN OF git_tree,
           sha TYPE string,
           url TYPE string,
           truncated TYPE abap_bool,
           tree TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF git_tree.

* Component schema: hook-response, object
  TYPES: BEGIN OF hook_response,
           code TYPE i,
           status TYPE string,
           message TYPE string,
         END OF hook_response.

* Component schema: hook, object
  TYPES: BEGIN OF hook_config,
           email TYPE string,
           password TYPE string,
           room TYPE string,
           subdomain TYPE string,
           url TYPE webhook_config_url,
           insecure_ssl TYPE webhook_config_insecure_ssl,
           content_type TYPE webhook_config_content_type,
           digest TYPE string,
           secret TYPE webhook_config_secret,
           token TYPE string,
         END OF hook_config.
  TYPES: BEGIN OF hook,
           type TYPE string,
           id TYPE i,
           name TYPE string,
           active TYPE abap_bool,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           config TYPE hook_config,
           updated_at TYPE string,
           created_at TYPE string,
           url TYPE string,
           test_url TYPE string,
           ping_url TYPE string,
           last_response TYPE hook_response,
         END OF hook.

* Component schema: import, object
  TYPES: BEGIN OF import,
           vcs TYPE string,
           use_lfs TYPE string,
           vcs_url TYPE string,
           svc_root TYPE string,
           tfvc_project TYPE string,
           status TYPE string,
           status_text TYPE string,
           failed_step TYPE string,
           error_message TYPE string,
           import_percent TYPE i,
           commit_count TYPE i,
           push_percent TYPE i,
           has_large_files TYPE abap_bool,
           large_files_size TYPE i,
           large_files_count TYPE i,
           project_choices TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           message TYPE string,
           authors_count TYPE i,
           url TYPE string,
           html_url TYPE string,
           authors_url TYPE string,
           repository_url TYPE string,
           svn_root TYPE string,
         END OF import.

* Component schema: porter-author, object
  TYPES: BEGIN OF porter_author,
           id TYPE i,
           remote_id TYPE string,
           remote_name TYPE string,
           email TYPE string,
           name TYPE string,
           url TYPE string,
           import_url TYPE string,
         END OF porter_author.

* Component schema: porter-large-file, object
  TYPES: BEGIN OF porter_large_file,
           ref_name TYPE string,
           path TYPE string,
           oid TYPE string,
           size TYPE i,
         END OF porter_large_file.

* Component schema: issue-event-label, object
  TYPES: BEGIN OF issue_event_label,
           name TYPE string,
           color TYPE string,
         END OF issue_event_label.

* Component schema: issue-event-dismissed-review, object
  TYPES: BEGIN OF issue_event_dismissed_review,
           state TYPE string,
           review_id TYPE i,
           dismissal_message TYPE string,
           dismissal_commit_id TYPE string,
         END OF issue_event_dismissed_review.

* Component schema: issue-event-milestone, object
  TYPES: BEGIN OF issue_event_milestone,
           title TYPE string,
         END OF issue_event_milestone.

* Component schema: issue-event-project-card, object
  TYPES: BEGIN OF issue_event_project_card,
           url TYPE string,
           id TYPE i,
           project_url TYPE string,
           project_id TYPE i,
           column_name TYPE string,
           previous_column_name TYPE string,
         END OF issue_event_project_card.

* Component schema: issue-event-rename, object
  TYPES: BEGIN OF issue_event_rename,
           from TYPE string,
           to TYPE string,
         END OF issue_event_rename.

* Component schema: issue-event, object
  TYPES issue_event_requested_reviewer TYPE string. "   todo
  TYPES issue_event_review_requester TYPE string. "   todo
  TYPES issue_event_assigner TYPE string. "   todo
  TYPES issue_event_assignee TYPE string. "   todo
  TYPES issue_event_actor TYPE string. "   todo
  TYPES: BEGIN OF issue_event,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           actor TYPE issue_event_actor,
           event TYPE string,
           commit_id TYPE string,
           commit_url TYPE string,
           created_at TYPE string,
           issue TYPE issue_simple,
           label TYPE issue_event_label,
           assignee TYPE issue_event_assignee,
           assigner TYPE issue_event_assigner,
           review_requester TYPE issue_event_review_requester,
           requested_reviewer TYPE issue_event_requested_reviewer,
           requested_team TYPE team,
           dismissed_review TYPE issue_event_dismissed_review,
           milestone TYPE issue_event_milestone,
           project_card TYPE issue_event_project_card,
           rename TYPE issue_event_rename,
           author_association TYPE author_association,
           lock_reason TYPE string,
         END OF issue_event.

* Component schema: issue-event-for-issue, object
  TYPES: BEGIN OF issue_event_for_issue,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           actor TYPE simple_user,
           event TYPE string,
           commit_id TYPE string,
           commit_url TYPE string,
           created_at TYPE string,
           sha TYPE string,
           html_url TYPE string,
           message TYPE string,
           issue_url TYPE string,
           updated_at TYPE string,
           author_association TYPE author_association,
           body TYPE string,
           lock_reason TYPE string,
           submitted_at TYPE string,
           state TYPE string,
           pull_request_url TYPE string,
           body_html TYPE string,
           body_text TYPE string,
         END OF issue_event_for_issue.

* Component schema: deploy-key, object
  TYPES: BEGIN OF deploy_key,
           id TYPE i,
           key TYPE string,
           url TYPE string,
           title TYPE string,
           verified TYPE abap_bool,
           created_at TYPE string,
           read_only TYPE abap_bool,
         END OF deploy_key.

* Component schema: language, object
  TYPES: BEGIN OF language,
           dummy_workaround TYPE i,
         END OF language.

* Component schema: license-content, object
  TYPES license_content_license TYPE string. "   todo
  TYPES: BEGIN OF license_content__links,
           git TYPE string,
           html TYPE string,
           self TYPE string,
         END OF license_content__links.
  TYPES: BEGIN OF license_content,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           size TYPE i,
           url TYPE string,
           html_url TYPE string,
           git_url TYPE string,
           download_url TYPE string,
           type TYPE string,
           content TYPE string,
           encoding TYPE string,
           _links TYPE license_content__links,
           license TYPE license_content_license,
         END OF license_content.

* Component schema: pages-source-hash, object
  TYPES: BEGIN OF pages_source_hash,
           branch TYPE string,
           path TYPE string,
         END OF pages_source_hash.

* Component schema: page, object
  TYPES: BEGIN OF page,
           url TYPE string,
           status TYPE string,
           cname TYPE string,
           custom_404 TYPE abap_bool,
           html_url TYPE string,
           source TYPE pages_source_hash,
           public TYPE abap_bool,
         END OF page.

* Component schema: page-build, object
  TYPES page_build_pusher TYPE string. "   todo
  TYPES: BEGIN OF page_build_error,
           message TYPE string,
         END OF page_build_error.
  TYPES: BEGIN OF page_build,
           url TYPE string,
           status TYPE string,
           error TYPE page_build_error,
           pusher TYPE page_build_pusher,
           commit TYPE string,
           duration TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
         END OF page_build.

* Component schema: page-build-status, object
  TYPES: BEGIN OF page_build_status,
           url TYPE string,
           status TYPE string,
         END OF page_build_status.

* Component schema: pull-request, object
  TYPES pull_request_merged_by TYPE string. "   todo
  TYPES: BEGIN OF pull_request__links,
           comments TYPE link,
           commits TYPE link,
           statuses TYPE link,
           html TYPE link,
           issue TYPE link,
           review_comments TYPE link,
           review_comment TYPE link,
           self TYPE link,
         END OF pull_request__links.
  TYPES: BEGIN OF pull_request_base_user,
           avatar_url TYPE string,
           events_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           gravatar_id TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           login TYPE string,
           organizations_url TYPE string,
           received_events_url TYPE string,
           repos_url TYPE string,
           site_admin TYPE abap_bool,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           type TYPE string,
           url TYPE string,
         END OF pull_request_base_user.
  TYPES pull_request_base_repo_license TYPE string. "   todo
  TYPES: BEGIN OF pull_request_base_repo_permiss,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           push TYPE abap_bool,
         END OF pull_request_base_repo_permiss.
  TYPES: BEGIN OF pull_request_base_repo_owner,
           avatar_url TYPE string,
           events_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           gravatar_id TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           login TYPE string,
           organizations_url TYPE string,
           received_events_url TYPE string,
           repos_url TYPE string,
           site_admin TYPE abap_bool,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           type TYPE string,
           url TYPE string,
         END OF pull_request_base_repo_owner.
  TYPES: BEGIN OF pull_request_base_repo,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           description TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           fork TYPE abap_bool,
           forks_url TYPE string,
           full_name TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           hooks_url TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           name TYPE string,
           notifications_url TYPE string,
           owner TYPE pull_request_base_repo_owner,
           private TYPE abap_bool,
           pulls_url TYPE string,
           releases_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           url TYPE string,
           clone_url TYPE string,
           default_branch TYPE string,
           forks TYPE i,
           forks_count TYPE i,
           git_url TYPE string,
           has_downloads TYPE abap_bool,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           homepage TYPE string,
           language TYPE string,
           master_branch TYPE string,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           mirror_url TYPE string,
           open_issues TYPE i,
           open_issues_count TYPE i,
           permissions TYPE pull_request_base_repo_permiss,
           temp_clone_token TYPE string,
           allow_merge_commit TYPE abap_bool,
           allow_squash_merge TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           license TYPE pull_request_base_repo_license,
           pushed_at TYPE string,
           size TYPE i,
           ssh_url TYPE string,
           stargazers_count TYPE i,
           svn_url TYPE string,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           watchers TYPE i,
           watchers_count TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
         END OF pull_request_base_repo.
  TYPES: BEGIN OF pull_request_base,
           label TYPE string,
           ref TYPE string,
           repo TYPE pull_request_base_repo,
           sha TYPE string,
           user TYPE pull_request_base_user,
         END OF pull_request_base.
  TYPES: BEGIN OF pull_request_head_user,
           avatar_url TYPE string,
           events_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           gravatar_id TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           login TYPE string,
           organizations_url TYPE string,
           received_events_url TYPE string,
           repos_url TYPE string,
           site_admin TYPE abap_bool,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           type TYPE string,
           url TYPE string,
         END OF pull_request_head_user.
  TYPES: BEGIN OF pull_request_head_repo_license,
           key TYPE string,
           name TYPE string,
           url TYPE string,
           spdx_id TYPE string,
           node_id TYPE string,
         END OF pull_request_head_repo_license.
  TYPES: BEGIN OF pull_request_head_repo_permiss,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           push TYPE abap_bool,
         END OF pull_request_head_repo_permiss.
  TYPES: BEGIN OF pull_request_head_repo_owner,
           avatar_url TYPE string,
           events_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           gravatar_id TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           login TYPE string,
           organizations_url TYPE string,
           received_events_url TYPE string,
           repos_url TYPE string,
           site_admin TYPE abap_bool,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           type TYPE string,
           url TYPE string,
         END OF pull_request_head_repo_owner.
  TYPES: BEGIN OF pull_request_head_repo,
           archive_url TYPE string,
           assignees_url TYPE string,
           blobs_url TYPE string,
           branches_url TYPE string,
           collaborators_url TYPE string,
           comments_url TYPE string,
           commits_url TYPE string,
           compare_url TYPE string,
           contents_url TYPE string,
           contributors_url TYPE string,
           deployments_url TYPE string,
           description TYPE string,
           downloads_url TYPE string,
           events_url TYPE string,
           fork TYPE abap_bool,
           forks_url TYPE string,
           full_name TYPE string,
           git_commits_url TYPE string,
           git_refs_url TYPE string,
           git_tags_url TYPE string,
           hooks_url TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           issue_comment_url TYPE string,
           issue_events_url TYPE string,
           issues_url TYPE string,
           keys_url TYPE string,
           labels_url TYPE string,
           languages_url TYPE string,
           merges_url TYPE string,
           milestones_url TYPE string,
           name TYPE string,
           notifications_url TYPE string,
           owner TYPE pull_request_head_repo_owner,
           private TYPE abap_bool,
           pulls_url TYPE string,
           releases_url TYPE string,
           stargazers_url TYPE string,
           statuses_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           tags_url TYPE string,
           teams_url TYPE string,
           trees_url TYPE string,
           url TYPE string,
           clone_url TYPE string,
           default_branch TYPE string,
           forks TYPE i,
           forks_count TYPE i,
           git_url TYPE string,
           has_downloads TYPE abap_bool,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_pages TYPE abap_bool,
           homepage TYPE string,
           language TYPE string,
           master_branch TYPE string,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           mirror_url TYPE string,
           open_issues TYPE i,
           open_issues_count TYPE i,
           permissions TYPE pull_request_head_repo_permiss,
           temp_clone_token TYPE string,
           allow_merge_commit TYPE abap_bool,
           allow_squash_merge TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           license TYPE pull_request_head_repo_license,
           pushed_at TYPE string,
           size TYPE i,
           ssh_url TYPE string,
           stargazers_count TYPE i,
           svn_url TYPE string,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           watchers TYPE i,
           watchers_count TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
         END OF pull_request_head_repo.
  TYPES: BEGIN OF pull_request_head,
           label TYPE string,
           ref TYPE string,
           repo TYPE pull_request_head_repo,
           sha TYPE string,
           user TYPE pull_request_head_user,
         END OF pull_request_head.
  TYPES pull_request_assignee TYPE string. "   todo
  TYPES pull_request_milestone TYPE string. "   todo
  TYPES pull_request_user TYPE string. "   todo
  TYPES: BEGIN OF pull_request,
           url TYPE string,
           id TYPE i,
           node_id TYPE string,
           html_url TYPE string,
           diff_url TYPE string,
           patch_url TYPE string,
           issue_url TYPE string,
           commits_url TYPE string,
           review_comments_url TYPE string,
           review_comment_url TYPE string,
           comments_url TYPE string,
           statuses_url TYPE string,
           number TYPE i,
           state TYPE string,
           locked TYPE abap_bool,
           title TYPE string,
           user TYPE pull_request_user,
           body TYPE string,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           milestone TYPE pull_request_milestone,
           active_lock_reason TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           closed_at TYPE string,
           merged_at TYPE string,
           merge_commit_sha TYPE string,
           assignee TYPE pull_request_assignee,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           requested_reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           requested_teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           head TYPE pull_request_head,
           base TYPE pull_request_base,
           _links TYPE pull_request__links,
           author_association TYPE author_association,
           auto_merge TYPE auto_merge,
           draft TYPE abap_bool,
           merged TYPE abap_bool,
           mergeable TYPE abap_bool,
           rebaseable TYPE abap_bool,
           mergeable_state TYPE string,
           merged_by TYPE pull_request_merged_by,
           comments TYPE i,
           review_comments TYPE i,
           maintainer_can_modify TYPE abap_bool,
           commits TYPE i,
           additions TYPE i,
           deletions TYPE i,
           changed_files TYPE i,
         END OF pull_request.

* Component schema: pull-request-review-comment, object
  TYPES: BEGIN OF pull_request_review_comment_03,
           href TYPE string,
         END OF pull_request_review_comment_03.
  TYPES: BEGIN OF pull_request_review_comment_02,
           href TYPE string,
         END OF pull_request_review_comment_02.
  TYPES: BEGIN OF pull_request_review_comment_01,
           href TYPE string,
         END OF pull_request_review_comment_01.
  TYPES: BEGIN OF pull_request_review_comment__l,
           self TYPE pull_request_review_comment_01,
           html TYPE pull_request_review_comment_02,
           pull_request TYPE pull_request_review_comment_03,
         END OF pull_request_review_comment__l.
  TYPES: BEGIN OF pull_request_review_comment,
           url TYPE string,
           pull_request_review_id TYPE i,
           id TYPE i,
           node_id TYPE string,
           diff_hunk TYPE string,
           path TYPE string,
           position TYPE i,
           original_position TYPE i,
           commit_id TYPE string,
           original_commit_id TYPE string,
           in_reply_to_id TYPE i,
           user TYPE simple_user,
           body TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           html_url TYPE string,
           pull_request_url TYPE string,
           author_association TYPE author_association,
           _links TYPE pull_request_review_comment__l,
           start_line TYPE i,
           original_start_line TYPE i,
           start_side TYPE string,
           line TYPE i,
           original_line TYPE i,
           side TYPE string,
           reactions TYPE reaction_rollup,
           body_html TYPE string,
           body_text TYPE string,
         END OF pull_request_review_comment.

* Component schema: pull-request-merge-result, object
  TYPES: BEGIN OF pull_request_merge_result,
           sha TYPE string,
           merged TYPE abap_bool,
           message TYPE string,
         END OF pull_request_merge_result.

* Component schema: pull-request-review-request, object
  TYPES: BEGIN OF pull_request_review_request,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF pull_request_review_request.

* Component schema: pull-request-review, object
  TYPES: BEGIN OF pull_request_review__links_pul,
           href TYPE string,
         END OF pull_request_review__links_pul.
  TYPES: BEGIN OF pull_request_review__links_htm,
           href TYPE string,
         END OF pull_request_review__links_htm.
  TYPES: BEGIN OF pull_request_review__links,
           html TYPE pull_request_review__links_htm,
           pull_request TYPE pull_request_review__links_pul,
         END OF pull_request_review__links.
  TYPES pull_request_review_user TYPE string. "   todo
  TYPES: BEGIN OF pull_request_review,
           id TYPE i,
           node_id TYPE string,
           user TYPE pull_request_review_user,
           body TYPE string,
           state TYPE string,
           html_url TYPE string,
           pull_request_url TYPE string,
           _links TYPE pull_request_review__links,
           submitted_at TYPE string,
           commit_id TYPE string,
           body_html TYPE string,
           body_text TYPE string,
           author_association TYPE author_association,
         END OF pull_request_review.

* Component schema: review-comment, object
  TYPES: BEGIN OF review_comment__links,
           self TYPE link,
           html TYPE link,
           pull_request TYPE link,
         END OF review_comment__links.
  TYPES review_comment_user TYPE string. "   todo
  TYPES: BEGIN OF review_comment,
           url TYPE string,
           pull_request_review_id TYPE i,
           id TYPE i,
           node_id TYPE string,
           diff_hunk TYPE string,
           path TYPE string,
           position TYPE i,
           original_position TYPE i,
           commit_id TYPE string,
           original_commit_id TYPE string,
           in_reply_to_id TYPE i,
           user TYPE review_comment_user,
           body TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           html_url TYPE string,
           pull_request_url TYPE string,
           author_association TYPE author_association,
           _links TYPE review_comment__links,
           body_text TYPE string,
           body_html TYPE string,
           side TYPE string,
           start_side TYPE string,
           line TYPE i,
           original_line TYPE i,
           start_line TYPE i,
           original_start_line TYPE i,
         END OF review_comment.

* Component schema: release-asset, object
  TYPES release_asset_uploader TYPE string. "   todo
  TYPES: BEGIN OF release_asset,
           url TYPE string,
           browser_download_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           label TYPE string,
           state TYPE string,
           content_type TYPE string,
           size TYPE i,
           download_count TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           uploader TYPE release_asset_uploader,
         END OF release_asset.

* Component schema: release, object
  TYPES: BEGIN OF release,
           url TYPE string,
           html_url TYPE string,
           assets_url TYPE string,
           upload_url TYPE string,
           tarball_url TYPE string,
           zipball_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           tag_name TYPE string,
           target_commitish TYPE string,
           name TYPE string,
           body TYPE string,
           draft TYPE abap_bool,
           prerelease TYPE abap_bool,
           created_at TYPE string,
           published_at TYPE string,
           author TYPE simple_user,
           assets TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           body_html TYPE string,
           body_text TYPE string,
         END OF release.

* Component schema: secret-scanning-alert-state, string
  TYPES secret_scanning_alert_state TYPE string.

* Component schema: secret-scanning-alert-resolution, string
  TYPES secret_scanning_alert_resoluti TYPE string.

* Component schema: secret-scanning-alert, object
  TYPES: BEGIN OF secret_scanning_alert,
           number TYPE alert_number,
           created_at TYPE alert_created_at,
           url TYPE alert_url,
           html_url TYPE alert_html_url,
           state TYPE secret_scanning_alert_state,
           resolution TYPE secret_scanning_alert_resoluti,
           resolved_at TYPE string,
           resolved_by TYPE simple_user,
           secret_type TYPE string,
           secret TYPE string,
         END OF secret_scanning_alert.

* Component schema: stargazer, object
  TYPES stargazer_user TYPE string. "   todo
  TYPES: BEGIN OF stargazer,
           starred_at TYPE string,
           user TYPE stargazer_user,
         END OF stargazer.

* Component schema: code-frequency-stat, array
  TYPES code_frequency_stat TYPE string. " array  todo

* Component schema: commit-activity, object
  TYPES: BEGIN OF commit_activity,
           days TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           total TYPE i,
           week TYPE i,
         END OF commit_activity.

* Component schema: contributor-activity, object
  TYPES contributor_activity_author TYPE string. "   todo
  TYPES: BEGIN OF contributor_activity,
           author TYPE contributor_activity_author,
           total TYPE i,
           weeks TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF contributor_activity.

* Component schema: participation-stats, object
  TYPES: BEGIN OF participation_stats,
           all TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           owner TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF participation_stats.

* Component schema: repository-subscription, object
  TYPES: BEGIN OF repository_subscription,
           subscribed TYPE abap_bool,
           ignored TYPE abap_bool,
           reason TYPE string,
           created_at TYPE string,
           url TYPE string,
           repository_url TYPE string,
         END OF repository_subscription.

* Component schema: tag, object
  TYPES: BEGIN OF tag_commit,
           sha TYPE string,
           url TYPE string,
         END OF tag_commit.
  TYPES: BEGIN OF tag,
           name TYPE string,
           commit TYPE tag_commit,
           zipball_url TYPE string,
           tarball_url TYPE string,
           node_id TYPE string,
         END OF tag.

* Component schema: topic, object
  TYPES: BEGIN OF topic,
           names TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF topic.

* Component schema: traffic, object
  TYPES: BEGIN OF traffic,
           timestamp TYPE string,
           uniques TYPE i,
           count TYPE i,
         END OF traffic.

* Component schema: clone-traffic, object
  TYPES: BEGIN OF clone_traffic,
           count TYPE i,
           uniques TYPE i,
           clones TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF clone_traffic.

* Component schema: content-traffic, object
  TYPES: BEGIN OF content_traffic,
           path TYPE string,
           title TYPE string,
           count TYPE i,
           uniques TYPE i,
         END OF content_traffic.

* Component schema: referrer-traffic, object
  TYPES: BEGIN OF referrer_traffic,
           referrer TYPE string,
           count TYPE i,
           uniques TYPE i,
         END OF referrer_traffic.

* Component schema: view-traffic, object
  TYPES: BEGIN OF view_traffic,
           count TYPE i,
           uniques TYPE i,
           views TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF view_traffic.

* Component schema: scim-group-list-enterprise, object
  TYPES: BEGIN OF scim_group_list_enterprise,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           totalresults TYPE f,
           itemsperpage TYPE f,
           startindex TYPE f,
           resources TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF scim_group_list_enterprise.

* Component schema: scim-enterprise-group, object
  TYPES: BEGIN OF scim_enterprise_group_meta,
           resourcetype TYPE string,
           created TYPE string,
           lastmodified TYPE string,
           location TYPE string,
         END OF scim_enterprise_group_meta.
  TYPES: BEGIN OF scim_enterprise_group,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           id TYPE string,
           externalid TYPE string,
           displayname TYPE string,
           members TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           meta TYPE scim_enterprise_group_meta,
         END OF scim_enterprise_group.

* Component schema: scim-user-list-enterprise, object
  TYPES: BEGIN OF scim_user_list_enterprise,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           totalresults TYPE f,
           itemsperpage TYPE f,
           startindex TYPE f,
           resources TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF scim_user_list_enterprise.

* Component schema: scim-enterprise-user, object
  TYPES: BEGIN OF scim_enterprise_user_meta,
           resourcetype TYPE string,
           created TYPE string,
           lastmodified TYPE string,
           location TYPE string,
         END OF scim_enterprise_user_meta.
  TYPES: BEGIN OF scim_enterprise_user_name,
           givenname TYPE string,
           familyname TYPE string,
         END OF scim_enterprise_user_name.
  TYPES: BEGIN OF scim_enterprise_user,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           id TYPE string,
           externalid TYPE string,
           username TYPE string,
           name TYPE scim_enterprise_user_name,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           meta TYPE scim_enterprise_user_meta,
         END OF scim_enterprise_user.

* Component schema: scim-user, object
  TYPES: BEGIN OF scim_user_meta,
           resourcetype TYPE string,
           created TYPE string,
           lastmodified TYPE string,
           location TYPE string,
         END OF scim_user_meta.
  TYPES: BEGIN OF scim_user_name,
           givenname TYPE string,
           familyname TYPE string,
           formatted TYPE string,
         END OF scim_user_name.
  TYPES: BEGIN OF scim_user,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           id TYPE string,
           externalid TYPE string,
           username TYPE string,
           displayname TYPE string,
           name TYPE scim_user_name,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           meta TYPE scim_user_meta,
           organization_id TYPE i,
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF scim_user.

* Component schema: scim-user-list, object
  TYPES: BEGIN OF scim_user_list,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           totalresults TYPE i,
           itemsperpage TYPE i,
           startindex TYPE i,
           resources TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF scim_user_list.

* Component schema: search-result-text-matches, array
  TYPES search_result_text_matches TYPE string. " array  todo

* Component schema: code-search-result-item, object
  TYPES: BEGIN OF code_search_result_item,
           name TYPE string,
           path TYPE string,
           sha TYPE string,
           url TYPE string,
           git_url TYPE string,
           html_url TYPE string,
           repository TYPE minimal_repository,
           score TYPE i,
           file_size TYPE i,
           language TYPE string,
           last_modified_at TYPE string,
           line_numbers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           text_matches TYPE search_result_text_matches,
         END OF code_search_result_item.

* Component schema: commit-search-result-item, object
  TYPES commit_search_result_item_co04 TYPE string. "   todo
  TYPES commit_search_result_item_auth TYPE string. "   todo
  TYPES: BEGIN OF commit_search_result_item_co03,
           sha TYPE string,
           url TYPE string,
         END OF commit_search_result_item_co03.
  TYPES commit_search_result_item_co02 TYPE string. "   todo
  TYPES: BEGIN OF commit_search_result_item_co01,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF commit_search_result_item_co01.
  TYPES: BEGIN OF commit_search_result_item_comm,
           author TYPE commit_search_result_item_co01,
           committer TYPE commit_search_result_item_co02,
           comment_count TYPE i,
           message TYPE string,
           tree TYPE commit_search_result_item_co03,
           url TYPE string,
           verification TYPE verification,
         END OF commit_search_result_item_comm.
  TYPES: BEGIN OF commit_search_result_item,
           url TYPE string,
           sha TYPE string,
           html_url TYPE string,
           comments_url TYPE string,
           commit TYPE commit_search_result_item_comm,
           author TYPE commit_search_result_item_auth,
           committer TYPE commit_search_result_item_co04,
           parents TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repository TYPE minimal_repository,
           score TYPE i,
           node_id TYPE string,
           text_matches TYPE search_result_text_matches,
         END OF commit_search_result_item.

* Component schema: issue-search-result-item, object
  TYPES issue_search_result_item_perfo TYPE string. "   todo
  TYPES: BEGIN OF issue_search_result_item_pull_,
           merged_at TYPE string,
           diff_url TYPE string,
           html_url TYPE string,
           patch_url TYPE string,
           url TYPE string,
         END OF issue_search_result_item_pull_.
  TYPES issue_search_result_item_miles TYPE string. "   todo
  TYPES issue_search_result_item_assig TYPE string. "   todo
  TYPES issue_search_result_item_user TYPE string. "   todo
  TYPES: BEGIN OF issue_search_result_item,
           url TYPE string,
           repository_url TYPE string,
           labels_url TYPE string,
           comments_url TYPE string,
           events_url TYPE string,
           html_url TYPE string,
           id TYPE i,
           node_id TYPE string,
           number TYPE i,
           title TYPE string,
           locked TYPE abap_bool,
           active_lock_reason TYPE string,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           user TYPE issue_search_result_item_user,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           state TYPE string,
           assignee TYPE issue_search_result_item_assig,
           milestone TYPE issue_search_result_item_miles,
           comments TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           closed_at TYPE string,
           text_matches TYPE search_result_text_matches,
           pull_request TYPE issue_search_result_item_pull_,
           body TYPE string,
           score TYPE i,
           author_association TYPE author_association,
           draft TYPE abap_bool,
           repository TYPE repository,
           body_html TYPE string,
           body_text TYPE string,
           timeline_url TYPE string,
           performed_via_github_app TYPE issue_search_result_item_perfo,
         END OF issue_search_result_item.

* Component schema: label-search-result-item, object
  TYPES: BEGIN OF label_search_result_item,
           id TYPE i,
           node_id TYPE string,
           url TYPE string,
           name TYPE string,
           color TYPE string,
           default TYPE abap_bool,
           description TYPE string,
           score TYPE i,
           text_matches TYPE search_result_text_matches,
         END OF label_search_result_item.

* Component schema: repo-search-result-item, object
  TYPES: BEGIN OF repo_search_result_item_permis,
           admin TYPE abap_bool,
           pull TYPE abap_bool,
           push TYPE abap_bool,
         END OF repo_search_result_item_permis.
  TYPES repo_search_result_item_licens TYPE string. "   todo
  TYPES repo_search_result_item_owner TYPE string. "   todo
  TYPES: BEGIN OF repo_search_result_item,
           id TYPE i,
           node_id TYPE string,
           name TYPE string,
           full_name TYPE string,
           owner TYPE repo_search_result_item_owner,
           private TYPE abap_bool,
           html_url TYPE string,
           description TYPE string,
           fork TYPE abap_bool,
           url TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           pushed_at TYPE string,
           homepage TYPE string,
           size TYPE i,
           stargazers_count TYPE i,
           watchers_count TYPE i,
           language TYPE string,
           forks_count TYPE i,
           open_issues_count TYPE i,
           master_branch TYPE string,
           default_branch TYPE string,
           score TYPE i,
           forks_url TYPE string,
           keys_url TYPE string,
           collaborators_url TYPE string,
           teams_url TYPE string,
           hooks_url TYPE string,
           issue_events_url TYPE string,
           events_url TYPE string,
           assignees_url TYPE string,
           branches_url TYPE string,
           tags_url TYPE string,
           blobs_url TYPE string,
           git_tags_url TYPE string,
           git_refs_url TYPE string,
           trees_url TYPE string,
           statuses_url TYPE string,
           languages_url TYPE string,
           stargazers_url TYPE string,
           contributors_url TYPE string,
           subscribers_url TYPE string,
           subscription_url TYPE string,
           commits_url TYPE string,
           git_commits_url TYPE string,
           comments_url TYPE string,
           issue_comment_url TYPE string,
           contents_url TYPE string,
           compare_url TYPE string,
           merges_url TYPE string,
           archive_url TYPE string,
           downloads_url TYPE string,
           issues_url TYPE string,
           pulls_url TYPE string,
           milestones_url TYPE string,
           notifications_url TYPE string,
           labels_url TYPE string,
           releases_url TYPE string,
           deployments_url TYPE string,
           git_url TYPE string,
           ssh_url TYPE string,
           clone_url TYPE string,
           svn_url TYPE string,
           forks TYPE i,
           open_issues TYPE i,
           watchers TYPE i,
           topics TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           mirror_url TYPE string,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_pages TYPE abap_bool,
           has_wiki TYPE abap_bool,
           has_downloads TYPE abap_bool,
           archived TYPE abap_bool,
           disabled TYPE abap_bool,
           license TYPE repo_search_result_item_licens,
           permissions TYPE repo_search_result_item_permis,
           text_matches TYPE search_result_text_matches,
           temp_clone_token TYPE string,
           allow_merge_commit TYPE abap_bool,
           allow_squash_merge TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
         END OF repo_search_result_item.

* Component schema: topic-search-result-item, object
  TYPES: BEGIN OF topic_search_result_item,
           name TYPE string,
           display_name TYPE string,
           short_description TYPE string,
           description TYPE string,
           created_by TYPE string,
           released TYPE string,
           created_at TYPE string,
           updated_at TYPE string,
           featured TYPE abap_bool,
           curated TYPE abap_bool,
           score TYPE i,
           repository_count TYPE i,
           logo_url TYPE string,
           text_matches TYPE search_result_text_matches,
           related TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           aliases TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF topic_search_result_item.

* Component schema: user-search-result-item, object
  TYPES: BEGIN OF user_search_result_item,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           score TYPE i,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           events_url TYPE string,
           public_repos TYPE i,
           public_gists TYPE i,
           followers TYPE i,
           following TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           name TYPE string,
           bio TYPE string,
           email TYPE string,
           location TYPE string,
           site_admin TYPE abap_bool,
           hireable TYPE abap_bool,
           text_matches TYPE search_result_text_matches,
           blog TYPE string,
           company TYPE string,
           suspended_at TYPE string,
         END OF user_search_result_item.

* Component schema: private-user, object
  TYPES: BEGIN OF private_user_plan,
           collaborators TYPE i,
           name TYPE string,
           space TYPE i,
           private_repos TYPE i,
         END OF private_user_plan.
  TYPES: BEGIN OF private_user,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
           name TYPE string,
           company TYPE string,
           blog TYPE string,
           location TYPE string,
           email TYPE string,
           hireable TYPE abap_bool,
           bio TYPE string,
           twitter_username TYPE string,
           public_repos TYPE i,
           public_gists TYPE i,
           followers TYPE i,
           following TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           private_gists TYPE i,
           total_private_repos TYPE i,
           owned_private_repos TYPE i,
           disk_usage TYPE i,
           collaborators TYPE i,
           two_factor_authentication TYPE abap_bool,
           plan TYPE private_user_plan,
           suspended_at TYPE string,
           business_plus TYPE abap_bool,
           ldap_dn TYPE string,
         END OF private_user.

* Component schema: public-user, object
  TYPES: BEGIN OF public_user_plan,
           collaborators TYPE i,
           name TYPE string,
           space TYPE i,
           private_repos TYPE i,
         END OF public_user_plan.
  TYPES: BEGIN OF public_user,
           login TYPE string,
           id TYPE i,
           node_id TYPE string,
           avatar_url TYPE string,
           gravatar_id TYPE string,
           url TYPE string,
           html_url TYPE string,
           followers_url TYPE string,
           following_url TYPE string,
           gists_url TYPE string,
           starred_url TYPE string,
           subscriptions_url TYPE string,
           organizations_url TYPE string,
           repos_url TYPE string,
           events_url TYPE string,
           received_events_url TYPE string,
           type TYPE string,
           site_admin TYPE abap_bool,
           name TYPE string,
           company TYPE string,
           blog TYPE string,
           location TYPE string,
           email TYPE string,
           hireable TYPE abap_bool,
           bio TYPE string,
           twitter_username TYPE string,
           public_repos TYPE i,
           public_gists TYPE i,
           followers TYPE i,
           following TYPE i,
           created_at TYPE string,
           updated_at TYPE string,
           plan TYPE public_user_plan,
           suspended_at TYPE string,
           private_gists TYPE i,
           total_private_repos TYPE i,
           owned_private_repos TYPE i,
           disk_usage TYPE i,
           collaborators TYPE i,
         END OF public_user.

* Component schema: email, object
  TYPES: BEGIN OF email,
           email TYPE string,
           primary TYPE abap_bool,
           verified TYPE abap_bool,
           visibility TYPE string,
         END OF email.

* Component schema: gpg-key, object
  TYPES: BEGIN OF gpg_key,
           id TYPE i,
           primary_key_id TYPE i,
           key_id TYPE string,
           public_key TYPE string,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           subkeys TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           can_sign TYPE abap_bool,
           can_encrypt_comms TYPE abap_bool,
           can_encrypt_storage TYPE abap_bool,
           can_certify TYPE abap_bool,
           created_at TYPE string,
           expires_at TYPE string,
           raw_key TYPE string,
         END OF gpg_key.

* Component schema: key, object
  TYPES: BEGIN OF key,
           key_id TYPE string,
           key TYPE string,
           id TYPE i,
           url TYPE string,
           title TYPE string,
           created_at TYPE string,
           verified TYPE abap_bool,
           read_only TYPE abap_bool,
         END OF key.

* Component schema: marketplace-account, object
  TYPES: BEGIN OF marketplace_account,
           url TYPE string,
           id TYPE i,
           type TYPE string,
           node_id TYPE string,
           login TYPE string,
           email TYPE string,
           organization_billing_email TYPE string,
         END OF marketplace_account.

* Component schema: user-marketplace-purchase, object
  TYPES: BEGIN OF user_marketplace_purchase,
           billing_cycle TYPE string,
           next_billing_date TYPE string,
           unit_count TYPE i,
           on_free_trial TYPE abap_bool,
           free_trial_ends_on TYPE string,
           updated_at TYPE string,
           account TYPE marketplace_account,
           plan TYPE marketplace_listing_plan,
         END OF user_marketplace_purchase.

* Component schema: starred-repository, object
  TYPES: BEGIN OF starred_repository,
           starred_at TYPE string,
           repo TYPE repository,
         END OF starred_repository.

* Component schema: hovercard, object
  TYPES: BEGIN OF hovercard,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF hovercard.

* Component schema: key-simple, object
  TYPES: BEGIN OF key_simple,
           id TYPE i,
           key TYPE string,
         END OF key_simple.

* Component schema: bodyapps_update_webhook_config, object
  TYPES: BEGIN OF bodyapps_update_webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF bodyapps_update_webhook_config.

* Component schema: bodyapps_create_installation_a, object
  TYPES: BEGIN OF bodyapps_create_installation_a,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           permissions TYPE app_permissions,
         END OF bodyapps_create_installation_a.

* Component schema: bodyapps_delete_authorization, object
  TYPES: BEGIN OF bodyapps_delete_authorization,
           access_token TYPE string,
         END OF bodyapps_delete_authorization.

* Component schema: bodyapps_check_token, object
  TYPES: BEGIN OF bodyapps_check_token,
           access_token TYPE string,
         END OF bodyapps_check_token.

* Component schema: bodyapps_reset_token, object
  TYPES: BEGIN OF bodyapps_reset_token,
           access_token TYPE string,
         END OF bodyapps_reset_token.

* Component schema: bodyapps_delete_token, object
  TYPES: BEGIN OF bodyapps_delete_token,
           access_token TYPE string,
         END OF bodyapps_delete_token.

* Component schema: bodyapps_scope_token, object
  TYPES: BEGIN OF bodyapps_scope_token,
           access_token TYPE string,
           target TYPE string,
           target_id TYPE i,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           permissions TYPE app_permissions,
         END OF bodyapps_scope_token.

* Component schema: bodyoauth_authorizations_creat, object
  TYPES: BEGIN OF bodyoauth_authorizations_creat,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           note TYPE string,
           note_url TYPE string,
           client_id TYPE string,
           client_secret TYPE string,
           fingerprint TYPE string,
         END OF bodyoauth_authorizations_creat.

* Component schema: bodyoauth_authorizations_get_o, object
  TYPES: BEGIN OF bodyoauth_authorizations_get_o,
           client_secret TYPE string,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           note TYPE string,
           note_url TYPE string,
           fingerprint TYPE string,
         END OF bodyoauth_authorizations_get_o.

* Component schema: bodyoauth_authorizations_get01, object
  TYPES: BEGIN OF bodyoauth_authorizations_get01,
           client_secret TYPE string,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           note TYPE string,
           note_url TYPE string,
         END OF bodyoauth_authorizations_get01.

* Component schema: bodyoauth_authorizations_updat, object
  TYPES: BEGIN OF bodyoauth_authorizations_updat,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           add_scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           remove_scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           note TYPE string,
           note_url TYPE string,
           fingerprint TYPE string,
         END OF bodyoauth_authorizations_updat.

* Component schema: bodyoauth_authorizations_delet, object
  TYPES: BEGIN OF bodyoauth_authorizations_delet,
           scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           add_scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           remove_scopes TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           note TYPE string,
           note_url TYPE string,
           fingerprint TYPE string,
         END OF bodyoauth_authorizations_delet.

* Component schema: bodyapps_create_content_attach, object
  TYPES: BEGIN OF bodyapps_create_content_attach,
           title TYPE string,
           body TYPE string,
         END OF bodyapps_create_content_attach.

* Component schema: bodyenterprise_admin_set_githu, object
  TYPES: BEGIN OF bodyenterprise_admin_set_githu,
           enabled_organizations TYPE enabled_organizations,
           allowed_actions TYPE allowed_actions,
         END OF bodyenterprise_admin_set_githu.

* Component schema: bodyenterprise_admin_set_selec, object
  TYPES: BEGIN OF bodyenterprise_admin_set_selec,
           selected_organization_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_set_selec.

* Component schema: bodyenterprise_admin_create_se, object
  TYPES: BEGIN OF bodyenterprise_admin_create_se,
           name TYPE string,
           visibility TYPE string,
           selected_organization_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           runners TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_create_se.

* Component schema: bodyenterprise_admin_update_se, object
  TYPES: BEGIN OF bodyenterprise_admin_update_se,
           name TYPE string,
           visibility TYPE string,
         END OF bodyenterprise_admin_update_se.

* Component schema: bodyenterprise_admin_delete_se, object
  TYPES: BEGIN OF bodyenterprise_admin_delete_se,
           name TYPE string,
           visibility TYPE string,
         END OF bodyenterprise_admin_delete_se.

* Component schema: bodyenterprise_admin_set_org_a, object
  TYPES: BEGIN OF bodyenterprise_admin_set_org_a,
           selected_organization_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_set_org_a.

* Component schema: bodyenterprise_admin_set_self_, object
  TYPES: BEGIN OF bodyenterprise_admin_set_self_,
           runners TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_set_self_.

* Component schema: bodygists_create, object
  TYPES bodygists_create_public TYPE string. "   todo
  TYPES: BEGIN OF bodygists_create_files,
           dummy_workaround TYPE i,
         END OF bodygists_create_files.
  TYPES: BEGIN OF bodygists_create,
           description TYPE string,
           files TYPE bodygists_create_files,
           public TYPE bodygists_create_public,
         END OF bodygists_create.

* Component schema: bodygists_update, object
  TYPES: BEGIN OF bodygists_update_files,
           dummy_workaround TYPE i,
         END OF bodygists_update_files.
  TYPES: BEGIN OF bodygists_update,
           description TYPE string,
           files TYPE bodygists_update_files,
         END OF bodygists_update.

* Component schema: bodygists_delete, object
  TYPES: BEGIN OF bodygists_delete_files,
           dummy_workaround TYPE i,
         END OF bodygists_delete_files.
  TYPES: BEGIN OF bodygists_delete,
           description TYPE string,
           files TYPE bodygists_delete_files,
         END OF bodygists_delete.

* Component schema: bodygists_create_comment, object
  TYPES: BEGIN OF bodygists_create_comment,
           body TYPE string,
         END OF bodygists_create_comment.

* Component schema: bodygists_update_comment, object
  TYPES: BEGIN OF bodygists_update_comment,
           body TYPE string,
         END OF bodygists_update_comment.

* Component schema: bodygists_delete_comment, object
  TYPES: BEGIN OF bodygists_delete_comment,
           body TYPE string,
         END OF bodygists_delete_comment.

* Component schema: bodymarkdown_render, object
  TYPES: BEGIN OF bodymarkdown_render,
           text TYPE string,
           mode TYPE string,
           context TYPE string,
         END OF bodymarkdown_render.

* Component schema: bodyactivity_mark_notification, object
  TYPES: BEGIN OF bodyactivity_mark_notification,
           last_read_at TYPE string,
           read TYPE abap_bool,
         END OF bodyactivity_mark_notification.

* Component schema: bodyactivity_set_thread_subscr, object
  TYPES: BEGIN OF bodyactivity_set_thread_subscr,
           ignored TYPE abap_bool,
         END OF bodyactivity_set_thread_subscr.

* Component schema: bodyactivity_delete_thread_sub, object
  TYPES: BEGIN OF bodyactivity_delete_thread_sub,
           ignored TYPE abap_bool,
         END OF bodyactivity_delete_thread_sub.

* Component schema: bodyorgs_update, object
  TYPES: BEGIN OF bodyorgs_update,
           billing_email TYPE string,
           company TYPE string,
           email TYPE string,
           twitter_username TYPE string,
           location TYPE string,
           name TYPE string,
           description TYPE string,
           has_organization_projects TYPE abap_bool,
           has_repository_projects TYPE abap_bool,
           default_repository_permission TYPE string,
           members_can_create_repositorie TYPE abap_bool,
           members_can_create_internal_re TYPE abap_bool,
           members_can_create_private_rep TYPE abap_bool,
           members_can_create_public_repo TYPE abap_bool,
           members_allowed_repository_cre TYPE string,
           members_can_create_pages TYPE abap_bool,
           members_can_create_public_page TYPE abap_bool,
           members_can_create_private_pag TYPE abap_bool,
           blog TYPE string,
         END OF bodyorgs_update.

* Component schema: bodyactions_set_github_actions, object
  TYPES: BEGIN OF bodyactions_set_github_actions,
           enabled_repositories TYPE enabled_repositories,
           allowed_actions TYPE allowed_actions,
         END OF bodyactions_set_github_actions.

* Component schema: bodyactions_set_selected_repos, object
  TYPES: BEGIN OF bodyactions_set_selected_repos,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_set_selected_repos.

* Component schema: bodyactions_create_self_hosted, object
  TYPES: BEGIN OF bodyactions_create_self_hosted,
           name TYPE string,
           visibility TYPE string,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           runners TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_create_self_hosted.

* Component schema: bodyactions_update_self_hosted, object
  TYPES: BEGIN OF bodyactions_update_self_hosted,
           name TYPE string,
           visibility TYPE string,
         END OF bodyactions_update_self_hosted.

* Component schema: bodyactions_delete_self_hosted, object
  TYPES: BEGIN OF bodyactions_delete_self_hosted,
           name TYPE string,
           visibility TYPE string,
         END OF bodyactions_delete_self_hosted.

* Component schema: bodyactions_set_repo_access_to, object
  TYPES: BEGIN OF bodyactions_set_repo_access_to,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_set_repo_access_to.

* Component schema: bodyactions_set_self_hosted_ru, object
  TYPES: BEGIN OF bodyactions_set_self_hosted_ru,
           runners TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_set_self_hosted_ru.

* Component schema: bodyactions_create_or_update_o, object
  TYPES: BEGIN OF bodyactions_create_or_update_o,
           encrypted_value TYPE string,
           key_id TYPE string,
           visibility TYPE string,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_create_or_update_o.

* Component schema: bodyactions_delete_org_secret, object
  TYPES: BEGIN OF bodyactions_delete_org_secret,
           encrypted_value TYPE string,
           key_id TYPE string,
           visibility TYPE string,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_delete_org_secret.

* Component schema: bodyactions_set_selected_rep01, object
  TYPES: BEGIN OF bodyactions_set_selected_rep01,
           selected_repository_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyactions_set_selected_rep01.

* Component schema: bodyorgs_create_webhook, object
  TYPES: BEGIN OF bodyorgs_create_webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
           username TYPE string,
           password TYPE string,
         END OF bodyorgs_create_webhook_config.
  TYPES: BEGIN OF bodyorgs_create_webhook,
           name TYPE string,
           config TYPE bodyorgs_create_webhook_config,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
         END OF bodyorgs_create_webhook.

* Component schema: bodyorgs_update_webhook, object
  TYPES: BEGIN OF bodyorgs_update_webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF bodyorgs_update_webhook_config.
  TYPES: BEGIN OF bodyorgs_update_webhook,
           config TYPE bodyorgs_update_webhook_config,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           name TYPE string,
         END OF bodyorgs_update_webhook.

* Component schema: bodyorgs_delete_webhook, object
  TYPES: BEGIN OF bodyorgs_delete_webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF bodyorgs_delete_webhook_config.
  TYPES: BEGIN OF bodyorgs_delete_webhook,
           config TYPE bodyorgs_delete_webhook_config,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           name TYPE string,
         END OF bodyorgs_delete_webhook.

* Component schema: bodyorgs_update_webhook_config, object
  TYPES: BEGIN OF bodyorgs_update_webhook_config,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF bodyorgs_update_webhook_config.

* Component schema: bodyorgs_create_invitation, object
  TYPES: BEGIN OF bodyorgs_create_invitation,
           invitee_id TYPE i,
           email TYPE string,
           role TYPE string,
           team_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyorgs_create_invitation.

* Component schema: bodyorgs_set_membership_for_us, object
  TYPES: BEGIN OF bodyorgs_set_membership_for_us,
           role TYPE string,
         END OF bodyorgs_set_membership_for_us.

* Component schema: bodyorgs_remove_membership_for, object
  TYPES: BEGIN OF bodyorgs_remove_membership_for,
           role TYPE string,
         END OF bodyorgs_remove_membership_for.

* Component schema: bodymigrations_start_for_org, object
  TYPES: BEGIN OF bodymigrations_start_for_org,
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           lock_repositories TYPE abap_bool,
           exclude_attachments TYPE abap_bool,
           exclude TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodymigrations_start_for_org.

* Component schema: bodyprojects_create_for_org, object
  TYPES: BEGIN OF bodyprojects_create_for_org,
           name TYPE string,
           body TYPE string,
         END OF bodyprojects_create_for_org.

* Component schema: bodyrepos_create_in_org, object
  TYPES: BEGIN OF bodyrepos_create_in_org,
           name TYPE string,
           description TYPE string,
           homepage TYPE string,
           private TYPE abap_bool,
           visibility TYPE string,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           is_template TYPE abap_bool,
           team_id TYPE i,
           auto_init TYPE abap_bool,
           gitignore_template TYPE string,
           license_template TYPE string,
           allow_squash_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
         END OF bodyrepos_create_in_org.

* Component schema: bodyteams_create, object
  TYPES: BEGIN OF bodyteams_create,
           name TYPE string,
           description TYPE string,
           maintainers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repo_names TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           privacy TYPE string,
           permission TYPE string,
           parent_team_id TYPE i,
         END OF bodyteams_create.

* Component schema: bodyteams_update_in_org, object
  TYPES: BEGIN OF bodyteams_update_in_org,
           name TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           parent_team_id TYPE i,
         END OF bodyteams_update_in_org.

* Component schema: bodyteams_delete_in_org, object
  TYPES: BEGIN OF bodyteams_delete_in_org,
           name TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           parent_team_id TYPE i,
         END OF bodyteams_delete_in_org.

* Component schema: bodyteams_create_discussion_in, object
  TYPES: BEGIN OF bodyteams_create_discussion_in,
           title TYPE string,
           body TYPE string,
           private TYPE abap_bool,
         END OF bodyteams_create_discussion_in.

* Component schema: bodyteams_update_discussion_in, object
  TYPES: BEGIN OF bodyteams_update_discussion_in,
           title TYPE string,
           body TYPE string,
         END OF bodyteams_update_discussion_in.

* Component schema: bodyteams_delete_discussion_in, object
  TYPES: BEGIN OF bodyteams_delete_discussion_in,
           title TYPE string,
           body TYPE string,
         END OF bodyteams_delete_discussion_in.

* Component schema: bodyteams_create_discussion_co, object
  TYPES: BEGIN OF bodyteams_create_discussion_co,
           body TYPE string,
         END OF bodyteams_create_discussion_co.

* Component schema: bodyteams_update_discussion_co, object
  TYPES: BEGIN OF bodyteams_update_discussion_co,
           body TYPE string,
         END OF bodyteams_update_discussion_co.

* Component schema: bodyteams_delete_discussion_co, object
  TYPES: BEGIN OF bodyteams_delete_discussion_co,
           body TYPE string,
         END OF bodyteams_delete_discussion_co.

* Component schema: bodyreactions_create_for_team_, object
  TYPES: BEGIN OF bodyreactions_create_for_team_,
           content TYPE string,
         END OF bodyreactions_create_for_team_.

* Component schema: bodyreactions_create_for_tea01, object
  TYPES: BEGIN OF bodyreactions_create_for_tea01,
           content TYPE string,
         END OF bodyreactions_create_for_tea01.

* Component schema: bodyteams_add_or_update_member, object
  TYPES: BEGIN OF bodyteams_add_or_update_member,
           role TYPE string,
         END OF bodyteams_add_or_update_member.

* Component schema: bodyteams_remove_membership_fo, object
  TYPES: BEGIN OF bodyteams_remove_membership_fo,
           role TYPE string,
         END OF bodyteams_remove_membership_fo.

* Component schema: bodyteams_add_or_update_projec, object
  TYPES: BEGIN OF bodyteams_add_or_update_projec,
           permission TYPE string,
         END OF bodyteams_add_or_update_projec.

* Component schema: bodyteams_remove_project_in_or, object
  TYPES: BEGIN OF bodyteams_remove_project_in_or,
           permission TYPE string,
         END OF bodyteams_remove_project_in_or.

* Component schema: bodyteams_add_or_update_repo_p, object
  TYPES: BEGIN OF bodyteams_add_or_update_repo_p,
           permission TYPE string,
         END OF bodyteams_add_or_update_repo_p.

* Component schema: bodyteams_remove_repo_in_org, object
  TYPES: BEGIN OF bodyteams_remove_repo_in_org,
           permission TYPE string,
         END OF bodyteams_remove_repo_in_org.

* Component schema: bodyteams_create_or_update_idp, object
  TYPES: BEGIN OF bodyteams_create_or_update_idp,
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyteams_create_or_update_idp.

* Component schema: bodyprojects_update_card, object
  TYPES: BEGIN OF bodyprojects_update_card,
           note TYPE string,
           archived TYPE abap_bool,
         END OF bodyprojects_update_card.

* Component schema: bodyprojects_delete_card, object
  TYPES: BEGIN OF bodyprojects_delete_card,
           note TYPE string,
           archived TYPE abap_bool,
         END OF bodyprojects_delete_card.

* Component schema: bodyprojects_move_card, object
  TYPES: BEGIN OF bodyprojects_move_card,
           position TYPE string,
           column_id TYPE i,
         END OF bodyprojects_move_card.

* Component schema: bodyprojects_update_column, object
  TYPES: BEGIN OF bodyprojects_update_column,
           name TYPE string,
         END OF bodyprojects_update_column.

* Component schema: bodyprojects_delete_column, object
  TYPES: BEGIN OF bodyprojects_delete_column,
           name TYPE string,
         END OF bodyprojects_delete_column.

* Component schema: bodyprojects_create_card, 
  TYPES bodyprojects_create_card TYPE string. "   todo

* Component schema: bodyprojects_move_column, object
  TYPES: BEGIN OF bodyprojects_move_column,
           position TYPE string,
         END OF bodyprojects_move_column.

* Component schema: bodyprojects_update, object
  TYPES: BEGIN OF bodyprojects_update,
           name TYPE string,
           body TYPE string,
           state TYPE string,
           organization_permission TYPE string,
           private TYPE abap_bool,
         END OF bodyprojects_update.

* Component schema: bodyprojects_delete, object
  TYPES: BEGIN OF bodyprojects_delete,
           name TYPE string,
           body TYPE string,
           state TYPE string,
           organization_permission TYPE string,
           private TYPE abap_bool,
         END OF bodyprojects_delete.

* Component schema: bodyprojects_add_collaborator, object
  TYPES: BEGIN OF bodyprojects_add_collaborator,
           permission TYPE string,
         END OF bodyprojects_add_collaborator.

* Component schema: bodyprojects_remove_collaborat, object
  TYPES: BEGIN OF bodyprojects_remove_collaborat,
           permission TYPE string,
         END OF bodyprojects_remove_collaborat.

* Component schema: bodyprojects_create_column, object
  TYPES: BEGIN OF bodyprojects_create_column,
           name TYPE string,
         END OF bodyprojects_create_column.

* Component schema: bodyrepos_update, object
  TYPES: BEGIN OF bodyrepos_update,
           name TYPE string,
           description TYPE string,
           homepage TYPE string,
           private TYPE abap_bool,
           visibility TYPE string,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           is_template TYPE abap_bool,
           default_branch TYPE string,
           allow_squash_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           archived TYPE abap_bool,
         END OF bodyrepos_update.

* Component schema: bodyrepos_delete, object
  TYPES: BEGIN OF bodyrepos_delete,
           name TYPE string,
           description TYPE string,
           homepage TYPE string,
           private TYPE abap_bool,
           visibility TYPE string,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           is_template TYPE abap_bool,
           default_branch TYPE string,
           allow_squash_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           archived TYPE abap_bool,
         END OF bodyrepos_delete.

* Component schema: bodyactions_set_github_actio01, object
  TYPES: BEGIN OF bodyactions_set_github_actio01,
           enabled TYPE actions_enabled,
           allowed_actions TYPE allowed_actions,
         END OF bodyactions_set_github_actio01.

* Component schema: bodyactions_create_or_update_r, object
  TYPES: BEGIN OF bodyactions_create_or_update_r,
           encrypted_value TYPE string,
           key_id TYPE string,
         END OF bodyactions_create_or_update_r.

* Component schema: bodyactions_delete_repo_secret, object
  TYPES: BEGIN OF bodyactions_delete_repo_secret,
           encrypted_value TYPE string,
           key_id TYPE string,
         END OF bodyactions_delete_repo_secret.

* Component schema: bodyactions_create_workflow_di, object
  TYPES: BEGIN OF bodyactions_create_workflow_01,
           dummy_workaround TYPE i,
         END OF bodyactions_create_workflow_01.
  TYPES: BEGIN OF bodyactions_create_workflow_di,
           ref TYPE string,
           inputs TYPE bodyactions_create_workflow_01,
         END OF bodyactions_create_workflow_di.

* Component schema: bodyrepos_update_branch_protec, object
  TYPES: BEGIN OF bodyrepos_update_branch_prot04,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_update_branch_prot04.
  TYPES: BEGIN OF bodyrepos_update_branch_prot03,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_update_branch_prot03.
  TYPES: BEGIN OF bodyrepos_update_branch_prot02,
           dismissal_restrictions TYPE bodyrepos_update_branch_prot03,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
         END OF bodyrepos_update_branch_prot02.
  TYPES: BEGIN OF bodyrepos_update_branch_prot01,
           strict TYPE abap_bool,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_update_branch_prot01.
  TYPES: BEGIN OF bodyrepos_update_branch_protec,
           required_status_checks TYPE bodyrepos_update_branch_prot01,
           enforce_admins TYPE abap_bool,
           required_pull_request_reviews TYPE bodyrepos_update_branch_prot02,
           restrictions TYPE bodyrepos_update_branch_prot04,
           required_linear_history TYPE abap_bool,
           allow_force_pushes TYPE abap_bool,
           allow_deletions TYPE abap_bool,
         END OF bodyrepos_update_branch_protec.

* Component schema: bodyrepos_delete_branch_protec, object
  TYPES: BEGIN OF bodyrepos_delete_branch_prot04,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_delete_branch_prot04.
  TYPES: BEGIN OF bodyrepos_delete_branch_prot03,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_delete_branch_prot03.
  TYPES: BEGIN OF bodyrepos_delete_branch_prot02,
           dismissal_restrictions TYPE bodyrepos_delete_branch_prot03,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
         END OF bodyrepos_delete_branch_prot02.
  TYPES: BEGIN OF bodyrepos_delete_branch_prot01,
           strict TYPE abap_bool,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_delete_branch_prot01.
  TYPES: BEGIN OF bodyrepos_delete_branch_protec,
           required_status_checks TYPE bodyrepos_delete_branch_prot01,
           enforce_admins TYPE abap_bool,
           required_pull_request_reviews TYPE bodyrepos_delete_branch_prot02,
           restrictions TYPE bodyrepos_delete_branch_prot04,
           required_linear_history TYPE abap_bool,
           allow_force_pushes TYPE abap_bool,
           allow_deletions TYPE abap_bool,
         END OF bodyrepos_delete_branch_protec.

* Component schema: bodyrepos_update_pull_request_, object
  TYPES: BEGIN OF bodyrepos_update_pull_reques01,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_update_pull_reques01.
  TYPES: BEGIN OF bodyrepos_update_pull_request_,
           dismissal_restrictions TYPE bodyrepos_update_pull_reques01,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
         END OF bodyrepos_update_pull_request_.

* Component schema: bodyrepos_delete_pull_request_, object
  TYPES: BEGIN OF bodyrepos_delete_pull_reques01,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_delete_pull_reques01.
  TYPES: BEGIN OF bodyrepos_delete_pull_request_,
           dismissal_restrictions TYPE bodyrepos_delete_pull_reques01,
           dismiss_stale_reviews TYPE abap_bool,
           require_code_owner_reviews TYPE abap_bool,
           required_approving_review_coun TYPE i,
         END OF bodyrepos_delete_pull_request_.

* Component schema: bodyrepos_update_status_check_, object
  TYPES: BEGIN OF bodyrepos_update_status_check_,
           strict TYPE abap_bool,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_update_status_check_.

* Component schema: bodyrepos_remove_status_check_, object
  TYPES: BEGIN OF bodyrepos_remove_status_check_,
           strict TYPE abap_bool,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_remove_status_check_.

* Component schema: bodyrepos_add_status_check_con, object
  TYPES: BEGIN OF bodyrepos_add_status_check_con,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_add_status_check_con.

* Component schema: bodyrepos_set_status_check_con, object
  TYPES: BEGIN OF bodyrepos_set_status_check_con,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_set_status_check_con.

* Component schema: bodyrepos_remove_status_chec01, object
  TYPES: BEGIN OF bodyrepos_remove_status_chec01,
           contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_remove_status_chec01.

* Component schema: bodyrepos_add_app_access_restr, object
  TYPES: BEGIN OF bodyrepos_add_app_access_restr,
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_add_app_access_restr.

* Component schema: bodyrepos_set_app_access_restr, object
  TYPES: BEGIN OF bodyrepos_set_app_access_restr,
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_set_app_access_restr.

* Component schema: bodyrepos_remove_app_access_re, object
  TYPES: BEGIN OF bodyrepos_remove_app_access_re,
           apps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_remove_app_access_re.

* Component schema: bodyrepos_add_team_access_rest, object
  TYPES: BEGIN OF bodyrepos_add_team_access_rest,
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_add_team_access_rest.

* Component schema: bodyrepos_set_team_access_rest, object
  TYPES: BEGIN OF bodyrepos_set_team_access_rest,
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_set_team_access_rest.

* Component schema: bodyrepos_remove_team_access_r, object
  TYPES: BEGIN OF bodyrepos_remove_team_access_r,
           teams TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_remove_team_access_r.

* Component schema: bodyrepos_add_user_access_rest, object
  TYPES: BEGIN OF bodyrepos_add_user_access_rest,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_add_user_access_rest.

* Component schema: bodyrepos_set_user_access_rest, object
  TYPES: BEGIN OF bodyrepos_set_user_access_rest,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_set_user_access_rest.

* Component schema: bodyrepos_remove_user_access_r, object
  TYPES: BEGIN OF bodyrepos_remove_user_access_r,
           users TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_remove_user_access_r.

* Component schema: bodyrepos_rename_branch, object
  TYPES: BEGIN OF bodyrepos_rename_branch,
           new_name TYPE string,
         END OF bodyrepos_rename_branch.

* Component schema: bodychecks_create, object
  TYPES: BEGIN OF bodychecks_create_output,
           title TYPE string,
           summary TYPE string,
           text TYPE string,
           annotations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           images TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodychecks_create_output.
  TYPES: BEGIN OF bodychecks_create,
           name TYPE string,
           head_sha TYPE string,
           details_url TYPE string,
           external_id TYPE string,
           status TYPE string,
           started_at TYPE string,
           conclusion TYPE string,
           completed_at TYPE string,
           output TYPE bodychecks_create_output,
           actions TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodychecks_create.

* Component schema: bodychecks_update, object
  TYPES: BEGIN OF bodychecks_update_output,
           title TYPE string,
           summary TYPE string,
           text TYPE string,
           annotations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           images TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodychecks_update_output.
  TYPES: BEGIN OF bodychecks_update,
           name TYPE string,
           details_url TYPE string,
           external_id TYPE string,
           started_at TYPE string,
           status TYPE string,
           conclusion TYPE string,
           completed_at TYPE string,
           output TYPE bodychecks_update_output,
           actions TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodychecks_update.

* Component schema: bodychecks_create_suite, object
  TYPES: BEGIN OF bodychecks_create_suite,
           head_sha TYPE string,
         END OF bodychecks_create_suite.

* Component schema: bodychecks_set_suites_preferen, object
  TYPES: BEGIN OF bodychecks_set_suites_preferen,
           auto_trigger_checks TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodychecks_set_suites_preferen.

* Component schema: bodycode_scanning_update_alert, object
  TYPES: BEGIN OF bodycode_scanning_update_alert,
           state TYPE code_scanning_alert_set_state,
           dismissed_reason TYPE code_scanning_alert_dismisse01,
         END OF bodycode_scanning_update_alert.

* Component schema: bodycode_scanning_upload_sarif, object
  TYPES: BEGIN OF bodycode_scanning_upload_sarif,
           commit_sha TYPE code_scanning_analysis_commit_,
           ref TYPE code_scanning_analysis_ref,
           sarif TYPE code_scanning_analysis_sarif_f,
           checkout_uri TYPE string,
           started_at TYPE string,
           tool_name TYPE code_scanning_analysis_tool_na,
         END OF bodycode_scanning_upload_sarif.

* Component schema: bodyrepos_add_collaborator, object
  TYPES: BEGIN OF bodyrepos_add_collaborator,
           permission TYPE string,
           permissions TYPE string,
         END OF bodyrepos_add_collaborator.

* Component schema: bodyrepos_remove_collaborator, object
  TYPES: BEGIN OF bodyrepos_remove_collaborator,
           permission TYPE string,
           permissions TYPE string,
         END OF bodyrepos_remove_collaborator.

* Component schema: bodyrepos_update_commit_commen, object
  TYPES: BEGIN OF bodyrepos_update_commit_commen,
           body TYPE string,
         END OF bodyrepos_update_commit_commen.

* Component schema: bodyrepos_delete_commit_commen, object
  TYPES: BEGIN OF bodyrepos_delete_commit_commen,
           body TYPE string,
         END OF bodyrepos_delete_commit_commen.

* Component schema: bodyreactions_create_for_commi, object
  TYPES: BEGIN OF bodyreactions_create_for_commi,
           content TYPE string,
         END OF bodyreactions_create_for_commi.

* Component schema: bodyrepos_create_commit_commen, object
  TYPES: BEGIN OF bodyrepos_create_commit_commen,
           body TYPE string,
           path TYPE string,
           position TYPE i,
           line TYPE i,
         END OF bodyrepos_create_commit_commen.

* Component schema: bodyrepos_create_or_update_fil, object
  TYPES: BEGIN OF bodyrepos_create_or_update_f02,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF bodyrepos_create_or_update_f02.
  TYPES: BEGIN OF bodyrepos_create_or_update_f01,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF bodyrepos_create_or_update_f01.
  TYPES: BEGIN OF bodyrepos_create_or_update_fil,
           message TYPE string,
           content TYPE string,
           sha TYPE string,
           branch TYPE string,
           committer TYPE bodyrepos_create_or_update_f01,
           author TYPE bodyrepos_create_or_update_f02,
         END OF bodyrepos_create_or_update_fil.

* Component schema: bodyrepos_delete_file, object
  TYPES: BEGIN OF bodyrepos_delete_file_author,
           name TYPE string,
           email TYPE string,
         END OF bodyrepos_delete_file_author.
  TYPES: BEGIN OF bodyrepos_delete_file_committe,
           name TYPE string,
           email TYPE string,
         END OF bodyrepos_delete_file_committe.
  TYPES: BEGIN OF bodyrepos_delete_file,
           message TYPE string,
           sha TYPE string,
           branch TYPE string,
           committer TYPE bodyrepos_delete_file_committe,
           author TYPE bodyrepos_delete_file_author,
         END OF bodyrepos_delete_file.

* Component schema: bodyrepos_create_deployment, object
  TYPES bodyrepos_create_deployment_pa TYPE string. "   todo
  TYPES: BEGIN OF bodyrepos_create_deployment,
           ref TYPE string,
           task TYPE string,
           auto_merge TYPE abap_bool,
           required_contexts TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payload TYPE bodyrepos_create_deployment_pa,
           environment TYPE string,
           description TYPE string,
           transient_environment TYPE abap_bool,
           production_environment TYPE abap_bool,
           created_at TYPE string,
         END OF bodyrepos_create_deployment.

* Component schema: bodyrepos_create_deployment_st, object
  TYPES: BEGIN OF bodyrepos_create_deployment_st,
           state TYPE string,
           target_url TYPE string,
           log_url TYPE string,
           description TYPE string,
           environment TYPE string,
           environment_url TYPE string,
           auto_inactive TYPE abap_bool,
         END OF bodyrepos_create_deployment_st.

* Component schema: bodyrepos_create_dispatch_even, object
  TYPES: BEGIN OF bodyrepos_create_dispatch_ev01,
           dummy_workaround TYPE i,
         END OF bodyrepos_create_dispatch_ev01.
  TYPES: BEGIN OF bodyrepos_create_dispatch_even,
           event_type TYPE string,
           client_payload TYPE bodyrepos_create_dispatch_ev01,
         END OF bodyrepos_create_dispatch_even.

* Component schema: bodyrepos_create_fork, object
  TYPES: BEGIN OF bodyrepos_create_fork,
           organization TYPE string,
         END OF bodyrepos_create_fork.

* Component schema: bodygit_create_blob, object
  TYPES: BEGIN OF bodygit_create_blob,
           content TYPE string,
           encoding TYPE string,
         END OF bodygit_create_blob.

* Component schema: bodygit_create_commit, object
  TYPES: BEGIN OF bodygit_create_commit_committe,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF bodygit_create_commit_committe.
  TYPES: BEGIN OF bodygit_create_commit_author,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF bodygit_create_commit_author.
  TYPES: BEGIN OF bodygit_create_commit,
           message TYPE string,
           tree TYPE string,
           parents TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           author TYPE bodygit_create_commit_author,
           committer TYPE bodygit_create_commit_committe,
           signature TYPE string,
         END OF bodygit_create_commit.

* Component schema: bodygit_create_ref, object
  TYPES: BEGIN OF bodygit_create_ref,
           ref TYPE string,
           sha TYPE string,
           key TYPE string,
         END OF bodygit_create_ref.

* Component schema: bodygit_update_ref, object
  TYPES: BEGIN OF bodygit_update_ref,
           sha TYPE string,
           force TYPE abap_bool,
         END OF bodygit_update_ref.

* Component schema: bodygit_delete_ref, object
  TYPES: BEGIN OF bodygit_delete_ref,
           sha TYPE string,
           force TYPE abap_bool,
         END OF bodygit_delete_ref.

* Component schema: bodygit_create_tag, object
  TYPES: BEGIN OF bodygit_create_tag_tagger,
           name TYPE string,
           email TYPE string,
           date TYPE string,
         END OF bodygit_create_tag_tagger.
  TYPES: BEGIN OF bodygit_create_tag,
           tag TYPE string,
           message TYPE string,
           object TYPE string,
           type TYPE string,
           tagger TYPE bodygit_create_tag_tagger,
         END OF bodygit_create_tag.

* Component schema: bodygit_create_tree, object
  TYPES: BEGIN OF bodygit_create_tree,
           tree TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           base_tree TYPE string,
         END OF bodygit_create_tree.

* Component schema: bodyrepos_create_webhook, object
  TYPES: BEGIN OF bodyrepos_create_webhook_confi,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
           token TYPE string,
           digest TYPE string,
         END OF bodyrepos_create_webhook_confi.
  TYPES: BEGIN OF bodyrepos_create_webhook,
           name TYPE string,
           config TYPE bodyrepos_create_webhook_confi,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
         END OF bodyrepos_create_webhook.

* Component schema: bodyrepos_update_webhook, object
  TYPES: BEGIN OF bodyrepos_update_webhook_confi,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
           address TYPE string,
           room TYPE string,
         END OF bodyrepos_update_webhook_confi.
  TYPES: BEGIN OF bodyrepos_update_webhook,
           config TYPE bodyrepos_update_webhook_confi,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           add_events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           remove_events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
         END OF bodyrepos_update_webhook.

* Component schema: bodyrepos_delete_webhook, object
  TYPES: BEGIN OF bodyrepos_delete_webhook_confi,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
           address TYPE string,
           room TYPE string,
         END OF bodyrepos_delete_webhook_confi.
  TYPES: BEGIN OF bodyrepos_delete_webhook,
           config TYPE bodyrepos_delete_webhook_confi,
           events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           add_events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           remove_events TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
         END OF bodyrepos_delete_webhook.

* Component schema: bodyrepos_update_webhook_confi, object
  TYPES: BEGIN OF bodyrepos_update_webhook_confi,
           url TYPE webhook_config_url,
           content_type TYPE webhook_config_content_type,
           secret TYPE webhook_config_secret,
           insecure_ssl TYPE webhook_config_insecure_ssl,
         END OF bodyrepos_update_webhook_confi.

* Component schema: bodymigrations_start_import, object
  TYPES: BEGIN OF bodymigrations_start_import,
           vcs_url TYPE string,
           vcs TYPE string,
           vcs_username TYPE string,
           vcs_password TYPE string,
           tfvc_project TYPE string,
         END OF bodymigrations_start_import.

* Component schema: bodymigrations_update_import, object
  TYPES: BEGIN OF bodymigrations_update_import,
           vcs_username TYPE string,
           vcs_password TYPE string,
           vcs TYPE string,
           tfvc_project TYPE string,
         END OF bodymigrations_update_import.

* Component schema: bodymigrations_cancel_import, object
  TYPES: BEGIN OF bodymigrations_cancel_import,
           vcs_username TYPE string,
           vcs_password TYPE string,
           vcs TYPE string,
           tfvc_project TYPE string,
         END OF bodymigrations_cancel_import.

* Component schema: bodymigrations_map_commit_auth, object
  TYPES: BEGIN OF bodymigrations_map_commit_auth,
           email TYPE string,
           name TYPE string,
           remote_id TYPE string,
         END OF bodymigrations_map_commit_auth.

* Component schema: bodymigrations_set_lfs_prefere, object
  TYPES: BEGIN OF bodymigrations_set_lfs_prefere,
           use_lfs TYPE string,
         END OF bodymigrations_set_lfs_prefere.

* Component schema: bodyrepos_update_invitation, object
  TYPES: BEGIN OF bodyrepos_update_invitation,
           permissions TYPE string,
         END OF bodyrepos_update_invitation.

* Component schema: bodyrepos_delete_invitation, object
  TYPES: BEGIN OF bodyrepos_delete_invitation,
           permissions TYPE string,
         END OF bodyrepos_delete_invitation.

* Component schema: bodyissues_create, object
  TYPES bodyissues_create_milestone TYPE string. "   todo
  TYPES bodyissues_create_title TYPE string. "   todo
  TYPES: BEGIN OF bodyissues_create,
           title TYPE bodyissues_create_title,
           body TYPE string,
           assignee TYPE string,
           milestone TYPE bodyissues_create_milestone,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_create.

* Component schema: bodyissues_update_comment, object
  TYPES: BEGIN OF bodyissues_update_comment,
           body TYPE string,
         END OF bodyissues_update_comment.

* Component schema: bodyissues_delete_comment, object
  TYPES: BEGIN OF bodyissues_delete_comment,
           body TYPE string,
         END OF bodyissues_delete_comment.

* Component schema: bodyreactions_create_for_issue, object
  TYPES: BEGIN OF bodyreactions_create_for_issue,
           content TYPE string,
         END OF bodyreactions_create_for_issue.

* Component schema: bodyissues_update, object
  TYPES bodyissues_update_milestone TYPE string. "   todo
  TYPES bodyissues_update_title TYPE string. "   todo
  TYPES: BEGIN OF bodyissues_update,
           title TYPE bodyissues_update_title,
           body TYPE string,
           assignee TYPE string,
           state TYPE string,
           milestone TYPE bodyissues_update_milestone,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_update.

* Component schema: bodyissues_add_assignees, object
  TYPES: BEGIN OF bodyissues_add_assignees,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_add_assignees.

* Component schema: bodyissues_remove_assignees, object
  TYPES: BEGIN OF bodyissues_remove_assignees,
           assignees TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_remove_assignees.

* Component schema: bodyissues_create_comment, object
  TYPES: BEGIN OF bodyissues_create_comment,
           body TYPE string,
         END OF bodyissues_create_comment.

* Component schema: bodyissues_add_labels, object
  TYPES: BEGIN OF bodyissues_add_labels,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_add_labels.

* Component schema: bodyissues_set_labels, object
  TYPES: BEGIN OF bodyissues_set_labels,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_set_labels.

* Component schema: bodyissues_remove_all_labels, object
  TYPES: BEGIN OF bodyissues_remove_all_labels,
           labels TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyissues_remove_all_labels.

* Component schema: bodyissues_lock, object
  TYPES: BEGIN OF bodyissues_lock,
           lock_reason TYPE string,
         END OF bodyissues_lock.

* Component schema: bodyissues_unlock, object
  TYPES: BEGIN OF bodyissues_unlock,
           lock_reason TYPE string,
         END OF bodyissues_unlock.

* Component schema: bodyreactions_create_for_iss01, object
  TYPES: BEGIN OF bodyreactions_create_for_iss01,
           content TYPE string,
         END OF bodyreactions_create_for_iss01.

* Component schema: bodyrepos_create_deploy_key, object
  TYPES: BEGIN OF bodyrepos_create_deploy_key,
           title TYPE string,
           key TYPE string,
           read_only TYPE abap_bool,
         END OF bodyrepos_create_deploy_key.

* Component schema: bodyissues_create_label, object
  TYPES: BEGIN OF bodyissues_create_label,
           name TYPE string,
           color TYPE string,
           description TYPE string,
         END OF bodyissues_create_label.

* Component schema: bodyissues_update_label, object
  TYPES: BEGIN OF bodyissues_update_label,
           new_name TYPE string,
           color TYPE string,
           description TYPE string,
         END OF bodyissues_update_label.

* Component schema: bodyissues_delete_label, object
  TYPES: BEGIN OF bodyissues_delete_label,
           new_name TYPE string,
           color TYPE string,
           description TYPE string,
         END OF bodyissues_delete_label.

* Component schema: bodyrepos_merge, object
  TYPES: BEGIN OF bodyrepos_merge,
           base TYPE string,
           head TYPE string,
           commit_message TYPE string,
         END OF bodyrepos_merge.

* Component schema: bodyissues_create_milestone, object
  TYPES: BEGIN OF bodyissues_create_milestone,
           title TYPE string,
           state TYPE string,
           description TYPE string,
           due_on TYPE string,
         END OF bodyissues_create_milestone.

* Component schema: bodyissues_update_milestone, object
  TYPES: BEGIN OF bodyissues_update_milestone,
           title TYPE string,
           state TYPE string,
           description TYPE string,
           due_on TYPE string,
         END OF bodyissues_update_milestone.

* Component schema: bodyissues_delete_milestone, object
  TYPES: BEGIN OF bodyissues_delete_milestone,
           title TYPE string,
           state TYPE string,
           description TYPE string,
           due_on TYPE string,
         END OF bodyissues_delete_milestone.

* Component schema: bodyactivity_mark_repo_notific, object
  TYPES: BEGIN OF bodyactivity_mark_repo_notific,
           last_read_at TYPE string,
         END OF bodyactivity_mark_repo_notific.

* Component schema: bodyrepos_create_pages_site, object
  TYPES: BEGIN OF bodyrepos_create_pages_site_so,
           branch TYPE string,
           path TYPE string,
         END OF bodyrepos_create_pages_site_so.
  TYPES: BEGIN OF bodyrepos_create_pages_site,
           source TYPE bodyrepos_create_pages_site_so,
         END OF bodyrepos_create_pages_site.

* Component schema: bodyrepos_update_information_a, object
  TYPES bodyrepos_update_information01 TYPE string. "   todo
  TYPES: BEGIN OF bodyrepos_update_information_a,
           cname TYPE string,
           public TYPE abap_bool,
           source TYPE bodyrepos_update_information01,
         END OF bodyrepos_update_information_a.

* Component schema: bodyrepos_delete_pages_site, object
  TYPES bodyrepos_delete_pages_site_so TYPE string. "   todo
  TYPES: BEGIN OF bodyrepos_delete_pages_site,
           cname TYPE string,
           public TYPE abap_bool,
           source TYPE bodyrepos_delete_pages_site_so,
         END OF bodyrepos_delete_pages_site.

* Component schema: bodyprojects_create_for_repo, object
  TYPES: BEGIN OF bodyprojects_create_for_repo,
           name TYPE string,
           body TYPE string,
         END OF bodyprojects_create_for_repo.

* Component schema: bodypulls_create, object
  TYPES: BEGIN OF bodypulls_create,
           title TYPE string,
           head TYPE string,
           base TYPE string,
           body TYPE string,
           maintainer_can_modify TYPE abap_bool,
           draft TYPE abap_bool,
           issue TYPE i,
         END OF bodypulls_create.

* Component schema: bodypulls_update_review_commen, object
  TYPES: BEGIN OF bodypulls_update_review_commen,
           body TYPE string,
         END OF bodypulls_update_review_commen.

* Component schema: bodypulls_delete_review_commen, object
  TYPES: BEGIN OF bodypulls_delete_review_commen,
           body TYPE string,
         END OF bodypulls_delete_review_commen.

* Component schema: bodyreactions_create_for_pull_, object
  TYPES: BEGIN OF bodyreactions_create_for_pull_,
           content TYPE string,
         END OF bodyreactions_create_for_pull_.

* Component schema: bodypulls_update, object
  TYPES: BEGIN OF bodypulls_update,
           title TYPE string,
           body TYPE string,
           state TYPE string,
           base TYPE string,
           maintainer_can_modify TYPE abap_bool,
         END OF bodypulls_update.

* Component schema: bodypulls_create_review_commen, object
  TYPES: BEGIN OF bodypulls_create_review_commen,
           body TYPE string,
           commit_id TYPE string,
           path TYPE string,
           position TYPE i,
           side TYPE string,
           line TYPE i,
           start_line TYPE i,
           start_side TYPE string,
           in_reply_to TYPE i,
         END OF bodypulls_create_review_commen.

* Component schema: bodypulls_create_reply_for_rev, object
  TYPES: BEGIN OF bodypulls_create_reply_for_rev,
           body TYPE string,
         END OF bodypulls_create_reply_for_rev.

* Component schema: bodypulls_merge, object
  TYPES: BEGIN OF bodypulls_merge,
           commit_title TYPE string,
           commit_message TYPE string,
           sha TYPE string,
           merge_method TYPE string,
         END OF bodypulls_merge.

* Component schema: bodypulls_request_reviewers, object
  TYPES: BEGIN OF bodypulls_request_reviewers,
           reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           team_reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodypulls_request_reviewers.

* Component schema: bodypulls_remove_requested_rev, object
  TYPES: BEGIN OF bodypulls_remove_requested_rev,
           reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           team_reviewers TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodypulls_remove_requested_rev.

* Component schema: bodypulls_create_review, object
  TYPES: BEGIN OF bodypulls_create_review,
           commit_id TYPE string,
           body TYPE string,
           event TYPE string,
           comments TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodypulls_create_review.

* Component schema: bodypulls_update_review, object
  TYPES: BEGIN OF bodypulls_update_review,
           body TYPE string,
         END OF bodypulls_update_review.

* Component schema: bodypulls_delete_pending_revie, object
  TYPES: BEGIN OF bodypulls_delete_pending_revie,
           body TYPE string,
         END OF bodypulls_delete_pending_revie.

* Component schema: bodypulls_dismiss_review, object
  TYPES: BEGIN OF bodypulls_dismiss_review,
           message TYPE string,
           event TYPE string,
         END OF bodypulls_dismiss_review.

* Component schema: bodypulls_submit_review, object
  TYPES: BEGIN OF bodypulls_submit_review,
           body TYPE string,
           event TYPE string,
         END OF bodypulls_submit_review.

* Component schema: bodypulls_update_branch, object
  TYPES: BEGIN OF bodypulls_update_branch,
           expected_head_sha TYPE string,
         END OF bodypulls_update_branch.

* Component schema: bodyrepos_create_release, object
  TYPES: BEGIN OF bodyrepos_create_release,
           tag_name TYPE string,
           target_commitish TYPE string,
           name TYPE string,
           body TYPE string,
           draft TYPE abap_bool,
           prerelease TYPE abap_bool,
         END OF bodyrepos_create_release.

* Component schema: bodyrepos_update_release_asset, object
  TYPES: BEGIN OF bodyrepos_update_release_asset,
           name TYPE string,
           label TYPE string,
           state TYPE string,
         END OF bodyrepos_update_release_asset.

* Component schema: bodyrepos_delete_release_asset, object
  TYPES: BEGIN OF bodyrepos_delete_release_asset,
           name TYPE string,
           label TYPE string,
           state TYPE string,
         END OF bodyrepos_delete_release_asset.

* Component schema: bodyrepos_update_release, object
  TYPES: BEGIN OF bodyrepos_update_release,
           tag_name TYPE string,
           target_commitish TYPE string,
           name TYPE string,
           body TYPE string,
           draft TYPE abap_bool,
           prerelease TYPE abap_bool,
         END OF bodyrepos_update_release.

* Component schema: bodyrepos_delete_release, object
  TYPES: BEGIN OF bodyrepos_delete_release,
           tag_name TYPE string,
           target_commitish TYPE string,
           name TYPE string,
           body TYPE string,
           draft TYPE abap_bool,
           prerelease TYPE abap_bool,
         END OF bodyrepos_delete_release.

* Component schema: bodysecret_scanning_update_ale, object
  TYPES: BEGIN OF bodysecret_scanning_update_ale,
           state TYPE secret_scanning_alert_state,
           resolution TYPE secret_scanning_alert_resoluti,
         END OF bodysecret_scanning_update_ale.

* Component schema: bodyrepos_create_commit_status, object
  TYPES: BEGIN OF bodyrepos_create_commit_status,
           state TYPE string,
           target_url TYPE string,
           description TYPE string,
           context TYPE string,
         END OF bodyrepos_create_commit_status.

* Component schema: bodyactivity_set_repo_subscrip, object
  TYPES: BEGIN OF bodyactivity_set_repo_subscrip,
           subscribed TYPE abap_bool,
           ignored TYPE abap_bool,
         END OF bodyactivity_set_repo_subscrip.

* Component schema: bodyactivity_delete_repo_subsc, object
  TYPES: BEGIN OF bodyactivity_delete_repo_subsc,
           subscribed TYPE abap_bool,
           ignored TYPE abap_bool,
         END OF bodyactivity_delete_repo_subsc.

* Component schema: bodyrepos_replace_all_topics, object
  TYPES: BEGIN OF bodyrepos_replace_all_topics,
           names TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_replace_all_topics.

* Component schema: bodyrepos_transfer, object
  TYPES: BEGIN OF bodyrepos_transfer,
           new_owner TYPE string,
           team_ids TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyrepos_transfer.

* Component schema: bodyrepos_create_using_templat, object
  TYPES: BEGIN OF bodyrepos_create_using_templat,
           owner TYPE string,
           name TYPE string,
           description TYPE string,
           include_all_branches TYPE abap_bool,
           private TYPE abap_bool,
         END OF bodyrepos_create_using_templat.

* Component schema: bodyenterprise_admin_provision, object
  TYPES: BEGIN OF bodyenterprise_admin_provision,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           displayname TYPE string,
           members TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_provision.

* Component schema: bodyenterprise_admin_set_infor, object
  TYPES: BEGIN OF bodyenterprise_admin_set_infor,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           displayname TYPE string,
           members TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_set_infor.

* Component schema: bodyenterprise_admin_update_at, object
  TYPES: BEGIN OF bodyenterprise_admin_update_at,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_update_at.

* Component schema: bodyenterprise_admin_delete_sc, object
  TYPES: BEGIN OF bodyenterprise_admin_delete_sc,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_delete_sc.

* Component schema: bodyenterprise_admin_provisi01, object
  TYPES: BEGIN OF bodyenterprise_admin_provisi02,
           givenname TYPE string,
           familyname TYPE string,
         END OF bodyenterprise_admin_provisi02.
  TYPES: BEGIN OF bodyenterprise_admin_provisi01,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           username TYPE string,
           name TYPE bodyenterprise_admin_provisi02,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_provisi01.

* Component schema: bodyenterprise_admin_set_inf01, object
  TYPES: BEGIN OF bodyenterprise_admin_set_inf02,
           givenname TYPE string,
           familyname TYPE string,
         END OF bodyenterprise_admin_set_inf02.
  TYPES: BEGIN OF bodyenterprise_admin_set_inf01,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           username TYPE string,
           name TYPE bodyenterprise_admin_set_inf02,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_set_inf01.

* Component schema: bodyenterprise_admin_update_01, object
  TYPES: BEGIN OF bodyenterprise_admin_update_01,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_update_01.

* Component schema: bodyenterprise_admin_delete_us, object
  TYPES: BEGIN OF bodyenterprise_admin_delete_us,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyenterprise_admin_delete_us.

* Component schema: bodyscim_provision_and_invite_, object
  TYPES: BEGIN OF bodyscim_provision_and_invit01,
           givenname TYPE string,
           familyname TYPE string,
           formatted TYPE string,
         END OF bodyscim_provision_and_invit01.
  TYPES: BEGIN OF bodyscim_provision_and_invite_,
           username TYPE string,
           displayname TYPE string,
           name TYPE bodyscim_provision_and_invit01,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           externalid TYPE string,
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
         END OF bodyscim_provision_and_invite_.

* Component schema: bodyscim_set_information_for_p, object
  TYPES: BEGIN OF bodyscim_set_information_for01,
           givenname TYPE string,
           familyname TYPE string,
           formatted TYPE string,
         END OF bodyscim_set_information_for01.
  TYPES: BEGIN OF bodyscim_set_information_for_p,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           displayname TYPE string,
           externalid TYPE string,
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           active TYPE abap_bool,
           username TYPE string,
           name TYPE bodyscim_set_information_for01,
           emails TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyscim_set_information_for_p.

* Component schema: bodyscim_update_attribute_for_, object
  TYPES: BEGIN OF bodyscim_update_attribute_for_,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyscim_update_attribute_for_.

* Component schema: bodyscim_delete_user_from_org, object
  TYPES: BEGIN OF bodyscim_delete_user_from_org,
           schemas TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           operations TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodyscim_delete_user_from_org.

* Component schema: bodyteams_update_legacy, object
  TYPES: BEGIN OF bodyteams_update_legacy,
           name TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           parent_team_id TYPE i,
         END OF bodyteams_update_legacy.

* Component schema: bodyteams_delete_legacy, object
  TYPES: BEGIN OF bodyteams_delete_legacy,
           name TYPE string,
           description TYPE string,
           privacy TYPE string,
           permission TYPE string,
           parent_team_id TYPE i,
         END OF bodyteams_delete_legacy.

* Component schema: bodyteams_create_discussion_le, object
  TYPES: BEGIN OF bodyteams_create_discussion_le,
           title TYPE string,
           body TYPE string,
           private TYPE abap_bool,
         END OF bodyteams_create_discussion_le.

* Component schema: bodyteams_update_discussion_le, object
  TYPES: BEGIN OF bodyteams_update_discussion_le,
           title TYPE string,
           body TYPE string,
         END OF bodyteams_update_discussion_le.

* Component schema: bodyteams_delete_discussion_le, object
  TYPES: BEGIN OF bodyteams_delete_discussion_le,
           title TYPE string,
           body TYPE string,
         END OF bodyteams_delete_discussion_le.

* Component schema: bodyteams_create_discussion_01, object
  TYPES: BEGIN OF bodyteams_create_discussion_01,
           body TYPE string,
         END OF bodyteams_create_discussion_01.

* Component schema: bodyteams_update_discussion_01, object
  TYPES: BEGIN OF bodyteams_update_discussion_01,
           body TYPE string,
         END OF bodyteams_update_discussion_01.

* Component schema: bodyteams_delete_discussion_01, object
  TYPES: BEGIN OF bodyteams_delete_discussion_01,
           body TYPE string,
         END OF bodyteams_delete_discussion_01.

* Component schema: bodyreactions_create_for_tea02, object
  TYPES: BEGIN OF bodyreactions_create_for_tea02,
           content TYPE string,
         END OF bodyreactions_create_for_tea02.

* Component schema: bodyreactions_create_for_tea03, object
  TYPES: BEGIN OF bodyreactions_create_for_tea03,
           content TYPE string,
         END OF bodyreactions_create_for_tea03.

* Component schema: bodyteams_add_or_update_memb01, object
  TYPES: BEGIN OF bodyteams_add_or_update_memb01,
           role TYPE string,
         END OF bodyteams_add_or_update_memb01.

* Component schema: bodyteams_remove_membership_01, object
  TYPES: BEGIN OF bodyteams_remove_membership_01,
           role TYPE string,
         END OF bodyteams_remove_membership_01.

* Component schema: bodyteams_add_or_update_proj01, object
  TYPES: BEGIN OF bodyteams_add_or_update_proj01,
           permission TYPE string,
         END OF bodyteams_add_or_update_proj01.

* Component schema: bodyteams_remove_project_legac, object
  TYPES: BEGIN OF bodyteams_remove_project_legac,
           permission TYPE string,
         END OF bodyteams_remove_project_legac.

* Component schema: bodyteams_add_or_update_repo01, object
  TYPES: BEGIN OF bodyteams_add_or_update_repo01,
           permission TYPE string,
         END OF bodyteams_add_or_update_repo01.

* Component schema: bodyteams_remove_repo_legacy, object
  TYPES: BEGIN OF bodyteams_remove_repo_legacy,
           permission TYPE string,
         END OF bodyteams_remove_repo_legacy.

* Component schema: bodyteams_create_or_update_i01, object
  TYPES: BEGIN OF bodyteams_create_or_update_i01,
           groups TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           synced_at TYPE string,
         END OF bodyteams_create_or_update_i01.

* Component schema: bodyusers_update_authenticated, object
  TYPES: BEGIN OF bodyusers_update_authenticated,
           name TYPE string,
           email TYPE string,
           blog TYPE string,
           twitter_username TYPE string,
           company TYPE string,
           location TYPE string,
           hireable TYPE abap_bool,
           bio TYPE string,
         END OF bodyusers_update_authenticated.

* Component schema: bodyusers_set_primary_email_vi, object
  TYPES: BEGIN OF bodyusers_set_primary_email_vi,
           email TYPE string,
           visibility TYPE string,
         END OF bodyusers_set_primary_email_vi.

* Component schema: bodyusers_add_email_for_authen, 
  TYPES bodyusers_add_email_for_authen TYPE string. "   todo

* Component schema: bodyusers_delete_email_for_aut, 
  TYPES bodyusers_delete_email_for_aut TYPE string. "   todo

* Component schema: bodyusers_create_gpg_key_for_a, object
  TYPES: BEGIN OF bodyusers_create_gpg_key_for_a,
           armored_public_key TYPE string,
         END OF bodyusers_create_gpg_key_for_a.

* Component schema: bodyusers_create_public_ssh_ke, object
  TYPES: BEGIN OF bodyusers_create_public_ssh_ke,
           title TYPE string,
           key TYPE string,
         END OF bodyusers_create_public_ssh_ke.

* Component schema: bodyorgs_update_membership_for, object
  TYPES: BEGIN OF bodyorgs_update_membership_for,
           state TYPE string,
         END OF bodyorgs_update_membership_for.

* Component schema: bodymigrations_start_for_authe, object
  TYPES: BEGIN OF bodymigrations_start_for_authe,
           lock_repositories TYPE abap_bool,
           exclude_attachments TYPE abap_bool,
           exclude TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           repositories TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF bodymigrations_start_for_authe.

* Component schema: bodyprojects_create_for_authen, object
  TYPES: BEGIN OF bodyprojects_create_for_authen,
           name TYPE string,
           body TYPE string,
         END OF bodyprojects_create_for_authen.

* Component schema: bodyrepos_create_for_authentic, object
  TYPES: BEGIN OF bodyrepos_create_for_authentic,
           name TYPE string,
           description TYPE string,
           homepage TYPE string,
           private TYPE abap_bool,
           has_issues TYPE abap_bool,
           has_projects TYPE abap_bool,
           has_wiki TYPE abap_bool,
           team_id TYPE i,
           auto_init TYPE abap_bool,
           gitignore_template TYPE string,
           license_template TYPE string,
           allow_squash_merge TYPE abap_bool,
           allow_merge_commit TYPE abap_bool,
           allow_rebase_merge TYPE abap_bool,
           delete_branch_on_merge TYPE abap_bool,
           has_downloads TYPE abap_bool,
           is_template TYPE abap_bool,
         END OF bodyrepos_create_for_authentic.

* GET - "GitHub API Root"
* Operation id: meta/root
* Response: 200
*     application/json, object
  METHODS meta_root
    RAISING cx_static_check.

* GET - "Get the authenticated app"
* Operation id: apps/get-authenticated
* Response: 200
*     application/json, #/components/schemas/integration
  METHODS apps_get_authenticated
    RETURNING VALUE(return_data) TYPE integration
    RAISING cx_static_check.

* POST - "Create a GitHub App from a manifest"
* Operation id: apps/create-from-manifest
* Parameter: code, required, path
* Response: 201
*     application/json, 
* Response: 404
* Response: 422
  METHODS apps_create_from_manifest
    IMPORTING
      code TYPE string
    RAISING cx_static_check.

* GET - "Get a webhook configuration for an app"
* Operation id: apps/get-webhook-config-for-app
* Response: 200
*     application/json, #/components/schemas/webhook-config
  METHODS apps_get_webhook_config_for_ap
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* PATCH - "Update a webhook configuration for an app"
* Operation id: apps/update-webhook-config-for-app
* Response: 200
*     application/json, #/components/schemas/webhook-config
* Body ref: #/components/schemas/bodyapps_update_webhook_config
  METHODS apps_update_webhook_config_for
    IMPORTING
      body TYPE bodyapps_update_webhook_config
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* GET - "List installations for the authenticated app"
* Operation id: apps/list-installations
* Parameter: outdated, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Response: 200
*     application/json, array
  METHODS apps_list_installations
    IMPORTING
      outdated TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
      since TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get an installation for the authenticated app"
* Operation id: apps/get-installation
* Parameter: installation_id, required, path
* Response: 200
*     application/json, #/components/schemas/installation
* Response: 404
* Response: 415
  METHODS apps_get_installation
    IMPORTING
      installation_id TYPE i
    RETURNING VALUE(return_data) TYPE installation
    RAISING cx_static_check.

* DELETE - "Delete an installation for the authenticated app"
* Operation id: apps/delete-installation
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_delete_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.

* POST - "Create an installation access token for an app"
* Operation id: apps/create-installation-access-token
* Parameter: installation_id, required, path
* Response: 201
*     application/json, #/components/schemas/installation-token
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyapps_create_installation_a
  METHODS apps_create_installation_acces
    IMPORTING
      installation_id TYPE i
      body TYPE bodyapps_create_installation_a
    RETURNING VALUE(return_data) TYPE installation_token
    RAISING cx_static_check.

* PUT - "Suspend an app installation"
* Operation id: apps/suspend-installation
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_suspend_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.

* DELETE - "Unsuspend an app installation"
* Operation id: apps/unsuspend-installation
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_unsuspend_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.

* GET - "List your grants"
* Operation id: oauth-authorizations/list-grants
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS oauth_authorizations_list_gran
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a single grant"
* Operation id: oauth-authorizations/get-grant
* Parameter: grant_id, required, path
* Response: 200
*     application/json, #/components/schemas/application-grant
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_get_grant
    IMPORTING
      grant_id TYPE i
    RETURNING VALUE(return_data) TYPE application_grant
    RAISING cx_static_check.

* DELETE - "Delete a grant"
* Operation id: oauth-authorizations/delete-grant
* Parameter: grant_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_delete_gr
    IMPORTING
      grant_id TYPE i
    RAISING cx_static_check.

* DELETE - "Delete an app authorization"
* Operation id: apps/delete-authorization
* Parameter: client_id, required, path
* Response: 204
* Response: 422
* Body ref: #/components/schemas/bodyapps_delete_authorization
  METHODS apps_delete_authorization
    IMPORTING
      client_id TYPE string
      body TYPE bodyapps_delete_authorization
    RAISING cx_static_check.

* DELETE - "Revoke a grant for an application"
* Operation id: apps/revoke-grant-for-application
* Parameter: client_id, required, path
* Parameter: access_token, required, path
* Response: 204
  METHODS apps_revoke_grant_for_applicat
    IMPORTING
      client_id TYPE string
      access_token TYPE string
    RAISING cx_static_check.

* POST - "Check a token"
* Operation id: apps/check-token
* Parameter: client_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyapps_check_token
  METHODS apps_check_token
    IMPORTING
      client_id TYPE string
      body TYPE bodyapps_check_token
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* PATCH - "Reset a token"
* Operation id: apps/reset-token
* Parameter: client_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 422
* Body ref: #/components/schemas/bodyapps_reset_token
  METHODS apps_reset_token
    IMPORTING
      client_id TYPE string
      body TYPE bodyapps_reset_token
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* DELETE - "Delete an app token"
* Operation id: apps/delete-token
* Parameter: client_id, required, path
* Response: 204
* Response: 422
* Body ref: #/components/schemas/bodyapps_delete_token
  METHODS apps_delete_token
    IMPORTING
      client_id TYPE string
      body TYPE bodyapps_delete_token
    RAISING cx_static_check.

* POST - "Create a scoped access token"
* Operation id: apps/scope-token
* Parameter: client_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyapps_scope_token
  METHODS apps_scope_token
    IMPORTING
      client_id TYPE string
      body TYPE bodyapps_scope_token
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* GET - "Check an authorization"
* Operation id: apps/check-authorization
* Parameter: client_id, required, path
* Parameter: access_token, required, path
* Response: 200
*     application/json, 
* Response: 404
  METHODS apps_check_authorization
    IMPORTING
      client_id TYPE string
      access_token TYPE string
    RAISING cx_static_check.

* POST - "Reset an authorization"
* Operation id: apps/reset-authorization
* Parameter: client_id, required, path
* Parameter: access_token, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
  METHODS apps_reset_authorization
    IMPORTING
      client_id TYPE string
      access_token TYPE string
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* DELETE - "Revoke an authorization for an application"
* Operation id: apps/revoke-authorization-for-application
* Parameter: client_id, required, path
* Parameter: access_token, required, path
* Response: 204
  METHODS apps_revoke_authorization_for_
    IMPORTING
      client_id TYPE string
      access_token TYPE string
    RAISING cx_static_check.

* GET - "Get an app"
* Operation id: apps/get-by-slug
* Parameter: app_slug, required, path
* Response: 200
*     application/json, #/components/schemas/integration
* Response: 403
* Response: 404
* Response: 415
  METHODS apps_get_by_slug
    IMPORTING
      app_slug TYPE string
    RETURNING VALUE(return_data) TYPE integration
    RAISING cx_static_check.

* GET - "List your authorizations"
* Operation id: oauth-authorizations/list-authorizations
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS oauth_authorizations_list_auth
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a new authorization"
* Operation id: oauth-authorizations/create-authorization
* Response: 201
*     application/json, #/components/schemas/authorization
* Response: 304
* Response: 401
* Response: 403
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyoauth_authorizations_creat
  METHODS oauth_authorizations_create_au
    IMPORTING
      body TYPE bodyoauth_authorizations_creat
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* PUT - "Get-or-create an authorization for a specific app"
* Operation id: oauth-authorizations/get-or-create-authorization-for-app
* Parameter: client_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 201
*     application/json, #/components/schemas/authorization
* Response: 304
* Response: 401
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyoauth_authorizations_get_o
  METHODS oauth_authorizations_get_or_cr
    IMPORTING
      client_id TYPE string
      body TYPE bodyoauth_authorizations_get_o
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* PUT - "Get-or-create an authorization for a specific app and fingerprint"
* Operation id: oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint
* Parameter: fingerprint, required, path
* Parameter: client_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 201
*     application/json, #/components/schemas/authorization
* Response: 422
* Body ref: #/components/schemas/bodyoauth_authorizations_get01
  METHODS oauth_authorizations_get_or_01
    IMPORTING
      fingerprint TYPE string
      client_id TYPE string
      body TYPE bodyoauth_authorizations_get01
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* GET - "Get a single authorization"
* Operation id: oauth-authorizations/get-authorization
* Parameter: authorization_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_get_autho
    IMPORTING
      authorization_id TYPE i
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* PATCH - "Update an existing authorization"
* Operation id: oauth-authorizations/update-authorization
* Parameter: authorization_id, required, path
* Response: 200
*     application/json, #/components/schemas/authorization
* Response: 422
* Body ref: #/components/schemas/bodyoauth_authorizations_updat
  METHODS oauth_authorizations_update_au
    IMPORTING
      authorization_id TYPE i
      body TYPE bodyoauth_authorizations_updat
    RETURNING VALUE(return_data) TYPE authorization
    RAISING cx_static_check.

* DELETE - "Delete an authorization"
* Operation id: oauth-authorizations/delete-authorization
* Parameter: authorization_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyoauth_authorizations_delet
  METHODS oauth_authorizations_delete_au
    IMPORTING
      authorization_id TYPE i
      body TYPE bodyoauth_authorizations_delet
    RAISING cx_static_check.

* GET - "Get all codes of conduct"
* Operation id: codes-of-conduct/get-all-codes-of-conduct
* Response: 200
*     application/json, array
* Response: 304
* Response: 415
  METHODS codes_of_conduct_get_all_codes
    RAISING cx_static_check.

* GET - "Get a code of conduct"
* Operation id: codes-of-conduct/get-conduct-code
* Parameter: key, required, path
* Response: 200
*     application/json, #/components/schemas/code-of-conduct
* Response: 304
* Response: 404
* Response: 415
  METHODS codes_of_conduct_get_conduct_c
    IMPORTING
      key TYPE string
    RETURNING VALUE(return_data) TYPE code_of_conduct
    RAISING cx_static_check.

* POST - "Create a content attachment"
* Operation id: apps/create-content-attachment
* Parameter: content_reference_id, required, path
* Response: 200
*     application/json, #/components/schemas/content-reference-attachment
* Response: 304
* Response: 403
* Response: 404
* Response: 410
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyapps_create_content_attach
  METHODS apps_create_content_attachment
    IMPORTING
      content_reference_id TYPE i
      body TYPE bodyapps_create_content_attach
    RETURNING VALUE(return_data) TYPE content_reference_attachment
    RAISING cx_static_check.

* GET - "Get emojis"
* Operation id: emojis/get
* Response: 200
*     application/json, object
* Response: 304
  METHODS emojis_get
    RAISING cx_static_check.

* GET - "Get GitHub Actions permissions for an enterprise"
* Operation id: enterprise-admin/get-github-actions-permissions-enterprise
* Parameter: enterprise, required, path
* Response: 200
*     application/json, #/components/schemas/actions-enterprise-permissions
  METHODS enterprise_admin_get_github_ac
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE actions_enterprise_permissions
    RAISING cx_static_check.

* PUT - "Set GitHub Actions permissions for an enterprise"
* Operation id: enterprise-admin/set-github-actions-permissions-enterprise
* Parameter: enterprise, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_set_githu
  METHODS enterprise_admin_set_github_ac
    IMPORTING
      enterprise TYPE string
      body TYPE bodyenterprise_admin_set_githu
    RAISING cx_static_check.

* GET - "List selected organizations enabled for GitHub Actions in an enterprise"
* Operation id: enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS enterprise_admin_list_selected
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Set selected organizations enabled for GitHub Actions in an enterprise"
* Operation id: enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise
* Parameter: enterprise, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_set_selec
  METHODS enterprise_admin_set_selected_
    IMPORTING
      enterprise TYPE string
      body TYPE bodyenterprise_admin_set_selec
    RAISING cx_static_check.

* PUT - "Enable a selected organization for GitHub Actions in an enterprise"
* Operation id: enterprise-admin/enable-selected-organization-github-actions-enterprise
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_enable_select
    IMPORTING
      enterprise TYPE string
      org_id TYPE i
    RAISING cx_static_check.

* DELETE - "Disable a selected organization for GitHub Actions in an enterprise"
* Operation id: enterprise-admin/disable-selected-organization-github-actions-enterprise
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_disable_selec
    IMPORTING
      enterprise TYPE string
      org_id TYPE i
    RAISING cx_static_check.

* GET - "Get allowed actions for an enterprise"
* Operation id: enterprise-admin/get-allowed-actions-enterprise
* Parameter: enterprise, required, path
* Response: 200
*     application/json, #/components/schemas/selected-actions
  METHODS enterprise_admin_get_allowed_a
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE selected_actions
    RAISING cx_static_check.

* PUT - "Set allowed actions for an enterprise"
* Operation id: enterprise-admin/set-allowed-actions-enterprise
* Parameter: enterprise, required, path
* Response: 204
* Body ref: #/components/schemas/selected-actions
  METHODS enterprise_admin_set_allowed_a
    IMPORTING
      enterprise TYPE string
      body TYPE selected_actions
    RAISING cx_static_check.

* GET - "List self-hosted runner groups for an enterprise"
* Operation id: enterprise-admin/list-self-hosted-runner-groups-for-enterprise
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS enterprise_admin_list_self_hos
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a self-hosted runner group for an enterprise"
* Operation id: enterprise-admin/create-self-hosted-runner-group-for-enterprise
* Parameter: enterprise, required, path
* Response: 201
*     application/json, #/components/schemas/runner-groups-enterprise
* Body ref: #/components/schemas/bodyenterprise_admin_create_se
  METHODS enterprise_admin_create_self_h
    IMPORTING
      enterprise TYPE string
      body TYPE bodyenterprise_admin_create_se
    RETURNING VALUE(return_data) TYPE runner_groups_enterprise
    RAISING cx_static_check.

* GET - "Get a self-hosted runner group for an enterprise"
* Operation id: enterprise-admin/get-self-hosted-runner-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner-groups-enterprise
  METHODS enterprise_admin_get_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RETURNING VALUE(return_data) TYPE runner_groups_enterprise
    RAISING cx_static_check.

* PATCH - "Update a self-hosted runner group for an enterprise"
* Operation id: enterprise-admin/update-self-hosted-runner-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner-groups-enterprise
* Body ref: #/components/schemas/bodyenterprise_admin_update_se
  METHODS enterprise_admin_update_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      body TYPE bodyenterprise_admin_update_se
    RETURNING VALUE(return_data) TYPE runner_groups_enterprise
    RAISING cx_static_check.

* DELETE - "Delete a self-hosted runner group from an enterprise"
* Operation id: enterprise-admin/delete-self-hosted-runner-group-from-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_delete_se
  METHODS enterprise_admin_delete_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      body TYPE bodyenterprise_admin_delete_se
    RAISING cx_static_check.

* GET - "List organization access to a self-hosted runner group in an enterprise"
* Operation id: enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS enterprise_admin_list_org_acce
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Set organization access for a self-hosted runner group in an enterprise"
* Operation id: enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_set_org_a
  METHODS enterprise_admin_set_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      body TYPE bodyenterprise_admin_set_org_a
    RAISING cx_static_check.

* PUT - "Add organization access to a self-hosted runner group in an enterprise"
* Operation id: enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_add_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      org_id TYPE i
    RAISING cx_static_check.

* DELETE - "Remove organization access to a self-hosted runner group in an enterprise"
* Operation id: enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_remove_org_ac
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      org_id TYPE i
    RAISING cx_static_check.

* GET - "List self-hosted runners in a group for an enterprise"
* Operation id: enterprise-admin/list-self-hosted-runners-in-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS enterprise_admin_list_self_h01
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Set self-hosted runners in a group for an enterprise"
* Operation id: enterprise-admin/set-self-hosted-runners-in-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_set_self_
  METHODS enterprise_admin_set_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      body TYPE bodyenterprise_admin_set_self_
    RAISING cx_static_check.

* PUT - "Add a self-hosted runner to a group for an enterprise"
* Operation id: enterprise-admin/add-self-hosted-runner-to-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_add_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.

* DELETE - "Remove a self-hosted runner from a group for an enterprise"
* Operation id: enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_remove_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.

* GET - "List self-hosted runners for an enterprise"
* Operation id: enterprise-admin/list-self-hosted-runners-for-enterprise
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS enterprise_admin_list_self_h02
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List runner applications for an enterprise"
* Operation id: enterprise-admin/list-runner-applications-for-enterprise
* Parameter: enterprise, required, path
* Response: 200
*     application/json, array
  METHODS enterprise_admin_list_runner_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.

* POST - "Create a registration token for an enterprise"
* Operation id: enterprise-admin/create-registration-token-for-enterprise
* Parameter: enterprise, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS enterprise_admin_create_regist
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* POST - "Create a remove token for an enterprise"
* Operation id: enterprise-admin/create-remove-token-for-enterprise
* Parameter: enterprise, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS enterprise_admin_create_remove
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* GET - "Get a self-hosted runner for an enterprise"
* Operation id: enterprise-admin/get-self-hosted-runner-for-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner
  METHODS enterprise_admin_get_self_ho01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE i
    RETURNING VALUE(return_data) TYPE runner
    RAISING cx_static_check.

* DELETE - "Delete a self-hosted runner from an enterprise"
* Operation id: enterprise-admin/delete-self-hosted-runner-from-enterprise
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_delete_self01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE i
    RAISING cx_static_check.

* GET - "Get the audit log for an enterprise"
* Operation id: audit-log/get-audit-log
* Parameter: enterprise, required, path
* Parameter: phrase, optional, query
* Parameter: include, optional, query
* Parameter: after, optional, query
* Parameter: before, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
  METHODS audit_log_get_audit_log
    IMPORTING
      enterprise TYPE string
      phrase TYPE string OPTIONAL
      include TYPE string OPTIONAL
      after TYPE string OPTIONAL
      before TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "Get GitHub Actions billing for an enterprise"
* Operation id: billing/get-github-actions-billing-ghe
* Parameter: enterprise, required, path
* Response: 200
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_bil
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE actions_billing_usage
    RAISING cx_static_check.

* GET - "Get GitHub Packages billing for an enterprise"
* Operation id: billing/get-github-packages-billing-ghe
* Parameter: enterprise, required, path
* Response: 200
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_bi
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE packages_billing_usage
    RAISING cx_static_check.

* GET - "Get shared storage billing for an enterprise"
* Operation id: billing/get-shared-storage-billing-ghe
* Parameter: enterprise, required, path
* Response: 200
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_bil
    IMPORTING
      enterprise TYPE string
    RETURNING VALUE(return_data) TYPE combined_billing_usage
    RAISING cx_static_check.

* GET - "List public events"
* Operation id: activity/list-public-events
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 503
  METHODS activity_list_public_events
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get feeds"
* Operation id: activity/get-feeds
* Response: 200
*     application/json, #/components/schemas/feed
  METHODS activity_get_feeds
    RETURNING VALUE(return_data) TYPE feed
    RAISING cx_static_check.

* GET - "List gists for the authenticated user"
* Operation id: gists/list
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
  METHODS gists_list
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a gist"
* Operation id: gists/create
* Response: 201
*     application/json, #/components/schemas/gist-simple
* Response: 304
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodygists_create
  METHODS gists_create
    IMPORTING
      body TYPE bodygists_create
    RETURNING VALUE(return_data) TYPE gist_simple
    RAISING cx_static_check.

* GET - "List public gists"
* Operation id: gists/list-public
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 422
  METHODS gists_list_public
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List starred gists"
* Operation id: gists/list-starred
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS gists_list_starred
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a gist"
* Operation id: gists/get
* Parameter: gist_id, required, path
* Response: 200
*     application/json, #/components/schemas/gist-simple
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_get
    IMPORTING
      gist_id TYPE string
    RETURNING VALUE(return_data) TYPE gist_simple
    RAISING cx_static_check.

* PATCH - "Update a gist"
* Operation id: gists/update
* Parameter: gist_id, required, path
* Response: 200
*     application/json, #/components/schemas/gist-simple
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodygists_update
  METHODS gists_update
    IMPORTING
      gist_id TYPE string
      body TYPE bodygists_update
    RETURNING VALUE(return_data) TYPE gist_simple
    RAISING cx_static_check.

* DELETE - "Delete a gist"
* Operation id: gists/delete
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodygists_delete
  METHODS gists_delete
    IMPORTING
      gist_id TYPE string
      body TYPE bodygists_delete
    RAISING cx_static_check.

* GET - "List gist comments"
* Operation id: gists/list-comments
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_comments
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a gist comment"
* Operation id: gists/create-comment
* Parameter: gist_id, required, path
* Response: 201
*     application/json, #/components/schemas/gist-comment
* Response: 304
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodygists_create_comment
  METHODS gists_create_comment
    IMPORTING
      gist_id TYPE string
      body TYPE bodygists_create_comment
    RETURNING VALUE(return_data) TYPE gist_comment
    RAISING cx_static_check.

* GET - "Get a gist comment"
* Operation id: gists/get-comment
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/gist-comment
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_get_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
    RETURNING VALUE(return_data) TYPE gist_comment
    RAISING cx_static_check.

* PATCH - "Update a gist comment"
* Operation id: gists/update-comment
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/gist-comment
* Response: 404
* Body ref: #/components/schemas/bodygists_update_comment
  METHODS gists_update_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
      body TYPE bodygists_update_comment
    RETURNING VALUE(return_data) TYPE gist_comment
    RAISING cx_static_check.

* DELETE - "Delete a gist comment"
* Operation id: gists/delete-comment
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodygists_delete_comment
  METHODS gists_delete_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
      body TYPE bodygists_delete_comment
    RAISING cx_static_check.

* GET - "List gist commits"
* Operation id: gists/list-commits
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_commits
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List gist forks"
* Operation id: gists/list-forks
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_forks
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Fork a gist"
* Operation id: gists/fork
* Parameter: gist_id, required, path
* Response: 201
*     application/json, #/components/schemas/base-gist
* Response: 304
* Response: 403
* Response: 404
* Response: 422
  METHODS gists_fork
    IMPORTING
      gist_id TYPE string
    RETURNING VALUE(return_data) TYPE base_gist
    RAISING cx_static_check.

* GET - "Check if a gist is starred"
* Operation id: gists/check-is-starred
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
*     application/json, object
  METHODS gists_check_is_starred
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.

* PUT - "Star a gist"
* Operation id: gists/star
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_star
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.

* DELETE - "Unstar a gist"
* Operation id: gists/unstar
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_unstar
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.

* GET - "Get a gist revision"
* Operation id: gists/get-revision
* Parameter: sha, required, path
* Parameter: gist_id, required, path
* Response: 200
*     application/json, #/components/schemas/gist-simple
* Response: 403
* Response: 404
* Response: 422
  METHODS gists_get_revision
    IMPORTING
      sha TYPE string
      gist_id TYPE string
    RETURNING VALUE(return_data) TYPE gist_simple
    RAISING cx_static_check.

* GET - "Get all gitignore templates"
* Operation id: gitignore/get-all-templates
* Response: 200
*     application/json, array
* Response: 304
  METHODS gitignore_get_all_templates
    RAISING cx_static_check.

* GET - "Get a gitignore template"
* Operation id: gitignore/get-template
* Parameter: name, required, path
* Response: 200
*     application/json, #/components/schemas/gitignore-template
* Response: 304
  METHODS gitignore_get_template
    IMPORTING
      name TYPE string
    RETURNING VALUE(return_data) TYPE gitignore_template
    RAISING cx_static_check.

* GET - "List repositories accessible to the app installation"
* Operation id: apps/list-repos-accessible-to-installation
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 401
* Response: 403
  METHODS apps_list_repos_accessible_to_
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* DELETE - "Revoke an installation access token"
* Operation id: apps/revoke-installation-access-token
* Response: 204
  METHODS apps_revoke_installation_acces
    RAISING cx_static_check.

* GET - "List issues assigned to the authenticated user"
* Operation id: issues/list
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: collab, optional, query
* Parameter: orgs, optional, query
* Parameter: owned, optional, query
* Parameter: pulls, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 404
* Response: 422
  METHODS issues_list
    IMPORTING
      filter TYPE string DEFAULT 'assigned'
      state TYPE string DEFAULT 'open'
      sort TYPE string DEFAULT 'created'
      collab TYPE abap_bool OPTIONAL
      orgs TYPE abap_bool OPTIONAL
      owned TYPE abap_bool OPTIONAL
      pulls TYPE abap_bool OPTIONAL
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get all commonly used licenses"
* Operation id: licenses/get-all-commonly-used
* Parameter: featured, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
* Response: 304
  METHODS licenses_get_all_commonly_used
    IMPORTING
      featured TYPE abap_bool OPTIONAL
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "Get a license"
* Operation id: licenses/get
* Parameter: license, required, path
* Response: 200
*     application/json, #/components/schemas/license
* Response: 304
* Response: 403
* Response: 404
  METHODS licenses_get
    IMPORTING
      license TYPE string
    RETURNING VALUE(return_data) TYPE license
    RAISING cx_static_check.

* POST - "Render a Markdown document"
* Operation id: markdown/render
* Response: 200
*     text/html, string
* Response: 304
* Body ref: #/components/schemas/bodymarkdown_render
  METHODS markdown_render
    IMPORTING
      body TYPE bodymarkdown_render
    RAISING cx_static_check.

* POST - "Render a Markdown document in raw mode"
* Operation id: markdown/render-raw
* Response: 200
*     text/html, string
* Response: 304
  METHODS markdown_render_raw
    RAISING cx_static_check.

* GET - "Get a subscription plan for an account"
* Operation id: apps/get-subscription-plan-for-account
* Parameter: account_id, required, path
* Response: 200
*     application/json, #/components/schemas/marketplace-purchase
* Response: 401
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS apps_get_subscription_plan_for
    IMPORTING
      account_id TYPE i
    RETURNING VALUE(return_data) TYPE marketplace_purchase
    RAISING cx_static_check.

* GET - "List plans"
* Operation id: apps/list-plans
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS apps_list_plans
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List accounts for a plan"
* Operation id: apps/list-accounts-for-plan
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
* Response: 422
  METHODS apps_list_accounts_for_plan
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE i
      sort TYPE string DEFAULT 'created'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a subscription plan for an account (stubbed)"
* Operation id: apps/get-subscription-plan-for-account-stubbed
* Parameter: account_id, required, path
* Response: 200
*     application/json, #/components/schemas/marketplace-purchase
* Response: 401
* Response: 404
  METHODS apps_get_subscription_plan_f01
    IMPORTING
      account_id TYPE i
    RETURNING VALUE(return_data) TYPE marketplace_purchase
    RAISING cx_static_check.

* GET - "List plans (stubbed)"
* Operation id: apps/list-plans-stubbed
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS apps_list_plans_stubbed
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List accounts for a plan (stubbed)"
* Operation id: apps/list-accounts-for-plan-stubbed
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS apps_list_accounts_for_plan_st
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE i
      sort TYPE string DEFAULT 'created'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get GitHub meta information"
* Operation id: meta/get
* Response: 200
*     application/json, #/components/schemas/api-overview
* Response: 304
  METHODS meta_get
    RETURNING VALUE(return_data) TYPE api_overview
    RAISING cx_static_check.

* GET - "List public events for a network of repositories"
* Operation id: activity/list-public-events-for-repo-network
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 301
* Response: 304
* Response: 403
* Response: 404
  METHODS activity_list_public_events_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List notifications for the authenticated user"
* Operation id: activity/list-notifications-for-authenticated-user
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS activity_list_notifications_fo
    IMPORTING
      all TYPE abap_bool DEFAULT abap_false
      participating TYPE abap_bool DEFAULT abap_false
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Mark notifications as read"
* Operation id: activity/mark-notifications-as-read
* Response: 202
*     application/json, object
* Response: 205
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyactivity_mark_notification
  METHODS activity_mark_notifications_as
    IMPORTING
      body TYPE bodyactivity_mark_notification
    RAISING cx_static_check.

* GET - "Get a thread"
* Operation id: activity/get-thread
* Parameter: thread_id, required, path
* Response: 200
*     application/json, #/components/schemas/thread
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_get_thread
    IMPORTING
      thread_id TYPE i
    RETURNING VALUE(return_data) TYPE thread
    RAISING cx_static_check.

* PATCH - "Mark a thread as read"
* Operation id: activity/mark-thread-as-read
* Parameter: thread_id, required, path
* Response: 205
* Response: 304
* Response: 403
  METHODS activity_mark_thread_as_read
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.

* GET - "Get a thread subscription for the authenticated user"
* Operation id: activity/get-thread-subscription-for-authenticated-user
* Parameter: thread_id, required, path
* Response: 200
*     application/json, #/components/schemas/thread-subscription
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_get_thread_subscripti
    IMPORTING
      thread_id TYPE i
    RETURNING VALUE(return_data) TYPE thread_subscription
    RAISING cx_static_check.

* PUT - "Set a thread subscription"
* Operation id: activity/set-thread-subscription
* Parameter: thread_id, required, path
* Response: 200
*     application/json, #/components/schemas/thread-subscription
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyactivity_set_thread_subscr
  METHODS activity_set_thread_subscripti
    IMPORTING
      thread_id TYPE i
      body TYPE bodyactivity_set_thread_subscr
    RETURNING VALUE(return_data) TYPE thread_subscription
    RAISING cx_static_check.

* DELETE - "Delete a thread subscription"
* Operation id: activity/delete-thread-subscription
* Parameter: thread_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyactivity_delete_thread_sub
  METHODS activity_delete_thread_subscri
    IMPORTING
      thread_id TYPE i
      body TYPE bodyactivity_delete_thread_sub
    RAISING cx_static_check.

* GET - "Get Octocat"
* Operation id: meta/get-octocat
* Parameter: s, optional, query
* Response: 200
*     application/octocat-stream, string
  METHODS meta_get_octocat
    IMPORTING
      s TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "List organizations"
* Operation id: orgs/list
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
* Response: 304
  METHODS orgs_list
    IMPORTING
      since TYPE i OPTIONAL
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "Get an organization"
* Operation id: orgs/get
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/organization-full
* Response: 404
  METHODS orgs_get
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE organization_full
    RAISING cx_static_check.

* PATCH - "Update an organization"
* Operation id: orgs/update
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/organization-full
* Response: 409
* Response: 415
* Response: 422
*     application/json, 
* Body ref: #/components/schemas/bodyorgs_update
  METHODS orgs_update
    IMPORTING
      org TYPE string
      body TYPE bodyorgs_update
    RETURNING VALUE(return_data) TYPE organization_full
    RAISING cx_static_check.

* GET - "Get GitHub Actions permissions for an organization"
* Operation id: actions/get-github-actions-permissions-organization
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/actions-organization-permissions
  METHODS actions_get_github_actions_per
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE actions_organization_permissio
    RAISING cx_static_check.

* PUT - "Set GitHub Actions permissions for an organization"
* Operation id: actions/set-github-actions-permissions-organization
* Parameter: org, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_github_actions
  METHODS actions_set_github_actions_per
    IMPORTING
      org TYPE string
      body TYPE bodyactions_set_github_actions
    RAISING cx_static_check.

* GET - "List selected repositories enabled for GitHub Actions in an organization"
* Operation id: actions/list-selected-repositories-enabled-github-actions-organization
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_selected_reposito
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Set selected repositories enabled for GitHub Actions in an organization"
* Operation id: actions/set-selected-repositories-enabled-github-actions-organization
* Parameter: org, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_selected_repos
  METHODS actions_set_selected_repositor
    IMPORTING
      org TYPE string
      body TYPE bodyactions_set_selected_repos
    RAISING cx_static_check.

* PUT - "Enable a selected repository for GitHub Actions in an organization"
* Operation id: actions/enable-selected-repository-github-actions-organization
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_enable_selected_reposi
    IMPORTING
      org TYPE string
      repository_id TYPE i
    RAISING cx_static_check.

* DELETE - "Disable a selected repository for GitHub Actions in an organization"
* Operation id: actions/disable-selected-repository-github-actions-organization
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_disable_selected_repos
    IMPORTING
      org TYPE string
      repository_id TYPE i
    RAISING cx_static_check.

* GET - "Get allowed actions for an organization"
* Operation id: actions/get-allowed-actions-organization
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/selected-actions
  METHODS actions_get_allowed_actions_or
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE selected_actions
    RAISING cx_static_check.

* PUT - "Set allowed actions for an organization"
* Operation id: actions/set-allowed-actions-organization
* Parameter: org, required, path
* Response: 204
* Body ref: #/components/schemas/selected-actions
  METHODS actions_set_allowed_actions_or
    IMPORTING
      org TYPE string
      body TYPE selected_actions
    RAISING cx_static_check.

* GET - "List self-hosted runner groups for an organization"
* Operation id: actions/list-self-hosted-runner-groups-for-org
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_self_hosted_runne
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a self-hosted runner group for an organization"
* Operation id: actions/create-self-hosted-runner-group-for-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/runner-groups-org
* Body ref: #/components/schemas/bodyactions_create_self_hosted
  METHODS actions_create_self_hosted_run
    IMPORTING
      org TYPE string
      body TYPE bodyactions_create_self_hosted
    RETURNING VALUE(return_data) TYPE runner_groups_org
    RAISING cx_static_check.

* GET - "Get a self-hosted runner group for an organization"
* Operation id: actions/get-self-hosted-runner-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner-groups-org
  METHODS actions_get_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RETURNING VALUE(return_data) TYPE runner_groups_org
    RAISING cx_static_check.

* PATCH - "Update a self-hosted runner group for an organization"
* Operation id: actions/update-self-hosted-runner-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner-groups-org
* Body ref: #/components/schemas/bodyactions_update_self_hosted
  METHODS actions_update_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      body TYPE bodyactions_update_self_hosted
    RETURNING VALUE(return_data) TYPE runner_groups_org
    RAISING cx_static_check.

* DELETE - "Delete a self-hosted runner group from an organization"
* Operation id: actions/delete-self-hosted-runner-group-from-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_delete_self_hosted
  METHODS actions_delete_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      body TYPE bodyactions_delete_self_hosted
    RAISING cx_static_check.

* GET - "List repository access to a self-hosted runner group in an organization"
* Operation id: actions/list-repo-access-to-self-hosted-runner-group-in-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json, object
  METHODS actions_list_repo_access_to_se
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.

* PUT - "Set repository access for a self-hosted runner group in an organization"
* Operation id: actions/set-repo-access-to-self-hosted-runner-group-in-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_repo_access_to
  METHODS actions_set_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      body TYPE bodyactions_set_repo_access_to
    RAISING cx_static_check.

* PUT - "Add repository access to a self-hosted runner group in an organization"
* Operation id: actions/add-repo-access-to-self-hosted-runner-group-in-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_add_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.

* DELETE - "Remove repository access to a self-hosted runner group in an organization"
* Operation id: actions/remove-repo-access-to-self-hosted-runner-group-in-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_remove_repo_access_to_
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.

* GET - "List self-hosted runners in a group for an organization"
* Operation id: actions/list-self-hosted-runners-in-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_self_hosted_run01
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Set self-hosted runners in a group for an organization"
* Operation id: actions/set-self-hosted-runners-in-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_self_hosted_ru
  METHODS actions_set_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      body TYPE bodyactions_set_self_hosted_ru
    RAISING cx_static_check.

* PUT - "Add a self-hosted runner to a group for an organization"
* Operation id: actions/add-self-hosted-runner-to-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_add_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.

* DELETE - "Remove a self-hosted runner from a group for an organization"
* Operation id: actions/remove-self-hosted-runner-from-group-for-org
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_remove_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.

* GET - "List self-hosted runners for an organization"
* Operation id: actions/list-self-hosted-runners-for-org
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_self_hosted_run02
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List runner applications for an organization"
* Operation id: actions/list-runner-applications-for-org
* Parameter: org, required, path
* Response: 200
*     application/json, array
  METHODS actions_list_runner_applicatio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.

* POST - "Create a registration token for an organization"
* Operation id: actions/create-registration-token-for-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_registration_to
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* POST - "Create a remove token for an organization"
* Operation id: actions/create-remove-token-for-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_remove_token_fo
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* GET - "Get a self-hosted runner for an organization"
* Operation id: actions/get-self-hosted-runner-for-org
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner
  METHODS actions_get_self_hosted_runn01
    IMPORTING
      org TYPE string
      runner_id TYPE i
    RETURNING VALUE(return_data) TYPE runner
    RAISING cx_static_check.

* DELETE - "Delete a self-hosted runner from an organization"
* Operation id: actions/delete-self-hosted-runner-from-org
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_delete_self_hosted_r01
    IMPORTING
      org TYPE string
      runner_id TYPE i
    RAISING cx_static_check.

* GET - "List organization secrets"
* Operation id: actions/list-org-secrets
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_org_secrets
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get an organization public key"
* Operation id: actions/get-org-public-key
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/actions-public-key
  METHODS actions_get_org_public_key
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE actions_public_key
    RAISING cx_static_check.

* GET - "Get an organization secret"
* Operation id: actions/get-org-secret
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json, #/components/schemas/organization-actions-secret
  METHODS actions_get_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RETURNING VALUE(return_data) TYPE organization_actions_secret
    RAISING cx_static_check.

* PUT - "Create or update an organization secret"
* Operation id: actions/create-or-update-org-secret
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 201
* Response: 204
* Body ref: #/components/schemas/bodyactions_create_or_update_o
  METHODS actions_create_or_update_org_s
    IMPORTING
      org TYPE string
      secret_name TYPE string
      body TYPE bodyactions_create_or_update_o
    RAISING cx_static_check.

* DELETE - "Delete an organization secret"
* Operation id: actions/delete-org-secret
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_delete_org_secret
  METHODS actions_delete_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
      body TYPE bodyactions_delete_org_secret
    RAISING cx_static_check.

* GET - "List selected repositories for an organization secret"
* Operation id: actions/list-selected-repos-for-org-secret
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json, object
  METHODS actions_list_selected_repos_fo
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.

* PUT - "Set selected repositories for an organization secret"
* Operation id: actions/set-selected-repos-for-org-secret
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_selected_rep01
  METHODS actions_set_selected_repos_for
    IMPORTING
      org TYPE string
      secret_name TYPE string
      body TYPE bodyactions_set_selected_rep01
    RAISING cx_static_check.

* PUT - "Add selected repository to an organization secret"
* Operation id: actions/add-selected-repo-to-org-secret
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Response: 409
  METHODS actions_add_selected_repo_to_o
    IMPORTING
      repository_id TYPE i
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.

* DELETE - "Remove selected repository from an organization secret"
* Operation id: actions/remove-selected-repo-from-org-secret
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Response: 409
  METHODS actions_remove_selected_repo_f
    IMPORTING
      repository_id TYPE i
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.

* GET - "Get the audit log for an organization"
* Operation id: orgs/get-audit-log
* Parameter: org, required, path
* Parameter: phrase, optional, query
* Parameter: include, optional, query
* Parameter: after, optional, query
* Parameter: before, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
  METHODS orgs_get_audit_log
    IMPORTING
      org TYPE string
      phrase TYPE string OPTIONAL
      include TYPE string OPTIONAL
      after TYPE string OPTIONAL
      before TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "List users blocked by an organization"
* Operation id: orgs/list-blocked-users
* Parameter: org, required, path
* Response: 200
*     application/json, array
* Response: 415
  METHODS orgs_list_blocked_users
    IMPORTING
      org TYPE string
    RAISING cx_static_check.

* GET - "Check if a user is blocked by an organization"
* Operation id: orgs/check-blocked-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS orgs_check_blocked_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* PUT - "Block a user from an organization"
* Operation id: orgs/block-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 422
  METHODS orgs_block_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Unblock a user from an organization"
* Operation id: orgs/unblock-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
  METHODS orgs_unblock_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* GET - "List SAML SSO authorizations for an organization"
* Operation id: orgs/list-saml-sso-authorizations
* Parameter: org, required, path
* Response: 200
*     application/json, array
  METHODS orgs_list_saml_sso_authorizati
    IMPORTING
      org TYPE string
    RAISING cx_static_check.

* DELETE - "Remove a SAML SSO authorization for an organization"
* Operation id: orgs/remove-saml-sso-authorization
* Parameter: credential_id, required, path
* Parameter: org, required, path
* Response: 204
* Response: 404
  METHODS orgs_remove_saml_sso_authoriza
    IMPORTING
      credential_id TYPE i
      org TYPE string
    RAISING cx_static_check.

* GET - "List public organization events"
* Operation id: activity/list-public-org-events
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_public_org_event
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List failed organization invitations"
* Operation id: orgs/list-failed-invitations
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS orgs_list_failed_invitations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organization webhooks"
* Operation id: orgs/list-webhooks
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS orgs_list_webhooks
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an organization webhook"
* Operation id: orgs/create-webhook
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/org-hook
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyorgs_create_webhook
  METHODS orgs_create_webhook
    IMPORTING
      org TYPE string
      body TYPE bodyorgs_create_webhook
    RETURNING VALUE(return_data) TYPE org_hook
    RAISING cx_static_check.

* GET - "Get an organization webhook"
* Operation id: orgs/get-webhook
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/org-hook
* Response: 404
  METHODS orgs_get_webhook
    IMPORTING
      org TYPE string
      hook_id TYPE i
    RETURNING VALUE(return_data) TYPE org_hook
    RAISING cx_static_check.

* PATCH - "Update an organization webhook"
* Operation id: orgs/update-webhook
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/org-hook
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyorgs_update_webhook
  METHODS orgs_update_webhook
    IMPORTING
      org TYPE string
      hook_id TYPE i
      body TYPE bodyorgs_update_webhook
    RETURNING VALUE(return_data) TYPE org_hook
    RAISING cx_static_check.

* DELETE - "Delete an organization webhook"
* Operation id: orgs/delete-webhook
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodyorgs_delete_webhook
  METHODS orgs_delete_webhook
    IMPORTING
      org TYPE string
      hook_id TYPE i
      body TYPE bodyorgs_delete_webhook
    RAISING cx_static_check.

* GET - "Get a webhook configuration for an organization"
* Operation id: orgs/get-webhook-config-for-org
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/webhook-config
  METHODS orgs_get_webhook_config_for_or
    IMPORTING
      org TYPE string
      hook_id TYPE i
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* PATCH - "Update a webhook configuration for an organization"
* Operation id: orgs/update-webhook-config-for-org
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/webhook-config
* Body ref: #/components/schemas/bodyorgs_update_webhook_config
  METHODS orgs_update_webhook_config_for
    IMPORTING
      org TYPE string
      hook_id TYPE i
      body TYPE bodyorgs_update_webhook_config
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* POST - "Ping an organization webhook"
* Operation id: orgs/ping-webhook
* Parameter: org, required, path
* Parameter: hook_id, required, path
* Response: 204
* Response: 404
  METHODS orgs_ping_webhook
    IMPORTING
      org TYPE string
      hook_id TYPE i
    RAISING cx_static_check.

* GET - "Get an organization installation for the authenticated app"
* Operation id: apps/get-org-installation
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/installation
  METHODS apps_get_org_installation
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE installation
    RAISING cx_static_check.

* GET - "List app installations for an organization"
* Operation id: orgs/list-app-installations
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS orgs_list_app_installations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get interaction restrictions for an organization"
* Operation id: interactions/get-restrictions-for-org
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restrictions_
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* PUT - "Set interaction restrictions for an organization"
* Operation id: interactions/set-restrictions-for-org
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
* Response: 422
* Body ref: #/components/schemas/interaction-limit
  METHODS interactions_set_restrictions_
    IMPORTING
      org TYPE string
      body TYPE interaction_limit
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* DELETE - "Remove interaction restrictions for an organization"
* Operation id: interactions/remove-restrictions-for-org
* Parameter: org, required, path
* Response: 204
  METHODS interactions_remove_restrictio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.

* GET - "List pending organization invitations"
* Operation id: orgs/list-pending-invitations
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS orgs_list_pending_invitations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an organization invitation"
* Operation id: orgs/create-invitation
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/organization-invitation
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyorgs_create_invitation
  METHODS orgs_create_invitation
    IMPORTING
      org TYPE string
      body TYPE bodyorgs_create_invitation
    RETURNING VALUE(return_data) TYPE organization_invitation
    RAISING cx_static_check.

* DELETE - "Cancel an organization invitation"
* Operation id: orgs/cancel-invitation
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Response: 204
* Response: 404
* Response: 422
  METHODS orgs_cancel_invitation
    IMPORTING
      org TYPE string
      invitation_id TYPE i
    RAISING cx_static_check.

* GET - "List organization invitation teams"
* Operation id: orgs/list-invitation-teams
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS orgs_list_invitation_teams
    IMPORTING
      org TYPE string
      invitation_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organization issues assigned to the authenticated user"
* Operation id: issues/list-for-org
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: org, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS issues_list_for_org
    IMPORTING
      filter TYPE string DEFAULT 'assigned'
      state TYPE string DEFAULT 'open'
      sort TYPE string DEFAULT 'created'
      org TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organization members"
* Operation id: orgs/list-members
* Parameter: filter, optional, query
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 302
* Response: 422
  METHODS orgs_list_members
    IMPORTING
      filter TYPE string DEFAULT 'all'
      role TYPE string DEFAULT 'all'
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check organization membership for a user"
* Operation id: orgs/check-membership-for-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 302
* Response: 404
  METHODS orgs_check_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Remove an organization member"
* Operation id: orgs/remove-member
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS orgs_remove_member
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* GET - "Get organization membership for a user"
* Operation id: orgs/get-membership-for-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/org-membership
* Response: 403
* Response: 404
  METHODS orgs_get_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RETURNING VALUE(return_data) TYPE org_membership
    RAISING cx_static_check.

* PUT - "Set organization membership for a user"
* Operation id: orgs/set-membership-for-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/org-membership
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyorgs_set_membership_for_us
  METHODS orgs_set_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
      body TYPE bodyorgs_set_membership_for_us
    RETURNING VALUE(return_data) TYPE org_membership
    RAISING cx_static_check.

* DELETE - "Remove organization membership for a user"
* Operation id: orgs/remove-membership-for-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodyorgs_remove_membership_for
  METHODS orgs_remove_membership_for_use
    IMPORTING
      org TYPE string
      username TYPE string
      body TYPE bodyorgs_remove_membership_for
    RAISING cx_static_check.

* GET - "List organization migrations"
* Operation id: migrations/list-for-org
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS migrations_list_for_org
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Start an organization migration"
* Operation id: migrations/start-for-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/migration
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodymigrations_start_for_org
  METHODS migrations_start_for_org
    IMPORTING
      org TYPE string
      body TYPE bodymigrations_start_for_org
    RETURNING VALUE(return_data) TYPE migration
    RAISING cx_static_check.

* GET - "Get an organization migration status"
* Operation id: migrations/get-status-for-org
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 200
*     application/json, #/components/schemas/migration
* Response: 404
  METHODS migrations_get_status_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RETURNING VALUE(return_data) TYPE migration
    RAISING cx_static_check.

* GET - "Download an organization migration archive"
* Operation id: migrations/download-archive-for-org
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 302
* Response: 404
  METHODS migrations_download_archive_fo
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RAISING cx_static_check.

* DELETE - "Delete an organization migration archive"
* Operation id: migrations/delete-archive-for-org
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 204
* Response: 404
  METHODS migrations_delete_archive_for_
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RAISING cx_static_check.

* DELETE - "Unlock an organization repository"
* Operation id: migrations/unlock-repo-for-org
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204
* Response: 404
  METHODS migrations_unlock_repo_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
      repo_name TYPE string
    RAISING cx_static_check.

* GET - "List repositories in an organization migration"
* Operation id: migrations/list-repos-for-org
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS migrations_list_repos_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List outside collaborators for an organization"
* Operation id: orgs/list-outside-collaborators
* Parameter: filter, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS orgs_list_outside_collaborator
    IMPORTING
      filter TYPE string DEFAULT 'all'
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Convert an organization member to outside collaborator"
* Operation id: orgs/convert-member-to-outside-collaborator
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 202
* Response: 204
* Response: 403
*     application/json, object
* Response: 404
  METHODS orgs_convert_member_to_outside
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Remove outside collaborator from an organization"
* Operation id: orgs/remove-outside-collaborator
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 422
*     application/json, object
  METHODS orgs_remove_outside_collaborat
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* GET - "List organization projects"
* Operation id: projects/list-for-org
* Parameter: state, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 422
  METHODS projects_list_for_org
    IMPORTING
      state TYPE string DEFAULT 'open'
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an organization project"
* Operation id: projects/create-for-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/project
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyprojects_create_for_org
  METHODS projects_create_for_org
    IMPORTING
      org TYPE string
      body TYPE bodyprojects_create_for_org
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* GET - "List public organization members"
* Operation id: orgs/list-public-members
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS orgs_list_public_members
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check public organization membership for a user"
* Operation id: orgs/check-public-membership-for-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS orgs_check_public_membership_f
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* PUT - "Set public organization membership for the authenticated user"
* Operation id: orgs/set-public-membership-for-authenticated-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS orgs_set_public_membership_for
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Remove public organization membership for the authenticated user"
* Operation id: orgs/remove-public-membership-for-authenticated-user
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
  METHODS orgs_remove_public_membership_
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.

* GET - "List organization repositories"
* Operation id: repos/list-for-org
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_for_org
    IMPORTING
      type TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created'
      direction TYPE string OPTIONAL
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an organization repository"
* Operation id: repos/create-in-org
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/repository
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_in_org
  METHODS repos_create_in_org
    IMPORTING
      org TYPE string
      body TYPE bodyrepos_create_in_org
    RETURNING VALUE(return_data) TYPE repository
    RAISING cx_static_check.

* GET - "Get GitHub Actions billing for an organization"
* Operation id: billing/get-github-actions-billing-org
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_b01
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE actions_billing_usage
    RAISING cx_static_check.

* GET - "Get GitHub Packages billing for an organization"
* Operation id: billing/get-github-packages-billing-org
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_01
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE packages_billing_usage
    RAISING cx_static_check.

* GET - "Get shared storage billing for an organization"
* Operation id: billing/get-shared-storage-billing-org
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_b01
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE combined_billing_usage
    RAISING cx_static_check.

* GET - "List IdP groups for an organization"
* Operation id: teams/list-idp-groups-for-org
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, #/components/schemas/group-mapping
  METHODS teams_list_idp_groups_for_org
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RETURNING VALUE(return_data) TYPE group_mapping
    RAISING cx_static_check.

* GET - "List teams"
* Operation id: teams/list
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 403
  METHODS teams_list
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a team"
* Operation id: teams/create
* Parameter: org, required, path
* Response: 201
*     application/json, #/components/schemas/team-full
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyteams_create
  METHODS teams_create
    IMPORTING
      org TYPE string
      body TYPE bodyteams_create
    RETURNING VALUE(return_data) TYPE team_full
    RAISING cx_static_check.

* GET - "Get a team by name"
* Operation id: teams/get-by-name
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json, #/components/schemas/team-full
* Response: 404
  METHODS teams_get_by_name
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RETURNING VALUE(return_data) TYPE team_full
    RAISING cx_static_check.

* PATCH - "Update a team"
* Operation id: teams/update-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json, #/components/schemas/team-full
* Body ref: #/components/schemas/bodyteams_update_in_org
  METHODS teams_update_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      body TYPE bodyteams_update_in_org
    RETURNING VALUE(return_data) TYPE team_full
    RAISING cx_static_check.

* DELETE - "Delete a team"
* Operation id: teams/delete-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_delete_in_org
  METHODS teams_delete_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      body TYPE bodyteams_delete_in_org
    RAISING cx_static_check.

* GET - "List discussions"
* Operation id: teams/list-discussions-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_discussions_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a discussion"
* Operation id: teams/create-discussion-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json, #/components/schemas/team-discussion
* Body ref: #/components/schemas/bodyteams_create_discussion_in
  METHODS teams_create_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      body TYPE bodyteams_create_discussion_in
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* GET - "Get a discussion"
* Operation id: teams/get-discussion-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion
  METHODS teams_get_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* PATCH - "Update a discussion"
* Operation id: teams/update-discussion-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion
* Body ref: #/components/schemas/bodyteams_update_discussion_in
  METHODS teams_update_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      body TYPE bodyteams_update_discussion_in
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* DELETE - "Delete a discussion"
* Operation id: teams/delete-discussion-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_delete_discussion_in
  METHODS teams_delete_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      body TYPE bodyteams_delete_discussion_in
    RAISING cx_static_check.

* GET - "List discussion comments"
* Operation id: teams/list-discussion-comments-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_discussion_comments
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a discussion comment"
* Operation id: teams/create-discussion-comment-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Response: 201
*     application/json, #/components/schemas/team-discussion-comment
* Body ref: #/components/schemas/bodyteams_create_discussion_co
  METHODS teams_create_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      body TYPE bodyteams_create_discussion_co
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* GET - "Get a discussion comment"
* Operation id: teams/get-discussion-comment-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_get_discussion_comment_i
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* PATCH - "Update a discussion comment"
* Operation id: teams/update-discussion-comment-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion-comment
* Body ref: #/components/schemas/bodyteams_update_discussion_co
  METHODS teams_update_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyteams_update_discussion_co
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* DELETE - "Delete a discussion comment"
* Operation id: teams/delete-discussion-comment-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_delete_discussion_co
  METHODS teams_delete_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyteams_delete_discussion_co
    RAISING cx_static_check.

* GET - "List reactions for a team discussion comment"
* Operation id: reactions/list-for-team-discussion-comment-in-org
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS reactions_list_for_team_discus
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a team discussion comment"
* Operation id: reactions/create-for-team-discussion-comment-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 201
*     application/json, #/components/schemas/reaction
* Body ref: #/components/schemas/bodyreactions_create_for_team_
  METHODS reactions_create_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyreactions_create_for_team_
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete team discussion comment reaction"
* Operation id: reactions/delete-for-team-discussion-comment
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      comment_number TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "List reactions for a team discussion"
* Operation id: reactions/list-for-team-discussion-in-org
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS reactions_list_for_team_disc01
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a team discussion"
* Operation id: reactions/create-for-team-discussion-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Response: 201
*     application/json, #/components/schemas/reaction
* Body ref: #/components/schemas/bodyreactions_create_for_tea01
  METHODS reactions_create_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      body TYPE bodyreactions_create_for_tea01
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete team discussion reaction"
* Operation id: reactions/delete-for-team-discussion
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: discussion_number, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
      discussion_number TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "List pending team invitations"
* Operation id: teams/list-pending-invitations-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_pending_invitations
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List team members"
* Operation id: teams/list-members-in-org
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_members_in_org
    IMPORTING
      role TYPE string DEFAULT 'all'
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get team membership for a user"
* Operation id: teams/get-membership-for-user-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/team-membership
* Response: 404
  METHODS teams_get_membership_for_user_
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RETURNING VALUE(return_data) TYPE team_membership
    RAISING cx_static_check.

* PUT - "Add or update team membership for a user"
* Operation id: teams/add-or-update-membership-for-user-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/team-membership
* Response: 403
* Response: 422
*     application/json, object
* Body ref: #/components/schemas/bodyteams_add_or_update_member
  METHODS teams_add_or_update_membership
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
      body TYPE bodyteams_add_or_update_member
    RETURNING VALUE(return_data) TYPE team_membership
    RAISING cx_static_check.

* DELETE - "Remove team membership for a user"
* Operation id: teams/remove-membership-for-user-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
* Body ref: #/components/schemas/bodyteams_remove_membership_fo
  METHODS teams_remove_membership_for_us
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
      body TYPE bodyteams_remove_membership_fo
    RAISING cx_static_check.

* GET - "List team projects"
* Operation id: teams/list-projects-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_projects_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check team permissions for a project"
* Operation id: teams/check-permissions-for-project-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: project_id, required, path
* Response: 200
*     application/json, #/components/schemas/team-project
* Response: 404
  METHODS teams_check_permissions_for_pr
    IMPORTING
      org TYPE string
      team_slug TYPE string
      project_id TYPE i
    RETURNING VALUE(return_data) TYPE team_project
    RAISING cx_static_check.

* PUT - "Add or update team project permissions"
* Operation id: teams/add-or-update-project-permissions-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: project_id, required, path
* Response: 204
* Response: 403
*     application/json, object
* Body ref: #/components/schemas/bodyteams_add_or_update_projec
  METHODS teams_add_or_update_project_pe
    IMPORTING
      org TYPE string
      team_slug TYPE string
      project_id TYPE i
      body TYPE bodyteams_add_or_update_projec
    RAISING cx_static_check.

* DELETE - "Remove a project from a team"
* Operation id: teams/remove-project-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: project_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_remove_project_in_or
  METHODS teams_remove_project_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      project_id TYPE i
      body TYPE bodyteams_remove_project_in_or
    RAISING cx_static_check.

* GET - "List team repositories"
* Operation id: teams/list-repos-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_repos_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check team permissions for a repository"
* Operation id: teams/check-permissions-for-repo-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.repository+json, #/components/schemas/team-repository
* Response: 204
* Response: 404
  METHODS teams_check_permissions_for_re
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Add or update team repository permissions"
* Operation id: teams/add-or-update-repo-permissions-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_add_or_update_repo_p
  METHODS teams_add_or_update_repo_permi
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyteams_add_or_update_repo_p
    RAISING cx_static_check.

* DELETE - "Remove a repository from a team"
* Operation id: teams/remove-repo-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_remove_repo_in_org
  METHODS teams_remove_repo_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyteams_remove_repo_in_org
    RAISING cx_static_check.

* GET - "List IdP groups for a team"
* Operation id: teams/list-idp-groups-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json, #/components/schemas/group-mapping
  METHODS teams_list_idp_groups_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RETURNING VALUE(return_data) TYPE group_mapping
    RAISING cx_static_check.

* PATCH - "Create or update IdP group connections"
* Operation id: teams/create-or-update-idp-group-connections-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json, #/components/schemas/group-mapping
* Body ref: #/components/schemas/bodyteams_create_or_update_idp
  METHODS teams_create_or_update_idp_gro
    IMPORTING
      org TYPE string
      team_slug TYPE string
      body TYPE bodyteams_create_or_update_idp
    RETURNING VALUE(return_data) TYPE group_mapping
    RAISING cx_static_check.

* GET - "List child teams"
* Operation id: teams/list-child-in-org
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_child_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a project card"
* Operation id: projects/get-card
* Parameter: card_id, required, path
* Response: 200
*     application/json, #/components/schemas/project-card
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS projects_get_card
    IMPORTING
      card_id TYPE i
    RETURNING VALUE(return_data) TYPE project_card
    RAISING cx_static_check.

* PATCH - "Update an existing project card"
* Operation id: projects/update-card
* Parameter: card_id, required, path
* Response: 200
*     application/json, #/components/schemas/project-card
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyprojects_update_card
  METHODS projects_update_card
    IMPORTING
      card_id TYPE i
      body TYPE bodyprojects_update_card
    RETURNING VALUE(return_data) TYPE project_card
    RAISING cx_static_check.

* DELETE - "Delete a project card"
* Operation id: projects/delete-card
* Parameter: card_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
*     application/json, object
* Response: 404
* Body ref: #/components/schemas/bodyprojects_delete_card
  METHODS projects_delete_card
    IMPORTING
      card_id TYPE i
      body TYPE bodyprojects_delete_card
    RAISING cx_static_check.

* POST - "Move a project card"
* Operation id: projects/move-card
* Parameter: card_id, required, path
* Response: 201
*     application/json, object
* Response: 304
* Response: 401
* Response: 403
*     application/json, object
* Response: 422
* Response: 503
*     application/json, object
* Body ref: #/components/schemas/bodyprojects_move_card
  METHODS projects_move_card
    IMPORTING
      card_id TYPE i
      body TYPE bodyprojects_move_card
    RAISING cx_static_check.

* GET - "Get a project column"
* Operation id: projects/get-column
* Parameter: column_id, required, path
* Response: 200
*     application/json, #/components/schemas/project-column
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS projects_get_column
    IMPORTING
      column_id TYPE i
    RETURNING VALUE(return_data) TYPE project_column
    RAISING cx_static_check.

* PATCH - "Update an existing project column"
* Operation id: projects/update-column
* Parameter: column_id, required, path
* Response: 200
*     application/json, #/components/schemas/project-column
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyprojects_update_column
  METHODS projects_update_column
    IMPORTING
      column_id TYPE i
      body TYPE bodyprojects_update_column
    RETURNING VALUE(return_data) TYPE project_column
    RAISING cx_static_check.

* DELETE - "Delete a project column"
* Operation id: projects/delete-column
* Parameter: column_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Body ref: #/components/schemas/bodyprojects_delete_column
  METHODS projects_delete_column
    IMPORTING
      column_id TYPE i
      body TYPE bodyprojects_delete_column
    RAISING cx_static_check.

* GET - "List project cards"
* Operation id: projects/list-cards
* Parameter: archived_state, optional, query
* Parameter: column_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_list_cards
    IMPORTING
      archived_state TYPE string DEFAULT 'not_archived'
      column_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a project card"
* Operation id: projects/create-card
* Parameter: column_id, required, path
* Response: 201
*     application/json, #/components/schemas/project-card
* Response: 304
* Response: 401
* Response: 403
* Response: 422
*     application/json, 
* Response: 503
*     application/json, object
* Body ref: #/components/schemas/bodyprojects_create_card
  METHODS projects_create_card
    IMPORTING
      column_id TYPE i
      body TYPE bodyprojects_create_card
    RETURNING VALUE(return_data) TYPE project_card
    RAISING cx_static_check.

* POST - "Move a project column"
* Operation id: projects/move-column
* Parameter: column_id, required, path
* Response: 201
*     application/json, object
* Response: 304
* Response: 401
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyprojects_move_column
  METHODS projects_move_column
    IMPORTING
      column_id TYPE i
      body TYPE bodyprojects_move_column
    RAISING cx_static_check.

* GET - "Get a project"
* Operation id: projects/get
* Parameter: project_id, required, path
* Response: 200
*     application/json, #/components/schemas/project
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_get
    IMPORTING
      project_id TYPE i
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* PATCH - "Update a project"
* Operation id: projects/update
* Parameter: project_id, required, path
* Response: 200
*     application/json, #/components/schemas/project
* Response: 304
* Response: 401
* Response: 403
*     application/json, object
* Response: 404
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyprojects_update
  METHODS projects_update
    IMPORTING
      project_id TYPE i
      body TYPE bodyprojects_update
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* DELETE - "Delete a project"
* Operation id: projects/delete
* Parameter: project_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
*     application/json, object
* Response: 404
* Response: 410
* Body ref: #/components/schemas/bodyprojects_delete
  METHODS projects_delete
    IMPORTING
      project_id TYPE i
      body TYPE bodyprojects_delete
    RAISING cx_static_check.

* GET - "List project collaborators"
* Operation id: projects/list-collaborators
* Parameter: affiliation, optional, query
* Parameter: project_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_list_collaborators
    IMPORTING
      affiliation TYPE string DEFAULT 'all'
      project_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Add project collaborator"
* Operation id: projects/add-collaborator
* Parameter: project_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyprojects_add_collaborator
  METHODS projects_add_collaborator
    IMPORTING
      project_id TYPE i
      username TYPE string
      body TYPE bodyprojects_add_collaborator
    RAISING cx_static_check.

* DELETE - "Remove user as a collaborator"
* Operation id: projects/remove-collaborator
* Parameter: project_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyprojects_remove_collaborat
  METHODS projects_remove_collaborator
    IMPORTING
      project_id TYPE i
      username TYPE string
      body TYPE bodyprojects_remove_collaborat
    RAISING cx_static_check.

* GET - "Get project permission for a user"
* Operation id: projects/get-permission-for-user
* Parameter: project_id, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/repository-collaborator-permission
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_get_permission_for_us
    IMPORTING
      project_id TYPE i
      username TYPE string
    RETURNING VALUE(return_data) TYPE repository_collaborator_permis
    RAISING cx_static_check.

* GET - "List project columns"
* Operation id: projects/list-columns
* Parameter: project_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_list_columns
    IMPORTING
      project_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a project column"
* Operation id: projects/create-column
* Parameter: project_id, required, path
* Response: 201
*     application/json, #/components/schemas/project-column
* Response: 304
* Response: 401
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyprojects_create_column
  METHODS projects_create_column
    IMPORTING
      project_id TYPE i
      body TYPE bodyprojects_create_column
    RETURNING VALUE(return_data) TYPE project_column
    RAISING cx_static_check.

* GET - "Get rate limit status for the authenticated user"
* Operation id: rate-limit/get
* Response: 200
*     application/json, #/components/schemas/rate-limit-overview
* Response: 304
* Response: 404
  METHODS rate_limit_get
    RETURNING VALUE(return_data) TYPE rate_limit_overview
    RAISING cx_static_check.

* DELETE - "Delete a reaction (Legacy)"
* Operation id: reactions/delete-legacy
* Parameter: reaction_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 410
* Response: 415
  METHODS reactions_delete_legacy
    IMPORTING
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "Get a repository"
* Operation id: repos/get
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/full-repository
* Response: 301
* Response: 403
* Response: 404
  METHODS repos_get
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE full_repository
    RAISING cx_static_check.

* PATCH - "Update a repository"
* Operation id: repos/update
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/full-repository
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update
  METHODS repos_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_update
    RETURNING VALUE(return_data) TYPE full_repository
    RAISING cx_static_check.

* DELETE - "Delete a repository"
* Operation id: repos/delete
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 403
*     application/json, object
* Response: 404
* Body ref: #/components/schemas/bodyrepos_delete
  METHODS repos_delete
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_delete
    RAISING cx_static_check.

* GET - "List artifacts for a repository"
* Operation id: actions/list-artifacts-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_artifacts_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get an artifact"
* Operation id: actions/get-artifact
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 200
*     application/json, #/components/schemas/artifact
  METHODS actions_get_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RETURNING VALUE(return_data) TYPE artifact
    RAISING cx_static_check.

* DELETE - "Delete an artifact"
* Operation id: actions/delete-artifact
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 204
  METHODS actions_delete_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RAISING cx_static_check.

* GET - "Download an artifact"
* Operation id: actions/download-artifact
* Parameter: archive_format, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 302
  METHODS actions_download_artifact
    IMPORTING
      archive_format TYPE string
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RAISING cx_static_check.

* GET - "Get a job for a workflow run"
* Operation id: actions/get-job-for-workflow-run
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 202
*     application/json, #/components/schemas/job
  METHODS actions_get_job_for_workflow_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE i
    RAISING cx_static_check.

* GET - "Download job logs for a workflow run"
* Operation id: actions/download-job-logs-for-workflow-run
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 302
  METHODS actions_download_job_logs_for_
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE i
    RAISING cx_static_check.

* GET - "Get GitHub Actions permissions for a repository"
* Operation id: actions/get-github-actions-permissions-repository
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/actions-repository-permissions
  METHODS actions_get_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE actions_repository_permissions
    RAISING cx_static_check.

* PUT - "Set GitHub Actions permissions for a repository"
* Operation id: actions/set-github-actions-permissions-repository
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_set_github_actio01
  METHODS actions_set_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyactions_set_github_actio01
    RAISING cx_static_check.

* GET - "Get allowed actions for a repository"
* Operation id: actions/get-allowed-actions-repository
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/selected-actions
  METHODS actions_get_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE selected_actions
    RAISING cx_static_check.

* PUT - "Set allowed actions for a repository"
* Operation id: actions/set-allowed-actions-repository
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/selected-actions
  METHODS actions_set_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE selected_actions
    RAISING cx_static_check.

* GET - "List self-hosted runners for a repository"
* Operation id: actions/list-self-hosted-runners-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_self_hosted_run03
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List runner applications for a repository"
* Operation id: actions/list-runner-applications-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS actions_list_runner_applicat01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* POST - "Create a registration token for a repository"
* Operation id: actions/create-registration-token-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_registration_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* POST - "Create a remove token for a repository"
* Operation id: actions/create-remove-token-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_remove_token_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE authentication_token
    RAISING cx_static_check.

* GET - "Get a self-hosted runner for a repository"
* Operation id: actions/get-self-hosted-runner-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json, #/components/schemas/runner
  METHODS actions_get_self_hosted_runn02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE i
    RETURNING VALUE(return_data) TYPE runner
    RAISING cx_static_check.

* DELETE - "Delete a self-hosted runner from a repository"
* Operation id: actions/delete-self-hosted-runner-from-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_delete_self_hosted_r02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE i
    RAISING cx_static_check.

* GET - "List workflow runs for a repository"
* Operation id: actions/list-workflow-runs-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: actor, optional, query
* Parameter: branch, optional, query
* Parameter: event, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_workflow_runs_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      actor TYPE string OPTIONAL
      branch TYPE string OPTIONAL
      event TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a workflow run"
* Operation id: actions/get-workflow-run
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 200
*     application/json, #/components/schemas/workflow-run
  METHODS actions_get_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RETURNING VALUE(return_data) TYPE workflow_run
    RAISING cx_static_check.

* DELETE - "Delete a workflow run"
* Operation id: actions/delete-workflow-run
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 204
  METHODS actions_delete_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RAISING cx_static_check.

* GET - "List workflow run artifacts"
* Operation id: actions/list-workflow-run-artifacts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_workflow_run_arti
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Cancel a workflow run"
* Operation id: actions/cancel-workflow-run
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 202
  METHODS actions_cancel_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RAISING cx_static_check.

* GET - "List jobs for a workflow run"
* Operation id: actions/list-jobs-for-workflow-run
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_jobs_for_workflow
    IMPORTING
      filter TYPE string DEFAULT 'latest'
      owner TYPE string
      repo TYPE string
      run_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Download workflow run logs"
* Operation id: actions/download-workflow-run-logs
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 302
  METHODS actions_download_workflow_run_
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RAISING cx_static_check.

* DELETE - "Delete workflow run logs"
* Operation id: actions/delete-workflow-run-logs
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 204
  METHODS actions_delete_workflow_run_lo
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RAISING cx_static_check.

* POST - "Re-run a workflow"
* Operation id: actions/re-run-workflow
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 201
  METHODS actions_re_run_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RAISING cx_static_check.

* GET - "Get workflow run usage"
* Operation id: actions/get-workflow-run-usage
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: run_id, required, path
* Response: 200
*     application/json, #/components/schemas/workflow-run-usage
  METHODS actions_get_workflow_run_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
      run_id TYPE i
    RETURNING VALUE(return_data) TYPE workflow_run_usage
    RAISING cx_static_check.

* GET - "List repository secrets"
* Operation id: actions/list-repo-secrets
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_repo_secrets
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a repository public key"
* Operation id: actions/get-repo-public-key
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/actions-public-key
  METHODS actions_get_repo_public_key
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE actions_public_key
    RAISING cx_static_check.

* GET - "Get a repository secret"
* Operation id: actions/get-repo-secret
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json, #/components/schemas/actions-secret
  METHODS actions_get_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RETURNING VALUE(return_data) TYPE actions_secret
    RAISING cx_static_check.

* PUT - "Create or update a repository secret"
* Operation id: actions/create-or-update-repo-secret
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 201
* Response: 204
* Body ref: #/components/schemas/bodyactions_create_or_update_r
  METHODS actions_create_or_update_repo_
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
      body TYPE bodyactions_create_or_update_r
    RAISING cx_static_check.

* DELETE - "Delete a repository secret"
* Operation id: actions/delete-repo-secret
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_delete_repo_secret
  METHODS actions_delete_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
      body TYPE bodyactions_delete_repo_secret
    RAISING cx_static_check.

* GET - "List repository workflows"
* Operation id: actions/list-repo-workflows
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_repo_workflows
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a workflow"
* Operation id: actions/get-workflow
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Response: 200
*     application/json, #/components/schemas/workflow
  METHODS actions_get_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
    RETURNING VALUE(return_data) TYPE workflow
    RAISING cx_static_check.

* PUT - "Disable a workflow"
* Operation id: actions/disable-workflow
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Response: 204
  METHODS actions_disable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
    RAISING cx_static_check.

* POST - "Create a workflow dispatch event"
* Operation id: actions/create-workflow-dispatch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactions_create_workflow_di
  METHODS actions_create_workflow_dispat
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
      body TYPE bodyactions_create_workflow_di
    RAISING cx_static_check.

* PUT - "Enable a workflow"
* Operation id: actions/enable-workflow
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Response: 204
  METHODS actions_enable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
    RAISING cx_static_check.

* GET - "List workflow runs"
* Operation id: actions/list-workflow-runs
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Parameter: actor, optional, query
* Parameter: branch, optional, query
* Parameter: event, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS actions_list_workflow_runs
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
      actor TYPE string OPTIONAL
      branch TYPE string OPTIONAL
      event TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get workflow usage"
* Operation id: actions/get-workflow-usage
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: workflow_id, required, path
* Response: 200
*     application/json, #/components/schemas/workflow-usage
  METHODS actions_get_workflow_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
      workflow_id TYPE string
    RETURNING VALUE(return_data) TYPE workflow_usage
    RAISING cx_static_check.

* GET - "List assignees"
* Operation id: issues/list-assignees
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS issues_list_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a user can be assigned"
* Operation id: issues/check-user-can-be-assigned
* Parameter: assignee, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS issues_check_user_can_be_assig
    IMPORTING
      assignee TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Enable automated security fixes"
* Operation id: repos/enable-automated-security-fixes
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_enable_automated_securit
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* DELETE - "Disable automated security fixes"
* Operation id: repos/disable-automated-security-fixes
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_disable_automated_securi
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "List branches"
* Operation id: repos/list-branches
* Parameter: protected, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_list_branches
    IMPORTING
      protected TYPE abap_bool OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a branch"
* Operation id: repos/get-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/branch-with-protection
* Response: 404
* Response: 415
  METHODS repos_get_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE branch_with_protection
    RAISING cx_static_check.

* GET - "Get branch protection"
* Operation id: repos/get-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/branch-protection
* Response: 404
  METHODS repos_get_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE branch_protection
    RAISING cx_static_check.

* PUT - "Update branch protection"
* Operation id: repos/update-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch
* Response: 403
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update_branch_protec
  METHODS repos_update_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_update_branch_protec
    RETURNING VALUE(return_data) TYPE protected_branch
    RAISING cx_static_check.

* DELETE - "Delete branch protection"
* Operation id: repos/delete-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
* Response: 403
* Body ref: #/components/schemas/bodyrepos_delete_branch_protec
  METHODS repos_delete_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_delete_branch_protec
    RAISING cx_static_check.

* GET - "Get admin branch protection"
* Operation id: repos/get-admin-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch-admin-enforced
  METHODS repos_get_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE protected_branch_admin_enforce
    RAISING cx_static_check.

* POST - "Set admin branch protection"
* Operation id: repos/set-admin-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch-admin-enforced
  METHODS repos_set_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE protected_branch_admin_enforce
    RAISING cx_static_check.

* DELETE - "Delete admin branch protection"
* Operation id: repos/delete-admin-branch-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
* Response: 404
  METHODS repos_delete_admin_branch_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* GET - "Get pull request review protection"
* Operation id: repos/get-pull-request-review-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/vnd.github.luke-cage-preview+json, #/components/schemas/protected-branch-pull-request-review
  METHODS repos_get_pull_request_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* PATCH - "Update pull request review protection"
* Operation id: repos/update-pull-request-review-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch-pull-request-review
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update_pull_request_
  METHODS repos_update_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_update_pull_request_
    RETURNING VALUE(return_data) TYPE protected_branch_pull_request_
    RAISING cx_static_check.

* DELETE - "Delete pull request review protection"
* Operation id: repos/delete-pull-request-review-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodyrepos_delete_pull_request_
  METHODS repos_delete_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_delete_pull_request_
    RAISING cx_static_check.

* GET - "Get commit signature protection"
* Operation id: repos/get-commit-signature-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch-admin-enforced
* Response: 404
  METHODS repos_get_commit_signature_pro
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE protected_branch_admin_enforce
    RAISING cx_static_check.

* POST - "Create commit signature protection"
* Operation id: repos/create-commit-signature-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/protected-branch-admin-enforced
* Response: 404
  METHODS repos_create_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE protected_branch_admin_enforce
    RAISING cx_static_check.

* DELETE - "Delete commit signature protection"
* Operation id: repos/delete-commit-signature-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
* Response: 404
  METHODS repos_delete_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* GET - "Get status checks protection"
* Operation id: repos/get-status-checks-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/status-check-policy
* Response: 404
  METHODS repos_get_status_checks_protec
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE status_check_policy
    RAISING cx_static_check.

* PATCH - "Update status check protection"
* Operation id: repos/update-status-check-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/status-check-policy
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update_status_check_
  METHODS repos_update_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_update_status_check_
    RETURNING VALUE(return_data) TYPE status_check_policy
    RAISING cx_static_check.

* DELETE - "Remove status check protection"
* Operation id: repos/remove-status-check-protection
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
* Body ref: #/components/schemas/bodyrepos_remove_status_check_
  METHODS repos_remove_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_remove_status_check_
    RAISING cx_static_check.

* GET - "Get all status check contexts"
* Operation id: repos/get-all-status-check-contexts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_get_all_status_check_con
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* POST - "Add status check contexts"
* Operation id: repos/add-status-check-contexts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_add_status_check_con
  METHODS repos_add_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_add_status_check_con
    RAISING cx_static_check.

* PUT - "Set status check contexts"
* Operation id: repos/set-status-check-contexts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_set_status_check_con
  METHODS repos_set_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_set_status_check_con
    RAISING cx_static_check.

* DELETE - "Remove status check contexts"
* Operation id: repos/remove-status-check-contexts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_remove_status_chec01
  METHODS repos_remove_status_check_cont
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_remove_status_chec01
    RAISING cx_static_check.

* GET - "Get access restrictions"
* Operation id: repos/get-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, #/components/schemas/branch-restriction-policy
* Response: 404
  METHODS repos_get_access_restrictions
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RETURNING VALUE(return_data) TYPE branch_restriction_policy
    RAISING cx_static_check.

* DELETE - "Delete access restrictions"
* Operation id: repos/delete-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 204
  METHODS repos_delete_access_restrictio
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* GET - "Get apps with access to the protected branch"
* Operation id: repos/get-apps-with-access-to-protected-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_get_apps_with_access_to_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* POST - "Add app access restrictions"
* Operation id: repos/add-app-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_add_app_access_restr
  METHODS repos_add_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_add_app_access_restr
    RAISING cx_static_check.

* PUT - "Set app access restrictions"
* Operation id: repos/set-app-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_set_app_access_restr
  METHODS repos_set_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_set_app_access_restr
    RAISING cx_static_check.

* DELETE - "Remove app access restrictions"
* Operation id: repos/remove-app-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_remove_app_access_re
  METHODS repos_remove_app_access_restri
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_remove_app_access_re
    RAISING cx_static_check.

* GET - "Get teams with access to the protected branch"
* Operation id: repos/get-teams-with-access-to-protected-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_get_teams_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* POST - "Add team access restrictions"
* Operation id: repos/add-team-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_add_team_access_rest
  METHODS repos_add_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_add_team_access_rest
    RAISING cx_static_check.

* PUT - "Set team access restrictions"
* Operation id: repos/set-team-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_set_team_access_rest
  METHODS repos_set_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_set_team_access_rest
    RAISING cx_static_check.

* DELETE - "Remove team access restrictions"
* Operation id: repos/remove-team-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_remove_team_access_r
  METHODS repos_remove_team_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_remove_team_access_r
    RAISING cx_static_check.

* GET - "Get users with access to the protected branch"
* Operation id: repos/get-users-with-access-to-protected-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_get_users_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
    RAISING cx_static_check.

* POST - "Add user access restrictions"
* Operation id: repos/add-user-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_add_user_access_rest
  METHODS repos_add_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_add_user_access_rest
    RAISING cx_static_check.

* PUT - "Set user access restrictions"
* Operation id: repos/set-user-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_set_user_access_rest
  METHODS repos_set_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_set_user_access_rest
    RAISING cx_static_check.

* DELETE - "Remove user access restrictions"
* Operation id: repos/remove-user-access-restrictions
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 200
*     application/json, array
* Response: 422
* Body ref: #/components/schemas/bodyrepos_remove_user_access_r
  METHODS repos_remove_user_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_remove_user_access_r
    RAISING cx_static_check.

* POST - "Rename a branch"
* Operation id: repos/rename-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, required, path
* Response: 201
*     application/json, #/components/schemas/branch-with-protection
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_rename_branch
  METHODS repos_rename_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string
      body TYPE bodyrepos_rename_branch
    RETURNING VALUE(return_data) TYPE branch_with_protection
    RAISING cx_static_check.

* POST - "Create a check run"
* Operation id: checks/create
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/check-run
* Body ref: #/components/schemas/bodychecks_create
  METHODS checks_create
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodychecks_create
    RETURNING VALUE(return_data) TYPE check_run
    RAISING cx_static_check.

* GET - "Get a check run"
* Operation id: checks/get
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200
*     application/json, #/components/schemas/check-run
  METHODS checks_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
    RETURNING VALUE(return_data) TYPE check_run
    RAISING cx_static_check.

* PATCH - "Update a check run"
* Operation id: checks/update
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200
*     application/json, #/components/schemas/check-run
* Body ref: #/components/schemas/bodychecks_update
  METHODS checks_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
      body TYPE bodychecks_update
    RETURNING VALUE(return_data) TYPE check_run
    RAISING cx_static_check.

* GET - "List check run annotations"
* Operation id: checks/list-annotations
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS checks_list_annotations
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a check suite"
* Operation id: checks/create-suite
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/check-suite
* Body ref: #/components/schemas/bodychecks_create_suite
  METHODS checks_create_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodychecks_create_suite
    RETURNING VALUE(return_data) TYPE check_suite
    RAISING cx_static_check.

* PATCH - "Update repository preferences for check suites"
* Operation id: checks/set-suites-preferences
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/check-suite-preference
* Body ref: #/components/schemas/bodychecks_set_suites_preferen
  METHODS checks_set_suites_preferences
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodychecks_set_suites_preferen
    RETURNING VALUE(return_data) TYPE check_suite_preference
    RAISING cx_static_check.

* GET - "Get a check suite"
* Operation id: checks/get-suite
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 200
*     application/json, #/components/schemas/check-suite
  METHODS checks_get_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
    RETURNING VALUE(return_data) TYPE check_suite
    RAISING cx_static_check.

* GET - "List check runs in a check suite"
* Operation id: checks/list-for-suite
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS checks_list_for_suite
    IMPORTING
      filter TYPE string DEFAULT 'latest'
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Rerequest a check suite"
* Operation id: checks/rerequest-suite
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 201
  METHODS checks_rerequest_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
    RAISING cx_static_check.

* GET - "List code scanning alerts for a repository"
* Operation id: code-scanning/list-alerts-for-repo
* Parameter: state, optional, query
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
* Response: 403
* Response: 404
* Response: 503
  METHODS code_scanning_list_alerts_for_
    IMPORTING
      state TYPE string OPTIONAL
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get a code scanning alert"
* Operation id: code-scanning/get-alert
* Parameter: alert_number, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/code-scanning-alert-code-scanning-alert
* Response: 403
* Response: 404
* Response: 503
  METHODS code_scanning_get_alert
    IMPORTING
      alert_number TYPE i
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE code_scanning_alert_code_sca01
    RAISING cx_static_check.

* PATCH - "Update a code scanning alert"
* Operation id: code-scanning/update-alert
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json, #/components/schemas/code-scanning-alert-code-scanning-alert
* Response: 403
* Response: 503
* Body ref: #/components/schemas/bodycode_scanning_update_alert
  METHODS code_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
      body TYPE bodycode_scanning_update_alert
    RETURNING VALUE(return_data) TYPE code_scanning_alert_code_sca01
    RAISING cx_static_check.

* GET - "List recent code scanning analyses for a repository"
* Operation id: code-scanning/list-recent-analyses
* Parameter: ref, optional, query
* Parameter: tool_name, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
* Response: 403
  METHODS code_scanning_list_recent_anal
    IMPORTING
      ref TYPE string OPTIONAL
      tool_name TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* POST - "Upload a SARIF file"
* Operation id: code-scanning/upload-sarif
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
* Response: 400
* Response: 403
* Response: 404
* Response: 413
* Body ref: #/components/schemas/bodycode_scanning_upload_sarif
  METHODS code_scanning_upload_sarif
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodycode_scanning_upload_sarif
    RAISING cx_static_check.

* GET - "List repository collaborators"
* Operation id: repos/list-collaborators
* Parameter: affiliation, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_list_collaborators
    IMPORTING
      affiliation TYPE string DEFAULT 'all'
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a user is a repository collaborator"
* Operation id: repos/check-collaborator
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS repos_check_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.

* PUT - "Add a repository collaborator"
* Operation id: repos/add-collaborator
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 201
*     application/json, #/components/schemas/repository-invitation
* Response: 204
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyrepos_add_collaborator
  METHODS repos_add_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
      body TYPE bodyrepos_add_collaborator
    RETURNING VALUE(return_data) TYPE repository_invitation
    RAISING cx_static_check.

* DELETE - "Remove a repository collaborator"
* Operation id: repos/remove-collaborator
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204
* Body ref: #/components/schemas/bodyrepos_remove_collaborator
  METHODS repos_remove_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
      body TYPE bodyrepos_remove_collaborator
    RAISING cx_static_check.

* GET - "Get repository permissions for a user"
* Operation id: repos/get-collaborator-permission-level
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/repository-collaborator-permission
* Response: 404
  METHODS repos_get_collaborator_permiss
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RETURNING VALUE(return_data) TYPE repository_collaborator_permis
    RAISING cx_static_check.

* GET - "List commit comments for a repository"
* Operation id: repos/list-commit-comments-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_commit_comments_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a commit comment"
* Operation id: repos/get-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/commit-comment
* Response: 404
  METHODS repos_get_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RETURNING VALUE(return_data) TYPE commit_comment
    RAISING cx_static_check.

* PATCH - "Update a commit comment"
* Operation id: repos/update-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/commit-comment
* Response: 404
* Body ref: #/components/schemas/bodyrepos_update_commit_commen
  METHODS repos_update_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyrepos_update_commit_commen
    RETURNING VALUE(return_data) TYPE commit_comment
    RAISING cx_static_check.

* DELETE - "Delete a commit comment"
* Operation id: repos/delete-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodyrepos_delete_commit_commen
  METHODS repos_delete_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyrepos_delete_commit_commen
    RAISING cx_static_check.

* GET - "List reactions for a commit comment"
* Operation id: reactions/list-for-commit-comment
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 415
  METHODS reactions_list_for_commit_comm
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a commit comment"
* Operation id: reactions/create-for-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/reaction
* Response: 201
*     application/json, #/components/schemas/reaction
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyreactions_create_for_commi
  METHODS reactions_create_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyreactions_create_for_commi
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete a commit comment reaction"
* Operation id: reactions/delete-for-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "List commits"
* Operation id: repos/list-commits
* Parameter: sha, optional, query
* Parameter: path, optional, query
* Parameter: author, optional, query
* Parameter: until, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 404
* Response: 409
* Response: 500
  METHODS repos_list_commits
    IMPORTING
      sha TYPE string OPTIONAL
      path TYPE string OPTIONAL
      author TYPE string OPTIONAL
      until TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List branches for HEAD commit"
* Operation id: repos/list-branches-for-head-commit
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200
*     application/json, array
* Response: 415
* Response: 422
  METHODS repos_list_branches_for_head_c
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.

* GET - "List commit comments"
* Operation id: repos/list-comments-for-commit
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_comments_for_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a commit comment"
* Operation id: repos/create-commit-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 201
*     application/json, #/components/schemas/commit-comment
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_commit_commen
  METHODS repos_create_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      body TYPE bodyrepos_create_commit_commen
    RETURNING VALUE(return_data) TYPE commit_comment
    RAISING cx_static_check.

* GET - "List pull requests associated with a commit"
* Operation id: repos/list-pull-requests-associated-with-commit
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 415
  METHODS repos_list_pull_requests_assoc
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a commit"
* Operation id: repos/get-commit
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/commit
* Response: 404
* Response: 422
* Response: 500
  METHODS repos_get_commit
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE commit
    RAISING cx_static_check.

* GET - "List check runs for a Git reference"
* Operation id: checks/list-for-ref
* Parameter: ref, required, path
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS checks_list_for_ref
    IMPORTING
      ref TYPE string
      filter TYPE string DEFAULT 'latest'
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List check suites for a Git reference"
* Operation id: checks/list-suites-for-ref
* Parameter: ref, required, path
* Parameter: app_id, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
  METHODS checks_list_suites_for_ref
    IMPORTING
      ref TYPE string
      app_id TYPE i OPTIONAL
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get the combined status for a specific reference"
* Operation id: repos/get-combined-status-for-ref
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/combined-commit-status
* Response: 404
  METHODS repos_get_combined_status_for_
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE combined_commit_status
    RAISING cx_static_check.

* GET - "List commit statuses for a reference"
* Operation id: repos/list-commit-statuses-for-ref
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 301
  METHODS repos_list_commit_statuses_for
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get the code of conduct for a repository"
* Operation id: codes-of-conduct/get-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/code-of-conduct
  METHODS codes_of_conduct_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE code_of_conduct
    RAISING cx_static_check.

* GET - "Get community profile metrics"
* Operation id: repos/get-community-profile-metrics
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/community-profile
  METHODS repos_get_community_profile_me
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE community_profile
    RAISING cx_static_check.

* GET - "Compare two commits"
* Operation id: repos/compare-commits
* Parameter: base, required, path
* Parameter: head, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/commit-comparison
* Response: 404
* Response: 500
  METHODS repos_compare_commits
    IMPORTING
      base TYPE string
      head TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE commit_comparison
    RAISING cx_static_check.

* GET - "Get repository content"
* Operation id: repos/get-content
* Parameter: path, required, path
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.object, #/components/schemas/content-tree
*     application/json, 
* Response: 302
* Response: 403
* Response: 404
  METHODS repos_get_content
    IMPORTING
      path TYPE string
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Create or update file contents"
* Operation id: repos/create-or-update-file-contents
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/file-commit
* Response: 201
*     application/json, #/components/schemas/file-commit
* Response: 404
* Response: 409
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_or_update_fil
  METHODS repos_create_or_update_file_co
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_or_update_fil
    RETURNING VALUE(return_data) TYPE file_commit
    RAISING cx_static_check.

* DELETE - "Delete a file"
* Operation id: repos/delete-file
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/file-commit
* Response: 404
* Response: 409
* Response: 422
* Response: 503
* Body ref: #/components/schemas/bodyrepos_delete_file
  METHODS repos_delete_file
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_delete_file
    RETURNING VALUE(return_data) TYPE file_commit
    RAISING cx_static_check.

* GET - "List repository contributors"
* Operation id: repos/list-contributors
* Parameter: anon, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 204
* Response: 403
* Response: 404
  METHODS repos_list_contributors
    IMPORTING
      anon TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List deployments"
* Operation id: repos/list-deployments
* Parameter: sha, optional, query
* Parameter: ref, optional, query
* Parameter: task, optional, query
* Parameter: environment, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_deployments
    IMPORTING
      sha TYPE string DEFAULT 'none'
      ref TYPE string DEFAULT 'none'
      task TYPE string DEFAULT 'none'
      environment TYPE string DEFAULT 'none'
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a deployment"
* Operation id: repos/create-deployment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/deployment
* Response: 202
*     application/json, object
* Response: 409
*     application/json, object
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_deployment
  METHODS repos_create_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_deployment
    RETURNING VALUE(return_data) TYPE deployment
    RAISING cx_static_check.

* GET - "Get a deployment"
* Operation id: repos/get-deployment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200
*     application/json, #/components/schemas/deployment
* Response: 404
  METHODS repos_get_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RETURNING VALUE(return_data) TYPE deployment
    RAISING cx_static_check.

* DELETE - "Delete a deployment"
* Operation id: repos/delete-deployment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 204
* Response: 404
* Response: 422
  METHODS repos_delete_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RAISING cx_static_check.

* GET - "List deployment statuses"
* Operation id: repos/list-deployment-statuses
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_list_deployment_statuses
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a deployment status"
* Operation id: repos/create-deployment-status
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 201
*     application/json, #/components/schemas/deployment-status
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_deployment_st
  METHODS repos_create_deployment_status
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
      body TYPE bodyrepos_create_deployment_st
    RETURNING VALUE(return_data) TYPE deployment_status
    RAISING cx_static_check.

* GET - "Get a deployment status"
* Operation id: repos/get-deployment-status
* Parameter: status_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200
*     application/json, #/components/schemas/deployment-status
* Response: 404
* Response: 415
  METHODS repos_get_deployment_status
    IMPORTING
      status_id TYPE i
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RETURNING VALUE(return_data) TYPE deployment_status
    RAISING cx_static_check.

* POST - "Create a repository dispatch event"
* Operation id: repos/create-dispatch-event
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_dispatch_even
  METHODS repos_create_dispatch_event
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_dispatch_even
    RAISING cx_static_check.

* GET - "List repository events"
* Operation id: activity/list-repo-events
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_repo_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List forks"
* Operation id: repos/list-forks
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 400
  METHODS repos_list_forks
    IMPORTING
      sort TYPE string DEFAULT 'newest'
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a fork"
* Operation id: repos/create-fork
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
*     application/json, #/components/schemas/repository
* Response: 400
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_fork
  METHODS repos_create_fork
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_fork
    RAISING cx_static_check.

* POST - "Create a blob"
* Operation id: git/create-blob
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/short-blob
* Response: 403
* Response: 404
* Response: 409
* Response: 422
* Body ref: #/components/schemas/bodygit_create_blob
  METHODS git_create_blob
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_create_blob
    RETURNING VALUE(return_data) TYPE short_blob
    RAISING cx_static_check.

* GET - "Get a blob"
* Operation id: git/get-blob
* Parameter: file_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/blob
* Response: 403
* Response: 404
* Response: 422
  METHODS git_get_blob
    IMPORTING
      file_sha TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE blob
    RAISING cx_static_check.

* POST - "Create a commit"
* Operation id: git/create-commit
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/git-commit
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodygit_create_commit
  METHODS git_create_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_create_commit
    RETURNING VALUE(return_data) TYPE git_commit
    RAISING cx_static_check.

* GET - "Get a commit"
* Operation id: git/get-commit
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200
*     application/json, #/components/schemas/git-commit
* Response: 404
  METHODS git_get_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RETURNING VALUE(return_data) TYPE git_commit
    RAISING cx_static_check.

* GET - "List matching references"
* Operation id: git/list-matching-refs
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS git_list_matching_refs
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a reference"
* Operation id: git/get-ref
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/git-ref
* Response: 404
  METHODS git_get_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE git_ref
    RAISING cx_static_check.

* POST - "Create a reference"
* Operation id: git/create-ref
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/git-ref
* Response: 422
* Body ref: #/components/schemas/bodygit_create_ref
  METHODS git_create_ref
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_create_ref
    RETURNING VALUE(return_data) TYPE git_ref
    RAISING cx_static_check.

* PATCH - "Update a reference"
* Operation id: git/update-ref
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/git-ref
* Response: 422
* Body ref: #/components/schemas/bodygit_update_ref
  METHODS git_update_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_update_ref
    RETURNING VALUE(return_data) TYPE git_ref
    RAISING cx_static_check.

* DELETE - "Delete a reference"
* Operation id: git/delete-ref
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 422
* Body ref: #/components/schemas/bodygit_delete_ref
  METHODS git_delete_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_delete_ref
    RAISING cx_static_check.

* POST - "Create a tag object"
* Operation id: git/create-tag
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/git-tag
* Response: 422
* Body ref: #/components/schemas/bodygit_create_tag
  METHODS git_create_tag
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_create_tag
    RETURNING VALUE(return_data) TYPE git_tag
    RAISING cx_static_check.

* GET - "Get a tag"
* Operation id: git/get-tag
* Parameter: tag_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/git-tag
* Response: 404
  METHODS git_get_tag
    IMPORTING
      tag_sha TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE git_tag
    RAISING cx_static_check.

* POST - "Create a tree"
* Operation id: git/create-tree
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/git-tree
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodygit_create_tree
  METHODS git_create_tree
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodygit_create_tree
    RETURNING VALUE(return_data) TYPE git_tree
    RAISING cx_static_check.

* GET - "Get a tree"
* Operation id: git/get-tree
* Parameter: tree_sha, required, path
* Parameter: recursive, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/git-tree
* Response: 404
* Response: 422
  METHODS git_get_tree
    IMPORTING
      tree_sha TYPE string
      recursive TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE git_tree
    RAISING cx_static_check.

* GET - "List repository webhooks"
* Operation id: repos/list-webhooks
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_list_webhooks
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a repository webhook"
* Operation id: repos/create-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/hook
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_webhook
  METHODS repos_create_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_webhook
    RETURNING VALUE(return_data) TYPE hook
    RAISING cx_static_check.

* GET - "Get a repository webhook"
* Operation id: repos/get-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/hook
* Response: 404
  METHODS repos_get_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
    RETURNING VALUE(return_data) TYPE hook
    RAISING cx_static_check.

* PATCH - "Update a repository webhook"
* Operation id: repos/update-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/hook
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update_webhook
  METHODS repos_update_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
      body TYPE bodyrepos_update_webhook
    RETURNING VALUE(return_data) TYPE hook
    RAISING cx_static_check.

* DELETE - "Delete a repository webhook"
* Operation id: repos/delete-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodyrepos_delete_webhook
  METHODS repos_delete_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
      body TYPE bodyrepos_delete_webhook
    RAISING cx_static_check.

* GET - "Get a webhook configuration for a repository"
* Operation id: repos/get-webhook-config-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/webhook-config
  METHODS repos_get_webhook_config_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* PATCH - "Update a webhook configuration for a repository"
* Operation id: repos/update-webhook-config-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 200
*     application/json, #/components/schemas/webhook-config
* Body ref: #/components/schemas/bodyrepos_update_webhook_confi
  METHODS repos_update_webhook_config_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
      body TYPE bodyrepos_update_webhook_confi
    RETURNING VALUE(return_data) TYPE webhook_config
    RAISING cx_static_check.

* POST - "Ping a repository webhook"
* Operation id: repos/ping-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 204
* Response: 404
  METHODS repos_ping_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
    RAISING cx_static_check.

* POST - "Test the push repository webhook"
* Operation id: repos/test-push-webhook
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: hook_id, required, path
* Response: 204
* Response: 404
  METHODS repos_test_push_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
      hook_id TYPE i
    RAISING cx_static_check.

* GET - "Get an import status"
* Operation id: migrations/get-import-status
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/import
* Response: 404
  METHODS migrations_get_import_status
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE import
    RAISING cx_static_check.

* PUT - "Start an import"
* Operation id: migrations/start-import
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/import
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodymigrations_start_import
  METHODS migrations_start_import
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodymigrations_start_import
    RETURNING VALUE(return_data) TYPE import
    RAISING cx_static_check.

* PATCH - "Update an import"
* Operation id: migrations/update-import
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/import
* Body ref: #/components/schemas/bodymigrations_update_import
  METHODS migrations_update_import
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodymigrations_update_import
    RETURNING VALUE(return_data) TYPE import
    RAISING cx_static_check.

* DELETE - "Cancel an import"
* Operation id: migrations/cancel-import
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodymigrations_cancel_import
  METHODS migrations_cancel_import
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodymigrations_cancel_import
    RAISING cx_static_check.

* GET - "Get commit authors"
* Operation id: migrations/get-commit-authors
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: since, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS migrations_get_commit_authors
    IMPORTING
      owner TYPE string
      repo TYPE string
      since TYPE i OPTIONAL
    RAISING cx_static_check.

* PATCH - "Map a commit author"
* Operation id: migrations/map-commit-author
* Parameter: author_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/porter-author
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodymigrations_map_commit_auth
  METHODS migrations_map_commit_author
    IMPORTING
      author_id TYPE i
      owner TYPE string
      repo TYPE string
      body TYPE bodymigrations_map_commit_auth
    RETURNING VALUE(return_data) TYPE porter_author
    RAISING cx_static_check.

* GET - "Get large files"
* Operation id: migrations/get-large-files
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS migrations_get_large_files
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PATCH - "Update Git LFS preference"
* Operation id: migrations/set-lfs-preference
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/import
* Response: 422
* Body ref: #/components/schemas/bodymigrations_set_lfs_prefere
  METHODS migrations_set_lfs_preference
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodymigrations_set_lfs_prefere
    RETURNING VALUE(return_data) TYPE import
    RAISING cx_static_check.

* GET - "Get a repository installation for the authenticated app"
* Operation id: apps/get-repo-installation
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/installation
* Response: 301
* Response: 404
  METHODS apps_get_repo_installation
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE installation
    RAISING cx_static_check.

* GET - "Get interaction restrictions for a repository"
* Operation id: interactions/get-restrictions-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* PUT - "Set interaction restrictions for a repository"
* Operation id: interactions/set-restrictions-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
* Response: 409
* Body ref: #/components/schemas/interaction-limit
  METHODS interactions_set_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE interaction_limit
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* DELETE - "Remove interaction restrictions for a repository"
* Operation id: interactions/remove-restrictions-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 409
  METHODS interactions_remove_restrict01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "List repository invitations"
* Operation id: repos/list-invitations
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_invitations
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PATCH - "Update a repository invitation"
* Operation id: repos/update-invitation
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 200
*     application/json, #/components/schemas/repository-invitation
* Body ref: #/components/schemas/bodyrepos_update_invitation
  METHODS repos_update_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE i
      body TYPE bodyrepos_update_invitation
    RETURNING VALUE(return_data) TYPE repository_invitation
    RAISING cx_static_check.

* DELETE - "Delete a repository invitation"
* Operation id: repos/delete-invitation
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyrepos_delete_invitation
  METHODS repos_delete_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE i
      body TYPE bodyrepos_delete_invitation
    RAISING cx_static_check.

* GET - "List repository issues"
* Operation id: issues/list-for-repo
* Parameter: milestone, optional, query
* Parameter: state, optional, query
* Parameter: assignee, optional, query
* Parameter: creator, optional, query
* Parameter: mentioned, optional, query
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 301
* Response: 404
* Response: 422
  METHODS issues_list_for_repo
    IMPORTING
      milestone TYPE string OPTIONAL
      state TYPE string DEFAULT 'open'
      assignee TYPE string OPTIONAL
      creator TYPE string OPTIONAL
      mentioned TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created'
      owner TYPE string
      repo TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an issue"
* Operation id: issues/create
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/issue
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Response: 503
* Body ref: #/components/schemas/bodyissues_create
  METHODS issues_create
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyissues_create
    RETURNING VALUE(return_data) TYPE issue
    RAISING cx_static_check.

* GET - "List issue comments for a repository"
* Operation id: issues/list-comments-for-repo
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 422
  METHODS issues_list_comments_for_repo
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string DEFAULT 'created'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get an issue comment"
* Operation id: issues/get-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/issue-comment
* Response: 404
  METHODS issues_get_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RETURNING VALUE(return_data) TYPE issue_comment
    RAISING cx_static_check.

* PATCH - "Update an issue comment"
* Operation id: issues/update-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/issue-comment
* Response: 422
* Body ref: #/components/schemas/bodyissues_update_comment
  METHODS issues_update_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyissues_update_comment
    RETURNING VALUE(return_data) TYPE issue_comment
    RAISING cx_static_check.

* DELETE - "Delete an issue comment"
* Operation id: issues/delete-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyissues_delete_comment
  METHODS issues_delete_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyissues_delete_comment
    RAISING cx_static_check.

* GET - "List reactions for an issue comment"
* Operation id: reactions/list-for-issue-comment
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 415
  METHODS reactions_list_for_issue_comme
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for an issue comment"
* Operation id: reactions/create-for-issue-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/reaction
* Response: 201
*     application/json, #/components/schemas/reaction
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyreactions_create_for_issue
  METHODS reactions_create_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyreactions_create_for_issue
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete an issue comment reaction"
* Operation id: reactions/delete-for-issue-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "List issue events for a repository"
* Operation id: issues/list-events-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 422
  METHODS issues_list_events_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get an issue event"
* Operation id: issues/get-event
* Parameter: event_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/issue-event
* Response: 403
* Response: 404
* Response: 410
  METHODS issues_get_event
    IMPORTING
      event_id TYPE i
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE issue_event
    RAISING cx_static_check.

* GET - "Get an issue"
* Operation id: issues/get
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, #/components/schemas/issue
* Response: 301
* Response: 304
* Response: 404
* Response: 410
  METHODS issues_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RETURNING VALUE(return_data) TYPE issue
    RAISING cx_static_check.

* PATCH - "Update an issue"
* Operation id: issues/update
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, #/components/schemas/issue
* Response: 301
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Response: 503
* Body ref: #/components/schemas/bodyissues_update
  METHODS issues_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_update
    RETURNING VALUE(return_data) TYPE issue
    RAISING cx_static_check.

* POST - "Add assignees to an issue"
* Operation id: issues/add-assignees
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json, #/components/schemas/issue-simple
* Body ref: #/components/schemas/bodyissues_add_assignees
  METHODS issues_add_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_add_assignees
    RETURNING VALUE(return_data) TYPE issue_simple
    RAISING cx_static_check.

* DELETE - "Remove assignees from an issue"
* Operation id: issues/remove-assignees
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, #/components/schemas/issue-simple
* Body ref: #/components/schemas/bodyissues_remove_assignees
  METHODS issues_remove_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_remove_assignees
    RETURNING VALUE(return_data) TYPE issue_simple
    RAISING cx_static_check.

* GET - "List issue comments"
* Operation id: issues/list-comments
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 410
  METHODS issues_list_comments
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create an issue comment"
* Operation id: issues/create-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json, #/components/schemas/issue-comment
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyissues_create_comment
  METHODS issues_create_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_create_comment
    RETURNING VALUE(return_data) TYPE issue_comment
    RAISING cx_static_check.

* GET - "List issue events"
* Operation id: issues/list-events
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 410
  METHODS issues_list_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List labels for an issue"
* Operation id: issues/list-labels-on-issue
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 410
  METHODS issues_list_labels_on_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Add labels to an issue"
* Operation id: issues/add-labels
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, array
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyissues_add_labels
  METHODS issues_add_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_add_labels
    RAISING cx_static_check.

* PUT - "Set labels for an issue"
* Operation id: issues/set-labels
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, array
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyissues_set_labels
  METHODS issues_set_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_set_labels
    RAISING cx_static_check.

* DELETE - "Remove all labels from an issue"
* Operation id: issues/remove-all-labels
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 410
* Body ref: #/components/schemas/bodyissues_remove_all_labels
  METHODS issues_remove_all_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_remove_all_labels
    RAISING cx_static_check.

* DELETE - "Remove a label from an issue"
* Operation id: issues/remove-label
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json, array
* Response: 404
* Response: 410
  METHODS issues_remove_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.

* PUT - "Lock an issue"
* Operation id: issues/lock
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyissues_lock
  METHODS issues_lock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_lock
    RAISING cx_static_check.

* DELETE - "Unlock an issue"
* Operation id: issues/unlock
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodyissues_unlock
  METHODS issues_unlock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyissues_unlock
    RAISING cx_static_check.

* GET - "List reactions for an issue"
* Operation id: reactions/list-for-issue
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 410
* Response: 415
  METHODS reactions_list_for_issue
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for an issue"
* Operation id: reactions/create-for-issue
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json, #/components/schemas/reaction
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyreactions_create_for_iss01
  METHODS reactions_create_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      body TYPE bodyreactions_create_for_iss01
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete an issue reaction"
* Operation id: reactions/delete-for-issue
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "List timeline events for an issue"
* Operation id: issues/list-events-for-timeline
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 410
* Response: 415
  METHODS issues_list_events_for_timelin
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List deploy keys"
* Operation id: repos/list-deploy-keys
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_deploy_keys
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a deploy key"
* Operation id: repos/create-deploy-key
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/deploy-key
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_deploy_key
  METHODS repos_create_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_deploy_key
    RETURNING VALUE(return_data) TYPE deploy_key
    RAISING cx_static_check.

* GET - "Get a deploy key"
* Operation id: repos/get-deploy-key
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 200
*     application/json, #/components/schemas/deploy-key
* Response: 404
  METHODS repos_get_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE i
    RETURNING VALUE(return_data) TYPE deploy_key
    RAISING cx_static_check.

* DELETE - "Delete a deploy key"
* Operation id: repos/delete-deploy-key
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 204
  METHODS repos_delete_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE i
    RAISING cx_static_check.

* GET - "List labels for a repository"
* Operation id: issues/list-labels-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS issues_list_labels_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a label"
* Operation id: issues/create-label
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/label
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyissues_create_label
  METHODS issues_create_label
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyissues_create_label
    RETURNING VALUE(return_data) TYPE label
    RAISING cx_static_check.

* GET - "Get a label"
* Operation id: issues/get-label
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/label
* Response: 404
  METHODS issues_get_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE label
    RAISING cx_static_check.

* PATCH - "Update a label"
* Operation id: issues/update-label
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/label
* Body ref: #/components/schemas/bodyissues_update_label
  METHODS issues_update_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyissues_update_label
    RETURNING VALUE(return_data) TYPE label
    RAISING cx_static_check.

* DELETE - "Delete a label"
* Operation id: issues/delete-label
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyissues_delete_label
  METHODS issues_delete_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyissues_delete_label
    RAISING cx_static_check.

* GET - "List repository languages"
* Operation id: repos/list-languages
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/language
  METHODS repos_list_languages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE language
    RAISING cx_static_check.

* GET - "Get the license for a repository"
* Operation id: licenses/get-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/license-content
  METHODS licenses_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE license_content
    RAISING cx_static_check.

* POST - "Merge a branch"
* Operation id: repos/merge
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/commit
* Response: 403
* Response: 404
*     application/json, object
* Response: 409
*     application/json, object
* Response: 422
* Body ref: #/components/schemas/bodyrepos_merge
  METHODS repos_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_merge
    RETURNING VALUE(return_data) TYPE commit
    RAISING cx_static_check.

* GET - "List milestones"
* Operation id: issues/list-milestones
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS issues_list_milestones
    IMPORTING
      state TYPE string DEFAULT 'open'
      sort TYPE string DEFAULT 'due_on'
      direction TYPE string DEFAULT 'asc'
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a milestone"
* Operation id: issues/create-milestone
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/milestone
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyissues_create_milestone
  METHODS issues_create_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyissues_create_milestone
    RETURNING VALUE(return_data) TYPE milestone
    RAISING cx_static_check.

* GET - "Get a milestone"
* Operation id: issues/get-milestone
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200
*     application/json, #/components/schemas/milestone
* Response: 404
  METHODS issues_get_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
    RETURNING VALUE(return_data) TYPE milestone
    RAISING cx_static_check.

* PATCH - "Update a milestone"
* Operation id: issues/update-milestone
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200
*     application/json, #/components/schemas/milestone
* Body ref: #/components/schemas/bodyissues_update_milestone
  METHODS issues_update_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
      body TYPE bodyissues_update_milestone
    RETURNING VALUE(return_data) TYPE milestone
    RAISING cx_static_check.

* DELETE - "Delete a milestone"
* Operation id: issues/delete-milestone
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodyissues_delete_milestone
  METHODS issues_delete_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
      body TYPE bodyissues_delete_milestone
    RAISING cx_static_check.

* GET - "List labels for issues in a milestone"
* Operation id: issues/list-labels-for-milestone
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS issues_list_labels_for_milesto
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List repository notifications for the authenticated user"
* Operation id: activity/list-repo-notifications-for-authenticated-user
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
      all TYPE abap_bool DEFAULT abap_false
      participating TYPE abap_bool DEFAULT abap_false
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Mark repository notifications as read"
* Operation id: activity/mark-repo-notifications-as-read
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
* Body ref: #/components/schemas/bodyactivity_mark_repo_notific
  METHODS activity_mark_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyactivity_mark_repo_notific
    RAISING cx_static_check.

* GET - "Get a GitHub Pages site"
* Operation id: repos/get-pages
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/page
* Response: 404
  METHODS repos_get_pages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE page
    RAISING cx_static_check.

* POST - "Create a GitHub Pages site"
* Operation id: repos/create-pages-site
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/page
* Response: 409
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_pages_site
  METHODS repos_create_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_pages_site
    RETURNING VALUE(return_data) TYPE page
    RAISING cx_static_check.

* PUT - "Update information about a GitHub Pages site"
* Operation id: repos/update-information-about-pages-site
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 400
* Response: 422
* Body ref: #/components/schemas/bodyrepos_update_information_a
  METHODS repos_update_information_about
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_update_information_a
    RAISING cx_static_check.

* DELETE - "Delete a GitHub Pages site"
* Operation id: repos/delete-pages-site
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyrepos_delete_pages_site
  METHODS repos_delete_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_delete_pages_site
    RAISING cx_static_check.

* GET - "List GitHub Pages builds"
* Operation id: repos/list-pages-builds
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_pages_builds
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Request a GitHub Pages build"
* Operation id: repos/request-pages-build
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/page-build-status
  METHODS repos_request_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE page_build_status
    RAISING cx_static_check.

* GET - "Get latest Pages build"
* Operation id: repos/get-latest-pages-build
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/page-build
  METHODS repos_get_latest_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE page_build
    RAISING cx_static_check.

* GET - "Get GitHub Pages build"
* Operation id: repos/get-pages-build
* Parameter: build_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/page-build
  METHODS repos_get_pages_build
    IMPORTING
      build_id TYPE i
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE page_build
    RAISING cx_static_check.

* GET - "List repository projects"
* Operation id: projects/list-for-repo
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS projects_list_for_repo
    IMPORTING
      state TYPE string DEFAULT 'open'
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a repository project"
* Operation id: projects/create-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/project
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Body ref: #/components/schemas/bodyprojects_create_for_repo
  METHODS projects_create_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyprojects_create_for_repo
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* GET - "List pull requests"
* Operation id: pulls/list
* Parameter: state, optional, query
* Parameter: head, optional, query
* Parameter: base, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 422
  METHODS pulls_list
    IMPORTING
      state TYPE string DEFAULT 'open'
      head TYPE string OPTIONAL
      base TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created'
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a pull request"
* Operation id: pulls/create
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/pull-request
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodypulls_create
  METHODS pulls_create
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodypulls_create
    RETURNING VALUE(return_data) TYPE pull_request
    RAISING cx_static_check.

* GET - "List review comments in a repository"
* Operation id: pulls/list-review-comments-for-repo
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS pulls_list_review_comments_for
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string DEFAULT 'created'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a review comment for a pull request"
* Operation id: pulls/get-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 404
  METHODS pulls_get_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RETURNING VALUE(return_data) TYPE pull_request_review_comment
    RAISING cx_static_check.

* PATCH - "Update a review comment for a pull request"
* Operation id: pulls/update-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review-comment
* Body ref: #/components/schemas/bodypulls_update_review_commen
  METHODS pulls_update_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodypulls_update_review_commen
    RETURNING VALUE(return_data) TYPE pull_request_review_comment
    RAISING cx_static_check.

* DELETE - "Delete a review comment for a pull request"
* Operation id: pulls/delete-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 404
* Body ref: #/components/schemas/bodypulls_delete_review_commen
  METHODS pulls_delete_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodypulls_delete_review_commen
    RAISING cx_static_check.

* GET - "List reactions for a pull request review comment"
* Operation id: reactions/list-for-pull-request-review-comment
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 415
  METHODS reactions_list_for_pull_reques
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a pull request review comment"
* Operation id: reactions/create-for-pull-request-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json, #/components/schemas/reaction
* Response: 201
*     application/json, #/components/schemas/reaction
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyreactions_create_for_pull_
  METHODS reactions_create_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      body TYPE bodyreactions_create_for_pull_
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* DELETE - "Delete a pull request comment reaction"
* Operation id: reactions/delete-for-pull-request-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: reaction_id, required, path
* Response: 204
  METHODS reactions_delete_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      reaction_id TYPE i
    RAISING cx_static_check.

* GET - "Get a pull request"
* Operation id: pulls/get
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request
* Response: 304
* Response: 404
* Response: 500
  METHODS pulls_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
    RETURNING VALUE(return_data) TYPE pull_request
    RAISING cx_static_check.

* PATCH - "Update a pull request"
* Operation id: pulls/update
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodypulls_update
  METHODS pulls_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_update
    RETURNING VALUE(return_data) TYPE pull_request
    RAISING cx_static_check.

* GET - "List review comments on a pull request"
* Operation id: pulls/list-review-comments
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS pulls_list_review_comments
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      sort TYPE string DEFAULT 'created'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a review comment for a pull request"
* Operation id: pulls/create-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 201
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodypulls_create_review_commen
  METHODS pulls_create_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_create_review_commen
    RETURNING VALUE(return_data) TYPE pull_request_review_comment
    RAISING cx_static_check.

* POST - "Create a reply for a review comment"
* Operation id: pulls/create-reply-for-review-comment
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: comment_id, required, path
* Response: 201
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 404
* Body ref: #/components/schemas/bodypulls_create_reply_for_rev
  METHODS pulls_create_reply_for_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      comment_id TYPE i
      body TYPE bodypulls_create_reply_for_rev
    RETURNING VALUE(return_data) TYPE pull_request_review_comment
    RAISING cx_static_check.

* GET - "List commits on a pull request"
* Operation id: pulls/list-commits
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS pulls_list_commits
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List pull requests files"
* Operation id: pulls/list-files
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 422
* Response: 500
  METHODS pulls_list_files
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a pull request has been merged"
* Operation id: pulls/check-if-merged
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 204
* Response: 404
  METHODS pulls_check_if_merged
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
    RAISING cx_static_check.

* PUT - "Merge a pull request"
* Operation id: pulls/merge
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-merge-result
* Response: 403
* Response: 404
* Response: 405
*     application/json, object
* Response: 409
*     application/json, object
* Response: 422
* Body ref: #/components/schemas/bodypulls_merge
  METHODS pulls_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_merge
    RETURNING VALUE(return_data) TYPE pull_request_merge_result
    RAISING cx_static_check.

* GET - "List requested reviewers for a pull request"
* Operation id: pulls/list-requested-reviewers
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, #/components/schemas/pull-request-review-request
  METHODS pulls_list_requested_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RETURNING VALUE(return_data) TYPE pull_request_review_request
    RAISING cx_static_check.

* POST - "Request reviewers for a pull request"
* Operation id: pulls/request-reviewers
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 201
*     application/json, #/components/schemas/pull-request-simple
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodypulls_request_reviewers
  METHODS pulls_request_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_request_reviewers
    RETURNING VALUE(return_data) TYPE pull_request_simple
    RAISING cx_static_check.

* DELETE - "Remove requested reviewers from a pull request"
* Operation id: pulls/remove-requested-reviewers
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 200
* Response: 422
* Body ref: #/components/schemas/bodypulls_remove_requested_rev
  METHODS pulls_remove_requested_reviewe
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_remove_requested_rev
    RAISING cx_static_check.

* GET - "List reviews for a pull request"
* Operation id: pulls/list-reviews
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS pulls_list_reviews
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a review for a pull request"
* Operation id: pulls/create-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodypulls_create_review
  METHODS pulls_create_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_create_review
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* GET - "Get a review for a pull request"
* Operation id: pulls/get-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 404
  METHODS pulls_get_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* PUT - "Update a review for a pull request"
* Operation id: pulls/update-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 422
* Body ref: #/components/schemas/bodypulls_update_review
  METHODS pulls_update_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
      body TYPE bodypulls_update_review
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* DELETE - "Delete a pending review for a pull request"
* Operation id: pulls/delete-pending-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodypulls_delete_pending_revie
  METHODS pulls_delete_pending_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
      body TYPE bodypulls_delete_pending_revie
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* GET - "List comments for a pull request review"
* Operation id: pulls/list-comments-for-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS pulls_list_comments_for_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Dismiss a review for a pull request"
* Operation id: pulls/dismiss-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodypulls_dismiss_review
  METHODS pulls_dismiss_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
      body TYPE bodypulls_dismiss_review
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* POST - "Submit a review for a pull request"
* Operation id: pulls/submit-review
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json, #/components/schemas/pull-request-review
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodypulls_submit_review
  METHODS pulls_submit_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      review_id TYPE i
      body TYPE bodypulls_submit_review
    RETURNING VALUE(return_data) TYPE pull_request_review
    RAISING cx_static_check.

* PUT - "Update a pull request branch"
* Operation id: pulls/update-branch
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: pull_number, required, path
* Response: 202
*     application/json, object
* Response: 403
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodypulls_update_branch
  METHODS pulls_update_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      pull_number TYPE i
      body TYPE bodypulls_update_branch
    RAISING cx_static_check.

* GET - "Get a repository README"
* Operation id: repos/get-readme
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/content-file
* Response: 404
* Response: 422
  METHODS repos_get_readme
    IMPORTING
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE content_file
    RAISING cx_static_check.

* GET - "List releases"
* Operation id: repos/list-releases
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS repos_list_releases
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a release"
* Operation id: repos/create-release
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/release
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_release
  METHODS repos_create_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_release
    RETURNING VALUE(return_data) TYPE release
    RAISING cx_static_check.

* GET - "Get a release asset"
* Operation id: repos/get-release-asset
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200
*     application/json, #/components/schemas/release-asset
* Response: 302
* Response: 404
* Response: 415
  METHODS repos_get_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
    RETURNING VALUE(return_data) TYPE release_asset
    RAISING cx_static_check.

* PATCH - "Update a release asset"
* Operation id: repos/update-release-asset
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200
*     application/json, #/components/schemas/release-asset
* Body ref: #/components/schemas/bodyrepos_update_release_asset
  METHODS repos_update_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
      body TYPE bodyrepos_update_release_asset
    RETURNING VALUE(return_data) TYPE release_asset
    RAISING cx_static_check.

* DELETE - "Delete a release asset"
* Operation id: repos/delete-release-asset
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyrepos_delete_release_asset
  METHODS repos_delete_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
      body TYPE bodyrepos_delete_release_asset
    RAISING cx_static_check.

* GET - "Get the latest release"
* Operation id: repos/get-latest-release
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/release
  METHODS repos_get_latest_release
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE release
    RAISING cx_static_check.

* GET - "Get a release by tag name"
* Operation id: repos/get-release-by-tag
* Parameter: tag, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/release
* Response: 404
  METHODS repos_get_release_by_tag
    IMPORTING
      tag TYPE string
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE release
    RAISING cx_static_check.

* GET - "Get a release"
* Operation id: repos/get-release
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200
*     application/json, #/components/schemas/release
* Response: 404
  METHODS repos_get_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RETURNING VALUE(return_data) TYPE release
    RAISING cx_static_check.

* PATCH - "Update a release"
* Operation id: repos/update-release
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200
*     application/json, #/components/schemas/release
* Body ref: #/components/schemas/bodyrepos_update_release
  METHODS repos_update_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
      body TYPE bodyrepos_update_release
    RETURNING VALUE(return_data) TYPE release
    RAISING cx_static_check.

* DELETE - "Delete a release"
* Operation id: repos/delete-release
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyrepos_delete_release
  METHODS repos_delete_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
      body TYPE bodyrepos_delete_release
    RAISING cx_static_check.

* GET - "List release assets"
* Operation id: repos/list-release-assets
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_release_assets
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Upload a release asset"
* Operation id: repos/upload-release-asset
* Parameter: name, optional, query
* Parameter: label, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 201
*     application/json, #/components/schemas/release-asset
  METHODS repos_upload_release_asset
    IMPORTING
      name TYPE string OPTIONAL
      label TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RETURNING VALUE(return_data) TYPE release_asset
    RAISING cx_static_check.

* GET - "List secret scanning alerts for a repository"
* Operation id: secret-scanning/list-alerts-for-repo
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: page, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 503
  METHODS secret_scanning_list_alerts_fo
    IMPORTING
      state TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      page TYPE i DEFAULT 1
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "Get a secret scanning alert"
* Operation id: secret-scanning/get-alert
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json, #/components/schemas/secret-scanning-alert
* Response: 404
* Response: 503
  METHODS secret_scanning_get_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RETURNING VALUE(return_data) TYPE secret_scanning_alert
    RAISING cx_static_check.

* PATCH - "Update a secret scanning alert"
* Operation id: secret-scanning/update-alert
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json, #/components/schemas/secret-scanning-alert
* Response: 404
* Response: 422
* Response: 503
* Body ref: #/components/schemas/bodysecret_scanning_update_ale
  METHODS secret_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
      body TYPE bodysecret_scanning_update_ale
    RETURNING VALUE(return_data) TYPE secret_scanning_alert
    RAISING cx_static_check.

* GET - "List stargazers"
* Operation id: activity/list-stargazers-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
*     application/vnd.github.v3.star+json, array
* Response: 422
  METHODS activity_list_stargazers_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get the weekly commit activity"
* Operation id: repos/get-code-frequency-stats
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS repos_get_code_frequency_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get the last year of commit activity"
* Operation id: repos/get-commit-activity-stats
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS repos_get_commit_activity_stat
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get all contributor commit activity"
* Operation id: repos/get-contributors-stats
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS repos_get_contributors_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get the weekly commit count"
* Operation id: repos/get-participation-stats
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/participation-stats
* Response: 404
  METHODS repos_get_participation_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE participation_stats
    RAISING cx_static_check.

* GET - "Get the hourly commit count for each day"
* Operation id: repos/get-punch-card-stats
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
  METHODS repos_get_punch_card_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* POST - "Create a commit status"
* Operation id: repos/create-commit-status
* Parameter: sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json, #/components/schemas/status
* Body ref: #/components/schemas/bodyrepos_create_commit_status
  METHODS repos_create_commit_status
    IMPORTING
      sha TYPE string
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_create_commit_status
    RETURNING VALUE(return_data) TYPE status
    RAISING cx_static_check.

* GET - "List watchers"
* Operation id: activity/list-watchers-for-repo
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_watchers_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a repository subscription"
* Operation id: activity/get-repo-subscription
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/repository-subscription
* Response: 403
* Response: 404
  METHODS activity_get_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE repository_subscription
    RAISING cx_static_check.

* PUT - "Set a repository subscription"
* Operation id: activity/set-repo-subscription
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/repository-subscription
* Body ref: #/components/schemas/bodyactivity_set_repo_subscrip
  METHODS activity_set_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyactivity_set_repo_subscrip
    RETURNING VALUE(return_data) TYPE repository_subscription
    RAISING cx_static_check.

* DELETE - "Delete a repository subscription"
* Operation id: activity/delete-repo-subscription
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyactivity_delete_repo_subsc
  METHODS activity_delete_repo_subscript
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyactivity_delete_repo_subsc
    RAISING cx_static_check.

* GET - "List repository tags"
* Operation id: repos/list-tags
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_tags
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Download a repository archive (tar)"
* Operation id: repos/download-tarball-archive
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302
  METHODS repos_download_tarball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "List repository teams"
* Operation id: repos/list-teams
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_teams
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get all repository topics"
* Operation id: repos/get-all-topics
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/topic
* Response: 404
* Response: 415
  METHODS repos_get_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
    RETURNING VALUE(return_data) TYPE topic
    RAISING cx_static_check.

* PUT - "Replace all repository topics"
* Operation id: repos/replace-all-topics
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, #/components/schemas/topic
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyrepos_replace_all_topics
  METHODS repos_replace_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_replace_all_topics
    RETURNING VALUE(return_data) TYPE topic
    RAISING cx_static_check.

* GET - "Get repository clones"
* Operation id: repos/get-clones
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200
*     application/json, #/components/schemas/clone-traffic
* Response: 403
  METHODS repos_get_clones
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string DEFAULT 'day'
    RETURNING VALUE(return_data) TYPE clone_traffic
    RAISING cx_static_check.

* GET - "Get top referral paths"
* Operation id: repos/get-top-paths
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
* Response: 403
  METHODS repos_get_top_paths
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get top referral sources"
* Operation id: repos/get-top-referrers
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json, array
* Response: 403
  METHODS repos_get_top_referrers
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Get page views"
* Operation id: repos/get-views
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200
*     application/json, #/components/schemas/view-traffic
* Response: 403
  METHODS repos_get_views
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string DEFAULT 'day'
    RETURNING VALUE(return_data) TYPE view_traffic
    RAISING cx_static_check.

* POST - "Transfer a repository"
* Operation id: repos/transfer
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
*     application/json, #/components/schemas/repository
* Body ref: #/components/schemas/bodyrepos_transfer
  METHODS repos_transfer
    IMPORTING
      owner TYPE string
      repo TYPE string
      body TYPE bodyrepos_transfer
    RAISING cx_static_check.

* GET - "Check if vulnerability alerts are enabled for a repository"
* Operation id: repos/check-vulnerability-alerts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS repos_check_vulnerability_aler
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Enable vulnerability alerts"
* Operation id: repos/enable-vulnerability-alerts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_enable_vulnerability_ale
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* DELETE - "Disable vulnerability alerts"
* Operation id: repos/disable-vulnerability-alerts
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_disable_vulnerability_al
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "Download a repository archive (zip)"
* Operation id: repos/download-zipball-archive
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302
  METHODS repos_download_zipball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* POST - "Create a repository using a template"
* Operation id: repos/create-using-template
* Parameter: template_owner, required, path
* Parameter: template_repo, required, path
* Response: 201
*     application/json, #/components/schemas/repository
* Body ref: #/components/schemas/bodyrepos_create_using_templat
  METHODS repos_create_using_template
    IMPORTING
      template_owner TYPE string
      template_repo TYPE string
      body TYPE bodyrepos_create_using_templat
    RETURNING VALUE(return_data) TYPE repository
    RAISING cx_static_check.

* GET - "List public repositories"
* Operation id: repos/list-public
* Parameter: since, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 422
  METHODS repos_list_public
    IMPORTING
      since TYPE i OPTIONAL
    RAISING cx_static_check.

* GET - "List provisioned SCIM groups for an enterprise"
* Operation id: enterprise-admin/list-provisioned-groups-enterprise
* Parameter: enterprise, required, path
* Parameter: startIndex, optional, query
* Parameter: count, optional, query
* Response: 200
*     application/json, #/components/schemas/scim-group-list-enterprise
  METHODS enterprise_admin_list_provisio
    IMPORTING
      enterprise TYPE string
      startindex TYPE i OPTIONAL
      count TYPE i OPTIONAL
    RETURNING VALUE(return_data) TYPE scim_group_list_enterprise
    RAISING cx_static_check.

* POST - "Provision a SCIM enterprise group and invite users"
* Operation id: enterprise-admin/provision-and-invite-enterprise-group
* Parameter: enterprise, required, path
* Response: 201
*     application/json, #/components/schemas/scim-enterprise-group
* Body ref: #/components/schemas/bodyenterprise_admin_provision
  METHODS enterprise_admin_provision_and
    IMPORTING
      enterprise TYPE string
      body TYPE bodyenterprise_admin_provision
    RETURNING VALUE(return_data) TYPE scim_enterprise_group
    RAISING cx_static_check.

* GET - "Get SCIM provisioning information for an enterprise group"
* Operation id: enterprise-admin/get-provisioning-information-for-enterprise-group
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-group
  METHODS enterprise_admin_get_provision
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RETURNING VALUE(return_data) TYPE scim_enterprise_group
    RAISING cx_static_check.

* PUT - "Set SCIM information for a provisioned enterprise group"
* Operation id: enterprise-admin/set-information-for-provisioned-enterprise-group
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-group
* Body ref: #/components/schemas/bodyenterprise_admin_set_infor
  METHODS enterprise_admin_set_informati
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
      body TYPE bodyenterprise_admin_set_infor
    RETURNING VALUE(return_data) TYPE scim_enterprise_group
    RAISING cx_static_check.

* PATCH - "Update an attribute for a SCIM enterprise group"
* Operation id: enterprise-admin/update-attribute-for-enterprise-group
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-group
* Body ref: #/components/schemas/bodyenterprise_admin_update_at
  METHODS enterprise_admin_update_attrib
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
      body TYPE bodyenterprise_admin_update_at
    RETURNING VALUE(return_data) TYPE scim_enterprise_group
    RAISING cx_static_check.

* DELETE - "Delete a SCIM group from an enterprise"
* Operation id: enterprise-admin/delete-scim-group-from-enterprise
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_delete_sc
  METHODS enterprise_admin_delete_scim_g
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
      body TYPE bodyenterprise_admin_delete_sc
    RAISING cx_static_check.

* GET - "List SCIM provisioned identities for an enterprise"
* Operation id: enterprise-admin/list-provisioned-identities-enterprise
* Parameter: enterprise, required, path
* Parameter: startIndex, optional, query
* Parameter: count, optional, query
* Response: 200
*     application/json, #/components/schemas/scim-user-list-enterprise
  METHODS enterprise_admin_list_provis01
    IMPORTING
      enterprise TYPE string
      startindex TYPE i OPTIONAL
      count TYPE i OPTIONAL
    RETURNING VALUE(return_data) TYPE scim_user_list_enterprise
    RAISING cx_static_check.

* POST - "Provision and invite a SCIM enterprise user"
* Operation id: enterprise-admin/provision-and-invite-enterprise-user
* Parameter: enterprise, required, path
* Response: 201
*     application/json, #/components/schemas/scim-enterprise-user
* Body ref: #/components/schemas/bodyenterprise_admin_provisi01
  METHODS enterprise_admin_provision_a01
    IMPORTING
      enterprise TYPE string
      body TYPE bodyenterprise_admin_provisi01
    RETURNING VALUE(return_data) TYPE scim_enterprise_user
    RAISING cx_static_check.

* GET - "Get SCIM provisioning information for an enterprise user"
* Operation id: enterprise-admin/get-provisioning-information-for-enterprise-user
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-user
  METHODS enterprise_admin_get_provisi01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RETURNING VALUE(return_data) TYPE scim_enterprise_user
    RAISING cx_static_check.

* PUT - "Set SCIM information for a provisioned enterprise user"
* Operation id: enterprise-admin/set-information-for-provisioned-enterprise-user
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-user
* Body ref: #/components/schemas/bodyenterprise_admin_set_inf01
  METHODS enterprise_admin_set_informa01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
      body TYPE bodyenterprise_admin_set_inf01
    RETURNING VALUE(return_data) TYPE scim_enterprise_user
    RAISING cx_static_check.

* PATCH - "Update an attribute for a SCIM enterprise user"
* Operation id: enterprise-admin/update-attribute-for-enterprise-user
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json, #/components/schemas/scim-enterprise-user
* Body ref: #/components/schemas/bodyenterprise_admin_update_01
  METHODS enterprise_admin_update_attr01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
      body TYPE bodyenterprise_admin_update_01
    RETURNING VALUE(return_data) TYPE scim_enterprise_user
    RAISING cx_static_check.

* DELETE - "Delete a SCIM user from an enterprise"
* Operation id: enterprise-admin/delete-user-from-enterprise
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 204
* Body ref: #/components/schemas/bodyenterprise_admin_delete_us
  METHODS enterprise_admin_delete_user_f
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
      body TYPE bodyenterprise_admin_delete_us
    RAISING cx_static_check.

* GET - "List SCIM provisioned identities"
* Operation id: scim/list-provisioned-identities
* Parameter: startIndex, optional, query
* Parameter: count, optional, query
* Parameter: filter, optional, query
* Parameter: org, required, path
* Response: 200
*     application/scim+json, #/components/schemas/scim-user-list
* Response: 304
* Response: 400
* Response: 403
* Response: 404
  METHODS scim_list_provisioned_identiti
    IMPORTING
      startindex TYPE i OPTIONAL
      count TYPE i OPTIONAL
      filter TYPE string OPTIONAL
      org TYPE string
    RAISING cx_static_check.

* POST - "Provision and invite a SCIM user"
* Operation id: scim/provision-and-invite-user
* Parameter: org, required, path
* Response: 201
*     application/scim+json, #/components/schemas/scim-user
* Response: 304
* Response: 400
* Response: 403
* Response: 404
* Response: 409
* Response: 500
* Body ref: #/components/schemas/bodyscim_provision_and_invite_
  METHODS scim_provision_and_invite_user
    IMPORTING
      org TYPE string
      body TYPE bodyscim_provision_and_invite_
    RAISING cx_static_check.

* GET - "Get SCIM provisioning information for a user"
* Operation id: scim/get-provisioning-information-for-user
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json, #/components/schemas/scim-user
* Response: 304
* Response: 403
* Response: 404
  METHODS scim_get_provisioning_informat
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.

* PUT - "Update a provisioned organization membership"
* Operation id: scim/set-information-for-provisioned-user
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json, #/components/schemas/scim-user
* Response: 304
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodyscim_set_information_for_p
  METHODS scim_set_information_for_provi
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
      body TYPE bodyscim_set_information_for_p
    RAISING cx_static_check.

* PATCH - "Update an attribute for a SCIM user"
* Operation id: scim/update-attribute-for-user
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json, #/components/schemas/scim-user
* Response: 304
* Response: 400
* Response: 403
* Response: 404
* Response: 429
*     application/json, #/components/schemas/basic-error
* Body ref: #/components/schemas/bodyscim_update_attribute_for_
  METHODS scim_update_attribute_for_user
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
      body TYPE bodyscim_update_attribute_for_
    RAISING cx_static_check.

* DELETE - "Delete a SCIM user from an organization"
* Operation id: scim/delete-user-from-org
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Body ref: #/components/schemas/bodyscim_delete_user_from_org
  METHODS scim_delete_user_from_org
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
      body TYPE bodyscim_delete_user_from_org
    RAISING cx_static_check.

* GET - "Search code"
* Operation id: search/code
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 403
* Response: 422
* Response: 503
  METHODS search_code
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Search commits"
* Operation id: search/commits
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 415
  METHODS search_commits
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Search issues and pull requests"
* Operation id: search/issues-and-pull-requests
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 403
* Response: 422
* Response: 503
  METHODS search_issues_and_pull_request
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Search labels"
* Operation id: search/labels
* Parameter: repository_id, required, query
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 403
* Response: 404
* Response: 422
  METHODS search_labels
    IMPORTING
      repository_id TYPE i
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
    RAISING cx_static_check.

* GET - "Search repositories"
* Operation id: search/repos
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 422
* Response: 503
  METHODS search_repos
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Search topics"
* Operation id: search/topics
* Parameter: q, required, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 415
  METHODS search_topics
    IMPORTING
      q TYPE string
    RAISING cx_static_check.

* GET - "Search users"
* Operation id: search/users
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 422
* Response: 503
  METHODS search_users
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get a team (Legacy)"
* Operation id: teams/get-legacy
* Parameter: team_id, required, path
* Response: 200
*     application/json, #/components/schemas/team-full
* Response: 404
  METHODS teams_get_legacy
    IMPORTING
      team_id TYPE i
    RETURNING VALUE(return_data) TYPE team_full
    RAISING cx_static_check.

* PATCH - "Update a team (Legacy)"
* Operation id: teams/update-legacy
* Parameter: team_id, required, path
* Response: 201
*     application/json, #/components/schemas/team-full
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyteams_update_legacy
  METHODS teams_update_legacy
    IMPORTING
      team_id TYPE i
      body TYPE bodyteams_update_legacy
    RETURNING VALUE(return_data) TYPE team_full
    RAISING cx_static_check.

* DELETE - "Delete a team (Legacy)"
* Operation id: teams/delete-legacy
* Parameter: team_id, required, path
* Response: 204
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyteams_delete_legacy
  METHODS teams_delete_legacy
    IMPORTING
      team_id TYPE i
      body TYPE bodyteams_delete_legacy
    RAISING cx_static_check.

* GET - "List discussions (Legacy)"
* Operation id: teams/list-discussions-legacy
* Parameter: team_id, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_discussions_legacy
    IMPORTING
      team_id TYPE i
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a discussion (Legacy)"
* Operation id: teams/create-discussion-legacy
* Parameter: team_id, required, path
* Response: 201
*     application/json, #/components/schemas/team-discussion
* Body ref: #/components/schemas/bodyteams_create_discussion_le
  METHODS teams_create_discussion_legacy
    IMPORTING
      team_id TYPE i
      body TYPE bodyteams_create_discussion_le
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* GET - "Get a discussion (Legacy)"
* Operation id: teams/get-discussion-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion
  METHODS teams_get_discussion_legacy
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* PATCH - "Update a discussion (Legacy)"
* Operation id: teams/update-discussion-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion
* Body ref: #/components/schemas/bodyteams_update_discussion_le
  METHODS teams_update_discussion_legacy
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      body TYPE bodyteams_update_discussion_le
    RETURNING VALUE(return_data) TYPE team_discussion
    RAISING cx_static_check.

* DELETE - "Delete a discussion (Legacy)"
* Operation id: teams/delete-discussion-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_delete_discussion_le
  METHODS teams_delete_discussion_legacy
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      body TYPE bodyteams_delete_discussion_le
    RAISING cx_static_check.

* GET - "List discussion comments (Legacy)"
* Operation id: teams/list-discussion-comments-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_discussion_commen01
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a discussion comment (Legacy)"
* Operation id: teams/create-discussion-comment-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Response: 201
*     application/json, #/components/schemas/team-discussion-comment
* Body ref: #/components/schemas/bodyteams_create_discussion_01
  METHODS teams_create_discussion_comm01
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      body TYPE bodyteams_create_discussion_01
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* GET - "Get a discussion comment (Legacy)"
* Operation id: teams/get-discussion-comment-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_get_discussion_comment_l
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      comment_number TYPE i
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* PATCH - "Update a discussion comment (Legacy)"
* Operation id: teams/update-discussion-comment-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 200
*     application/json, #/components/schemas/team-discussion-comment
* Body ref: #/components/schemas/bodyteams_update_discussion_01
  METHODS teams_update_discussion_comm01
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyteams_update_discussion_01
    RETURNING VALUE(return_data) TYPE team_discussion_comment
    RAISING cx_static_check.

* DELETE - "Delete a discussion comment (Legacy)"
* Operation id: teams/delete-discussion-comment-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_delete_discussion_01
  METHODS teams_delete_discussion_comm01
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyteams_delete_discussion_01
    RAISING cx_static_check.

* GET - "List reactions for a team discussion comment (Legacy)"
* Operation id: reactions/list-for-team-discussion-comment-legacy
* Parameter: content, optional, query
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS reactions_list_for_team_disc02
    IMPORTING
      content TYPE string OPTIONAL
      team_id TYPE i
      discussion_number TYPE i
      comment_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a team discussion comment (Legacy)"
* Operation id: reactions/create-for-team-discussion-comment-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: comment_number, required, path
* Response: 201
*     application/json, #/components/schemas/reaction
* Body ref: #/components/schemas/bodyreactions_create_for_tea02
  METHODS reactions_create_for_team_di02
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      comment_number TYPE i
      body TYPE bodyreactions_create_for_tea02
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* GET - "List reactions for a team discussion (Legacy)"
* Operation id: reactions/list-for-team-discussion-legacy
* Parameter: content, optional, query
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS reactions_list_for_team_disc03
    IMPORTING
      content TYPE string OPTIONAL
      team_id TYPE i
      discussion_number TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create reaction for a team discussion (Legacy)"
* Operation id: reactions/create-for-team-discussion-legacy
* Parameter: team_id, required, path
* Parameter: discussion_number, required, path
* Response: 201
*     application/json, #/components/schemas/reaction
* Body ref: #/components/schemas/bodyreactions_create_for_tea03
  METHODS reactions_create_for_team_di03
    IMPORTING
      team_id TYPE i
      discussion_number TYPE i
      body TYPE bodyreactions_create_for_tea03
    RETURNING VALUE(return_data) TYPE reaction
    RAISING cx_static_check.

* GET - "List pending team invitations (Legacy)"
* Operation id: teams/list-pending-invitations-legacy
* Parameter: team_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS teams_list_pending_invitatio01
    IMPORTING
      team_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List team members (Legacy)"
* Operation id: teams/list-members-legacy
* Parameter: role, optional, query
* Parameter: team_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS teams_list_members_legacy
    IMPORTING
      role TYPE string DEFAULT 'all'
      team_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get team member (Legacy)"
* Operation id: teams/get-member-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS teams_get_member_legacy
    IMPORTING
      team_id TYPE i
      username TYPE string
    RAISING cx_static_check.

* PUT - "Add team member (Legacy)"
* Operation id: teams/add-member-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
* Response: 404
* Response: 422
*     application/json, object
  METHODS teams_add_member_legacy
    IMPORTING
      team_id TYPE i
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Remove team member (Legacy)"
* Operation id: teams/remove-member-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS teams_remove_member_legacy
    IMPORTING
      team_id TYPE i
      username TYPE string
    RAISING cx_static_check.

* GET - "Get team membership for a user (Legacy)"
* Operation id: teams/get-membership-for-user-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/team-membership
* Response: 404
  METHODS teams_get_membership_for_use01
    IMPORTING
      team_id TYPE i
      username TYPE string
    RETURNING VALUE(return_data) TYPE team_membership
    RAISING cx_static_check.

* PUT - "Add or update team membership for a user (Legacy)"
* Operation id: teams/add-or-update-membership-for-user-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/team-membership
* Response: 403
* Response: 404
* Response: 422
*     application/json, object
* Body ref: #/components/schemas/bodyteams_add_or_update_memb01
  METHODS teams_add_or_update_membersh01
    IMPORTING
      team_id TYPE i
      username TYPE string
      body TYPE bodyteams_add_or_update_memb01
    RETURNING VALUE(return_data) TYPE team_membership
    RAISING cx_static_check.

* DELETE - "Remove team membership for a user (Legacy)"
* Operation id: teams/remove-membership-for-user-legacy
* Parameter: team_id, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
* Body ref: #/components/schemas/bodyteams_remove_membership_01
  METHODS teams_remove_membership_for_01
    IMPORTING
      team_id TYPE i
      username TYPE string
      body TYPE bodyteams_remove_membership_01
    RAISING cx_static_check.

* GET - "List team projects (Legacy)"
* Operation id: teams/list-projects-legacy
* Parameter: team_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
* Response: 415
  METHODS teams_list_projects_legacy
    IMPORTING
      team_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check team permissions for a project (Legacy)"
* Operation id: teams/check-permissions-for-project-legacy
* Parameter: team_id, required, path
* Parameter: project_id, required, path
* Response: 200
*     application/json, #/components/schemas/team-project
* Response: 404
* Response: 415
  METHODS teams_check_permissions_for_01
    IMPORTING
      team_id TYPE i
      project_id TYPE i
    RETURNING VALUE(return_data) TYPE team_project
    RAISING cx_static_check.

* PUT - "Add or update team project permissions (Legacy)"
* Operation id: teams/add-or-update-project-permissions-legacy
* Parameter: team_id, required, path
* Parameter: project_id, required, path
* Response: 204
* Response: 403
*     application/json, object
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyteams_add_or_update_proj01
  METHODS teams_add_or_update_project_01
    IMPORTING
      team_id TYPE i
      project_id TYPE i
      body TYPE bodyteams_add_or_update_proj01
    RAISING cx_static_check.

* DELETE - "Remove a project from a team (Legacy)"
* Operation id: teams/remove-project-legacy
* Parameter: team_id, required, path
* Parameter: project_id, required, path
* Response: 204
* Response: 404
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyteams_remove_project_legac
  METHODS teams_remove_project_legacy
    IMPORTING
      team_id TYPE i
      project_id TYPE i
      body TYPE bodyteams_remove_project_legac
    RAISING cx_static_check.

* GET - "List team repositories (Legacy)"
* Operation id: teams/list-repos-legacy
* Parameter: team_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS teams_list_repos_legacy
    IMPORTING
      team_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check team permissions for a repository (Legacy)"
* Operation id: teams/check-permissions-for-repo-legacy
* Parameter: team_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.repository+json, #/components/schemas/team-repository
* Response: 204
* Response: 404
  METHODS teams_check_permissions_for_02
    IMPORTING
      team_id TYPE i
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Add or update team repository permissions (Legacy)"
* Operation id: teams/add-or-update-repo-permissions-legacy
* Parameter: team_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyteams_add_or_update_repo01
  METHODS teams_add_or_update_repo_per01
    IMPORTING
      team_id TYPE i
      owner TYPE string
      repo TYPE string
      body TYPE bodyteams_add_or_update_repo01
    RAISING cx_static_check.

* DELETE - "Remove a repository from a team (Legacy)"
* Operation id: teams/remove-repo-legacy
* Parameter: team_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Body ref: #/components/schemas/bodyteams_remove_repo_legacy
  METHODS teams_remove_repo_legacy
    IMPORTING
      team_id TYPE i
      owner TYPE string
      repo TYPE string
      body TYPE bodyteams_remove_repo_legacy
    RAISING cx_static_check.

* GET - "List IdP groups for a team (Legacy)"
* Operation id: teams/list-idp-groups-for-legacy
* Parameter: team_id, required, path
* Response: 200
*     application/json, #/components/schemas/group-mapping
* Response: 403
* Response: 404
  METHODS teams_list_idp_groups_for_lega
    IMPORTING
      team_id TYPE i
    RETURNING VALUE(return_data) TYPE group_mapping
    RAISING cx_static_check.

* PATCH - "Create or update IdP group connections (Legacy)"
* Operation id: teams/create-or-update-idp-group-connections-legacy
* Parameter: team_id, required, path
* Response: 200
*     application/json, #/components/schemas/group-mapping
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodyteams_create_or_update_i01
  METHODS teams_create_or_update_idp_g01
    IMPORTING
      team_id TYPE i
      body TYPE bodyteams_create_or_update_i01
    RETURNING VALUE(return_data) TYPE group_mapping
    RAISING cx_static_check.

* GET - "List child teams (Legacy)"
* Operation id: teams/list-child-legacy
* Parameter: team_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 403
* Response: 404
* Response: 422
  METHODS teams_list_child_legacy
    IMPORTING
      team_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get the authenticated user"
* Operation id: users/get-authenticated
* Response: 200
*     application/json, 
* Response: 304
* Response: 401
* Response: 403
  METHODS users_get_authenticated
    RAISING cx_static_check.

* PATCH - "Update the authenticated user"
* Operation id: users/update-authenticated
* Response: 200
*     application/json, #/components/schemas/private-user
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_update_authenticated
  METHODS users_update_authenticated
    IMPORTING
      body TYPE bodyusers_update_authenticated
    RETURNING VALUE(return_data) TYPE private_user
    RAISING cx_static_check.

* GET - "List users blocked by the authenticated user"
* Operation id: users/list-blocked-by-authenticated
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
  METHODS users_list_blocked_by_authenti
    RAISING cx_static_check.

* GET - "Check if a user is blocked by the authenticated user"
* Operation id: users/check-blocked
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS users_check_blocked
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* PUT - "Block a user"
* Operation id: users/block
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_block
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Unblock a user"
* Operation id: users/unblock
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_unblock
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* PATCH - "Set primary email visibility for the authenticated user"
* Operation id: users/set-primary-email-visibility-for-authenticated
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_set_primary_email_vi
  METHODS users_set_primary_email_visibi
    IMPORTING
      body TYPE bodyusers_set_primary_email_vi
    RAISING cx_static_check.

* GET - "List email addresses for the authenticated user"
* Operation id: users/list-emails-for-authenticated
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_emails_for_authenti
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Add an email address for the authenticated user"
* Operation id: users/add-email-for-authenticated
* Response: 201
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_add_email_for_authen
  METHODS users_add_email_for_authentica
    IMPORTING
      body TYPE bodyusers_add_email_for_authen
    RAISING cx_static_check.

* DELETE - "Delete an email address for the authenticated user"
* Operation id: users/delete-email-for-authenticated
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_delete_email_for_aut
  METHODS users_delete_email_for_authent
    IMPORTING
      body TYPE bodyusers_delete_email_for_aut
    RAISING cx_static_check.

* GET - "List followers of the authenticated user"
* Operation id: users/list-followers-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS users_list_followers_for_authe
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List the people the authenticated user follows"
* Operation id: users/list-followed-by-authenticated
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS users_list_followed_by_authent
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a person is followed by the authenticated user"
* Operation id: users/check-person-is-followed-by-authenticated
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS users_check_person_is_followed
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* PUT - "Follow a user"
* Operation id: users/follow
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_follow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* DELETE - "Unfollow a user"
* Operation id: users/unfollow
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_unfollow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* GET - "List GPG keys for the authenticated user"
* Operation id: users/list-gpg-keys-for-authenticated
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_gpg_keys_for_authen
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a GPG key for the authenticated user"
* Operation id: users/create-gpg-key-for-authenticated
* Response: 201
*     application/json, #/components/schemas/gpg-key
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_create_gpg_key_for_a
  METHODS users_create_gpg_key_for_authe
    IMPORTING
      body TYPE bodyusers_create_gpg_key_for_a
    RETURNING VALUE(return_data) TYPE gpg_key
    RAISING cx_static_check.

* GET - "Get a GPG key for the authenticated user"
* Operation id: users/get-gpg-key-for-authenticated
* Parameter: gpg_key_id, required, path
* Response: 200
*     application/json, #/components/schemas/gpg-key
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_get_gpg_key_for_authenti
    IMPORTING
      gpg_key_id TYPE i
    RETURNING VALUE(return_data) TYPE gpg_key
    RAISING cx_static_check.

* DELETE - "Delete a GPG key for the authenticated user"
* Operation id: users/delete-gpg-key-for-authenticated
* Parameter: gpg_key_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_delete_gpg_key_for_authe
    IMPORTING
      gpg_key_id TYPE i
    RAISING cx_static_check.

* GET - "List app installations accessible to the user access token"
* Operation id: apps/list-installations-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 401
* Response: 403
* Response: 415
  METHODS apps_list_installations_for_au
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List repositories accessible to the user access token"
* Operation id: apps/list-installation-repos-for-authenticated-user
* Parameter: installation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, object
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_list_installation_repos_f
    IMPORTING
      installation_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PUT - "Add a repository to an app installation"
* Operation id: apps/add-repo-to-installation
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_add_repo_to_installation
    IMPORTING
      installation_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.

* DELETE - "Remove a repository from an app installation"
* Operation id: apps/remove-repo-from-installation
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_remove_repo_from_installa
    IMPORTING
      installation_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.

* GET - "Get interaction restrictions for your public repositories"
* Operation id: interactions/get-restrictions-for-authenticated-user
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restriction02
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* PUT - "Set interaction restrictions for your public repositories"
* Operation id: interactions/set-restrictions-for-authenticated-user
* Response: 200
*     application/json, #/components/schemas/interaction-limit-response
* Response: 422
* Body ref: #/components/schemas/interaction-limit
  METHODS interactions_set_restriction02
    IMPORTING
      body TYPE interaction_limit
    RETURNING VALUE(return_data) TYPE interaction_limit_response
    RAISING cx_static_check.

* DELETE - "Remove interaction restrictions from your public repositories"
* Operation id: interactions/remove-restrictions-for-authenticated-user
* Response: 204
  METHODS interactions_remove_restrict02
    RAISING cx_static_check.

* GET - "List user account issues assigned to the authenticated user"
* Operation id: issues/list-for-authenticated-user
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 404
  METHODS issues_list_for_authenticated_
    IMPORTING
      filter TYPE string DEFAULT 'assigned'
      state TYPE string DEFAULT 'open'
      sort TYPE string DEFAULT 'created'
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc'
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List public SSH keys for the authenticated user"
* Operation id: users/list-public-ssh-keys-for-authenticated
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_public_ssh_keys_for
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a public SSH key for the authenticated user"
* Operation id: users/create-public-ssh-key-for-authenticated
* Response: 201
*     application/json, #/components/schemas/key
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyusers_create_public_ssh_ke
  METHODS users_create_public_ssh_key_fo
    IMPORTING
      body TYPE bodyusers_create_public_ssh_ke
    RETURNING VALUE(return_data) TYPE key
    RAISING cx_static_check.

* GET - "Get a public SSH key for the authenticated user"
* Operation id: users/get-public-ssh-key-for-authenticated
* Parameter: key_id, required, path
* Response: 200
*     application/json, #/components/schemas/key
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_get_public_ssh_key_for_a
    IMPORTING
      key_id TYPE i
    RETURNING VALUE(return_data) TYPE key
    RAISING cx_static_check.

* DELETE - "Delete a public SSH key for the authenticated user"
* Operation id: users/delete-public-ssh-key-for-authenticated
* Parameter: key_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_delete_public_ssh_key_fo
    IMPORTING
      key_id TYPE i
    RAISING cx_static_check.

* GET - "List subscriptions for the authenticated user"
* Operation id: apps/list-subscriptions-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 404
  METHODS apps_list_subscriptions_for_au
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List subscriptions for the authenticated user (stubbed)"
* Operation id: apps/list-subscriptions-for-authenticated-user-stubbed
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
  METHODS apps_list_subscriptions_for_01
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organization memberships for the authenticated user"
* Operation id: orgs/list-memberships-for-authenticated-user
* Parameter: state, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS orgs_list_memberships_for_auth
    IMPORTING
      state TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get an organization membership for the authenticated user"
* Operation id: orgs/get-membership-for-authenticated-user
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/org-membership
* Response: 403
* Response: 404
  METHODS orgs_get_membership_for_authen
    IMPORTING
      org TYPE string
    RETURNING VALUE(return_data) TYPE org_membership
    RAISING cx_static_check.

* PATCH - "Update an organization membership for the authenticated user"
* Operation id: orgs/update-membership-for-authenticated-user
* Parameter: org, required, path
* Response: 200
*     application/json, #/components/schemas/org-membership
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyorgs_update_membership_for
  METHODS orgs_update_membership_for_aut
    IMPORTING
      org TYPE string
      body TYPE bodyorgs_update_membership_for
    RETURNING VALUE(return_data) TYPE org_membership
    RAISING cx_static_check.

* GET - "List user migrations"
* Operation id: migrations/list-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS migrations_list_for_authentica
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Start a user migration"
* Operation id: migrations/start-for-authenticated-user
* Response: 201
*     application/json, #/components/schemas/migration
* Response: 304
* Response: 401
* Response: 403
* Response: 422
* Body ref: #/components/schemas/bodymigrations_start_for_authe
  METHODS migrations_start_for_authentic
    IMPORTING
      body TYPE bodymigrations_start_for_authe
    RETURNING VALUE(return_data) TYPE migration
    RAISING cx_static_check.

* GET - "Get a user migration status"
* Operation id: migrations/get-status-for-authenticated-user
* Parameter: exclude, optional, query
* Parameter: migration_id, required, path
* Response: 200
*     application/json, #/components/schemas/migration
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_get_status_for_auth
    IMPORTING
      exclude TYPE string OPTIONAL
      migration_id TYPE i
    RETURNING VALUE(return_data) TYPE migration
    RAISING cx_static_check.

* GET - "Download a user migration archive"
* Operation id: migrations/get-archive-for-authenticated-user
* Parameter: migration_id, required, path
* Response: 302
* Response: 304
* Response: 401
* Response: 403
  METHODS migrations_get_archive_for_aut
    IMPORTING
      migration_id TYPE i
    RAISING cx_static_check.

* DELETE - "Delete a user migration archive"
* Operation id: migrations/delete-archive-for-authenticated-user
* Parameter: migration_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_delete_archive_fo01
    IMPORTING
      migration_id TYPE i
    RAISING cx_static_check.

* DELETE - "Unlock a user repository"
* Operation id: migrations/unlock-repo-for-authenticated-user
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_unlock_repo_for_aut
    IMPORTING
      migration_id TYPE i
      repo_name TYPE string
    RAISING cx_static_check.

* GET - "List repositories for a user migration"
* Operation id: migrations/list-repos-for-user
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS migrations_list_repos_for_user
    IMPORTING
      migration_id TYPE i
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organizations for the authenticated user"
* Operation id: orgs/list-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS orgs_list_for_authenticated_us
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* POST - "Create a user project"
* Operation id: projects/create-for-authenticated-user
* Response: 201
*     application/json, #/components/schemas/project
* Response: 304
* Response: 401
* Response: 403
* Response: 415
* Response: 422
* Body ref: #/components/schemas/bodyprojects_create_for_authen
  METHODS projects_create_for_authentica
    IMPORTING
      body TYPE bodyprojects_create_for_authen
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* GET - "List public email addresses for the authenticated user"
* Operation id: users/list-public-emails-for-authenticated
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_public_emails_for_a
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List repositories for the authenticated user"
* Operation id: repos/list-for-authenticated-user
* Parameter: visibility, optional, query
* Parameter: affiliation, optional, query
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS repos_list_for_authenticated_u
    IMPORTING
      visibility TYPE string DEFAULT 'all'
      affiliation TYPE string DEFAULT 'owner,collaborator,organization_member'
      type TYPE string DEFAULT 'all'
      sort TYPE string DEFAULT 'full_name'
      direction TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
    RAISING cx_static_check.

* POST - "Create a repository for the authenticated user"
* Operation id: repos/create-for-authenticated-user
* Response: 201
*     application/json, #/components/schemas/repository
* Response: 304
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 422
* Body ref: #/components/schemas/bodyrepos_create_for_authentic
  METHODS repos_create_for_authenticated
    IMPORTING
      body TYPE bodyrepos_create_for_authentic
    RETURNING VALUE(return_data) TYPE repository
    RAISING cx_static_check.

* GET - "List repository invitations for the authenticated user"
* Operation id: repos/list-invitations-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS repos_list_invitations_for_aut
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* PATCH - "Accept a repository invitation"
* Operation id: repos/accept-invitation
* Parameter: invitation_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Response: 409
  METHODS repos_accept_invitation
    IMPORTING
      invitation_id TYPE i
    RAISING cx_static_check.

* DELETE - "Decline a repository invitation"
* Operation id: repos/decline-invitation
* Parameter: invitation_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Response: 409
  METHODS repos_decline_invitation
    IMPORTING
      invitation_id TYPE i
    RAISING cx_static_check.

* GET - "List repositories starred by the authenticated user"
* Operation id: activity/list-repos-starred-by-authenticated-user
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
*     application/vnd.github.v3.star+json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_list_repos_starred_by
    IMPORTING
      sort TYPE string DEFAULT 'created'
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a repository is starred by the authenticated user"
* Operation id: activity/check-repo-is-starred-by-authenticated-user
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json, #/components/schemas/basic-error
  METHODS activity_check_repo_is_starred
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* PUT - "Star a repository for the authenticated user"
* Operation id: activity/star-repo-for-authenticated-user
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS activity_star_repo_for_authent
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* DELETE - "Unstar a repository for the authenticated user"
* Operation id: activity/unstar-repo-for-authenticated-user
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS activity_unstar_repo_for_authe
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.

* GET - "List repositories watched by the authenticated user"
* Operation id: activity/list-watched-repos-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_list_watched_repos_fo
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List teams for the authenticated user"
* Operation id: teams/list-for-authenticated-user
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 304
* Response: 403
* Response: 404
  METHODS teams_list_for_authenticated_u
    IMPORTING
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List users"
* Operation id: users/list
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json, array
* Response: 304
  METHODS users_list
    IMPORTING
      since TYPE i OPTIONAL
      per_page TYPE i DEFAULT 30
    RAISING cx_static_check.

* GET - "Get a user"
* Operation id: users/get-by-username
* Parameter: username, required, path
* Response: 200
*     application/json, 
* Response: 404
  METHODS users_get_by_username
    IMPORTING
      username TYPE string
    RAISING cx_static_check.

* GET - "List events for the authenticated user"
* Operation id: activity/list-events-for-authenticated-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_events_for_authe
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organization events for the authenticated user"
* Operation id: activity/list-org-events-for-authenticated-user
* Parameter: username, required, path
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_org_events_for_a
    IMPORTING
      username TYPE string
      org TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List public events for a user"
* Operation id: activity/list-public-events-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_public_events_01
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List followers of a user"
* Operation id: users/list-followers-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS users_list_followers_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List the people a user follows"
* Operation id: users/list-following-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS users_list_following_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Check if a user follows another user"
* Operation id: users/check-following-for-user
* Parameter: target_user, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS users_check_following_for_user
    IMPORTING
      target_user TYPE string
      username TYPE string
    RAISING cx_static_check.

* GET - "List gists for a user"
* Operation id: gists/list-for-user
* Parameter: username, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 422
  METHODS gists_list_for_user
    IMPORTING
      username TYPE string
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List GPG keys for a user"
* Operation id: users/list-gpg-keys-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS users_list_gpg_keys_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get contextual information for a user"
* Operation id: users/get-context-for-user
* Parameter: subject_type, optional, query
* Parameter: subject_id, optional, query
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/hovercard
* Response: 404
* Response: 422
  METHODS users_get_context_for_user
    IMPORTING
      subject_type TYPE string OPTIONAL
      subject_id TYPE string OPTIONAL
      username TYPE string
    RETURNING VALUE(return_data) TYPE hovercard
    RAISING cx_static_check.

* GET - "Get a user installation for the authenticated app"
* Operation id: apps/get-user-installation
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/installation
  METHODS apps_get_user_installation
    IMPORTING
      username TYPE string
    RETURNING VALUE(return_data) TYPE installation
    RAISING cx_static_check.

* GET - "List public keys for a user"
* Operation id: users/list-public-keys-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS users_list_public_keys_for_use
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List organizations for a user"
* Operation id: orgs/list-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS orgs_list_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List user projects"
* Operation id: projects/list-for-user
* Parameter: state, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
* Response: 415
* Response: 422
  METHODS projects_list_for_user
    IMPORTING
      state TYPE string DEFAULT 'open'
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List events received by the authenticated user"
* Operation id: activity/list-received-events-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_received_events_
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List public events received by a user"
* Operation id: activity/list-received-public-events-for-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_received_public_
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List repositories for a user"
* Operation id: repos/list-for-user
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS repos_list_for_user
    IMPORTING
      type TYPE string DEFAULT 'owner'
      sort TYPE string DEFAULT 'full_name'
      direction TYPE string OPTIONAL
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get GitHub Actions billing for a user"
* Operation id: billing/get-github-actions-billing-user
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_b02
    IMPORTING
      username TYPE string
    RETURNING VALUE(return_data) TYPE actions_billing_usage
    RAISING cx_static_check.

* GET - "Get GitHub Packages billing for a user"
* Operation id: billing/get-github-packages-billing-user
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_02
    IMPORTING
      username TYPE string
    RETURNING VALUE(return_data) TYPE packages_billing_usage
    RAISING cx_static_check.

* GET - "Get shared storage billing for a user"
* Operation id: billing/get-shared-storage-billing-user
* Parameter: username, required, path
* Response: 200
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_b02
    IMPORTING
      username TYPE string
    RETURNING VALUE(return_data) TYPE combined_billing_usage
    RAISING cx_static_check.

* GET - "List repositories starred by a user"
* Operation id: activity/list-repos-starred-by-user
* Parameter: username, required, path
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
*     application/vnd.github.v3.star+json, array
  METHODS activity_list_repos_starred_01
    IMPORTING
      username TYPE string
      sort TYPE string DEFAULT 'created'
      direction TYPE string DEFAULT 'desc'
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "List repositories watched by a user"
* Operation id: activity/list-repos-watched-by-user
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json, array
  METHODS activity_list_repos_watched_by
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30
      page TYPE i DEFAULT 1
    RAISING cx_static_check.

* GET - "Get the Zen of GitHub"
* Operation id: meta/get-zen
* Response: 200
*     text/plain, string
  METHODS meta_get_zen
    RAISING cx_static_check.

ENDINTERFACE.