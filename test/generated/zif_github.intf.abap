INTERFACE zif_github.
* Generated by abap-openapi-client
* GitHub v3 REST API

* GET - "GitHub API Root"
* Response: 200, response
*     application/json,
  METHODS meta_root
    RAISING cx_static_check.
* GET - "Get the authenticated app"
* Response: 200, response
*     application/json, #/components/schemas/integration
  METHODS apps_get_authenticated
    RAISING cx_static_check.
* POST - "Create a GitHub App from a manifest"
* Parameter: code, required, path
* Response: 201, response
*     application/json,
* Response: 404,
* Response: 422,
  METHODS apps_create_from_manifest
    IMPORTING
      code TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for an app"
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS apps_get_webhook_config_for_ap
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for an app"
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS apps_update_webhook_config_for
    RAISING cx_static_check.
* GET - "List installations for the authenticated app"
* Parameter: outdated, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Response: 200, The permissions the installation has are included under the `permissions` key.
*     application/json,
  METHODS apps_list_installations
    IMPORTING
      outdated TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
      since TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an installation for the authenticated app"
* Parameter: installation_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/installation
* Response: 404,
* Response: 415,
  METHODS apps_get_installation
    IMPORTING
      installation_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an installation for the authenticated app"
* Parameter: installation_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS apps_delete_installation
    IMPORTING
      installation_id TYPE string
    RAISING cx_static_check.
* POST - "Create an installation access token for an app"
* Parameter: installation_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/installation-token
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS apps_create_installation_acces
    IMPORTING
      installation_id TYPE string
    RAISING cx_static_check.
* PUT - "Suspend an app installation"
* Parameter: installation_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS apps_suspend_installation
    IMPORTING
      installation_id TYPE string
    RAISING cx_static_check.
* DELETE - "Unsuspend an app installation"
* Parameter: installation_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS apps_unsuspend_installation
    IMPORTING
      installation_id TYPE string
    RAISING cx_static_check.
* GET - "List your grants"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS oauth_authorizations_list_gran
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a single grant"
* Parameter: grant_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/application-grant
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS oauth_authorizations_get_grant
    IMPORTING
      grant_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a grant"
* Parameter: grant_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS oauth_authorizations_delete_gr
    IMPORTING
      grant_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an app authorization"
* Response: 204, Empty response
* Response: 422,
  METHODS apps_delete_authorization
    RAISING cx_static_check.
* DELETE - "Revoke a grant for an application"
* Response: 204, Empty response
  METHODS apps_revoke_grant_for_applicat
    RAISING cx_static_check.
* POST - "Check a token"
* Response: 200, response
*     application/json, #/components/schemas/authorization
* Response: 404,
* Response: 422,
  METHODS apps_check_token
    RAISING cx_static_check.
* PATCH - "Reset a token"
* Response: 200, response
*     application/json, #/components/schemas/authorization
* Response: 422,
  METHODS apps_reset_token
    RAISING cx_static_check.
* DELETE - "Delete an app token"
* Response: 204, Empty response
* Response: 422,
  METHODS apps_delete_token
    RAISING cx_static_check.
* POST - "Create a scoped access token"
* Response: 200, response
*     application/json, #/components/schemas/authorization
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS apps_scope_token
    RAISING cx_static_check.
* GET - "Check an authorization"
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS apps_check_authorization
    RAISING cx_static_check.
* POST - "Reset an authorization"
* Response: 200, response
*     application/json, #/components/schemas/authorization
  METHODS apps_reset_authorization
    RAISING cx_static_check.
* DELETE - "Revoke an authorization for an application"
* Response: 204, Empty response
  METHODS apps_revoke_authorization_for_
    RAISING cx_static_check.
* GET - "Get an app"
* Parameter: app_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/integration
* Response: 403,
* Response: 404,
* Response: 415,
  METHODS apps_get_by_slug
    IMPORTING
      app_slug TYPE string
    RAISING cx_static_check.
* GET - "List your authorizations"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS oauth_authorizations_list_auth
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a new authorization"
* Response: 201, response
*     application/json, #/components/schemas/authorization
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 410,
* Response: 422,
  METHODS oauth_authorizations_create_au
    RAISING cx_static_check.
* PUT - "Get-or-create an authorization for a specific app"
* Response: 200, Response if returning an existing token
*     application/json, #/components/schemas/authorization
* Response: 201, **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
*     application/json, #/components/schemas/authorization
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS oauth_authorizations_get_or_cr
    RAISING cx_static_check.
* PUT - "Get-or-create an authorization for a specific app and fingerprint"
* Parameter: fingerprint, required, path
* Response: 200, Response if returning an existing token
*     application/json, #/components/schemas/authorization
* Response: 201, Response if returning a new token
*     application/json, #/components/schemas/authorization
* Response: 422,
  METHODS oauth_authorizations_get_or_01
    IMPORTING
      fingerprint TYPE string
    RAISING cx_static_check.
* GET - "Get a single authorization"
* Parameter: authorization_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/authorization
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS oauth_authorizations_get_autho
    IMPORTING
      authorization_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an existing authorization"
* Parameter: authorization_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/authorization
* Response: 422,
  METHODS oauth_authorizations_update_au
    IMPORTING
      authorization_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an authorization"
* Parameter: authorization_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS oauth_authorizations_delete_au
    IMPORTING
      authorization_id TYPE string
    RAISING cx_static_check.
* GET - "Get all codes of conduct"
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 415,
  METHODS codes_of_conduct_get_all_codes
    RAISING cx_static_check.
* GET - "Get a code of conduct"
* Parameter: key, required, path
* Response: 200, response
*     application/json, #/components/schemas/code-of-conduct
* Response: 304,
* Response: 404,
* Response: 415,
  METHODS codes_of_conduct_get_conduct_c
    IMPORTING
      key TYPE string
    RAISING cx_static_check.
* POST - "Create a content attachment"
* Parameter: content_reference_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/content-reference-attachment
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 415,
* Response: 422,
  METHODS apps_create_content_attachment
    IMPORTING
      content_reference_id TYPE string
    RAISING cx_static_check.
* GET - "Get emojis"
* Response: 200, response
*     application/json,
* Response: 304,
  METHODS emojis_get
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-enterprise-permissions
  METHODS enterprise_admin_get_github_ac
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for an enterprise"
* Parameter: enterprise, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_set_github_ac
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List selected organizations enabled for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_selected
    IMPORTING
      enterprise TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set selected organizations enabled for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_set_selected_
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Enable a selected organization for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_enable_select
    IMPORTING
      enterprise TYPE string
      org_id TYPE string
    RAISING cx_static_check.
* DELETE - "Disable a selected organization for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_disable_selec
    IMPORTING
      enterprise TYPE string
      org_id TYPE string
    RAISING cx_static_check.
* GET - "Get allowed actions for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json, #/components/schemas/selected-actions
  METHODS enterprise_admin_get_allowed_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for an enterprise"
* Parameter: enterprise, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_set_allowed_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runner groups for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_self_hos
    IMPORTING
      enterprise TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Response: 201, response
*     application/json, #/components/schemas/runner-groups-enterprise
  METHODS enterprise_admin_create_self_h
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner-groups-enterprise
  METHODS enterprise_admin_get_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner-groups-enterprise
  METHODS enterprise_admin_update_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner group from an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_delete_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* GET - "List organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_org_acce
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set organization access for a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_set_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Add organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_add_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      org_id TYPE string
    RAISING cx_static_check.
* DELETE - "Remove organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_remove_org_ac
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      org_id TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners in a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_self_h01
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set self-hosted runners in a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_set_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Add a self-hosted runner to a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_add_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a self-hosted runner from a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_remove_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_self_h02
    IMPORTING
      enterprise TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json,
  METHODS enterprise_admin_list_runner_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for an enterprise"
* Parameter: enterprise, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS enterprise_admin_create_regist
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for an enterprise"
* Parameter: enterprise, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS enterprise_admin_create_remove
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner
  METHODS enterprise_admin_get_self_ho01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_delete_self01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* GET - "Get the audit log for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Response: 200, Response
*     application/json,
  METHODS audit_log_get_audit_log
    IMPORTING
      enterprise TYPE string
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_bil
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_bi
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200, response
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_bil
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List public events"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 503,
  METHODS activity_list_public_events
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get feeds"
* Response: 200, response
*     application/json, #/components/schemas/feed
  METHODS activity_get_feeds
    RAISING cx_static_check.
* GET - "List gists for the authenticated user"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
  METHODS gists_list
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a gist"
* Response: 201, response
*     application/json, #/components/schemas/gist-simple
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS gists_create
    RAISING cx_static_check.
* GET - "List public gists"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 422,
  METHODS gists_list_public
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List starred gists"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS gists_list_starred
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a gist"
* Parameter: gist_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gist-simple
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_get
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a gist"
* Parameter: gist_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gist-simple
* Response: 404,
* Response: 422,
  METHODS gists_update
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a gist"
* Parameter: gist_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_delete
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "List gist comments"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_list_comments
    IMPORTING
      gist_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a gist comment"
* Parameter: gist_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/gist-comment
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_create_comment
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gist-comment
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_get_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gist-comment
* Response: 404,
  METHODS gists_update_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_delete_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List gist commits"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_list_commits
    IMPORTING
      gist_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List gist forks"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_list_forks
    IMPORTING
      gist_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Fork a gist"
* Parameter: gist_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/base-gist
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS gists_fork
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Check if a gist is starred"
* Parameter: gist_id, required, path
* Response: 204, Response if gist is starred
* Response: 304,
* Response: 403,
* Response: 404, Response if gist is not starred
*     application/json,
  METHODS gists_check_is_starred
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* PUT - "Star a gist"
* Parameter: gist_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_star
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* DELETE - "Unstar a gist"
* Parameter: gist_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS gists_unstar
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get a gist revision"
* Parameter: sha, required, path
* Parameter: gist_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gist-simple
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS gists_get_revision
    IMPORTING
      sha TYPE string
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get all gitignore templates"
* Response: 200, response
*     application/json,
* Response: 304,
  METHODS gitignore_get_all_templates
    RAISING cx_static_check.
* GET - "Get a gitignore template"
* Parameter: name, required, path
* Response: 200, response
*     application/json, #/components/schemas/gitignore-template
* Response: 304,
  METHODS gitignore_get_template
    IMPORTING
      name TYPE string
    RAISING cx_static_check.
* GET - "List repositories accessible to the app installation"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS apps_list_repos_accessible_to_
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Revoke an installation access token"
* Response: 204, Empty response
  METHODS apps_revoke_installation_acces
    RAISING cx_static_check.
* GET - "List issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: collab, optional, query
* Parameter: orgs, optional, query
* Parameter: owned, optional, query
* Parameter: pulls, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 404,
* Response: 422,
  METHODS issues_list
    IMPORTING
      filter TYPE string OPTIONAL
      state TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      collab TYPE string OPTIONAL
      orgs TYPE string OPTIONAL
      owned TYPE string OPTIONAL
      pulls TYPE string OPTIONAL
      labels TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get all commonly used licenses"
* Parameter: featured, optional, query
* Parameter: per_page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
  METHODS licenses_get_all_commonly_used
    IMPORTING
      featured TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a license"
* Parameter: license, required, path
* Response: 200, response
*     application/json, #/components/schemas/license
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS licenses_get
    IMPORTING
      license TYPE string
    RAISING cx_static_check.
* POST - "Render a Markdown document"
* Response: 200, response
* Response: 304,
  METHODS markdown_render
    RAISING cx_static_check.
* POST - "Render a Markdown document in raw mode"
* Response: 200, response
*     text/html,
* Response: 304,
  METHODS markdown_render_raw
    RAISING cx_static_check.
* GET - "Get a subscription plan for an account"
* Parameter: account_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/marketplace-purchase
* Response: 401,
* Response: 404, Response when the account has not purchased the listing
*     application/json, #/components/schemas/basic-error
  METHODS apps_get_subscription_plan_for
    IMPORTING
      account_id TYPE string
    RAISING cx_static_check.
* GET - "List plans"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 401,
* Response: 404,
  METHODS apps_list_plans
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List accounts for a plan"
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 401,
* Response: 404,
* Response: 422,
  METHODS apps_list_accounts_for_plan
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE string
      sort TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a subscription plan for an account (stubbed)"
* Parameter: account_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/marketplace-purchase
* Response: 401,
* Response: 404, Response when the account has not purchased the listing
  METHODS apps_get_subscription_plan_f01
    IMPORTING
      account_id TYPE string
    RAISING cx_static_check.
* GET - "List plans (stubbed)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 401,
  METHODS apps_list_plans_stubbed
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List accounts for a plan (stubbed)"
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 401,
  METHODS apps_list_accounts_for_plan_st
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE string
      sort TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub meta information"
* Response: 200, response
*     application/json, #/components/schemas/api-overview
* Response: 304,
  METHODS meta_get
    RAISING cx_static_check.
* GET - "List public events for a network of repositories"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 301,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS activity_list_public_events_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List notifications for the authenticated user"
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS activity_list_notifications_fo
    IMPORTING
      all TYPE string OPTIONAL
      participating TYPE string OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Mark notifications as read"
* Response: 202, response
*     application/json,
* Response: 205, response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_mark_notifications_as
    RAISING cx_static_check.
* GET - "Get a thread"
* Parameter: thread_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/thread
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_get_thread
    IMPORTING
      thread_id TYPE string
    RAISING cx_static_check.
* PATCH - "Mark a thread as read"
* Parameter: thread_id, required, path
* Response: 205, response
* Response: 304,
* Response: 403,
  METHODS activity_mark_thread_as_read
    IMPORTING
      thread_id TYPE string
    RAISING cx_static_check.
* GET - "Get a thread subscription for the authenticated user"
* Parameter: thread_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/thread-subscription
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_get_thread_subscripti
    IMPORTING
      thread_id TYPE string
    RAISING cx_static_check.
* PUT - "Set a thread subscription"
* Parameter: thread_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/thread-subscription
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_set_thread_subscripti
    IMPORTING
      thread_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a thread subscription"
* Parameter: thread_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_delete_thread_subscri
    IMPORTING
      thread_id TYPE string
    RAISING cx_static_check.
* GET - "Get Octocat"
* Parameter: s, optional, query
* Response: 200, response
*     application/octocat-stream,
  METHODS meta_get_octocat
    IMPORTING
      s TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations"
* Parameter: per_page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
  METHODS orgs_list
    IMPORTING
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/organization-full
* Response: 404,
  METHODS orgs_get
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/organization-full
* Response: 409,
* Response: 415,
* Response: 422, Validation Failed
*     application/json,
  METHODS orgs_update
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-organization-permissions
  METHODS actions_get_github_actions_per
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for an organization"
* Parameter: org, required, path
* Response: 204, Empty response
  METHODS actions_set_github_actions_per
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List selected repositories enabled for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_selected_reposito
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set selected repositories enabled for GitHub Actions in an organization"
* Parameter: org, required, path
* Response: 204, Empty response
  METHODS actions_set_selected_repositor
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Enable a selected repository for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
  METHODS actions_enable_selected_reposi
    IMPORTING
      org TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* DELETE - "Disable a selected repository for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
  METHODS actions_disable_selected_repos
    IMPORTING
      org TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* GET - "Get allowed actions for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/selected-actions
  METHODS actions_get_allowed_actions_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for an organization"
* Parameter: org, required, path
* Response: 204, Empty response
  METHODS actions_set_allowed_actions_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runner groups for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_self_hosted_runne
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a self-hosted runner group for an organization"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/runner-groups-org
  METHODS actions_create_self_hosted_run
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner-groups-org
  METHODS actions_get_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a self-hosted runner group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner-groups-org
  METHODS actions_update_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner group from an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS actions_delete_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* GET - "List repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200, response
*     application/json,
  METHODS actions_list_repo_access_to_se
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Set repository access for a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS actions_set_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Add repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
  METHODS actions_add_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* DELETE - "Remove repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
  METHODS actions_remove_repo_access_to_
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners in a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_self_hosted_run01
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set self-hosted runners in a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204, Empty response
  METHODS actions_set_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Add a self-hosted runner to a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS actions_add_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a self-hosted runner from a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS actions_remove_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_self_hosted_run02
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json,
  METHODS actions_list_runner_applicatio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for an organization"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_registration_to
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for an organization"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_remove_token_fo
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for an organization"
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner
  METHODS actions_get_self_hosted_runn01
    IMPORTING
      org TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from an organization"
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS actions_delete_self_hosted_r01
    IMPORTING
      org TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* GET - "List organization secrets"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_org_secrets
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization public key"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-public-key
  METHODS actions_get_org_public_key
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200, response
*     application/json, #/components/schemas/organization-actions-secret
  METHODS actions_get_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Create or update an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 201, Response when creating a secret
* Response: 204, Response when updating a secret
  METHODS actions_create_or_update_org_s
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204, Empty response
  METHODS actions_delete_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "List selected repositories for an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200, response
*     application/json,
  METHODS actions_list_selected_repos_fo
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Set selected repositories for an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204, Empty response
  METHODS actions_set_selected_repos_for
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Add selected repository to an organization secret"
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204, Response when repository was added to the selected list
* Response: 409, Response when visibility type is not set to selected
  METHODS actions_add_selected_repo_to_o
    IMPORTING
      repository_id TYPE string
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Remove selected repository from an organization secret"
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204, Response when repository was removed from the selected list
* Response: 409, Response when visibility type not set to selected
  METHODS actions_remove_selected_repo_f
    IMPORTING
      repository_id TYPE string
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "Get the audit log for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Response: 200, Response
*     application/json,
  METHODS orgs_get_audit_log
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List users blocked by an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json,
* Response: 415,
  METHODS orgs_list_blocked_users
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Check if a user is blocked by an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, If the user is blocked:
* Response: 404, If the user is not blocked:
*     application/json, #/components/schemas/basic-error
  METHODS orgs_check_blocked_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Block a user from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 422,
  METHODS orgs_block_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unblock a user from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
  METHODS orgs_unblock_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List SAML SSO authorizations for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json,
  METHODS orgs_list_saml_sso_authorizati
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a SAML SSO authorization for an organization"
* Parameter: credential_id, required, path
* Parameter: org, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS orgs_remove_saml_sso_authoriza
    IMPORTING
      credential_id TYPE string
      org TYPE string
    RAISING cx_static_check.
* GET - "List public organization events"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_public_org_event
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List failed organization invitations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS orgs_list_failed_invitations
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organization webhooks"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS orgs_list_webhooks
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization webhook"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/org-hook
* Response: 404,
* Response: 422,
  METHODS orgs_create_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization webhook"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-hook
* Response: 404,
  METHODS orgs_get_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization webhook"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-hook
* Response: 404,
* Response: 422,
  METHODS orgs_update_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an organization webhook"
* Parameter: org, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS orgs_delete_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for an organization"
* Parameter: org, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS orgs_get_webhook_config_for_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for an organization"
* Parameter: org, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS orgs_update_webhook_config_for
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Ping an organization webhook"
* Parameter: org, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS orgs_ping_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization installation for the authenticated app"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/installation
  METHODS apps_get_org_installation
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List app installations for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS orgs_list_app_installations
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restrictions_
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
* Response: 422,
  METHODS interactions_set_restrictions_
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 204, Empty response
  METHODS interactions_remove_restrictio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List pending organization invitations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS orgs_list_pending_invitations
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization invitation"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/organization-invitation
* Response: 404,
* Response: 422,
  METHODS orgs_create_invitation
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Cancel an organization invitation"
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Response: 204, Empty response
* Response: 404,
* Response: 422,
  METHODS orgs_cancel_invitation
    IMPORTING
      org TYPE string
      invitation_id TYPE string
    RAISING cx_static_check.
* GET - "List organization invitation teams"
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS orgs_list_invitation_teams
    IMPORTING
      org TYPE string
      invitation_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organization issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: org, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS issues_list_for_org
    IMPORTING
      filter TYPE string OPTIONAL
      state TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      org TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organization members"
* Parameter: filter, optional, query
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 302, Response if requester is not an organization member
* Response: 422,
  METHODS orgs_list_members
    IMPORTING
      filter TYPE string OPTIONAL
      role TYPE string OPTIONAL
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Response if requester is an organization member and user is a member
* Response: 302, Response if requester is not an organization member
* Response: 404, Response if requester is an organization member and user is not a member
  METHODS orgs_check_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove an organization member"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403,
  METHODS orgs_remove_member
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "Get organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-membership
* Response: 403,
* Response: 404,
  METHODS orgs_get_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Set organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-membership
* Response: 403,
* Response: 422,
  METHODS orgs_set_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403,
* Response: 404,
  METHODS orgs_remove_membership_for_use
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization migrations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS migrations_list_for_org
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Start an organization migration"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/migration
* Response: 404,
* Response: 422,
  METHODS migrations_start_for_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization migration status"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 200, *   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.
*     application/json, #/components/schemas/migration
* Response: 404,
  METHODS migrations_get_status_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE string
    RAISING cx_static_check.
* GET - "Download an organization migration archive"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 302, response
* Response: 404,
  METHODS migrations_download_archive_fo
    IMPORTING
      org TYPE string
      migration_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an organization migration archive"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS migrations_delete_archive_for_
    IMPORTING
      org TYPE string
      migration_id TYPE string
    RAISING cx_static_check.
* DELETE - "Unlock an organization repository"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS migrations_unlock_repo_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE string
      repo_name TYPE string
    RAISING cx_static_check.
* GET - "List repositories in an organization migration"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS migrations_list_repos_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List outside collaborators for an organization"
* Parameter: filter, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS orgs_list_outside_collaborator
    IMPORTING
      filter TYPE string OPTIONAL
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Convert an organization member to outside collaborator"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 202, User is getting converted asynchronously
* Response: 204, User was converted
* Response: 403, response
*     application/json,
* Response: 404,
  METHODS orgs_convert_member_to_outside
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove outside collaborator from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 422, Response if user is a member of the organization
*     application/json,
  METHODS orgs_remove_outside_collaborat
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization projects"
* Parameter: state, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS projects_list_for_org
    IMPORTING
      state TYPE string OPTIONAL
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization project"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/project
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
  METHODS projects_create_for_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List public organization members"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS orgs_list_public_members
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check public organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Response if user is a public member
* Response: 404, Response if user is not a public member
  METHODS orgs_check_public_membership_f
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Set public organization membership for the authenticated user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403,
  METHODS orgs_set_public_membership_for
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove public organization membership for the authenticated user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204, Empty response
  METHODS orgs_remove_public_membership_
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization repositories"
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_for_org
    IMPORTING
      type TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization repository"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/repository
* Response: 403,
* Response: 422,
  METHODS repos_create_in_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_b01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for an organization"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_b01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json, #/components/schemas/group-mapping
  METHODS teams_list_idp_groups_for_org
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List teams"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 403,
  METHODS teams_list
    IMPORTING
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a team"
* Parameter: org, required, path
* Response: 201, response
*     application/json, #/components/schemas/team-full
* Response: 403,
* Response: 422,
  METHODS teams_create
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a team by name"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-full
* Response: 404,
  METHODS teams_get_by_name
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201, response
*     application/json, #/components/schemas/team-full
  METHODS teams_update_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS teams_delete_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List discussions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_discussions_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_create_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "Get a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_get_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_update_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS teams_delete_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List discussion comments"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_discussion_comments
    IMPORTING
      org TYPE string
      team_slug TYPE string
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_create_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "Get a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_get_discussion_comment_i
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_update_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS teams_delete_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a team discussion comment"
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS reactions_list_for_team_discus
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201, response
*     application/json, #/components/schemas/reaction
  METHODS reactions_create_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete team discussion comment reaction"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a team discussion"
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS reactions_list_for_team_disc01
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201, response
*     application/json, #/components/schemas/reaction
  METHODS reactions_create_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete team discussion reaction"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List pending team invitations"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_pending_invitations
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List team members"
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_members_in_org
    IMPORTING
      role TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-membership
* Response: 404, Response if user has no team membership
  METHODS teams_get_membership_for_user_
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-membership
* Response: 403, Response if team synchronization is set up
* Response: 422, Response if you attempt to add an organization to a team
*     application/json,
  METHODS teams_add_or_update_membership
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403, Response if team synchronization is set up
  METHODS teams_remove_membership_for_us
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List team projects"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_projects_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a project"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-project
* Response: 404, Response if project is not managed by this team
  METHODS teams_check_permissions_for_pr
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team project permissions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
* Response: 403, Response if the project is not owned by the organization
*     application/json,
  METHODS teams_add_or_update_project_pe
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a project from a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204, Empty response
  METHODS teams_remove_project_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List team repositories"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_repos_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a repository"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Alternative response with repository permissions
*     application/vnd.github.v3.repository+json, #/components/schemas/team-repository
* Response: 204, Response if team has permission for the repository
* Response: 404, Response if team does not have permission for the repository
  METHODS teams_check_permissions_for_re
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team repository permissions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS teams_add_or_update_repo_permi
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository from a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS teams_remove_repo_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/group-mapping
  METHODS teams_list_idp_groups_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Create or update IdP group connections"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200, response
*     application/json, #/components/schemas/group-mapping
  METHODS teams_create_or_update_idp_gro
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List child teams"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, Response if child teams exist
*     application/json,
  METHODS teams_list_child_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a project card"
* Parameter: card_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/project-card
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS projects_get_card
    IMPORTING
      card_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an existing project card"
* Parameter: card_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/project-card
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS projects_update_card
    IMPORTING
      card_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a project card"
* Parameter: card_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403, Forbidden
*     application/json,
* Response: 404,
  METHODS projects_delete_card
    IMPORTING
      card_id TYPE string
    RAISING cx_static_check.
* POST - "Move a project card"
* Parameter: card_id, required, path
* Response: 201, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403, Forbidden
*     application/json,
* Response: 422,
* Response: 503, Service Unavailable
*     application/json,
  METHODS projects_move_card
    IMPORTING
      card_id TYPE string
    RAISING cx_static_check.
* GET - "Get a project column"
* Parameter: column_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/project-column
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS projects_get_column
    IMPORTING
      column_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an existing project column"
* Parameter: column_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/project-column
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS projects_update_column
    IMPORTING
      column_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a project column"
* Parameter: column_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS projects_delete_column
    IMPORTING
      column_id TYPE string
    RAISING cx_static_check.
* GET - "List project cards"
* Parameter: archived_state, optional, query
* Parameter: column_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS projects_list_cards
    IMPORTING
      archived_state TYPE string OPTIONAL
      column_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a project card"
* Parameter: column_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/project-card
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422, Validation Failed
*     application/json,
* Response: 503, Service Unavailable
*     application/json,
  METHODS projects_create_card
    IMPORTING
      column_id TYPE string
    RAISING cx_static_check.
* POST - "Move a project column"
* Parameter: column_id, required, path
* Response: 201, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS projects_move_column
    IMPORTING
      column_id TYPE string
    RAISING cx_static_check.
* GET - "Get a project"
* Response: 200, response
*     application/json, #/components/schemas/project
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS projects_get
    RAISING cx_static_check.
* PATCH - "Update a project"
* Response: 200, response
*     application/json, #/components/schemas/project
* Response: 304,
* Response: 401,
* Response: 403, Forbidden
*     application/json,
* Response: 404, Response if the authenticated user does not have access to the project
* Response: 410,
* Response: 422,
  METHODS projects_update
    RAISING cx_static_check.
* DELETE - "Delete a project"
* Response: 204, Delete Success
* Response: 304,
* Response: 401,
* Response: 403, Forbidden
*     application/json,
* Response: 404,
* Response: 410,
  METHODS projects_delete
    RAISING cx_static_check.
* GET - "List project collaborators"
* Parameter: affiliation, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS projects_list_collaborators
    IMPORTING
      affiliation TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Add project collaborator"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS projects_add_collaborator
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove user as a collaborator"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS projects_remove_collaborator
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get project permission for a user"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/repository-collaborator-permission
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS projects_get_permission_for_us
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List project columns"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS projects_list_columns
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a project column"
* Response: 201, response
*     application/json, #/components/schemas/project-column
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS projects_create_column
    RAISING cx_static_check.
* GET - "Get rate limit status for the authenticated user"
* Response: 200, response
*     application/json, #/components/schemas/rate-limit-overview
* Response: 304,
* Response: 404,
  METHODS rate_limit_get
    RAISING cx_static_check.
* DELETE - "Delete a reaction (Legacy)"
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 410,
* Response: 415,
  METHODS reactions_delete_legacy
    RAISING cx_static_check.
* GET - "Get a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/full-repository
* Response: 301,
* Response: 403,
* Response: 404,
  METHODS repos_get
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/full-repository
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_update
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 403, If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
*     application/json,
* Response: 404,
  METHODS repos_delete
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List artifacts for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_artifacts_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an artifact"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/artifact
  METHODS actions_get_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an artifact"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 204, Empty response
  METHODS actions_delete_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE string
    RAISING cx_static_check.
* GET - "Download an artifact"
* Parameter: archive_format, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 302, response
  METHODS actions_download_artifact
    IMPORTING
      archive_format TYPE string
      owner TYPE string
      repo TYPE string
      artifact_id TYPE string
    RAISING cx_static_check.
* GET - "Get a job for a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 202, response
*     application/json, #/components/schemas/job
  METHODS actions_get_job_for_workflow_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE string
    RAISING cx_static_check.
* GET - "Download job logs for a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 302, response
  METHODS actions_download_job_logs_for_
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-repository-permissions
  METHODS actions_get_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_set_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get allowed actions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/selected-actions
  METHODS actions_get_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_set_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_self_hosted_run03
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
  METHODS actions_list_runner_applicat01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_registration_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/authentication-token
  METHODS actions_create_remove_token_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/runner
  METHODS actions_get_self_hosted_runn02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 204, Empty response
  METHODS actions_delete_self_hosted_r02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE string
    RAISING cx_static_check.
* GET - "List workflow runs for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: actor, optional, query
* Parameter: event, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_workflow_runs_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      actor TYPE string OPTIONAL
      event TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/workflow-run
  METHODS actions_get_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_delete_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List workflow run artifacts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_workflow_run_arti
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Cancel a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
  METHODS actions_cancel_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List jobs for a workflow run"
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_jobs_for_workflow
    IMPORTING
      filter TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Download workflow run logs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302, response
  METHODS actions_download_workflow_run_
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete workflow run logs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_delete_workflow_run_lo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Re-run a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
  METHODS actions_re_run_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get workflow run usage"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/workflow-run-usage
  METHODS actions_get_workflow_run_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository secrets"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_repo_secrets
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a repository public key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-public-key
  METHODS actions_get_repo_public_key
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-secret
  METHODS actions_get_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Create or update a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 201, Response when creating a secret
* Response: 204, Response when updating a secret
  METHODS actions_create_or_update_repo_
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 204, Empty response
  METHODS actions_delete_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "List repository workflows"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_repo_workflows
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/workflow
  METHODS actions_get_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Disable a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_disable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a workflow dispatch event"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_create_workflow_dispat
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS actions_enable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List workflow runs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: actor, optional, query
* Parameter: event, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS actions_list_workflow_runs
    IMPORTING
      owner TYPE string
      repo TYPE string
      actor TYPE string OPTIONAL
      event TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get workflow usage"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/workflow-usage
  METHODS actions_get_workflow_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List assignees"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS issues_list_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user can be assigned"
* Parameter: assignee, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
* Response: 404, Otherwise a `404` status code is returned.
*     application/json, #/components/schemas/basic-error
  METHODS issues_check_user_can_be_assig
    IMPORTING
      assignee TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable automated security fixes"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS repos_enable_automated_securit
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Disable automated security fixes"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS repos_disable_automated_securi
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List branches"
* Parameter: protected, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_list_branches
    IMPORTING
      protected TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/branch-with-protection
* Response: 404,
* Response: 415,
  METHODS repos_get_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/branch-protection
* Response: 404,
  METHODS repos_get_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Update branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch
* Response: 403,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS repos_update_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, Empty response
* Response: 403,
  METHODS repos_delete_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch-admin-enforced
  METHODS repos_get_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Set admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch-admin-enforced
  METHODS repos_set_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, No Content
* Response: 404,
  METHODS repos_delete_admin_branch_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/vnd.github.luke-cage-preview+json, #/components/schemas/protected-branch-pull-request-review
  METHODS repos_get_pull_request_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch-pull-request-review
* Response: 422,
  METHODS repos_update_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, No Content
* Response: 404,
  METHODS repos_delete_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch-admin-enforced
* Response: 404,
  METHODS repos_get_commit_signature_pro
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/protected-branch-admin-enforced
* Response: 404,
  METHODS repos_create_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, No Content
* Response: 404,
  METHODS repos_delete_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get status checks protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/status-check-policy
* Response: 404,
  METHODS repos_get_status_checks_protec
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update status check protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/status-check-policy
* Response: 404,
* Response: 422,
  METHODS repos_update_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove status check protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, No Content
  METHODS repos_remove_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get all status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_get_all_status_check_con
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_add_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 422,
  METHODS repos_set_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 422,
  METHODS repos_remove_status_check_cont
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json, #/components/schemas/branch-restriction-policy
* Response: 404,
  METHODS repos_get_access_restrictions
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204, No Content
  METHODS repos_delete_access_restrictio
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get apps with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_get_apps_with_access_to_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_add_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_set_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_remove_app_access_restri
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get teams with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_get_teams_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_add_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_set_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_remove_team_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get users with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_get_users_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_add_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_set_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS repos_remove_user_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Rename a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 201, response
*     application/json, #/components/schemas/branch-with-protection
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_rename_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/check-run
  METHODS checks_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/check-run
  METHODS checks_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/check-run
  METHODS checks_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE string
    RAISING cx_static_check.
* GET - "List check run annotations"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS checks_list_annotations
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/check-suite
  METHODS checks_create_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update repository preferences for check suites"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/check-suite-preference
  METHODS checks_set_suites_preferences
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/check-suite
  METHODS checks_get_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE string
    RAISING cx_static_check.
* GET - "List check runs in a check suite"
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS checks_list_for_suite
    IMPORTING
      filter TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE string
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Rerequest a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 201, response
  METHODS checks_rerequest_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE string
    RAISING cx_static_check.
* GET - "List code scanning alerts for a repository"
* Parameter: state, optional, query
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
* Response: 403, Response if github advanced security is not enabled for this repository
* Response: 404, Response if the ref does not match an existing ref
* Response: 503,
  METHODS code_scanning_list_alerts_for_
    IMPORTING
      state TYPE string OPTIONAL
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a code scanning alert"
* Parameter: alert_number, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/code-scanning-alert-code-scanning-alert
* Response: 403, Response if github advanced security is not enabled for this repository
* Response: 404,
* Response: 503,
  METHODS code_scanning_get_alert
    IMPORTING
      alert_number TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a code scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/code-scanning-alert-code-scanning-alert
* Response: 403, Response if the repository is archived, or if github advanced security is not enabled for this repository
* Response: 503, Response when code scanning is not available and you should try again at a later time
  METHODS code_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* GET - "List recent code scanning analyses for a repository"
* Parameter: ref, optional, query
* Parameter: tool_name, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
* Response: 403, Response if github advanced security is not enabled for this repository
  METHODS code_scanning_list_recent_anal
    IMPORTING
      ref TYPE string OPTIONAL
      tool_name TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Upload a SARIF file"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
* Response: 400, Response if the `sarif` field is invalid
* Response: 403, Response if the repository is archived, or if github advanced security is not enabled for this repository
* Response: 404, Response if `commit_sha` or `ref` cannot be found
* Response: 413, Response if the `sarif` field is too large
  METHODS code_scanning_upload_sarif
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository collaborators"
* Parameter: affiliation, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_list_collaborators
    IMPORTING
      affiliation TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user is a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204, Response if user is a collaborator
* Response: 404, Response if user is not a collaborator
  METHODS repos_check_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 201, Response when a new invitation is created
*     application/json, #/components/schemas/repository-invitation
* Response: 204, Response when person is already a collaborator
* Response: 403,
* Response: 422,
  METHODS repos_add_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204, Empty response
  METHODS repos_remove_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "Get repository permissions for a user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 200, Response if user has admin permissions
*     application/json, #/components/schemas/repository-collaborator-permission
* Response: 404,
  METHODS repos_get_collaborator_permiss
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List commit comments for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_commit_comments_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/commit-comment
* Response: 404,
  METHODS repos_get_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/commit-comment
* Response: 404,
  METHODS repos_update_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS repos_delete_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a commit comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 415,
  METHODS reactions_list_for_commit_comm
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, Reaction exists
*     application/json, #/components/schemas/reaction
* Response: 201, Reaction created
*     application/json, #/components/schemas/reaction
* Response: 415,
* Response: 422,
  METHODS reactions_create_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a commit comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List commits"
* Parameter: sha, optional, query
* Parameter: path, optional, query
* Parameter: author, optional, query
* Parameter: until, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 400,
* Response: 404,
* Response: 409,
* Response: 500,
  METHODS repos_list_commits
    IMPORTING
      sha TYPE string OPTIONAL
      path TYPE string OPTIONAL
      author TYPE string OPTIONAL
      until TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List branches for HEAD commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200, response
*     application/json,
* Response: 415,
* Response: 422,
  METHODS repos_list_branches_for_head_c
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List commit comments"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_comments_for_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 201, response
*     application/json, #/components/schemas/commit-comment
* Response: 403,
* Response: 422,
  METHODS repos_create_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List pull requests associated with a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 415,
  METHODS repos_list_pull_requests_assoc
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a commit"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/commit
* Response: 404,
* Response: 422,
* Response: 500,
  METHODS repos_get_commit
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List check runs for a Git reference"
* Parameter: ref, required, path
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS checks_list_for_ref
    IMPORTING
      ref TYPE string
      filter TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List check suites for a Git reference"
* Parameter: ref, required, path
* Parameter: app_id, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS checks_list_suites_for_ref
    IMPORTING
      ref TYPE string
      app_id TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get the combined status for a specific reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/combined-commit-status
* Response: 404,
  METHODS repos_get_combined_status_for_
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List commit statuses for a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 301,
  METHODS repos_list_commit_statuses_for
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get the code of conduct for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/code-of-conduct
  METHODS codes_of_conduct_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get community profile metrics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/community-profile
  METHODS repos_get_community_profile_me
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Compare two commits"
* Parameter: base, required, path
* Parameter: head, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/commit-comparison
* Response: 404,
* Response: 500,
  METHODS repos_compare_commits
    IMPORTING
      base TYPE string
      head TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get repository content"
* Parameter: path, required, path
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/vnd.github.v3.object, #/components/schemas/content-tree
*     application/json,
* Response: 302,
* Response: 403,
* Response: 404,
  METHODS repos_get_content
    IMPORTING
      path TYPE string
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Create or update file contents"
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/file-commit
* Response: 201, response
*     application/json, #/components/schemas/file-commit
* Response: 404,
* Response: 409,
* Response: 422,
  METHODS repos_create_or_update_file_co
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a file"
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/file-commit
* Response: 404,
* Response: 409,
* Response: 422,
* Response: 503,
  METHODS repos_delete_file
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository contributors"
* Parameter: anon, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, Response if repository contains content
*     application/json,
* Response: 204, Response if repository is empty
* Response: 403,
* Response: 404,
  METHODS repos_list_contributors
    IMPORTING
      anon TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List deployments"
* Parameter: sha, optional, query
* Parameter: ref, optional, query
* Parameter: task, optional, query
* Parameter: environment, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_deployments
    IMPORTING
      sha TYPE string OPTIONAL
      ref TYPE string OPTIONAL
      task TYPE string OPTIONAL
      environment TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/deployment
* Response: 202, Merged branch response
*     application/json,
* Response: 409, response
*     application/json,
* Response: 422,
  METHODS repos_create_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/deployment
* Response: 404,
  METHODS repos_get_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 204, Empty response
* Response: 404,
* Response: 422,
  METHODS repos_delete_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE string
    RAISING cx_static_check.
* GET - "List deployment statuses"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_list_deployment_statuses
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deployment status"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/deployment-status
* Response: 422,
  METHODS repos_create_deployment_status
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE string
    RAISING cx_static_check.
* GET - "Get a deployment status"
* Parameter: status_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/deployment-status
* Response: 404,
* Response: 415,
  METHODS repos_get_deployment_status
    IMPORTING
      status_id TYPE string
      owner TYPE string
      repo TYPE string
      deployment_id TYPE string
    RAISING cx_static_check.
* POST - "Create a repository dispatch event"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 422,
  METHODS repos_create_dispatch_event
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository events"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_repo_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List forks"
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 400,
  METHODS repos_list_forks
    IMPORTING
      sort TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a fork"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
*     application/json, #/components/schemas/repository
* Response: 400,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_create_fork
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a blob"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/short-blob
* Response: 403,
* Response: 404,
* Response: 409,
* Response: 422,
  METHODS git_create_blob
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a blob"
* Parameter: file_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/blob
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS git_get_blob
    IMPORTING
      file_sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/git-commit
* Response: 404,
* Response: 422,
  METHODS git_create_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200, response
*     application/json, #/components/schemas/git-commit
* Response: 404,
  METHODS git_get_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List matching references"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS git_list_matching_refs
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/git-ref
* Response: 404,
  METHODS git_get_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a reference"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/git-ref
* Response: 422,
  METHODS git_create_ref
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/git-ref
* Response: 422,
  METHODS git_update_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 422,
  METHODS git_delete_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a tag object"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/git-tag
* Response: 422,
  METHODS git_create_tag
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a tag"
* Parameter: tag_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/git-tag
* Response: 404,
  METHODS git_get_tag
    IMPORTING
      tag_sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a tree"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/git-tree
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS git_create_tree
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a tree"
* Parameter: tree_sha, required, path
* Parameter: recursive, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/git-tree
* Response: 404,
* Response: 422,
  METHODS git_get_tree
    IMPORTING
      tree_sha TYPE string
      recursive TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository webhooks"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_list_webhooks
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/hook
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_create_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/hook
* Response: 404,
  METHODS repos_get_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/hook
* Response: 404,
* Response: 422,
  METHODS repos_update_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS repos_delete_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS repos_get_webhook_config_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/webhook-config
  METHODS repos_update_webhook_config_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Ping a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS repos_ping_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Test the push repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS repos_test_push_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get an import status"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/import
* Response: 404,
  METHODS migrations_get_import_status
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Start an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/import
* Response: 404,
* Response: 422,
  METHODS migrations_start_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/import
  METHODS migrations_update_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Cancel an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS migrations_cancel_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get commit authors"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS migrations_get_commit_authors
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Map a commit author"
* Parameter: author_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/porter-author
* Response: 404,
* Response: 422,
  METHODS migrations_map_commit_author
    IMPORTING
      author_id TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get large files"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
  METHODS migrations_get_large_files
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update Git LFS preference"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/import
* Response: 422,
  METHODS migrations_set_lfs_preference
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository installation for the authenticated app"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/installation
* Response: 301,
* Response: 404,
  METHODS apps_get_repo_installation
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
* Response: 409, Conflict
  METHODS interactions_set_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 409, Conflict
  METHODS interactions_remove_restrict01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository invitations"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_invitations
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update a repository invitation"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/repository-invitation
  METHODS repos_update_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository invitation"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 204, Empty response
  METHODS repos_delete_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE string
    RAISING cx_static_check.
* GET - "List repository issues"
* Parameter: milestone, optional, query
* Parameter: state, optional, query
* Parameter: assignee, optional, query
* Parameter: creator, optional, query
* Parameter: mentioned, optional, query
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 301,
* Response: 404,
* Response: 422,
  METHODS issues_list_for_repo
    IMPORTING
      milestone TYPE string OPTIONAL
      state TYPE string OPTIONAL
      assignee TYPE string OPTIONAL
      creator TYPE string OPTIONAL
      mentioned TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/issue
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
* Response: 503,
  METHODS issues_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List issue comments for a repository"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 422,
  METHODS issues_list_comments_for_repo
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue-comment
* Response: 404,
  METHODS issues_get_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue-comment
* Response: 422,
  METHODS issues_update_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
  METHODS issues_delete_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List reactions for an issue comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 415,
  METHODS reactions_list_for_issue_comme
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, Reaction exists
*     application/json, #/components/schemas/reaction
* Response: 201, Reaction created
*     application/json, #/components/schemas/reaction
* Response: 415,
* Response: 422,
  METHODS reactions_create_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an issue comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List issue events for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS issues_list_events_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an issue event"
* Parameter: event_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue-event
* Response: 403,
* Response: 404,
* Response: 410,
  METHODS issues_get_event
    IMPORTING
      event_id TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue
* Response: 301,
* Response: 304,
* Response: 404,
* Response: 410,
  METHODS issues_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* PATCH - "Update an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue
* Response: 301,
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
* Response: 503,
  METHODS issues_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* POST - "Add assignees to an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201, response
*     application/json, #/components/schemas/issue-simple
  METHODS issues_add_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* DELETE - "Remove assignees from an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/issue-simple
  METHODS issues_remove_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* GET - "List issue comments"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 410,
  METHODS issues_list_comments
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201, response
*     application/json, #/components/schemas/issue-comment
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
  METHODS issues_create_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* GET - "List issue events"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 410,
  METHODS issues_list_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List labels for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 410,
  METHODS issues_list_labels_on_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add labels to an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json,
* Response: 410,
* Response: 422,
  METHODS issues_add_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* PUT - "Set labels for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json,
* Response: 410,
* Response: 422,
  METHODS issues_set_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* DELETE - "Remove all labels from an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204, Empty response
* Response: 410,
  METHODS issues_remove_all_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a label from an issue"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 410,
  METHODS issues_remove_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* PUT - "Lock an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204, Empty response
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
  METHODS issues_lock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* DELETE - "Unlock an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204, Empty response
* Response: 403,
* Response: 404,
  METHODS issues_unlock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* GET - "List reactions for an issue"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 410,
* Response: 415,
  METHODS reactions_list_for_issue
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201, response
*     application/json, #/components/schemas/reaction
* Response: 415,
* Response: 422,
  METHODS reactions_create_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an issue reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
    RAISING cx_static_check.
* GET - "List timeline events for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 410,
* Response: 415,
  METHODS issues_list_events_for_timelin
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List deploy keys"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_deploy_keys
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/deploy-key
* Response: 422,
  METHODS repos_create_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/deploy-key
* Response: 404,
  METHODS repos_get_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 204, Empty response
  METHODS repos_delete_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE string
    RAISING cx_static_check.
* GET - "List labels for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS issues_list_labels_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a label"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/label
* Response: 404,
* Response: 422,
  METHODS issues_create_label
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/label
* Response: 404,
  METHODS issues_get_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/label
  METHODS issues_update_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS issues_delete_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository languages"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/language
  METHODS repos_list_languages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the license for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/license-content
  METHODS licenses_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Merge a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, Successful Response (The resulting merge commit)
*     application/json, #/components/schemas/commit
* Response: 403,
* Response: 404, response
*     application/json,
* Response: 409, Merge conflict response
*     application/json,
* Response: 422,
  METHODS repos_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List milestones"
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS issues_list_milestones
    IMPORTING
      state TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/milestone
* Response: 404,
* Response: 422,
  METHODS issues_create_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/milestone
* Response: 404,
  METHODS issues_get_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE string
    RAISING cx_static_check.
* PATCH - "Update a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200, response
*     application/json, #/components/schemas/milestone
  METHODS issues_update_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS issues_delete_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE string
    RAISING cx_static_check.
* GET - "List labels for issues in a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS issues_list_labels_for_milesto
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List repository notifications for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
      all TYPE string OPTIONAL
      participating TYPE string OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Mark repository notifications as read"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
  METHODS activity_mark_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/page
* Response: 404,
  METHODS repos_get_pages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/page
* Response: 409,
* Response: 415,
* Response: 422,
  METHODS repos_create_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Update information about a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 400,
* Response: 422,
  METHODS repos_update_information_about
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS repos_delete_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List GitHub Pages builds"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_pages_builds
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Request a GitHub Pages build"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/page-build-status
  METHODS repos_request_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get latest Pages build"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/page-build
  METHODS repos_get_latest_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Pages build"
* Parameter: build_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/page-build
  METHODS repos_get_pages_build
    IMPORTING
      build_id TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository projects"
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
  METHODS projects_list_for_repo
    IMPORTING
      state TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository project"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/project
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 410,
* Response: 422,
  METHODS projects_create_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List pull requests"
* Parameter: state, optional, query
* Parameter: head, optional, query
* Parameter: base, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 422,
  METHODS pulls_list
    IMPORTING
      state TYPE string OPTIONAL
      head TYPE string OPTIONAL
      base TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/pull-request
* Response: 403,
* Response: 422,
  METHODS pulls_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List review comments in a repository"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS pulls_list_review_comments_for
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 404,
  METHODS pulls_get_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review-comment
  METHODS pulls_update_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
* Response: 404,
  METHODS pulls_delete_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a pull request review comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 415,
  METHODS reactions_list_for_pull_reques
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a pull request review comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200, Reaction exists
*     application/json, #/components/schemas/reaction
* Response: 201, Reaction created
*     application/json, #/components/schemas/reaction
* Response: 415,
* Response: 422,
  METHODS reactions_create_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a pull request comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204, Empty response
  METHODS reactions_delete_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "Get a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
*     application/json, #/components/schemas/pull-request
* Response: 304,
* Response: 404,
* Response: 500,
  METHODS pulls_get
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request
* Response: 403,
* Response: 422,
  METHODS pulls_update
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List review comments on a pull request"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS pulls_list_review_comments
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 403,
* Response: 422,
  METHODS pulls_create_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a reply for a review comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 201, response
*     application/json, #/components/schemas/pull-request-review-comment
* Response: 404,
  METHODS pulls_create_reply_for_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE string
    RAISING cx_static_check.
* GET - "List commits on a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS pulls_list_commits
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List pull requests files"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
* Response: 500,
  METHODS pulls_list_files
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a pull request has been merged"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Response if pull request has been merged
* Response: 404, Response if pull request has not been merged
  METHODS pulls_check_if_merged
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Merge a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Response if merge was successful
*     application/json, #/components/schemas/pull-request-merge-result
* Response: 403,
* Response: 404,
* Response: 405, Response if merge cannot be performed
*     application/json,
* Response: 409, Response if sha was provided and pull request head did not match
*     application/json,
* Response: 422,
  METHODS pulls_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List requested reviewers for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review-request
  METHODS pulls_list_requested_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Request reviewers for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/pull-request-simple
* Response: 403,
* Response: 422, Response if user is not a collaborator
  METHODS pulls_request_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove requested reviewers from a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
* Response: 422,
  METHODS pulls_remove_requested_reviewe
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List reviews for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, The list of reviews returns in chronological order.
*     application/json,
  METHODS pulls_list_reviews
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 403,
* Response: 422,
  METHODS pulls_create_review
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 404,
  METHODS pulls_get_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
    RAISING cx_static_check.
* PUT - "Update a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 422,
  METHODS pulls_update_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a pending review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 404,
* Response: 422,
  METHODS pulls_delete_pending_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
    RAISING cx_static_check.
* GET - "List comments for a pull request review"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS pulls_list_comments_for_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Dismiss a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 404,
* Response: 422,
  METHODS pulls_dismiss_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
    RAISING cx_static_check.
* POST - "Submit a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/pull-request-review
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS pulls_submit_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE string
    RAISING cx_static_check.
* PUT - "Update a pull request branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
*     application/json,
* Response: 403,
* Response: 415,
* Response: 422,
  METHODS pulls_update_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository README"
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/content-file
* Response: 404,
* Response: 422,
  METHODS repos_get_readme
    IMPORTING
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List releases"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS repos_list_releases
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/release
* Response: 422,
  METHODS repos_create_release
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200, To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
*     application/json, #/components/schemas/release-asset
* Response: 302,
* Response: 404,
* Response: 415,
  METHODS repos_get_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/release-asset
  METHODS repos_update_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 204, Empty response
  METHODS repos_delete_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE string
    RAISING cx_static_check.
* GET - "Get the latest release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/release
  METHODS repos_get_latest_release
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release by tag name"
* Parameter: tag, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/release
* Response: 404,
  METHODS repos_get_release_by_tag
    IMPORTING
      tag TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200, **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
*     application/json, #/components/schemas/release
* Response: 404,
  METHODS repos_get_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/release
  METHODS repos_update_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 204, Empty response
  METHODS repos_delete_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE string
    RAISING cx_static_check.
* GET - "List release assets"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_release_assets
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Upload a release asset"
* Parameter: name, optional, query
* Parameter: label, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 201, Response for successful upload
*     application/json, #/components/schemas/release-asset
  METHODS repos_upload_release_asset
    IMPORTING
      name TYPE string OPTIONAL
      label TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      release_id TYPE string
    RAISING cx_static_check.
* GET - "List secret scanning alerts for a repository"
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: page, optional, query
* Parameter: per_page, optional, query
* Response: 200, Response
*     application/json,
* Response: 404, Repository is public or secret scanning is disabled for the repository
* Response: 503,
  METHODS secret_scanning_list_alerts_fo
    IMPORTING
      state TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      page TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a secret scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/secret-scanning-alert
* Response: 404, Repository is public, or secret scanning is disabled for the repository, or the resource is not found
* Response: 503,
  METHODS secret_scanning_get_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* PATCH - "Update a secret scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200, Default response
*     application/json, #/components/schemas/secret-scanning-alert
* Response: 404, Repository is public, or secret scanning is disabled for the repository, or the resource is not found
* Response: 422, State does not match the resolution
* Response: 503,
  METHODS secret_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* GET - "List stargazers"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
*     application/vnd.github.v3.star+json,
* Response: 422,
  METHODS activity_list_stargazers_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get the weekly commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
*     application/json,
  METHODS repos_get_code_frequency_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the last year of commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
  METHODS repos_get_commit_activity_stat
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get all contributor commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits
*     application/json,
  METHODS repos_get_contributors_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the weekly commit count"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, The array order is oldest week (index 0) to most recent week.
*     application/json, #/components/schemas/participation-stats
* Response: 404,
  METHODS repos_get_participation_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the hourly commit count for each day"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
*     application/json,
  METHODS repos_get_punch_card_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a commit status"
* Parameter: sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/status
  METHODS repos_create_commit_status
    IMPORTING
      sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List watchers"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_watchers_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Response if you subscribe to the repository
*     application/json, #/components/schemas/repository-subscription
* Response: 403,
* Response: 404, Response if you don't subscribe to the repository
  METHODS activity_get_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/repository-subscription
  METHODS activity_set_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS activity_delete_repo_subscript
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository tags"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_tags
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Download a repository archive (tar)"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302, response
  METHODS repos_download_tarball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository teams"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_teams
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get all repository topics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/topic
* Response: 404,
* Response: 415,
  METHODS repos_get_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Replace all repository topics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json, #/components/schemas/topic
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS repos_replace_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get repository clones"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200, response
*     application/json, #/components/schemas/clone-traffic
* Response: 403,
  METHODS repos_get_clones
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get top referral paths"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
* Response: 403,
  METHODS repos_get_top_paths
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get top referral sources"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, response
*     application/json,
* Response: 403,
  METHODS repos_get_top_referrers
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get page views"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200, response
*     application/json, #/components/schemas/view-traffic
* Response: 403,
  METHODS repos_get_views
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Transfer a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202, response
*     application/json, #/components/schemas/repository
  METHODS repos_transfer
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Check if vulnerability alerts are enabled for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Response if repository is enabled with vulnerability alerts
* Response: 404, Response if repository is not enabled with vulnerability alerts
  METHODS repos_check_vulnerability_aler
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable vulnerability alerts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS repos_enable_vulnerability_ale
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Disable vulnerability alerts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS repos_disable_vulnerability_al
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Download a repository archive (zip)"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302, response
  METHODS repos_download_zipball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a repository using a template"
* Parameter: template_owner, required, path
* Parameter: template_repo, required, path
* Response: 201, response
*     application/json, #/components/schemas/repository
  METHODS repos_create_using_template
    IMPORTING
      template_owner TYPE string
      template_repo TYPE string
    RAISING cx_static_check.
* GET - "List public repositories"
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 422,
  METHODS repos_list_public
    RAISING cx_static_check.
* GET - "List provisioned SCIM groups for an enterprise"
* Parameter: enterprise, required, path
* Parameter: count, optional, query
* Response: 200, response
*     application/json, #/components/schemas/scim-group-list-enterprise
  METHODS enterprise_admin_list_provisio
    IMPORTING
      enterprise TYPE string
      count TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Provision a SCIM enterprise group and invite users"
* Parameter: enterprise, required, path
* Response: 201, response
*     application/json, #/components/schemas/scim-enterprise-group
  METHODS enterprise_admin_provision_and
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for an enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-group
  METHODS enterprise_admin_get_provision
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Set SCIM information for a provisioned enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-group
  METHODS enterprise_admin_set_informati
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-group
  METHODS enterprise_admin_update_attrib
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM group from an enterprise"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_delete_scim_g
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* GET - "List SCIM provisioned identities for an enterprise"
* Parameter: enterprise, required, path
* Parameter: count, optional, query
* Response: 200, response
*     application/json, #/components/schemas/scim-user-list-enterprise
  METHODS enterprise_admin_list_provis01
    IMPORTING
      enterprise TYPE string
      count TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Provision and invite a SCIM enterprise user"
* Parameter: enterprise, required, path
* Response: 201, response
*     application/json, #/components/schemas/scim-enterprise-user
  METHODS enterprise_admin_provision_a01
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for an enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-user
  METHODS enterprise_admin_get_provisi01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PUT - "Set SCIM information for a provisioned enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-user
  METHODS enterprise_admin_set_informa01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/scim-enterprise-user
  METHODS enterprise_admin_update_attr01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM user from an enterprise"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 204, Empty response
  METHODS enterprise_admin_delete_user_f
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* GET - "List SCIM provisioned identities"
* Parameter: startIndex, optional, query
* Parameter: count, optional, query
* Parameter: filter, optional, query
* Parameter: org, required, path
* Response: 200, response
*     application/scim+json, #/components/schemas/scim-user-list
* Response: 304,
* Response: 400,
* Response: 403,
* Response: 404,
  METHODS scim_list_provisioned_identiti
    IMPORTING
      startindex TYPE string OPTIONAL
      count TYPE string OPTIONAL
      filter TYPE string OPTIONAL
      org TYPE string
    RAISING cx_static_check.
* POST - "Provision and invite a SCIM user"
* Parameter: org, required, path
* Response: 201, response
*     application/scim+json, #/components/schemas/scim-user
* Response: 304,
* Response: 400,
* Response: 403,
* Response: 404,
* Response: 409,
* Response: 500,
  METHODS scim_provision_and_invite_user
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for a user"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/scim+json, #/components/schemas/scim-user
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS scim_get_provisioning_informat
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PUT - "Update a provisioned organization membership"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/scim+json, #/components/schemas/scim-user
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS scim_set_information_for_provi
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM user"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200, response
*     application/scim+json, #/components/schemas/scim-user
* Response: 304,
* Response: 400,
* Response: 403,
* Response: 404,
* Response: 429, Too many requests
*     application/json, #/components/schemas/basic-error
  METHODS scim_update_attribute_for_user
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM user from an organization"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS scim_delete_user_from_org
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* GET - "Search code"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 422,
* Response: 503,
  METHODS search_code
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Search commits"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 415,
  METHODS search_commits
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Search issues and pull requests"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 422,
* Response: 503,
  METHODS search_issues_and_pull_request
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Search labels"
* Parameter: repository_id, required, query
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS search_labels
    IMPORTING
      repository_id TYPE string
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Search repositories"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 422,
* Response: 503,
  METHODS search_repos
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Search topics"
* Parameter: q, required, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 415,
  METHODS search_topics
    IMPORTING
      q TYPE string
    RAISING cx_static_check.
* GET - "Search users"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 422,
* Response: 503,
  METHODS search_users
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a team (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-full
* Response: 404,
  METHODS teams_get_legacy
    RAISING cx_static_check.
* PATCH - "Update a team (Legacy)"
* Response: 201, response
*     application/json, #/components/schemas/team-full
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS teams_update_legacy
    RAISING cx_static_check.
* DELETE - "Delete a team (Legacy)"
* Response: 204, Empty response
* Response: 404,
* Response: 422,
  METHODS teams_delete_legacy
    RAISING cx_static_check.
* GET - "List discussions (Legacy)"
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_discussions_legacy
    IMPORTING
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion (Legacy)"
* Response: 201, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_create_discussion_legacy
    RAISING cx_static_check.
* GET - "Get a discussion (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_get_discussion_legacy
    RAISING cx_static_check.
* PATCH - "Update a discussion (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-discussion
  METHODS teams_update_discussion_legacy
    RAISING cx_static_check.
* DELETE - "Delete a discussion (Legacy)"
* Response: 204, Empty response
  METHODS teams_delete_discussion_legacy
    RAISING cx_static_check.
* GET - "List discussion comments (Legacy)"
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_discussion_commen01
    IMPORTING
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion comment (Legacy)"
* Response: 201, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_create_discussion_comm01
    RAISING cx_static_check.
* GET - "Get a discussion comment (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_get_discussion_comment_l
    RAISING cx_static_check.
* PATCH - "Update a discussion comment (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-discussion-comment
  METHODS teams_update_discussion_comm01
    RAISING cx_static_check.
* DELETE - "Delete a discussion comment (Legacy)"
* Response: 204, Empty response
  METHODS teams_delete_discussion_comm01
    RAISING cx_static_check.
* GET - "List reactions for a team discussion comment (Legacy)"
* Parameter: content, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS reactions_list_for_team_disc02
    IMPORTING
      content TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion comment (Legacy)"
* Response: 201, response
*     application/json, #/components/schemas/reaction
  METHODS reactions_create_for_team_di02
    RAISING cx_static_check.
* GET - "List reactions for a team discussion (Legacy)"
* Parameter: content, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS reactions_list_for_team_disc03
    IMPORTING
      content TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion (Legacy)"
* Response: 201, response
*     application/json, #/components/schemas/reaction
  METHODS reactions_create_for_team_di03
    RAISING cx_static_check.
* GET - "List pending team invitations (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS teams_list_pending_invitatio01
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List team members (Legacy)"
* Parameter: role, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS teams_list_members_legacy
    IMPORTING
      role TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get team member (Legacy)"
* Parameter: username, required, path
* Response: 204, Response if user is a member
* Response: 404, Response if user is not a member
  METHODS teams_get_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add team member (Legacy)"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403,
* Response: 404, Response if team synchronization is set up
* Response: 422, response
*     application/json,
  METHODS teams_add_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team member (Legacy)"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 404, Response if team synchronization is setup
  METHODS teams_remove_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-membership
* Response: 404,
  METHODS teams_get_membership_for_use01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/team-membership
* Response: 403, Response if team synchronization is set up
* Response: 404,
* Response: 422, Response if you attempt to add an organization to a team
*     application/json,
  METHODS teams_add_or_update_membersh01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 403, Response if team synchronization is set up
  METHODS teams_remove_membership_for_01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List team projects (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
* Response: 415,
  METHODS teams_list_projects_legacy
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a project (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/team-project
* Response: 404, Response if project is not managed by this team
* Response: 415,
  METHODS teams_check_permissions_for_01
    RAISING cx_static_check.
* PUT - "Add or update team project permissions (Legacy)"
* Response: 204, Empty response
* Response: 403, Response if the project is not owned by the organization
*     application/json,
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS teams_add_or_update_project_01
    RAISING cx_static_check.
* DELETE - "Remove a project from a team (Legacy)"
* Response: 204, Empty response
* Response: 404,
* Response: 415,
* Response: 422,
  METHODS teams_remove_project_legacy
    RAISING cx_static_check.
* GET - "List team repositories (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS teams_list_repos_legacy
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a repository (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200, Alternative response with extra repository information
*     application/vnd.github.v3.repository+json, #/components/schemas/team-repository
* Response: 204, Response if repository is managed by this team
* Response: 404, Response if repository is not managed by this team
  METHODS teams_check_permissions_for_02
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team repository permissions (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 403,
* Response: 422,
  METHODS teams_add_or_update_repo_per01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository from a team (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
  METHODS teams_remove_repo_legacy
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for a team (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/group-mapping
* Response: 403,
* Response: 404,
  METHODS teams_list_idp_groups_for_lega
    RAISING cx_static_check.
* PATCH - "Create or update IdP group connections (Legacy)"
* Response: 200, response
*     application/json, #/components/schemas/group-mapping
* Response: 403,
* Response: 422,
  METHODS teams_create_or_update_idp_g01
    RAISING cx_static_check.
* GET - "List child teams (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, Response if child teams exist
*     application/json,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS teams_list_child_legacy
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get the authenticated user"
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS users_get_authenticated
    RAISING cx_static_check.
* PATCH - "Update the authenticated user"
* Response: 200, response
*     application/json, #/components/schemas/private-user
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_update_authenticated
    RAISING cx_static_check.
* GET - "List users blocked by the authenticated user"
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 415,
  METHODS users_list_blocked_by_authenti
    RAISING cx_static_check.
* GET - "Check if a user is blocked by the authenticated user"
* Parameter: username, required, path
* Response: 204, If the user is blocked:
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404, If the user is not blocked:
*     application/json, #/components/schemas/basic-error
  METHODS users_check_blocked
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Block a user"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_block
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unblock a user"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_unblock
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PATCH - "Set primary email visibility for the authenticated user"
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_set_primary_email_visibi
    RAISING cx_static_check.
* GET - "List email addresses for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_list_emails_for_authenti
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add an email address for the authenticated user"
* Response: 201, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_add_email_for_authentica
    RAISING cx_static_check.
* DELETE - "Delete an email address for the authenticated user"
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_delete_email_for_authent
    RAISING cx_static_check.
* GET - "List followers of the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS users_list_followers_for_authe
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List the people the authenticated user follows"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS users_list_followed_by_authent
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a person is followed by the authenticated user"
* Parameter: username, required, path
* Response: 204, Response if the person is followed by the authenticated user
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404, Response if the person is not followed by the authenticated user
*     application/json, #/components/schemas/basic-error
  METHODS users_check_person_is_followed
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Follow a user"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_follow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unfollow a user"
* Parameter: username, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_unfollow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List GPG keys for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_list_gpg_keys_for_authen
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a GPG key for the authenticated user"
* Response: 201, response
*     application/json, #/components/schemas/gpg-key
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_create_gpg_key_for_authe
    RAISING cx_static_check.
* GET - "Get a GPG key for the authenticated user"
* Parameter: gpg_key_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/gpg-key
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_get_gpg_key_for_authenti
    IMPORTING
      gpg_key_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a GPG key for the authenticated user"
* Parameter: gpg_key_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_delete_gpg_key_for_authe
    IMPORTING
      gpg_key_id TYPE string
    RAISING cx_static_check.
* GET - "List app installations accessible to the user access token"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, You can find the permissions for the installation under the `permissions` key.
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 415,
  METHODS apps_list_installations_for_au
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories accessible to the user access token"
* Parameter: installation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, The access the user has to each repository is included in the hash under the `permissions` key.
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS apps_list_installation_repos_f
    IMPORTING
      installation_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Add a repository to an app installation"
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS apps_add_repo_to_installation
    IMPORTING
      installation_id TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository from an app installation"
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS apps_remove_repo_from_installa
    IMPORTING
      installation_id TYPE string
      repository_id TYPE string
    RAISING cx_static_check.
* GET - "Get interaction restrictions for your public repositories"
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
  METHODS interactions_get_restriction02
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for your public repositories"
* Response: 200, response
*     application/json, #/components/schemas/interaction-limit-response
* Response: 422,
  METHODS interactions_set_restriction02
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions from your public repositories"
* Response: 204, Empty response
  METHODS interactions_remove_restrict02
    RAISING cx_static_check.
* GET - "List user account issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 404,
  METHODS issues_list_for_authenticated_
    IMPORTING
      filter TYPE string OPTIONAL
      state TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      labels TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List public SSH keys for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_list_public_ssh_keys_for
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a public SSH key for the authenticated user"
* Response: 201, response
*     application/json, #/components/schemas/key
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS users_create_public_ssh_key_fo
    RAISING cx_static_check.
* GET - "Get a public SSH key for the authenticated user"
* Parameter: key_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/key
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_get_public_ssh_key_for_a
    IMPORTING
      key_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a public SSH key for the authenticated user"
* Parameter: key_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_delete_public_ssh_key_fo
    IMPORTING
      key_id TYPE string
    RAISING cx_static_check.
* GET - "List subscriptions for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 404,
  METHODS apps_list_subscriptions_for_au
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List subscriptions for the authenticated user (stubbed)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
  METHODS apps_list_subscriptions_for_01
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organization memberships for the authenticated user"
* Parameter: state, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS orgs_list_memberships_for_auth
    IMPORTING
      state TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization membership for the authenticated user"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-membership
* Response: 403,
* Response: 404,
  METHODS orgs_get_membership_for_authen
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization membership for the authenticated user"
* Parameter: org, required, path
* Response: 200, response
*     application/json, #/components/schemas/org-membership
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS orgs_update_membership_for_aut
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List user migrations"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS migrations_list_for_authentica
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Start a user migration"
* Response: 201, response
*     application/json, #/components/schemas/migration
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS migrations_start_for_authentic
    RAISING cx_static_check.
* GET - "Get a user migration status"
* Parameter: exclude, optional, query
* Parameter: migration_id, required, path
* Response: 200, response
*     application/json, #/components/schemas/migration
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS migrations_get_status_for_auth
    IMPORTING
      exclude TYPE string OPTIONAL
      migration_id TYPE string
    RAISING cx_static_check.
* GET - "Download a user migration archive"
* Parameter: migration_id, required, path
* Response: 302, response
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS migrations_get_archive_for_aut
    IMPORTING
      migration_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a user migration archive"
* Parameter: migration_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS migrations_delete_archive_fo01
    IMPORTING
      migration_id TYPE string
    RAISING cx_static_check.
* DELETE - "Unlock a user repository"
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS migrations_unlock_repo_for_aut
    IMPORTING
      migration_id TYPE string
      repo_name TYPE string
    RAISING cx_static_check.
* GET - "List repositories for a user migration"
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS migrations_list_repos_for_user
    IMPORTING
      migration_id TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS orgs_list_for_authenticated_us
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a user project"
* Response: 201, response
*     application/json, #/components/schemas/project
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 415,
* Response: 422,
  METHODS projects_create_for_authentica
    RAISING cx_static_check.
* GET - "List public email addresses for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS users_list_public_emails_for_a
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories for the authenticated user"
* Parameter: visibility, optional, query
* Parameter: affiliation, optional, query
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 422,
  METHODS repos_list_for_authenticated_u
    IMPORTING
      visibility TYPE string OPTIONAL
      affiliation TYPE string OPTIONAL
      type TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository for the authenticated user"
* Response: 201, response
*     application/json, #/components/schemas/repository
* Response: 304,
* Response: 400,
* Response: 401,
* Response: 403,
* Response: 404,
* Response: 422,
  METHODS repos_create_for_authenticated
    RAISING cx_static_check.
* GET - "List repository invitations for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS repos_list_invitations_for_aut
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Accept a repository invitation"
* Parameter: invitation_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 409,
  METHODS repos_accept_invitation
    IMPORTING
      invitation_id TYPE string
    RAISING cx_static_check.
* DELETE - "Decline a repository invitation"
* Parameter: invitation_id, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 403,
* Response: 404,
* Response: 409,
  METHODS repos_decline_invitation
    IMPORTING
      invitation_id TYPE string
    RAISING cx_static_check.
* GET - "List repositories starred by the authenticated user"
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
*     application/vnd.github.v3.star+json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_list_repos_starred_by
    IMPORTING
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a repository is starred by the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Response if this repository is starred by you
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404, Response if this repository is not starred by you
*     application/json, #/components/schemas/basic-error
  METHODS activity_check_repo_is_starred
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Star a repository for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS activity_star_repo_for_authent
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Unstar a repository for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204, Empty response
* Response: 304,
* Response: 401,
* Response: 403,
* Response: 404,
  METHODS activity_unstar_repo_for_authe
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repositories watched by the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 401,
* Response: 403,
  METHODS activity_list_watched_repos_fo
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List teams for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
* Response: 403,
* Response: 404,
  METHODS teams_list_for_authenticated_u
    IMPORTING
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List users"
* Parameter: per_page, optional, query
* Response: 200, response
*     application/json,
* Response: 304,
  METHODS users_list
    IMPORTING
      per_page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get a user"
* Parameter: username, required, path
* Response: 200, response
*     application/json,
* Response: 404,
  METHODS users_get_by_username
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List events for the authenticated user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_events_for_authe
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organization events for the authenticated user"
* Parameter: username, required, path
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_org_events_for_a
    IMPORTING
      username TYPE string
      org TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List public events for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_public_events_01
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List followers of a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS users_list_followers_for_user
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List the people a user follows"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS users_list_following_for_user
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user follows another user"
* Parameter: target_user, required, path
* Parameter: username, required, path
* Response: 204, Response if the user follows the target user
* Response: 404, Response if the user does not follow the target user
  METHODS users_check_following_for_user
    IMPORTING
      target_user TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List gists for a user"
* Parameter: username, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 422,
  METHODS gists_list_for_user
    IMPORTING
      username TYPE string
      since TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List GPG keys for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS users_list_gpg_keys_for_user
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get contextual information for a user"
* Parameter: subject_type, optional, query
* Parameter: subject_id, optional, query
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/hovercard
* Response: 404,
* Response: 422,
  METHODS users_get_context_for_user
    IMPORTING
      subject_type TYPE string OPTIONAL
      subject_id TYPE string OPTIONAL
      username TYPE string
    RAISING cx_static_check.
* GET - "Get a user installation for the authenticated app"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/installation
  METHODS apps_get_user_installation
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List public keys for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS users_list_public_keys_for_use
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS orgs_list_for_user
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List user projects"
* Parameter: state, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
* Response: 415,
* Response: 422,
  METHODS projects_list_for_user
    IMPORTING
      state TYPE string OPTIONAL
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List events received by the authenticated user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_received_events_
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List public events received by a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_received_public_
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories for a user"
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS repos_list_for_user
    IMPORTING
      type TYPE string OPTIONAL
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for a user"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/actions-billing-usage
  METHODS billing_get_github_actions_b02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for a user"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/packages-billing-usage
  METHODS billing_get_github_packages_02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for a user"
* Parameter: username, required, path
* Response: 200, response
*     application/json, #/components/schemas/combined-billing-usage
  METHODS billing_get_shared_storage_b02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List repositories starred by a user"
* Parameter: username, required, path
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
*     application/vnd.github.v3.star+json,
  METHODS activity_list_repos_starred_01
    IMPORTING
      username TYPE string
      sort TYPE string OPTIONAL
      direction TYPE string OPTIONAL
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories watched by a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200, response
*     application/json,
  METHODS activity_list_repos_watched_by
    IMPORTING
      username TYPE string
      per_page TYPE string OPTIONAL
      page TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get the Zen of GitHub"
* Response: 200, response
*     text/plain,
  METHODS meta_get_zen
    RAISING cx_static_check.
ENDINTERFACE.