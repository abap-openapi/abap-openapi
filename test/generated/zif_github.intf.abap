INTERFACE zif_github.
* Generated by abap-openapi-client
* GitHub v3 REST API

* Component schema: simple-user, object
  TYPES simple_user TYPE string.
* Component schema: integration, object
  TYPES integration TYPE string.
* Component schema: basic-error, object
  TYPES basic_error TYPE string.
* Component schema: validation-error-simple, object
  TYPES validation_error_simple TYPE string.
* Component schema: webhook-config-url, string
  TYPES webhook_config_url TYPE string.
* Component schema: webhook-config-content-type, string
  TYPES webhook_config_content_type TYPE string.
* Component schema: webhook-config-secret, string
  TYPES webhook_config_secret TYPE string.
* Component schema: webhook-config-insecure-ssl, string
  TYPES webhook_config_insecure_ssl TYPE string.
* Component schema: webhook-config, object
  TYPES webhook_config TYPE string.
* Component schema: enterprise, object
  TYPES enterprise TYPE string.
* Component schema: installation, object
  TYPES installation TYPE string.
* Component schema: app-permissions, object
  TYPES app_permissions TYPE string.
* Component schema: license-simple, object
  TYPES license_simple TYPE string.
* Component schema: repository, object
  TYPES repository TYPE string.
* Component schema: installation-token, object
  TYPES installation_token TYPE string.
* Component schema: validation-error, object
  TYPES validation_error TYPE string.
* Component schema: application-grant, object
  TYPES application_grant TYPE string.
* Component schema: scoped-installation, object
  TYPES scoped_installation TYPE string.
* Component schema: authorization, object
  TYPES authorization TYPE string.
* Component schema: code-of-conduct, object
  TYPES code_of_conduct TYPE string.
* Component schema: content-reference-attachment, object
  TYPES content_reference_attachment TYPE string.
* Component schema: enabled-organizations, string
  TYPES enabled_organizations TYPE string.
* Component schema: allowed-actions, string
  TYPES allowed_actions TYPE string.
* Component schema: selected-actions-url, string
  TYPES selected_actions_url TYPE string.
* Component schema: actions-enterprise-permissions, object
  TYPES actions_enterprise_permissions TYPE string.
* Component schema: organization-simple, object
  TYPES organization_simple TYPE string.
* Component schema: selected-actions, object
  TYPES selected_actions TYPE string.
* Component schema: runner-groups-enterprise, object
  TYPES runner_groups_enterprise TYPE string.
* Component schema: runner, object
  TYPES runner TYPE string.
* Component schema: runner-application, object
  TYPES runner_application TYPE string.
* Component schema: authentication-token, object
  TYPES authentication_token TYPE string.
* Component schema: audit-log-event, object
  TYPES audit_log_event TYPE string.
* Component schema: actions-billing-usage, object
  TYPES actions_billing_usage TYPE string.
* Component schema: packages-billing-usage, object
  TYPES packages_billing_usage TYPE string.
* Component schema: combined-billing-usage, object
  TYPES combined_billing_usage TYPE string.
* Component schema: actor, object
  TYPES actor TYPE string.
* Component schema: label, object
  TYPES label TYPE string.
* Component schema: milestone, object
  TYPES milestone TYPE string.
* Component schema: author_association, string
  TYPES author_association TYPE string.
* Component schema: issue-simple, object
  TYPES issue_simple TYPE string.
* Component schema: reaction-rollup, object
  TYPES reaction_rollup TYPE string.
* Component schema: issue-comment, object
  TYPES issue_comment TYPE string.
* Component schema: event, object
  TYPES event TYPE string.
* Component schema: link-with-type, object
  TYPES link_with_type TYPE string.
* Component schema: feed, object
  TYPES feed TYPE string.
* Component schema: base-gist, object
  TYPES base_gist TYPE string.
* Component schema: gist-simple, object
  TYPES gist_simple TYPE string.
* Component schema: gist-comment, object
  TYPES gist_comment TYPE string.
* Component schema: gist-commit, object
  TYPES gist_commit TYPE string.
* Component schema: gitignore-template, object
  TYPES gitignore_template TYPE string.
* Component schema: issue, object
  TYPES issue TYPE string.
* Component schema: license, object
  TYPES license TYPE string.
* Component schema: marketplace-listing-plan, object
  TYPES marketplace_listing_plan TYPE string.
* Component schema: marketplace-purchase, object
  TYPES marketplace_purchase TYPE string.
* Component schema: api-overview, object
  TYPES api_overview TYPE string.
* Component schema: minimal-repository, object
  TYPES minimal_repository TYPE string.
* Component schema: thread, object
  TYPES thread TYPE string.
* Component schema: thread-subscription, object
  TYPES thread_subscription TYPE string.
* Component schema: organization-full, object
  TYPES organization_full TYPE string.
* Component schema: enabled-repositories, string
  TYPES enabled_repositories TYPE string.
* Component schema: actions-organization-permissions, object
  TYPES actions_organization_permissio TYPE string.
* Component schema: runner-groups-org, object
  TYPES runner_groups_org TYPE string.
* Component schema: organization-actions-secret, object
  TYPES organization_actions_secret TYPE string.
* Component schema: actions-public-key, object
  TYPES actions_public_key TYPE string.
* Component schema: credential-authorization, object
  TYPES credential_authorization TYPE string.
* Component schema: organization-invitation, object
  TYPES organization_invitation TYPE string.
* Component schema: org-hook, object
  TYPES org_hook TYPE string.
* Component schema: interaction-group, string
  TYPES interaction_group TYPE string.
* Component schema: interaction-limit-response, object
  TYPES interaction_limit_response TYPE string.
* Component schema: interaction-expiry, string
  TYPES interaction_expiry TYPE string.
* Component schema: interaction-limit, object
  TYPES interaction_limit TYPE string.
* Component schema: team-simple, object
  TYPES team_simple TYPE string.
* Component schema: team, object
  TYPES team TYPE string.
* Component schema: org-membership, object
  TYPES org_membership TYPE string.
* Component schema: migration, object
  TYPES migration TYPE string.
* Component schema: project, object
  TYPES project TYPE string.
* Component schema: group-mapping, object
  TYPES group_mapping TYPE string.
* Component schema: team-full, object
  TYPES team_full TYPE string.
* Component schema: team-discussion, object
  TYPES team_discussion TYPE string.
* Component schema: team-discussion-comment, object
  TYPES team_discussion_comment TYPE string.
* Component schema: reaction, object
  TYPES reaction TYPE string.
* Component schema: team-membership, object
  TYPES team_membership TYPE string.
* Component schema: team-project, object
  TYPES team_project TYPE string.
* Component schema: team-repository, object
  TYPES team_repository TYPE string.
* Component schema: project-card, object
  TYPES project_card TYPE string.
* Component schema: project-column, object
  TYPES project_column TYPE string.
* Component schema: repository-collaborator-permission, object
  TYPES repository_collaborator_permis TYPE string.
* Component schema: rate-limit, object
  TYPES rate_limit TYPE string.
* Component schema: rate-limit-overview, object
  TYPES rate_limit_overview TYPE string.
* Component schema: full-repository, object
  TYPES full_repository TYPE string.
* Component schema: artifact, object
  TYPES artifact TYPE string.
* Component schema: job, object
  TYPES job TYPE string.
* Component schema: actions-enabled, boolean
  TYPES actions_enabled TYPE string.
* Component schema: actions-repository-permissions, object
  TYPES actions_repository_permissions TYPE string.
* Component schema: pull-request-minimal, object
  TYPES pull_request_minimal TYPE string.
* Component schema: simple-commit, object
  TYPES simple_commit TYPE string.
* Component schema: workflow-run, object
  TYPES workflow_run TYPE string.
* Component schema: workflow-run-usage, object
  TYPES workflow_run_usage TYPE string.
* Component schema: actions-secret, object
  TYPES actions_secret TYPE string.
* Component schema: workflow, object
  TYPES workflow TYPE string.
* Component schema: workflow-usage, object
  TYPES workflow_usage TYPE string.
* Component schema: protected-branch-admin-enforced, object
  TYPES protected_branch_admin_enforce TYPE string.
* Component schema: protected-branch-pull-request-review, object
  TYPES protected_branch_pull_request_ TYPE string.
* Component schema: branch-restriction-policy, object
  TYPES branch_restriction_policy TYPE string.
* Component schema: branch-protection, object
  TYPES branch_protection TYPE string.
* Component schema: short-branch, object
  TYPES short_branch TYPE string.
* Component schema: git-user, object
  TYPES git_user TYPE string.
* Component schema: verification, object
  TYPES verification TYPE string.
* Component schema: commit, object
  TYPES commit TYPE string.
* Component schema: branch-with-protection, object
  TYPES branch_with_protection TYPE string.
* Component schema: status-check-policy, object
  TYPES status_check_policy TYPE string.
* Component schema: protected-branch, object
  TYPES protected_branch TYPE string.
* Component schema: check-run, object
  TYPES check_run TYPE string.
* Component schema: check-annotation, object
  TYPES check_annotation TYPE string.
* Component schema: check-suite, object
  TYPES check_suite TYPE string.
* Component schema: check-suite-preference, object
  TYPES check_suite_preference TYPE string.
* Component schema: code-scanning-alert-state, string
  TYPES code_scanning_alert_state TYPE string.
* Component schema: code-scanning-alert-ref, string
  TYPES code_scanning_alert_ref TYPE string.
* Component schema: alert-number, integer
  TYPES alert_number TYPE string.
* Component schema: alert-created-at, string
  TYPES alert_created_at TYPE string.
* Component schema: alert-url, string
  TYPES alert_url TYPE string.
* Component schema: alert-html-url, string
  TYPES alert_html_url TYPE string.
* Component schema: code-scanning-alert-dismissed-at, string
  TYPES code_scanning_alert_dismissed_ TYPE string.
* Component schema: code-scanning-alert-dismissed-reason, string
  TYPES code_scanning_alert_dismisse01 TYPE string.
* Component schema: code-scanning-alert-rule, object
  TYPES code_scanning_alert_rule TYPE string.
* Component schema: code-scanning-analysis-tool-name, string
  TYPES code_scanning_analysis_tool_na TYPE string.
* Component schema: code-scanning-analysis-tool, object
  TYPES code_scanning_analysis_tool TYPE string.
* Component schema: code-scanning-alert-code-scanning-alert-items, object
  TYPES code_scanning_alert_code_scann TYPE string.
* Component schema: code-scanning-analysis-analysis-key, string
  TYPES code_scanning_analysis_analysi TYPE string.
* Component schema: code-scanning-alert-environment, string
  TYPES code_scanning_alert_environmen TYPE string.
* Component schema: code-scanning-alert-instances, array
  TYPES code_scanning_alert_instances TYPE string.
* Component schema: code-scanning-alert-code-scanning-alert, object
  TYPES code_scanning_alert_code_sca01 TYPE string.
* Component schema: code-scanning-alert-set-state, string
  TYPES code_scanning_alert_set_state TYPE string.
* Component schema: code-scanning-analysis-ref, string
  TYPES code_scanning_analysis_ref TYPE string.
* Component schema: code-scanning-analysis-commit-sha, string
  TYPES code_scanning_analysis_commit_ TYPE string.
* Component schema: code-scanning-analysis-created-at, string
  TYPES code_scanning_analysis_created TYPE string.
* Component schema: code-scanning-analysis-environment, string
  TYPES code_scanning_analysis_environ TYPE string.
* Component schema: code-scanning-analysis-code-scanning-analysis, object
  TYPES code_scanning_analysis_code_sc TYPE string.
* Component schema: code-scanning-analysis-sarif-file, string
  TYPES code_scanning_analysis_sarif_f TYPE string.
* Component schema: collaborator, object
  TYPES collaborator TYPE string.
* Component schema: repository-invitation, object
  TYPES repository_invitation TYPE string.
* Component schema: commit-comment, object
  TYPES commit_comment TYPE string.
* Component schema: scim-error, object
  TYPES scim_error TYPE string.
* Component schema: branch-short, object
  TYPES branch_short TYPE string.
* Component schema: link, object
  TYPES link TYPE string.
* Component schema: pull-request-simple, object
  TYPES pull_request_simple TYPE string.
* Component schema: simple-commit-status, object
  TYPES simple_commit_status TYPE string.
* Component schema: combined-commit-status, object
  TYPES combined_commit_status TYPE string.
* Component schema: status, object
  TYPES status TYPE string.
* Component schema: code-of-conduct-simple, object
  TYPES code_of_conduct_simple TYPE string.
* Component schema: community-health-file, object
  TYPES community_health_file TYPE string.
* Component schema: community-profile, object
  TYPES community_profile TYPE string.
* Component schema: diff-entry, object
  TYPES diff_entry TYPE string.
* Component schema: commit-comparison, object
  TYPES commit_comparison TYPE string.
* Component schema: content-tree, object
  TYPES content_tree TYPE string.
* Component schema: content-directory, array
  TYPES content_directory TYPE string.
* Component schema: content-file, object
  TYPES content_file TYPE string.
* Component schema: content-symlink, object
  TYPES content_symlink TYPE string.
* Component schema: content-submodule, object
  TYPES content_submodule TYPE string.
* Component schema: file-commit, object
  TYPES file_commit TYPE string.
* Component schema: contributor, object
  TYPES contributor TYPE string.
* Component schema: deployment, object
  TYPES deployment TYPE string.
* Component schema: deployment-status, object
  TYPES deployment_status TYPE string.
* Component schema: short-blob, object
  TYPES short_blob TYPE string.
* Component schema: blob, object
  TYPES blob TYPE string.
* Component schema: git-commit, object
  TYPES git_commit TYPE string.
* Component schema: git-ref, object
  TYPES git_ref TYPE string.
* Component schema: git-tag, object
  TYPES git_tag TYPE string.
* Component schema: git-tree, object
  TYPES git_tree TYPE string.
* Component schema: hook-response, object
  TYPES hook_response TYPE string.
* Component schema: hook, object
  TYPES hook TYPE string.
* Component schema: import, object
  TYPES import TYPE string.
* Component schema: porter-author, object
  TYPES porter_author TYPE string.
* Component schema: porter-large-file, object
  TYPES porter_large_file TYPE string.
* Component schema: issue-event-label, object
  TYPES issue_event_label TYPE string.
* Component schema: issue-event-dismissed-review, object
  TYPES issue_event_dismissed_review TYPE string.
* Component schema: issue-event-milestone, object
  TYPES issue_event_milestone TYPE string.
* Component schema: issue-event-project-card, object
  TYPES issue_event_project_card TYPE string.
* Component schema: issue-event-rename, object
  TYPES issue_event_rename TYPE string.
* Component schema: issue-event, object
  TYPES issue_event TYPE string.
* Component schema: issue-event-for-issue, object
  TYPES issue_event_for_issue TYPE string.
* Component schema: deploy-key, object
  TYPES deploy_key TYPE string.
* Component schema: language, object
  TYPES language TYPE string.
* Component schema: license-content, object
  TYPES license_content TYPE string.
* Component schema: pages-source-hash, object
  TYPES pages_source_hash TYPE string.
* Component schema: page, object
  TYPES page TYPE string.
* Component schema: page-build, object
  TYPES page_build TYPE string.
* Component schema: page-build-status, object
  TYPES page_build_status TYPE string.
* Component schema: pull-request, object
  TYPES pull_request TYPE string.
* Component schema: pull-request-review-comment, object
  TYPES pull_request_review_comment TYPE string.
* Component schema: pull-request-merge-result, object
  TYPES pull_request_merge_result TYPE string.
* Component schema: pull-request-review-request, object
  TYPES pull_request_review_request TYPE string.
* Component schema: pull-request-review, object
  TYPES pull_request_review TYPE string.
* Component schema: review-comment, object
  TYPES review_comment TYPE string.
* Component schema: release-asset, object
  TYPES release_asset TYPE string.
* Component schema: release, object
  TYPES release TYPE string.
* Component schema: secret-scanning-alert-state, string
  TYPES secret_scanning_alert_state TYPE string.
* Component schema: secret-scanning-alert-resolution, string
  TYPES secret_scanning_alert_resoluti TYPE string.
* Component schema: secret-scanning-alert, object
  TYPES secret_scanning_alert TYPE string.
* Component schema: stargazer, object
  TYPES stargazer TYPE string.
* Component schema: code-frequency-stat, array
  TYPES code_frequency_stat TYPE string.
* Component schema: commit-activity, object
  TYPES commit_activity TYPE string.
* Component schema: contributor-activity, object
  TYPES contributor_activity TYPE string.
* Component schema: participation-stats, object
  TYPES participation_stats TYPE string.
* Component schema: repository-subscription, object
  TYPES repository_subscription TYPE string.
* Component schema: tag, object
  TYPES tag TYPE string.
* Component schema: topic, object
  TYPES topic TYPE string.
* Component schema: traffic, object
  TYPES traffic TYPE string.
* Component schema: clone-traffic, object
  TYPES clone_traffic TYPE string.
* Component schema: content-traffic, object
  TYPES content_traffic TYPE string.
* Component schema: referrer-traffic, object
  TYPES referrer_traffic TYPE string.
* Component schema: view-traffic, object
  TYPES view_traffic TYPE string.
* Component schema: scim-group-list-enterprise, object
  TYPES scim_group_list_enterprise TYPE string.
* Component schema: scim-enterprise-group, object
  TYPES scim_enterprise_group TYPE string.
* Component schema: scim-user-list-enterprise, object
  TYPES scim_user_list_enterprise TYPE string.
* Component schema: scim-enterprise-user, object
  TYPES scim_enterprise_user TYPE string.
* Component schema: scim-user, object
  TYPES scim_user TYPE string.
* Component schema: scim-user-list, object
  TYPES scim_user_list TYPE string.
* Component schema: search-result-text-matches, array
  TYPES search_result_text_matches TYPE string.
* Component schema: code-search-result-item, object
  TYPES code_search_result_item TYPE string.
* Component schema: commit-search-result-item, object
  TYPES commit_search_result_item TYPE string.
* Component schema: issue-search-result-item, object
  TYPES issue_search_result_item TYPE string.
* Component schema: label-search-result-item, object
  TYPES label_search_result_item TYPE string.
* Component schema: repo-search-result-item, object
  TYPES repo_search_result_item TYPE string.
* Component schema: topic-search-result-item, object
  TYPES topic_search_result_item TYPE string.
* Component schema: user-search-result-item, object
  TYPES user_search_result_item TYPE string.
* Component schema: private-user, object
  TYPES private_user TYPE string.
* Component schema: public-user, object
  TYPES public_user TYPE string.
* Component schema: email, 
  TYPES email TYPE string.
* Component schema: gpg-key, object
  TYPES gpg_key TYPE string.
* Component schema: key, object
  TYPES key TYPE string.
* Component schema: marketplace-account, object
  TYPES marketplace_account TYPE string.
* Component schema: user-marketplace-purchase, object
  TYPES user_marketplace_purchase TYPE string.
* Component schema: starred-repository, object
  TYPES starred_repository TYPE string.
* Component schema: hovercard, object
  TYPES hovercard TYPE string.
* Component schema: key-simple, object
  TYPES key_simple TYPE string.

* GET - "GitHub API Root"
* Response: 200
*     application/json
  METHODS meta_root
    RAISING cx_static_check.
* GET - "Get the authenticated app"
* Response: 200
*     application/json
  METHODS apps_get_authenticated
    RAISING cx_static_check.
* POST - "Create a GitHub App from a manifest"
* Parameter: code, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS apps_create_from_manifest
    IMPORTING
      code TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for an app"
* Response: 200
*     application/json
  METHODS apps_get_webhook_config_for_ap
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for an app"
* Response: 200
*     application/json
  METHODS apps_update_webhook_config_for
    RAISING cx_static_check.
* GET - "List installations for the authenticated app"
* Parameter: outdated, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Response: 200
*     application/json
  METHODS apps_list_installations
    IMPORTING
      outdated TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
      since TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get an installation for the authenticated app"
* Parameter: installation_id, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS apps_get_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an installation for the authenticated app"
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_delete_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.
* POST - "Create an installation access token for an app"
* Parameter: installation_id, required, path
* Response: 201
*     application/json
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS apps_create_installation_acces
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.
* PUT - "Suspend an app installation"
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_suspend_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.
* DELETE - "Unsuspend an app installation"
* Parameter: installation_id, required, path
* Response: 204
* Response: 404
  METHODS apps_unsuspend_installation
    IMPORTING
      installation_id TYPE i
    RAISING cx_static_check.
* GET - "List your grants"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS oauth_authorizations_list_gran
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a single grant"
* Parameter: grant_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_get_grant
    IMPORTING
      grant_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a grant"
* Parameter: grant_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_delete_gr
    IMPORTING
      grant_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an app authorization"
* Response: 204
* Response: 422
  METHODS apps_delete_authorization
    RAISING cx_static_check.
* DELETE - "Revoke a grant for an application"
* Response: 204
  METHODS apps_revoke_grant_for_applicat
    RAISING cx_static_check.
* POST - "Check a token"
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS apps_check_token
    RAISING cx_static_check.
* PATCH - "Reset a token"
* Response: 200
*     application/json
* Response: 422
  METHODS apps_reset_token
    RAISING cx_static_check.
* DELETE - "Delete an app token"
* Response: 204
* Response: 422
  METHODS apps_delete_token
    RAISING cx_static_check.
* POST - "Create a scoped access token"
* Response: 200
*     application/json
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS apps_scope_token
    RAISING cx_static_check.
* GET - "Check an authorization"
* Response: 200
*     application/json
* Response: 404
  METHODS apps_check_authorization
    RAISING cx_static_check.
* POST - "Reset an authorization"
* Response: 200
*     application/json
  METHODS apps_reset_authorization
    RAISING cx_static_check.
* DELETE - "Revoke an authorization for an application"
* Response: 204
  METHODS apps_revoke_authorization_for_
    RAISING cx_static_check.
* GET - "Get an app"
* Parameter: app_slug, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 415
  METHODS apps_get_by_slug
    IMPORTING
      app_slug TYPE string
    RAISING cx_static_check.
* GET - "List your authorizations"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS oauth_authorizations_list_auth
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a new authorization"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 410
* Response: 422
  METHODS oauth_authorizations_create_au
    RAISING cx_static_check.
* PUT - "Get-or-create an authorization for a specific app"
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS oauth_authorizations_get_or_cr
    RAISING cx_static_check.
* PUT - "Get-or-create an authorization for a specific app and fingerprint"
* Parameter: fingerprint, required, path
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 422
  METHODS oauth_authorizations_get_or_01
    IMPORTING
      fingerprint TYPE string
    RAISING cx_static_check.
* GET - "Get a single authorization"
* Parameter: authorization_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_get_autho
    IMPORTING
      authorization_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update an existing authorization"
* Parameter: authorization_id, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS oauth_authorizations_update_au
    IMPORTING
      authorization_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an authorization"
* Parameter: authorization_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
  METHODS oauth_authorizations_delete_au
    IMPORTING
      authorization_id TYPE i
    RAISING cx_static_check.
* GET - "Get all codes of conduct"
* Response: 200
*     application/json
* Response: 304
* Response: 415
  METHODS codes_of_conduct_get_all_codes
    RAISING cx_static_check.
* GET - "Get a code of conduct"
* Parameter: key, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 404
* Response: 415
  METHODS codes_of_conduct_get_conduct_c
    IMPORTING
      key TYPE string
    RAISING cx_static_check.
* POST - "Create a content attachment"
* Parameter: content_reference_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
* Response: 410
* Response: 415
* Response: 422
  METHODS apps_create_content_attachment
    IMPORTING
      content_reference_id TYPE i
    RAISING cx_static_check.
* GET - "Get emojis"
* Response: 200
*     application/json
* Response: 304
  METHODS emojis_get
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_github_ac
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for an enterprise"
* Parameter: enterprise, required, path
* Response: 204
  METHODS enterprise_admin_set_github_ac
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List selected organizations enabled for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_selected
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Set selected organizations enabled for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Response: 204
  METHODS enterprise_admin_set_selected_
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Enable a selected organization for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_enable_select
    IMPORTING
      enterprise TYPE string
      org_id TYPE i
    RAISING cx_static_check.
* DELETE - "Disable a selected organization for GitHub Actions in an enterprise"
* Parameter: enterprise, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_disable_selec
    IMPORTING
      enterprise TYPE string
      org_id TYPE i
    RAISING cx_static_check.
* GET - "Get allowed actions for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_allowed_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for an enterprise"
* Parameter: enterprise, required, path
* Response: 204
  METHODS enterprise_admin_set_allowed_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runner groups for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_self_hos
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Response: 201
*     application/json
  METHODS enterprise_admin_create_self_h
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a self-hosted runner group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_update_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner group from an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS enterprise_admin_delete_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* GET - "List organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_org_acce
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Set organization access for a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS enterprise_admin_set_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PUT - "Add organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_add_org_acces
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      org_id TYPE i
    RAISING cx_static_check.
* DELETE - "Remove organization access to a self-hosted runner group in an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: org_id, required, path
* Response: 204
  METHODS enterprise_admin_remove_org_ac
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      org_id TYPE i
    RAISING cx_static_check.
* GET - "List self-hosted runners in a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_self_h01
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Set self-hosted runners in a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS enterprise_admin_set_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PUT - "Add a self-hosted runner to a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_add_self_host
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.
* DELETE - "Remove a self-hosted runner from a group for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_remove_self_h
    IMPORTING
      enterprise TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.
* GET - "List self-hosted runners for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_self_h02
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_list_runner_a
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for an enterprise"
* Parameter: enterprise, required, path
* Response: 201
*     application/json
  METHODS enterprise_admin_create_regist
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for an enterprise"
* Parameter: enterprise, required, path
* Response: 201
*     application/json
  METHODS enterprise_admin_create_remove
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_self_ho01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from an enterprise"
* Parameter: enterprise, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS enterprise_admin_delete_self01
    IMPORTING
      enterprise TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* GET - "Get the audit log for an enterprise"
* Parameter: enterprise, required, path
* Parameter: per_page, optional, query
* Response: 200
*     application/json
  METHODS audit_log_get_audit_log
    IMPORTING
      enterprise TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_actions_bil
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_packages_bi
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for an enterprise"
* Parameter: enterprise, required, path
* Response: 200
*     application/json
  METHODS billing_get_shared_storage_bil
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "List public events"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 503
  METHODS activity_list_public_events
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get feeds"
* Response: 200
*     application/json
  METHODS activity_get_feeds
    RAISING cx_static_check.
* GET - "List gists for the authenticated user"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
  METHODS gists_list
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a gist"
* Response: 201
*     application/json
* Response: 304
* Response: 403
* Response: 404
* Response: 422
  METHODS gists_create
    RAISING cx_static_check.
* GET - "List public gists"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 422
  METHODS gists_list_public
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List starred gists"
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS gists_list_starred
    IMPORTING
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a gist"
* Parameter: gist_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_get
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update a gist"
* Parameter: gist_id, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS gists_update
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a gist"
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_delete
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "List gist comments"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_comments
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a gist comment"
* Parameter: gist_id, required, path
* Response: 201
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_create_comment
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_get_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS gists_update_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a gist comment"
* Parameter: gist_id, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_delete_comment
    IMPORTING
      gist_id TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List gist commits"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_commits
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List gist forks"
* Parameter: gist_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_list_forks
    IMPORTING
      gist_id TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Fork a gist"
* Parameter: gist_id, required, path
* Response: 201
*     application/json
* Response: 304
* Response: 403
* Response: 404
* Response: 422
  METHODS gists_fork
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Check if a gist is starred"
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
*     application/json
  METHODS gists_check_is_starred
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* PUT - "Star a gist"
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_star
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* DELETE - "Unstar a gist"
* Parameter: gist_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS gists_unstar
    IMPORTING
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get a gist revision"
* Parameter: sha, required, path
* Parameter: gist_id, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS gists_get_revision
    IMPORTING
      sha TYPE string
      gist_id TYPE string
    RAISING cx_static_check.
* GET - "Get all gitignore templates"
* Response: 200
*     application/json
* Response: 304
  METHODS gitignore_get_all_templates
    RAISING cx_static_check.
* GET - "Get a gitignore template"
* Parameter: name, required, path
* Response: 200
*     application/json
* Response: 304
  METHODS gitignore_get_template
    IMPORTING
      name TYPE string
    RAISING cx_static_check.
* GET - "List repositories accessible to the app installation"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS apps_list_repos_accessible_to_
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* DELETE - "Revoke an installation access token"
* Response: 204
  METHODS apps_revoke_installation_acces
    RAISING cx_static_check.
* GET - "List issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: collab, optional, query
* Parameter: orgs, optional, query
* Parameter: owned, optional, query
* Parameter: pulls, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 404
* Response: 422
  METHODS issues_list
    IMPORTING
      filter TYPE string DEFAULT 'assigned' OPTIONAL
      state TYPE string DEFAULT 'open' OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      collab TYPE abap_bool OPTIONAL
      orgs TYPE abap_bool OPTIONAL
      owned TYPE abap_bool OPTIONAL
      pulls TYPE abap_bool OPTIONAL
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get all commonly used licenses"
* Parameter: featured, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json
* Response: 304
  METHODS licenses_get_all_commonly_used
    IMPORTING
      featured TYPE abap_bool OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a license"
* Parameter: license, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS licenses_get
    IMPORTING
      license TYPE string
    RAISING cx_static_check.
* POST - "Render a Markdown document"
* Response: 200
* Response: 304
  METHODS markdown_render
    RAISING cx_static_check.
* POST - "Render a Markdown document in raw mode"
* Response: 200
*     text/html
* Response: 304
  METHODS markdown_render_raw
    RAISING cx_static_check.
* GET - "Get a subscription plan for an account"
* Parameter: account_id, required, path
* Response: 200
*     application/json
* Response: 401
* Response: 404
*     application/json
  METHODS apps_get_subscription_plan_for
    IMPORTING
      account_id TYPE i
    RAISING cx_static_check.
* GET - "List plans"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 401
* Response: 404
  METHODS apps_list_plans
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List accounts for a plan"
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 401
* Response: 404
* Response: 422
  METHODS apps_list_accounts_for_plan
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE i
      sort TYPE string DEFAULT 'created' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a subscription plan for an account (stubbed)"
* Parameter: account_id, required, path
* Response: 200
*     application/json
* Response: 401
* Response: 404
  METHODS apps_get_subscription_plan_f01
    IMPORTING
      account_id TYPE i
    RAISING cx_static_check.
* GET - "List plans (stubbed)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 401
  METHODS apps_list_plans_stubbed
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List accounts for a plan (stubbed)"
* Parameter: direction, optional, query
* Parameter: plan_id, required, path
* Parameter: sort, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 401
  METHODS apps_list_accounts_for_plan_st
    IMPORTING
      direction TYPE string OPTIONAL
      plan_id TYPE i
      sort TYPE string DEFAULT 'created' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub meta information"
* Response: 200
*     application/json
* Response: 304
  METHODS meta_get
    RAISING cx_static_check.
* GET - "List public events for a network of repositories"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 301
* Response: 304
* Response: 403
* Response: 404
  METHODS activity_list_public_events_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List notifications for the authenticated user"
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS activity_list_notifications_fo
    IMPORTING
      all TYPE abap_bool DEFAULT 'false' OPTIONAL
      participating TYPE abap_bool DEFAULT 'false' OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Mark notifications as read"
* Response: 202
*     application/json
* Response: 205
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_mark_notifications_as
    RAISING cx_static_check.
* GET - "Get a thread"
* Parameter: thread_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_get_thread
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.
* PATCH - "Mark a thread as read"
* Parameter: thread_id, required, path
* Response: 205
* Response: 304
* Response: 403
  METHODS activity_mark_thread_as_read
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.
* GET - "Get a thread subscription for the authenticated user"
* Parameter: thread_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_get_thread_subscripti
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.
* PUT - "Set a thread subscription"
* Parameter: thread_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_set_thread_subscripti
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a thread subscription"
* Parameter: thread_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_delete_thread_subscri
    IMPORTING
      thread_id TYPE i
    RAISING cx_static_check.
* GET - "Get Octocat"
* Parameter: s, optional, query
* Response: 200
*     application/octocat-stream
  METHODS meta_get_octocat
    IMPORTING
      s TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations"
* Parameter: per_page, optional, query
* Response: 200
*     application/json
* Response: 304
  METHODS orgs_list
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_get
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 409
* Response: 415
* Response: 422
*     application/json
  METHODS orgs_update
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS actions_get_github_actions_per
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for an organization"
* Parameter: org, required, path
* Response: 204
  METHODS actions_set_github_actions_per
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List selected repositories enabled for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_selected_reposito
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Set selected repositories enabled for GitHub Actions in an organization"
* Parameter: org, required, path
* Response: 204
  METHODS actions_set_selected_repositor
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Enable a selected repository for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_enable_selected_reposi
    IMPORTING
      org TYPE string
      repository_id TYPE i
    RAISING cx_static_check.
* DELETE - "Disable a selected repository for GitHub Actions in an organization"
* Parameter: org, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_disable_selected_repos
    IMPORTING
      org TYPE string
      repository_id TYPE i
    RAISING cx_static_check.
* GET - "Get allowed actions for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS actions_get_allowed_actions_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for an organization"
* Parameter: org, required, path
* Response: 204
  METHODS actions_set_allowed_actions_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runner groups for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_self_hosted_runne
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a self-hosted runner group for an organization"
* Parameter: org, required, path
* Response: 201
*     application/json
  METHODS actions_create_self_hosted_run
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json
  METHODS actions_get_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a self-hosted runner group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json
  METHODS actions_update_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner group from an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS actions_delete_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* GET - "List repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 200
*     application/json
  METHODS actions_list_repo_access_to_se
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PUT - "Set repository access for a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS actions_set_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PUT - "Add repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_add_repo_access_to_sel
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.
* DELETE - "Remove repository access to a self-hosted runner group in an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: repository_id, required, path
* Response: 204
  METHODS actions_remove_repo_access_to_
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.
* GET - "List self-hosted runners in a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_self_hosted_run01
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Set self-hosted runners in a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Response: 204
  METHODS actions_set_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
    RAISING cx_static_check.
* PUT - "Add a self-hosted runner to a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_add_self_hosted_runner
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.
* DELETE - "Remove a self-hosted runner from a group for an organization"
* Parameter: org, required, path
* Parameter: runner_group_id, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_remove_self_hosted_run
    IMPORTING
      org TYPE string
      runner_group_id TYPE i
      runner_id TYPE i
    RAISING cx_static_check.
* GET - "List self-hosted runners for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_self_hosted_run02
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS actions_list_runner_applicatio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for an organization"
* Parameter: org, required, path
* Response: 201
*     application/json
  METHODS actions_create_registration_to
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for an organization"
* Parameter: org, required, path
* Response: 201
*     application/json
  METHODS actions_create_remove_token_fo
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for an organization"
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json
  METHODS actions_get_self_hosted_runn01
    IMPORTING
      org TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from an organization"
* Parameter: org, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_delete_self_hosted_r01
    IMPORTING
      org TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* GET - "List organization secrets"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_org_secrets
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization public key"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS actions_get_org_public_key
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json
  METHODS actions_get_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Create or update an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 201
* Response: 204
  METHODS actions_create_or_update_org_s
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
  METHODS actions_delete_org_secret
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "List selected repositories for an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json
  METHODS actions_list_selected_repos_fo
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Set selected repositories for an organization secret"
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
  METHODS actions_set_selected_repos_for
    IMPORTING
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Add selected repository to an organization secret"
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Response: 409
  METHODS actions_add_selected_repo_to_o
    IMPORTING
      repository_id TYPE i
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Remove selected repository from an organization secret"
* Parameter: repository_id, required, path
* Parameter: org, required, path
* Parameter: secret_name, required, path
* Response: 204
* Response: 409
  METHODS actions_remove_selected_repo_f
    IMPORTING
      repository_id TYPE i
      org TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "Get the audit log for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Response: 200
*     application/json
  METHODS orgs_get_audit_log
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "List users blocked by an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 415
  METHODS orgs_list_blocked_users
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Check if a user is blocked by an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
*     application/json
  METHODS orgs_check_blocked_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Block a user from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 422
  METHODS orgs_block_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unblock a user from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
  METHODS orgs_unblock_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List SAML SSO authorizations for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS orgs_list_saml_sso_authorizati
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a SAML SSO authorization for an organization"
* Parameter: credential_id, required, path
* Parameter: org, required, path
* Response: 204
* Response: 404
  METHODS orgs_remove_saml_sso_authoriza
    IMPORTING
      credential_id TYPE i
      org TYPE string
    RAISING cx_static_check.
* GET - "List public organization events"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_public_org_event
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List failed organization invitations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_list_failed_invitations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organization webhooks"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_list_webhooks
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization webhook"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS orgs_create_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization webhook"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_get_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization webhook"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS orgs_update_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Delete an organization webhook"
* Parameter: org, required, path
* Response: 204
* Response: 404
  METHODS orgs_delete_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS orgs_get_webhook_config_for_or
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS orgs_update_webhook_config_for
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* POST - "Ping an organization webhook"
* Parameter: org, required, path
* Response: 204
* Response: 404
  METHODS orgs_ping_webhook
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization installation for the authenticated app"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS apps_get_org_installation
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List app installations for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS orgs_list_app_installations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS interactions_get_restrictions_
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS interactions_set_restrictions_
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions for an organization"
* Parameter: org, required, path
* Response: 204
  METHODS interactions_remove_restrictio
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List pending organization invitations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_list_pending_invitations
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization invitation"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS orgs_create_invitation
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* DELETE - "Cancel an organization invitation"
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Response: 204
* Response: 404
* Response: 422
  METHODS orgs_cancel_invitation
    IMPORTING
      org TYPE string
      invitation_id TYPE i
    RAISING cx_static_check.
* GET - "List organization invitation teams"
* Parameter: org, required, path
* Parameter: invitation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS orgs_list_invitation_teams
    IMPORTING
      org TYPE string
      invitation_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organization issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: org, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS issues_list_for_org
    IMPORTING
      filter TYPE string DEFAULT 'assigned' OPTIONAL
      state TYPE string DEFAULT 'open' OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      org TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organization members"
* Parameter: filter, optional, query
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 302
* Response: 422
  METHODS orgs_list_members
    IMPORTING
      filter TYPE string DEFAULT 'all' OPTIONAL
      role TYPE string DEFAULT 'all' OPTIONAL
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 302
* Response: 404
  METHODS orgs_check_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove an organization member"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS orgs_remove_member
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "Get organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
  METHODS orgs_get_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Set organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 422
  METHODS orgs_set_membership_for_user
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
* Response: 404
  METHODS orgs_remove_membership_for_use
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization migrations"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS migrations_list_for_org
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Start an organization migration"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS migrations_start_for_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get an organization migration status"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS migrations_get_status_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RAISING cx_static_check.
* GET - "Download an organization migration archive"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 302
* Response: 404
  METHODS migrations_download_archive_fo
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an organization migration archive"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Response: 204
* Response: 404
  METHODS migrations_delete_archive_for_
    IMPORTING
      org TYPE string
      migration_id TYPE i
    RAISING cx_static_check.
* DELETE - "Unlock an organization repository"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204
* Response: 404
  METHODS migrations_unlock_repo_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
      repo_name TYPE string
    RAISING cx_static_check.
* GET - "List repositories in an organization migration"
* Parameter: org, required, path
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS migrations_list_repos_for_org
    IMPORTING
      org TYPE string
      migration_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List outside collaborators for an organization"
* Parameter: filter, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS orgs_list_outside_collaborator
    IMPORTING
      filter TYPE string DEFAULT 'all' OPTIONAL
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Convert an organization member to outside collaborator"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 202
* Response: 204
* Response: 403
*     application/json
* Response: 404
  METHODS orgs_convert_member_to_outside
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove outside collaborator from an organization"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 422
*     application/json
  METHODS orgs_remove_outside_collaborat
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization projects"
* Parameter: state, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS projects_list_for_org
    IMPORTING
      state TYPE string DEFAULT 'open' OPTIONAL
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization project"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS projects_create_for_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List public organization members"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS orgs_list_public_members
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check public organization membership for a user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS orgs_check_public_membership_f
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Set public organization membership for the authenticated user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS orgs_set_public_membership_for
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove public organization membership for the authenticated user"
* Parameter: org, required, path
* Parameter: username, required, path
* Response: 204
  METHODS orgs_remove_public_membership_
    IMPORTING
      org TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List organization repositories"
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_for_org
    IMPORTING
      type TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      direction TYPE string OPTIONAL
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an organization repository"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS repos_create_in_org
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_actions_b01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_packages_01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for an organization"
* Parameter: org, required, path
* Response: 200
*     application/json
  METHODS billing_get_shared_storage_b01
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for an organization"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_idp_groups_for_org
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List teams"
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 403
  METHODS teams_list
    IMPORTING
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a team"
* Parameter: org, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS teams_create
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get a team by name"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS teams_get_by_name
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json
  METHODS teams_update_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS teams_delete_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List discussions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_discussions_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json
  METHODS teams_create_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "Get a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_get_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_update_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS teams_delete_discussion_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List discussion comments"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_discussion_comments
    IMPORTING
      org TYPE string
      team_slug TYPE string
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json
  METHODS teams_create_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "Get a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_get_discussion_comment_i
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Update a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_update_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS teams_delete_discussion_commen
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a team discussion comment"
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS reactions_list_for_team_discus
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion comment"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json
  METHODS reactions_create_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete team discussion comment reaction"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS reactions_delete_for_team_disc
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List reactions for a team discussion"
* Parameter: content, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS reactions_list_for_team_disc01
    IMPORTING
      content TYPE string OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 201
*     application/json
  METHODS reactions_create_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Delete team discussion reaction"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS reactions_delete_for_team_di01
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List pending team invitations"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_pending_invitations
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List team members"
* Parameter: role, optional, query
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_members_in_org
    IMPORTING
      role TYPE string DEFAULT 'all' OPTIONAL
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS teams_get_membership_for_user_
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 422
*     application/json
  METHODS teams_add_or_update_membership
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team membership for a user"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS teams_remove_membership_for_us
    IMPORTING
      org TYPE string
      team_slug TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List team projects"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_projects_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a project"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS teams_check_permissions_for_pr
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team project permissions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
* Response: 403
*     application/json
  METHODS teams_add_or_update_project_pe
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a project from a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 204
  METHODS teams_remove_project_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List team repositories"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_repos_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a repository"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.repository+json
* Response: 204
* Response: 404
  METHODS teams_check_permissions_for_re
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team repository permissions"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS teams_add_or_update_repo_permi
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository from a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS teams_remove_repo_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for a team"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_list_idp_groups_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* PATCH - "Create or update IdP group connections"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Response: 200
*     application/json
  METHODS teams_create_or_update_idp_gro
    IMPORTING
      org TYPE string
      team_slug TYPE string
    RAISING cx_static_check.
* GET - "List child teams"
* Parameter: org, required, path
* Parameter: team_slug, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_child_in_org
    IMPORTING
      org TYPE string
      team_slug TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a project card"
* Parameter: card_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS projects_get_card
    IMPORTING
      card_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update an existing project card"
* Parameter: card_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS projects_update_card
    IMPORTING
      card_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a project card"
* Parameter: card_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
*     application/json
* Response: 404
  METHODS projects_delete_card
    IMPORTING
      card_id TYPE i
    RAISING cx_static_check.
* POST - "Move a project card"
* Parameter: card_id, required, path
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
*     application/json
* Response: 422
* Response: 503
*     application/json
  METHODS projects_move_card
    IMPORTING
      card_id TYPE i
    RAISING cx_static_check.
* GET - "Get a project column"
* Parameter: column_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS projects_get_column
    IMPORTING
      column_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update an existing project column"
* Parameter: column_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_update_column
    IMPORTING
      column_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a project column"
* Parameter: column_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_delete_column
    IMPORTING
      column_id TYPE i
    RAISING cx_static_check.
* GET - "List project cards"
* Parameter: archived_state, optional, query
* Parameter: column_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_list_cards
    IMPORTING
      archived_state TYPE string DEFAULT 'not_archived' OPTIONAL
      column_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a project card"
* Parameter: column_id, required, path
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
*     application/json
* Response: 503
*     application/json
  METHODS projects_create_card
    IMPORTING
      column_id TYPE i
    RAISING cx_static_check.
* POST - "Move a project column"
* Parameter: column_id, required, path
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS projects_move_column
    IMPORTING
      column_id TYPE i
    RAISING cx_static_check.
* GET - "Get a project"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_get
    RAISING cx_static_check.
* PATCH - "Update a project"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
*     application/json
* Response: 404
* Response: 410
* Response: 422
  METHODS projects_update
    RAISING cx_static_check.
* DELETE - "Delete a project"
* Response: 204
* Response: 304
* Response: 401
* Response: 403
*     application/json
* Response: 404
* Response: 410
  METHODS projects_delete
    RAISING cx_static_check.
* GET - "List project collaborators"
* Parameter: affiliation, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_list_collaborators
    IMPORTING
      affiliation TYPE string DEFAULT 'all' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Add project collaborator"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_add_collaborator
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove user as a collaborator"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_remove_collaborator
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get project permission for a user"
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS projects_get_permission_for_us
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List project columns"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS projects_list_columns
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a project column"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS projects_create_column
    RAISING cx_static_check.
* GET - "Get rate limit status for the authenticated user"
* Response: 200
*     application/json
* Response: 304
* Response: 404
  METHODS rate_limit_get
    RAISING cx_static_check.
* DELETE - "Delete a reaction (Legacy)"
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 410
* Response: 415
  METHODS reactions_delete_legacy
    RAISING cx_static_check.
* GET - "Get a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 301
* Response: 403
* Response: 404
  METHODS repos_get
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_update
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 403
*     application/json
* Response: 404
  METHODS repos_delete
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List artifacts for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_artifacts_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an artifact"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 200
*     application/json
  METHODS actions_get_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an artifact"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 204
  METHODS actions_delete_artifact
    IMPORTING
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RAISING cx_static_check.
* GET - "Download an artifact"
* Parameter: archive_format, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: artifact_id, required, path
* Response: 302
  METHODS actions_download_artifact
    IMPORTING
      archive_format TYPE string
      owner TYPE string
      repo TYPE string
      artifact_id TYPE i
    RAISING cx_static_check.
* GET - "Get a job for a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 202
*     application/json
  METHODS actions_get_job_for_workflow_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE i
    RAISING cx_static_check.
* GET - "Download job logs for a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: job_id, required, path
* Response: 302
  METHODS actions_download_job_logs_for_
    IMPORTING
      owner TYPE string
      repo TYPE string
      job_id TYPE i
    RAISING cx_static_check.
* GET - "Get GitHub Actions permissions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set GitHub Actions permissions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_set_github_actions_p01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get allowed actions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set allowed actions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_set_allowed_actions_re
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List self-hosted runners for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_self_hosted_run03
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List runner applications for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_list_runner_applicat01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a registration token for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS actions_create_registration_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a remove token for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS actions_create_remove_token_01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a self-hosted runner for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 200
*     application/json
  METHODS actions_get_self_hosted_runn02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a self-hosted runner from a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: runner_id, required, path
* Response: 204
  METHODS actions_delete_self_hosted_r02
    IMPORTING
      owner TYPE string
      repo TYPE string
      runner_id TYPE i
    RAISING cx_static_check.
* GET - "List workflow runs for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: actor, optional, query
* Parameter: event, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_workflow_runs_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      actor TYPE string OPTIONAL
      event TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_delete_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List workflow run artifacts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_workflow_run_arti
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Cancel a workflow run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
  METHODS actions_cancel_workflow_run
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List jobs for a workflow run"
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_jobs_for_workflow
    IMPORTING
      filter TYPE string DEFAULT 'latest' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Download workflow run logs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302
  METHODS actions_download_workflow_run_
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete workflow run logs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_delete_workflow_run_lo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Re-run a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
  METHODS actions_re_run_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get workflow run usage"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_workflow_run_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository secrets"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_repo_secrets
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a repository public key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_repo_public_key
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 200
*     application/json
  METHODS actions_get_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* PUT - "Create or update a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 201
* Response: 204
  METHODS actions_create_or_update_repo_
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository secret"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: secret_name, required, path
* Response: 204
  METHODS actions_delete_repo_secret
    IMPORTING
      owner TYPE string
      repo TYPE string
      secret_name TYPE string
    RAISING cx_static_check.
* GET - "List repository workflows"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_repo_workflows
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Disable a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_disable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a workflow dispatch event"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_create_workflow_dispat
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable a workflow"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS actions_enable_workflow
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List workflow runs"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: actor, optional, query
* Parameter: event, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS actions_list_workflow_runs
    IMPORTING
      owner TYPE string
      repo TYPE string
      actor TYPE string OPTIONAL
      event TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get workflow usage"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS actions_get_workflow_usage
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List assignees"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS issues_list_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user can be assigned"
* Parameter: assignee, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
*     application/json
  METHODS issues_check_user_can_be_assig
    IMPORTING
      assignee TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable automated security fixes"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_enable_automated_securit
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Disable automated security fixes"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_disable_automated_securi
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List branches"
* Parameter: protected, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_list_branches
    IMPORTING
      protected TYPE abap_bool OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS repos_get_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Update branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 415
* Response: 422
  METHODS repos_update_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
* Response: 403
  METHODS repos_delete_branch_protection
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
  METHODS repos_get_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Set admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
  METHODS repos_set_admin_branch_protect
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete admin branch protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
* Response: 404
  METHODS repos_delete_admin_branch_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/vnd.github.luke-cage-preview+json
  METHODS repos_get_pull_request_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_update_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete pull request review protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
* Response: 404
  METHODS repos_delete_pull_request_revi
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_commit_signature_pro
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_create_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete commit signature protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
* Response: 404
  METHODS repos_delete_commit_signature_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get status checks protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_status_checks_protec
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update status check protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS repos_update_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove status check protection"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
  METHODS repos_remove_status_check_prot
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get all status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_all_status_check_con
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_add_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS repos_set_status_check_context
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove status check contexts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS repos_remove_status_check_cont
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_access_restrictions
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Delete access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 204
  METHODS repos_delete_access_restrictio
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get apps with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_apps_with_access_to_
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_add_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_set_app_access_restricti
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove app access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_remove_app_access_restri
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get teams with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_teams_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_add_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_set_team_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove team access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_remove_team_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* GET - "Get users with access to the protected branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_users_with_access_to
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Add user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_add_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* PUT - "Set user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_set_user_access_restrict
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* DELETE - "Remove user access restrictions"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS repos_remove_user_access_restr
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Rename a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: branch, optional, query
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_rename_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
      branch TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS checks_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200
*     application/json
  METHODS checks_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a check run"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Response: 200
*     application/json
  METHODS checks_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
    RAISING cx_static_check.
* GET - "List check run annotations"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_run_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS checks_list_annotations
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_run_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS checks_create_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update repository preferences for check suites"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS checks_set_suites_preferences
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 200
*     application/json
  METHODS checks_get_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
    RAISING cx_static_check.
* GET - "List check runs in a check suite"
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS checks_list_for_suite
    IMPORTING
      filter TYPE string DEFAULT 'latest' OPTIONAL
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Rerequest a check suite"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_suite_id, required, path
* Response: 201
  METHODS checks_rerequest_suite
    IMPORTING
      owner TYPE string
      repo TYPE string
      check_suite_id TYPE i
    RAISING cx_static_check.
* GET - "List code scanning alerts for a repository"
* Parameter: state, optional, query
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 503
  METHODS code_scanning_list_alerts_for_
    IMPORTING
      state TYPE string OPTIONAL
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a code scanning alert"
* Parameter: alert_number, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 503
  METHODS code_scanning_get_alert
    IMPORTING
      alert_number TYPE i
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a code scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 503
  METHODS code_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* GET - "List recent code scanning analyses for a repository"
* Parameter: ref, optional, query
* Parameter: tool_name, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
  METHODS code_scanning_list_recent_anal
    IMPORTING
      ref TYPE string OPTIONAL
      tool_name TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Upload a SARIF file"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
* Response: 400
* Response: 403
* Response: 404
* Response: 413
  METHODS code_scanning_upload_sarif
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository collaborators"
* Parameter: affiliation, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_list_collaborators
    IMPORTING
      affiliation TYPE string DEFAULT 'all' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user is a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS repos_check_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 201
*     application/json
* Response: 204
* Response: 403
* Response: 422
  METHODS repos_add_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository collaborator"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 204
  METHODS repos_remove_collaborator
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "Get repository permissions for a user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_collaborator_permiss
    IMPORTING
      owner TYPE string
      repo TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List commit comments for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_commit_comments_for
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_update_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 404
  METHODS repos_delete_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List reactions for a commit comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS reactions_list_for_commit_comm
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 415
* Response: 422
  METHODS reactions_create_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a commit comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
  METHODS reactions_delete_for_commit_co
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List commits"
* Parameter: sha, optional, query
* Parameter: path, optional, query
* Parameter: author, optional, query
* Parameter: until, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 400
* Response: 404
* Response: 409
* Response: 500
  METHODS repos_list_commits
    IMPORTING
      sha TYPE string OPTIONAL
      path TYPE string OPTIONAL
      author TYPE string OPTIONAL
      until TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List branches for HEAD commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200
*     application/json
* Response: 415
* Response: 422
  METHODS repos_list_branches_for_head_c
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List commit comments"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_comments_for_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a commit comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS repos_create_commit_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List pull requests associated with a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 415
  METHODS repos_list_pull_requests_assoc
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a commit"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
* Response: 500
  METHODS repos_get_commit
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List check runs for a Git reference"
* Parameter: ref, required, path
* Parameter: filter, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: status, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS checks_list_for_ref
    IMPORTING
      ref TYPE string
      filter TYPE string DEFAULT 'latest' OPTIONAL
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      status TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List check suites for a Git reference"
* Parameter: ref, required, path
* Parameter: app_id, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: check_name, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS checks_list_suites_for_ref
    IMPORTING
      ref TYPE string
      app_id TYPE i OPTIONAL
      owner TYPE string
      repo TYPE string
      check_name TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get the combined status for a specific reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_combined_status_for_
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List commit statuses for a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 301
  METHODS repos_list_commit_statuses_for
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get the code of conduct for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS codes_of_conduct_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get community profile metrics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_community_profile_me
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Compare two commits"
* Parameter: base, required, path
* Parameter: head, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 500
  METHODS repos_compare_commits
    IMPORTING
      base TYPE string
      head TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get repository content"
* Parameter: path, required, path
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.object
*     application/json
* Response: 302
* Response: 403
* Response: 404
  METHODS repos_get_content
    IMPORTING
      path TYPE string
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Create or update file contents"
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 404
* Response: 409
* Response: 422
  METHODS repos_create_or_update_file_co
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a file"
* Parameter: path, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 409
* Response: 422
* Response: 503
  METHODS repos_delete_file
    IMPORTING
      path TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository contributors"
* Parameter: anon, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 204
* Response: 403
* Response: 404
  METHODS repos_list_contributors
    IMPORTING
      anon TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List deployments"
* Parameter: sha, optional, query
* Parameter: ref, optional, query
* Parameter: task, optional, query
* Parameter: environment, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_deployments
    IMPORTING
      sha TYPE string DEFAULT 'none' OPTIONAL
      ref TYPE string DEFAULT 'none' OPTIONAL
      task TYPE string DEFAULT 'none' OPTIONAL
      environment TYPE string DEFAULT 'none' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 202
*     application/json
* Response: 409
*     application/json
* Response: 422
  METHODS repos_create_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a deployment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 204
* Response: 404
* Response: 422
  METHODS repos_delete_deployment
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RAISING cx_static_check.
* GET - "List deployment statuses"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_list_deployment_statuses
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deployment status"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 201
*     application/json
* Response: 422
  METHODS repos_create_deployment_status
    IMPORTING
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RAISING cx_static_check.
* GET - "Get a deployment status"
* Parameter: status_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: deployment_id, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS repos_get_deployment_status
    IMPORTING
      status_id TYPE i
      owner TYPE string
      repo TYPE string
      deployment_id TYPE i
    RAISING cx_static_check.
* POST - "Create a repository dispatch event"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 422
  METHODS repos_create_dispatch_event
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository events"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_repo_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List forks"
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 400
  METHODS repos_list_forks
    IMPORTING
      sort TYPE string DEFAULT 'newest' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a fork"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
*     application/json
* Response: 400
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_create_fork
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a blob"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 409
* Response: 422
  METHODS git_create_blob
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a blob"
* Parameter: file_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS git_get_blob
    IMPORTING
      file_sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS git_create_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a commit"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: commit_sha, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS git_get_commit
    IMPORTING
      owner TYPE string
      repo TYPE string
      commit_sha TYPE string
    RAISING cx_static_check.
* GET - "List matching references"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS git_list_matching_refs
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS git_get_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a reference"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 422
  METHODS git_create_ref
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS git_update_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a reference"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 422
  METHODS git_delete_ref
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a tag object"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 422
  METHODS git_create_tag
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a tag"
* Parameter: tag_sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS git_get_tag
    IMPORTING
      tag_sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a tree"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS git_create_tree
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a tree"
* Parameter: tree_sha, required, path
* Parameter: recursive, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS git_get_tree
    IMPORTING
      tree_sha TYPE string
      recursive TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository webhooks"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_list_webhooks
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_create_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS repos_update_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS repos_delete_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a webhook configuration for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_webhook_config_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a webhook configuration for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_update_webhook_config_fo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Ping a repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS repos_ping_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Test the push repository webhook"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS repos_test_push_webhook
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get an import status"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS migrations_get_import_status
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Start an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS migrations_start_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS migrations_update_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Cancel an import"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS migrations_cancel_import
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get commit authors"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS migrations_get_commit_authors
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Map a commit author"
* Parameter: author_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS migrations_map_commit_author
    IMPORTING
      author_id TYPE i
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get large files"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS migrations_get_large_files
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update Git LFS preference"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS migrations_set_lfs_preference
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository installation for the authenticated app"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 301
* Response: 404
  METHODS apps_get_repo_installation
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS interactions_get_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 409
  METHODS interactions_set_restriction01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 409
  METHODS interactions_remove_restrict01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository invitations"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_invitations
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PATCH - "Update a repository invitation"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 200
*     application/json
  METHODS repos_update_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a repository invitation"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: invitation_id, required, path
* Response: 204
  METHODS repos_delete_invitation
    IMPORTING
      owner TYPE string
      repo TYPE string
      invitation_id TYPE i
    RAISING cx_static_check.
* GET - "List repository issues"
* Parameter: milestone, optional, query
* Parameter: state, optional, query
* Parameter: assignee, optional, query
* Parameter: creator, optional, query
* Parameter: mentioned, optional, query
* Parameter: sort, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 301
* Response: 404
* Response: 422
  METHODS issues_list_for_repo
    IMPORTING
      milestone TYPE string OPTIONAL
      state TYPE string DEFAULT 'open' OPTIONAL
      assignee TYPE string OPTIONAL
      creator TYPE string OPTIONAL
      mentioned TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      owner TYPE string
      repo TYPE string
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Response: 503
  METHODS issues_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List issue comments for a repository"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS issues_list_comments_for_repo
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string DEFAULT 'created' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS issues_get_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS issues_update_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
  METHODS issues_delete_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List reactions for an issue comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS reactions_list_for_issue_comme
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 415
* Response: 422
  METHODS reactions_create_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an issue comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
  METHODS reactions_delete_for_issue_com
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List issue events for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS issues_list_events_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an issue event"
* Parameter: event_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 410
  METHODS issues_get_event
    IMPORTING
      event_id TYPE i
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
* Response: 301
* Response: 304
* Response: 404
* Response: 410
  METHODS issues_get
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* PATCH - "Update an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
* Response: 301
* Response: 403
* Response: 404
* Response: 410
* Response: 422
* Response: 503
  METHODS issues_update
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* POST - "Add assignees to an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json
  METHODS issues_add_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* DELETE - "Remove assignees from an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
  METHODS issues_remove_assignees
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* GET - "List issue comments"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 410
  METHODS issues_list_comments
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create an issue comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS issues_create_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* GET - "List issue events"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 410
  METHODS issues_list_events
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List labels for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 410
  METHODS issues_list_labels_on_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Add labels to an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
* Response: 410
* Response: 422
  METHODS issues_add_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* PUT - "Set labels for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
* Response: 410
* Response: 422
  METHODS issues_set_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* DELETE - "Remove all labels from an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 410
  METHODS issues_remove_all_labels
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* DELETE - "Remove a label from an issue"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 410
  METHODS issues_remove_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* PUT - "Lock an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS issues_lock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* DELETE - "Unlock an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
* Response: 403
* Response: 404
  METHODS issues_unlock
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* GET - "List reactions for an issue"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 410
* Response: 415
  METHODS reactions_list_for_issue
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 201
*     application/json
* Response: 415
* Response: 422
  METHODS reactions_create_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* DELETE - "Delete an issue reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Response: 204
  METHODS reactions_delete_for_issue
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
    RAISING cx_static_check.
* GET - "List timeline events for an issue"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: issue_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 410
* Response: 415
  METHODS issues_list_events_for_timelin
    IMPORTING
      owner TYPE string
      repo TYPE string
      issue_number TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List deploy keys"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_deploy_keys
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 422
  METHODS repos_create_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a deploy key"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: key_id, required, path
* Response: 204
  METHODS repos_delete_deploy_key
    IMPORTING
      owner TYPE string
      repo TYPE string
      key_id TYPE i
    RAISING cx_static_check.
* GET - "List labels for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS issues_list_labels_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a label"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS issues_create_label
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS issues_get_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS issues_update_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a label"
* Parameter: name, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS issues_delete_label
    IMPORTING
      name TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository languages"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_list_languages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the license for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS licenses_get_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Merge a branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 404
*     application/json
* Response: 409
*     application/json
* Response: 422
  METHODS repos_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List milestones"
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS issues_list_milestones
    IMPORTING
      state TYPE string DEFAULT 'open' OPTIONAL
      sort TYPE string DEFAULT 'due_on' OPTIONAL
      direction TYPE string DEFAULT 'asc' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 404
* Response: 422
  METHODS issues_create_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS issues_get_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
    RAISING cx_static_check.
* PATCH - "Update a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 200
*     application/json
  METHODS issues_update_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Response: 204
* Response: 404
  METHODS issues_delete_milestone
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
    RAISING cx_static_check.
* GET - "List labels for issues in a milestone"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: milestone_number, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS issues_list_labels_for_milesto
    IMPORTING
      owner TYPE string
      repo TYPE string
      milestone_number TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List repository notifications for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: all, optional, query
* Parameter: participating, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
      all TYPE abap_bool DEFAULT 'false' OPTIONAL
      participating TYPE abap_bool DEFAULT 'false' OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Mark repository notifications as read"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
  METHODS activity_mark_repo_notificatio
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_pages
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 409
* Response: 415
* Response: 422
  METHODS repos_create_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Update information about a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 400
* Response: 422
  METHODS repos_update_information_about
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a GitHub Pages site"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
* Response: 415
* Response: 422
  METHODS repos_delete_pages_site
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List GitHub Pages builds"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_pages_builds
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Request a GitHub Pages build"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS repos_request_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get latest Pages build"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_latest_pages_build
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Pages build"
* Parameter: build_id, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_pages_build
    IMPORTING
      build_id TYPE i
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository projects"
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS projects_list_for_repo
    IMPORTING
      state TYPE string DEFAULT 'open' OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository project"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 401
* Response: 403
* Response: 404
* Response: 410
* Response: 422
  METHODS projects_create_for_repo
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List pull requests"
* Parameter: state, optional, query
* Parameter: head, optional, query
* Parameter: base, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 422
  METHODS pulls_list
    IMPORTING
      state TYPE string DEFAULT 'open' OPTIONAL
      head TYPE string OPTIONAL
      base TYPE string OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS pulls_create
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List review comments in a repository"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS pulls_list_review_comments_for
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string DEFAULT 'created' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS pulls_get_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
  METHODS pulls_update_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
* Response: 404
  METHODS pulls_delete_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List reactions for a pull request review comment"
* Parameter: content, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS reactions_list_for_pull_reques
    IMPORTING
      content TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a pull request review comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 200
*     application/json
* Response: 201
*     application/json
* Response: 415
* Response: 422
  METHODS reactions_create_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a pull request comment reaction"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 204
  METHODS reactions_delete_for_pull_requ
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "Get a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 404
* Response: 500
  METHODS pulls_get
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PATCH - "Update a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 422
  METHODS pulls_update
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List review comments on a pull request"
* Parameter: direction, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: sort, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS pulls_list_review_comments
    IMPORTING
      direction TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      sort TYPE string DEFAULT 'created' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a review comment for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS pulls_create_review_comment
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a reply for a review comment"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: comment_id, required, path
* Response: 201
*     application/json
* Response: 404
  METHODS pulls_create_reply_for_review_
    IMPORTING
      owner TYPE string
      repo TYPE string
      comment_id TYPE i
    RAISING cx_static_check.
* GET - "List commits on a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS pulls_list_commits
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List pull requests files"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 422
* Response: 500
  METHODS pulls_list_files
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a pull request has been merged"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS pulls_check_if_merged
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Merge a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 405
*     application/json
* Response: 409
*     application/json
* Response: 422
  METHODS pulls_merge
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List requested reviewers for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS pulls_list_requested_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Request reviewers for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 403
* Response: 422
  METHODS pulls_request_reviewers
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove requested reviewers from a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
* Response: 422
  METHODS pulls_remove_requested_reviewe
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List reviews for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS pulls_list_reviews
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 422
  METHODS pulls_create_review
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS pulls_get_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
    RAISING cx_static_check.
* PUT - "Update a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json
* Response: 422
  METHODS pulls_update_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a pending review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS pulls_delete_pending_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
    RAISING cx_static_check.
* GET - "List comments for a pull request review"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS pulls_list_comments_for_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Dismiss a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS pulls_dismiss_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
    RAISING cx_static_check.
* POST - "Submit a review for a pull request"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: review_id, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS pulls_submit_review
    IMPORTING
      owner TYPE string
      repo TYPE string
      review_id TYPE i
    RAISING cx_static_check.
* PUT - "Update a pull request branch"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
*     application/json
* Response: 403
* Response: 415
* Response: 422
  METHODS pulls_update_branch
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a repository README"
* Parameter: ref, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS repos_get_readme
    IMPORTING
      ref TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List releases"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS repos_list_releases
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
* Response: 422
  METHODS repos_create_release
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200
*     application/json
* Response: 302
* Response: 404
* Response: 415
  METHODS repos_get_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 200
*     application/json
  METHODS repos_update_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a release asset"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: asset_id, required, path
* Response: 204
  METHODS repos_delete_release_asset
    IMPORTING
      owner TYPE string
      repo TYPE string
      asset_id TYPE i
    RAISING cx_static_check.
* GET - "Get the latest release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_latest_release
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release by tag name"
* Parameter: tag, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_release_by_tag
    IMPORTING
      tag TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RAISING cx_static_check.
* PATCH - "Update a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 200
*     application/json
  METHODS repos_update_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a release"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 204
  METHODS repos_delete_release
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RAISING cx_static_check.
* GET - "List release assets"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_release_assets
    IMPORTING
      owner TYPE string
      repo TYPE string
      release_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Upload a release asset"
* Parameter: name, optional, query
* Parameter: label, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: release_id, required, path
* Response: 201
*     application/json
  METHODS repos_upload_release_asset
    IMPORTING
      name TYPE string OPTIONAL
      label TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      release_id TYPE i
    RAISING cx_static_check.
* GET - "List secret scanning alerts for a repository"
* Parameter: state, optional, query
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: page, optional, query
* Parameter: per_page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 503
  METHODS secret_scanning_list_alerts_fo
    IMPORTING
      state TYPE string OPTIONAL
      owner TYPE string
      repo TYPE string
      page TYPE i DEFAULT 1 OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a secret scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 503
  METHODS secret_scanning_get_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* PATCH - "Update a secret scanning alert"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: alert_number, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
* Response: 503
  METHODS secret_scanning_update_alert
    IMPORTING
      owner TYPE string
      repo TYPE string
      alert_number TYPE string
    RAISING cx_static_check.
* GET - "List stargazers"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
*     application/vnd.github.v3.star+json
* Response: 422
  METHODS activity_list_stargazers_for_r
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get the weekly commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_code_frequency_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the last year of commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_commit_activity_stat
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get all contributor commit activity"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_contributors_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the weekly commit count"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS repos_get_participation_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get the hourly commit count for each day"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS repos_get_punch_card_stats
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a commit status"
* Parameter: sha, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 201
*     application/json
  METHODS repos_create_commit_status
    IMPORTING
      sha TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List watchers"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_watchers_for_rep
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
  METHODS activity_get_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Set a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
  METHODS activity_set_repo_subscription
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a repository subscription"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS activity_delete_repo_subscript
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository tags"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_tags
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Download a repository archive (tar)"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302
  METHODS repos_download_tarball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repository teams"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_teams
    IMPORTING
      owner TYPE string
      repo TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get all repository topics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS repos_get_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Replace all repository topics"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 415
* Response: 422
  METHODS repos_replace_all_topics
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get repository clones"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200
*     application/json
* Response: 403
  METHODS repos_get_clones
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string DEFAULT 'day' OPTIONAL
    RAISING cx_static_check.
* GET - "Get top referral paths"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
  METHODS repos_get_top_paths
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get top referral sources"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/json
* Response: 403
  METHODS repos_get_top_referrers
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Get page views"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Parameter: per, optional, query
* Response: 200
*     application/json
* Response: 403
  METHODS repos_get_views
    IMPORTING
      owner TYPE string
      repo TYPE string
      per TYPE string DEFAULT 'day' OPTIONAL
    RAISING cx_static_check.
* POST - "Transfer a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 202
*     application/json
  METHODS repos_transfer
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Check if vulnerability alerts are enabled for a repository"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 404
  METHODS repos_check_vulnerability_aler
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Enable vulnerability alerts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_enable_vulnerability_ale
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Disable vulnerability alerts"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS repos_disable_vulnerability_al
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "Download a repository archive (zip)"
* Parameter: ref, required, path
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 302
  METHODS repos_download_zipball_archive
    IMPORTING
      ref TYPE string
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* POST - "Create a repository using a template"
* Parameter: template_owner, required, path
* Parameter: template_repo, required, path
* Response: 201
*     application/json
  METHODS repos_create_using_template
    IMPORTING
      template_owner TYPE string
      template_repo TYPE string
    RAISING cx_static_check.
* GET - "List public repositories"
* Response: 200
*     application/json
* Response: 304
* Response: 422
  METHODS repos_list_public
    RAISING cx_static_check.
* GET - "List provisioned SCIM groups for an enterprise"
* Parameter: enterprise, required, path
* Parameter: count, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_provisio
    IMPORTING
      enterprise TYPE string
      count TYPE i OPTIONAL
    RAISING cx_static_check.
* POST - "Provision a SCIM enterprise group and invite users"
* Parameter: enterprise, required, path
* Response: 201
*     application/json
  METHODS enterprise_admin_provision_and
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for an enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_provision
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* PUT - "Set SCIM information for a provisioned enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_set_informati
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM enterprise group"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_update_attrib
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM group from an enterprise"
* Parameter: enterprise, required, path
* Parameter: scim_group_id, required, path
* Response: 204
  METHODS enterprise_admin_delete_scim_g
    IMPORTING
      enterprise TYPE string
      scim_group_id TYPE string
    RAISING cx_static_check.
* GET - "List SCIM provisioned identities for an enterprise"
* Parameter: enterprise, required, path
* Parameter: count, optional, query
* Response: 200
*     application/json
  METHODS enterprise_admin_list_provis01
    IMPORTING
      enterprise TYPE string
      count TYPE i OPTIONAL
    RAISING cx_static_check.
* POST - "Provision and invite a SCIM enterprise user"
* Parameter: enterprise, required, path
* Response: 201
*     application/json
  METHODS enterprise_admin_provision_a01
    IMPORTING
      enterprise TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for an enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_get_provisi01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PUT - "Set SCIM information for a provisioned enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_set_informa01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM enterprise user"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/json
  METHODS enterprise_admin_update_attr01
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM user from an enterprise"
* Parameter: enterprise, required, path
* Parameter: scim_user_id, required, path
* Response: 204
  METHODS enterprise_admin_delete_user_f
    IMPORTING
      enterprise TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* GET - "List SCIM provisioned identities"
* Parameter: startIndex, optional, query
* Parameter: count, optional, query
* Parameter: filter, optional, query
* Parameter: org, required, path
* Response: 200
*     application/scim+json
* Response: 304
* Response: 400
* Response: 403
* Response: 404
  METHODS scim_list_provisioned_identiti
    IMPORTING
      startindex TYPE i OPTIONAL
      count TYPE i OPTIONAL
      filter TYPE string OPTIONAL
      org TYPE string
    RAISING cx_static_check.
* POST - "Provision and invite a SCIM user"
* Parameter: org, required, path
* Response: 201
*     application/scim+json
* Response: 304
* Response: 400
* Response: 403
* Response: 404
* Response: 409
* Response: 500
  METHODS scim_provision_and_invite_user
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "Get SCIM provisioning information for a user"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json
* Response: 304
* Response: 403
* Response: 404
  METHODS scim_get_provisioning_informat
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PUT - "Update a provisioned organization membership"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json
* Response: 304
* Response: 403
* Response: 404
  METHODS scim_set_information_for_provi
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* PATCH - "Update an attribute for a SCIM user"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 200
*     application/scim+json
* Response: 304
* Response: 400
* Response: 403
* Response: 404
* Response: 429
*     application/json
  METHODS scim_update_attribute_for_user
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* DELETE - "Delete a SCIM user from an organization"
* Parameter: org, required, path
* Parameter: scim_user_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS scim_delete_user_from_org
    IMPORTING
      org TYPE string
      scim_user_id TYPE string
    RAISING cx_static_check.
* GET - "Search code"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 422
* Response: 503
  METHODS search_code
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Search commits"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 415
  METHODS search_commits
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Search issues and pull requests"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 422
* Response: 503
  METHODS search_issues_and_pull_request
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Search labels"
* Parameter: repository_id, required, query
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
* Response: 422
  METHODS search_labels
    IMPORTING
      repository_id TYPE i
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
    RAISING cx_static_check.
* GET - "Search repositories"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 422
* Response: 503
  METHODS search_repos
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Search topics"
* Parameter: q, required, query
* Response: 200
*     application/json
* Response: 304
* Response: 415
  METHODS search_topics
    IMPORTING
      q TYPE string
    RAISING cx_static_check.
* GET - "Search users"
* Parameter: q, required, query
* Parameter: sort, optional, query
* Parameter: order, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 422
* Response: 503
  METHODS search_users
    IMPORTING
      q TYPE string
      sort TYPE string OPTIONAL
      order TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a team (Legacy)"
* Response: 200
*     application/json
* Response: 404
  METHODS teams_get_legacy
    RAISING cx_static_check.
* PATCH - "Update a team (Legacy)"
* Response: 201
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS teams_update_legacy
    RAISING cx_static_check.
* DELETE - "Delete a team (Legacy)"
* Response: 204
* Response: 404
* Response: 422
  METHODS teams_delete_legacy
    RAISING cx_static_check.
* GET - "List discussions (Legacy)"
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_discussions_legacy
    IMPORTING
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion (Legacy)"
* Response: 201
*     application/json
  METHODS teams_create_discussion_legacy
    RAISING cx_static_check.
* GET - "Get a discussion (Legacy)"
* Response: 200
*     application/json
  METHODS teams_get_discussion_legacy
    RAISING cx_static_check.
* PATCH - "Update a discussion (Legacy)"
* Response: 200
*     application/json
  METHODS teams_update_discussion_legacy
    RAISING cx_static_check.
* DELETE - "Delete a discussion (Legacy)"
* Response: 204
  METHODS teams_delete_discussion_legacy
    RAISING cx_static_check.
* GET - "List discussion comments (Legacy)"
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_discussion_commen01
    IMPORTING
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a discussion comment (Legacy)"
* Response: 201
*     application/json
  METHODS teams_create_discussion_comm01
    RAISING cx_static_check.
* GET - "Get a discussion comment (Legacy)"
* Response: 200
*     application/json
  METHODS teams_get_discussion_comment_l
    RAISING cx_static_check.
* PATCH - "Update a discussion comment (Legacy)"
* Response: 200
*     application/json
  METHODS teams_update_discussion_comm01
    RAISING cx_static_check.
* DELETE - "Delete a discussion comment (Legacy)"
* Response: 204
  METHODS teams_delete_discussion_comm01
    RAISING cx_static_check.
* GET - "List reactions for a team discussion comment (Legacy)"
* Parameter: content, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS reactions_list_for_team_disc02
    IMPORTING
      content TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion comment (Legacy)"
* Response: 201
*     application/json
  METHODS reactions_create_for_team_di02
    RAISING cx_static_check.
* GET - "List reactions for a team discussion (Legacy)"
* Parameter: content, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS reactions_list_for_team_disc03
    IMPORTING
      content TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create reaction for a team discussion (Legacy)"
* Response: 201
*     application/json
  METHODS reactions_create_for_team_di03
    RAISING cx_static_check.
* GET - "List pending team invitations (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS teams_list_pending_invitatio01
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List team members (Legacy)"
* Parameter: role, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS teams_list_members_legacy
    IMPORTING
      role TYPE string DEFAULT 'all' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get team member (Legacy)"
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS teams_get_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add team member (Legacy)"
* Parameter: username, required, path
* Response: 204
* Response: 403
* Response: 404
* Response: 422
*     application/json
  METHODS teams_add_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team member (Legacy)"
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS teams_remove_member_legacy
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS teams_get_membership_for_use01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
*     application/json
  METHODS teams_add_or_update_membersh01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Remove team membership for a user (Legacy)"
* Parameter: username, required, path
* Response: 204
* Response: 403
  METHODS teams_remove_membership_for_01
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List team projects (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS teams_list_projects_legacy
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a project (Legacy)"
* Response: 200
*     application/json
* Response: 404
* Response: 415
  METHODS teams_check_permissions_for_01
    RAISING cx_static_check.
* PUT - "Add or update team project permissions (Legacy)"
* Response: 204
* Response: 403
*     application/json
* Response: 404
* Response: 415
* Response: 422
  METHODS teams_add_or_update_project_01
    RAISING cx_static_check.
* DELETE - "Remove a project from a team (Legacy)"
* Response: 204
* Response: 404
* Response: 415
* Response: 422
  METHODS teams_remove_project_legacy
    RAISING cx_static_check.
* GET - "List team repositories (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS teams_list_repos_legacy
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check team permissions for a repository (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 200
*     application/vnd.github.v3.repository+json
* Response: 204
* Response: 404
  METHODS teams_check_permissions_for_02
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Add or update team repository permissions (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 403
* Response: 422
  METHODS teams_add_or_update_repo_per01
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Remove a repository from a team (Legacy)"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
  METHODS teams_remove_repo_legacy
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List IdP groups for a team (Legacy)"
* Response: 200
*     application/json
* Response: 403
* Response: 404
  METHODS teams_list_idp_groups_for_lega
    RAISING cx_static_check.
* PATCH - "Create or update IdP group connections (Legacy)"
* Response: 200
*     application/json
* Response: 403
* Response: 422
  METHODS teams_create_or_update_idp_g01
    RAISING cx_static_check.
* GET - "List child teams (Legacy)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS teams_list_child_legacy
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get the authenticated user"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS users_get_authenticated
    RAISING cx_static_check.
* PATCH - "Update the authenticated user"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_update_authenticated
    RAISING cx_static_check.
* GET - "List users blocked by the authenticated user"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 415
  METHODS users_list_blocked_by_authenti
    RAISING cx_static_check.
* GET - "Check if a user is blocked by the authenticated user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json
  METHODS users_check_blocked
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Block a user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_block
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unblock a user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_unblock
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PATCH - "Set primary email visibility for the authenticated user"
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_set_primary_email_visibi
    RAISING cx_static_check.
* GET - "List email addresses for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_emails_for_authenti
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Add an email address for the authenticated user"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_add_email_for_authentica
    RAISING cx_static_check.
* DELETE - "Delete an email address for the authenticated user"
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_delete_email_for_authent
    RAISING cx_static_check.
* GET - "List followers of the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS users_list_followers_for_authe
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List the people the authenticated user follows"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS users_list_followed_by_authent
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a person is followed by the authenticated user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json
  METHODS users_check_person_is_followed
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* PUT - "Follow a user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_follow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* DELETE - "Unfollow a user"
* Parameter: username, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_unfollow
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List GPG keys for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_gpg_keys_for_authen
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a GPG key for the authenticated user"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_create_gpg_key_for_authe
    RAISING cx_static_check.
* GET - "Get a GPG key for the authenticated user"
* Parameter: gpg_key_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_get_gpg_key_for_authenti
    IMPORTING
      gpg_key_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a GPG key for the authenticated user"
* Parameter: gpg_key_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_delete_gpg_key_for_authe
    IMPORTING
      gpg_key_id TYPE i
    RAISING cx_static_check.
* GET - "List app installations accessible to the user access token"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 415
  METHODS apps_list_installations_for_au
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories accessible to the user access token"
* Parameter: installation_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_list_installation_repos_f
    IMPORTING
      installation_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PUT - "Add a repository to an app installation"
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_add_repo_to_installation
    IMPORTING
      installation_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.
* DELETE - "Remove a repository from an app installation"
* Parameter: installation_id, required, path
* Parameter: repository_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
  METHODS apps_remove_repo_from_installa
    IMPORTING
      installation_id TYPE i
      repository_id TYPE i
    RAISING cx_static_check.
* GET - "Get interaction restrictions for your public repositories"
* Response: 200
*     application/json
  METHODS interactions_get_restriction02
    RAISING cx_static_check.
* PUT - "Set interaction restrictions for your public repositories"
* Response: 200
*     application/json
* Response: 422
  METHODS interactions_set_restriction02
    RAISING cx_static_check.
* DELETE - "Remove interaction restrictions from your public repositories"
* Response: 204
  METHODS interactions_remove_restrict02
    RAISING cx_static_check.
* GET - "List user account issues assigned to the authenticated user"
* Parameter: filter, optional, query
* Parameter: state, optional, query
* Parameter: sort, optional, query
* Parameter: labels, optional, query
* Parameter: direction, optional, query
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 404
  METHODS issues_list_for_authenticated_
    IMPORTING
      filter TYPE string DEFAULT 'assigned' OPTIONAL
      state TYPE string DEFAULT 'open' OPTIONAL
      sort TYPE string DEFAULT 'created' OPTIONAL
      labels TYPE string OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List public SSH keys for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_public_ssh_keys_for
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a public SSH key for the authenticated user"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS users_create_public_ssh_key_fo
    RAISING cx_static_check.
* GET - "Get a public SSH key for the authenticated user"
* Parameter: key_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_get_public_ssh_key_for_a
    IMPORTING
      key_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a public SSH key for the authenticated user"
* Parameter: key_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_delete_public_ssh_key_fo
    IMPORTING
      key_id TYPE i
    RAISING cx_static_check.
* GET - "List subscriptions for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 404
  METHODS apps_list_subscriptions_for_au
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List subscriptions for the authenticated user (stubbed)"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
  METHODS apps_list_subscriptions_for_01
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organization memberships for the authenticated user"
* Parameter: state, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS orgs_list_memberships_for_auth
    IMPORTING
      state TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get an organization membership for the authenticated user"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
  METHODS orgs_get_membership_for_authen
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* PATCH - "Update an organization membership for the authenticated user"
* Parameter: org, required, path
* Response: 200
*     application/json
* Response: 403
* Response: 404
* Response: 422
  METHODS orgs_update_membership_for_aut
    IMPORTING
      org TYPE string
    RAISING cx_static_check.
* GET - "List user migrations"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS migrations_list_for_authentica
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Start a user migration"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS migrations_start_for_authentic
    RAISING cx_static_check.
* GET - "Get a user migration status"
* Parameter: exclude, optional, query
* Parameter: migration_id, required, path
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_get_status_for_auth
    IMPORTING
      exclude TYPE string OPTIONAL
      migration_id TYPE i
    RAISING cx_static_check.
* GET - "Download a user migration archive"
* Parameter: migration_id, required, path
* Response: 302
* Response: 304
* Response: 401
* Response: 403
  METHODS migrations_get_archive_for_aut
    IMPORTING
      migration_id TYPE i
    RAISING cx_static_check.
* DELETE - "Delete a user migration archive"
* Parameter: migration_id, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_delete_archive_fo01
    IMPORTING
      migration_id TYPE i
    RAISING cx_static_check.
* DELETE - "Unlock a user repository"
* Parameter: migration_id, required, path
* Parameter: repo_name, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS migrations_unlock_repo_for_aut
    IMPORTING
      migration_id TYPE i
      repo_name TYPE string
    RAISING cx_static_check.
* GET - "List repositories for a user migration"
* Parameter: migration_id, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 404
  METHODS migrations_list_repos_for_user
    IMPORTING
      migration_id TYPE i
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS orgs_list_for_authenticated_us
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* POST - "Create a user project"
* Response: 201
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 415
* Response: 422
  METHODS projects_create_for_authentica
    RAISING cx_static_check.
* GET - "List public email addresses for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS users_list_public_emails_for_a
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories for the authenticated user"
* Parameter: visibility, optional, query
* Parameter: affiliation, optional, query
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Parameter: since, optional, query
* Parameter: before, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 422
  METHODS repos_list_for_authenticated_u
    IMPORTING
      visibility TYPE string DEFAULT 'all' OPTIONAL
      affiliation TYPE string DEFAULT 'owner,collaborator,organization_member' OPTIONAL
      type TYPE string DEFAULT 'all' OPTIONAL
      sort TYPE string DEFAULT 'full_name' OPTIONAL
      direction TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
      since TYPE string OPTIONAL
      before TYPE string OPTIONAL
    RAISING cx_static_check.
* POST - "Create a repository for the authenticated user"
* Response: 201
*     application/json
* Response: 304
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 422
  METHODS repos_create_for_authenticated
    RAISING cx_static_check.
* GET - "List repository invitations for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS repos_list_invitations_for_aut
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* PATCH - "Accept a repository invitation"
* Parameter: invitation_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Response: 409
  METHODS repos_accept_invitation
    IMPORTING
      invitation_id TYPE i
    RAISING cx_static_check.
* DELETE - "Decline a repository invitation"
* Parameter: invitation_id, required, path
* Response: 204
* Response: 304
* Response: 403
* Response: 404
* Response: 409
  METHODS repos_decline_invitation
    IMPORTING
      invitation_id TYPE i
    RAISING cx_static_check.
* GET - "List repositories starred by the authenticated user"
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
*     application/vnd.github.v3.star+json
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_list_repos_starred_by
    IMPORTING
      sort TYPE string DEFAULT 'created' OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a repository is starred by the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
*     application/json
  METHODS activity_check_repo_is_starred
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* PUT - "Star a repository for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS activity_star_repo_for_authent
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* DELETE - "Unstar a repository for the authenticated user"
* Parameter: owner, required, path
* Parameter: repo, required, path
* Response: 204
* Response: 304
* Response: 401
* Response: 403
* Response: 404
  METHODS activity_unstar_repo_for_authe
    IMPORTING
      owner TYPE string
      repo TYPE string
    RAISING cx_static_check.
* GET - "List repositories watched by the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 401
* Response: 403
  METHODS activity_list_watched_repos_fo
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List teams for the authenticated user"
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 304
* Response: 403
* Response: 404
  METHODS teams_list_for_authenticated_u
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List users"
* Parameter: per_page, optional, query
* Response: 200
*     application/json
* Response: 304
  METHODS users_list
    IMPORTING
      per_page TYPE i DEFAULT 30 OPTIONAL
    RAISING cx_static_check.
* GET - "Get a user"
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 404
  METHODS users_get_by_username
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List events for the authenticated user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_events_for_authe
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organization events for the authenticated user"
* Parameter: username, required, path
* Parameter: org, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_org_events_for_a
    IMPORTING
      username TYPE string
      org TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List public events for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_public_events_01
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List followers of a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS users_list_followers_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List the people a user follows"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS users_list_following_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Check if a user follows another user"
* Parameter: target_user, required, path
* Parameter: username, required, path
* Response: 204
* Response: 404
  METHODS users_check_following_for_user
    IMPORTING
      target_user TYPE string
      username TYPE string
    RAISING cx_static_check.
* GET - "List gists for a user"
* Parameter: username, required, path
* Parameter: since, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 422
  METHODS gists_list_for_user
    IMPORTING
      username TYPE string
      since TYPE string OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List GPG keys for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS users_list_gpg_keys_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get contextual information for a user"
* Parameter: subject_type, optional, query
* Parameter: subject_id, optional, query
* Parameter: username, required, path
* Response: 200
*     application/json
* Response: 404
* Response: 422
  METHODS users_get_context_for_user
    IMPORTING
      subject_type TYPE string OPTIONAL
      subject_id TYPE string OPTIONAL
      username TYPE string
    RAISING cx_static_check.
* GET - "Get a user installation for the authenticated app"
* Parameter: username, required, path
* Response: 200
*     application/json
  METHODS apps_get_user_installation
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List public keys for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS users_list_public_keys_for_use
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List organizations for a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS orgs_list_for_user
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List user projects"
* Parameter: state, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
* Response: 415
* Response: 422
  METHODS projects_list_for_user
    IMPORTING
      state TYPE string DEFAULT 'open' OPTIONAL
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List events received by the authenticated user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_received_events_
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List public events received by a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_received_public_
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories for a user"
* Parameter: type, optional, query
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS repos_list_for_user
    IMPORTING
      type TYPE string DEFAULT 'owner' OPTIONAL
      sort TYPE string DEFAULT 'full_name' OPTIONAL
      direction TYPE string OPTIONAL
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get GitHub Actions billing for a user"
* Parameter: username, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_actions_b02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get GitHub Packages billing for a user"
* Parameter: username, required, path
* Response: 200
*     application/json
  METHODS billing_get_github_packages_02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "Get shared storage billing for a user"
* Parameter: username, required, path
* Response: 200
*     application/json
  METHODS billing_get_shared_storage_b02
    IMPORTING
      username TYPE string
    RAISING cx_static_check.
* GET - "List repositories starred by a user"
* Parameter: username, required, path
* Parameter: sort, optional, query
* Parameter: direction, optional, query
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
*     application/vnd.github.v3.star+json
  METHODS activity_list_repos_starred_01
    IMPORTING
      username TYPE string
      sort TYPE string DEFAULT 'created' OPTIONAL
      direction TYPE string DEFAULT 'desc' OPTIONAL
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "List repositories watched by a user"
* Parameter: username, required, path
* Parameter: per_page, optional, query
* Parameter: page, optional, query
* Response: 200
*     application/json
  METHODS activity_list_repos_watched_by
    IMPORTING
      username TYPE string
      per_page TYPE i DEFAULT 30 OPTIONAL
      page TYPE i DEFAULT 1 OPTIONAL
    RAISING cx_static_check.
* GET - "Get the Zen of GitHub"
* Response: 200
*     text/plain
  METHODS meta_get_zen
    RAISING cx_static_check.
ENDINTERFACE.