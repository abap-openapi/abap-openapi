INTERFACE zif_jira.
* Generated by abap-openapi-client
* The Jira Cloud platform REST API

* Component schema: PropertyKey, object
  TYPES: BEGIN OF propertykey,
           self TYPE string,
           key TYPE string,
         END OF propertykey.

* Component schema: PropertyKeys, object
  TYPES: BEGIN OF propertykeys,
           keys TYPE string,
         END OF propertykeys.

* Component schema: EntityProperty, object
  TYPES: BEGIN OF entityproperty,
           key TYPE string,
           value TYPE string,
         END OF entityproperty.

* Component schema: IssuesAndJQLQueries, object
  TYPES: BEGIN OF issuesandjqlqueries,
           jqls TYPE string,
           issueids TYPE string,
         END OF issuesandjqlqueries.

* Component schema: IssueMatches, object
  TYPES: BEGIN OF issuematches,
           matches TYPE string,
         END OF issuematches.

* Component schema: IssueMatchesForJQL, object
  TYPES: BEGIN OF issuematchesforjql,
           matchedissues TYPE string,
           errors TYPE string,
         END OF issuematchesforjql.

* Component schema: AssociatedItemBean, object
  TYPES: BEGIN OF associateditembean,
           id TYPE string,
           name TYPE string,
           typename TYPE string,
           parentid TYPE string,
           parentname TYPE string,
         END OF associateditembean.

* Component schema: AuditRecordBean, object
  TYPES: BEGIN OF auditrecordbean,
           id TYPE i,
           summary TYPE string,
           remoteaddress TYPE string,
           authorkey TYPE string,
           created TYPE string,
           category TYPE string,
           eventsource TYPE string,
           description TYPE string,
           objectitem TYPE string,
           changedvalues TYPE string,
           associateditems TYPE string,
         END OF auditrecordbean.

* Component schema: AuditRecords, object
  TYPES: BEGIN OF auditrecords,
           offset TYPE i,
           limit TYPE i,
           total TYPE i,
           records TYPE string,
         END OF auditrecords.

* Component schema: ChangedValueBean, object
  TYPES: BEGIN OF changedvaluebean,
           fieldname TYPE string,
           changedfrom TYPE string,
           changedto TYPE string,
         END OF changedvaluebean.

* Component schema: AvatarUrlsBean, object
  TYPES: BEGIN OF avatarurlsbean,
           16x16 TYPE string,
           24x24 TYPE string,
           32x32 TYPE string,
           48x48 TYPE string,
         END OF avatarurlsbean.

* Component schema: DeprecatedWorkflow, object
  TYPES: BEGIN OF deprecatedworkflow,
           name TYPE string,
           description TYPE string,
           lastmodifieddate TYPE string,
           lastmodifieduser TYPE string,
           lastmodifieduseraccountid TYPE string,
           steps TYPE i,
           scope TYPE string,
           default TYPE abap_bool,
         END OF deprecatedworkflow.

* Component schema: ProjectForScope, object
  TYPES: BEGIN OF projectforscope,
           self TYPE string,
           id TYPE string,
           key TYPE string,
           name TYPE string,
           projecttypekey TYPE string,
           simplified TYPE abap_bool,
           avatarurls TYPE string,
           projectcategory TYPE string,
         END OF projectforscope.

* Component schema: Scope, object
  TYPES: BEGIN OF scope,
           type TYPE string,
           project TYPE string,
         END OF scope.

* Component schema: UpdatedProjectCategory, object
  TYPES: BEGIN OF updatedprojectcategory,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           name TYPE string,
         END OF updatedprojectcategory.

* Component schema: WorkflowTransitionProperty, object
  TYPES: BEGIN OF workflowtransitionproperty,
           key TYPE string,
           value TYPE string,
           id TYPE string,
         END OF workflowtransitionproperty.

* Component schema: ColumnItem, object
  TYPES: BEGIN OF columnitem,
           label TYPE string,
           value TYPE string,
         END OF columnitem.

* Component schema: Configuration, object
  TYPES: BEGIN OF configuration,
           votingenabled TYPE abap_bool,
           watchingenabled TYPE abap_bool,
           unassignedissuesallowed TYPE abap_bool,
           subtasksenabled TYPE abap_bool,
           issuelinkingenabled TYPE abap_bool,
           timetrackingenabled TYPE abap_bool,
           attachmentsenabled TYPE abap_bool,
           timetrackingconfiguration TYPE string,
         END OF configuration.

* Component schema: TimeTrackingConfiguration, object
  TYPES: BEGIN OF timetrackingconfiguration,
           workinghoursperday TYPE f,
           workingdaysperweek TYPE f,
           timeformat TYPE string,
           defaultunit TYPE string,
         END OF timetrackingconfiguration.

* Component schema: ApplicationProperty, object
  TYPES: BEGIN OF applicationproperty,
           id TYPE string,
           key TYPE string,
           value TYPE string,
           name TYPE string,
           desc TYPE string,
           type TYPE string,
           defaultvalue TYPE string,
           example TYPE string,
           allowedvalues TYPE string,
         END OF applicationproperty.

* Component schema: SimpleApplicationPropertyBean, object
  TYPES: BEGIN OF simpleapplicationpropertybean,
           id TYPE string,
           value TYPE string,
         END OF simpleapplicationpropertybean.

* Component schema: ApplicationRole, object
  TYPES: BEGIN OF applicationrole,
           key TYPE string,
           groups TYPE string,
           name TYPE string,
           defaultgroups TYPE string,
           selectedbydefault TYPE abap_bool,
           defined TYPE abap_bool,
           numberofseats TYPE i,
           remainingseats TYPE i,
           usercount TYPE i,
           usercountdescription TYPE string,
           hasunlimitedseats TYPE abap_bool,
           platform TYPE abap_bool,
         END OF applicationrole.

* Component schema: GroupName, object
  TYPES: BEGIN OF groupname,
           name TYPE string,
           self TYPE string,
         END OF groupname.

* Component schema: IssueTypeDetails, object
  TYPES: BEGIN OF issuetypedetails,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           iconurl TYPE string,
           name TYPE string,
           subtask TYPE abap_bool,
           avatarid TYPE i,
           entityid TYPE string,
           hierarchylevel TYPE i,
           scope TYPE string,
         END OF issuetypedetails.

* Component schema: ListWrapperCallbackApplicationRole, object
  TYPES: BEGIN OF listwrappercallbackapplication,
           dummy TYPE i,
         END OF listwrappercallbackapplication.

* Component schema: ListWrapperCallbackGroupName, object
  TYPES: BEGIN OF listwrappercallbackgroupname,
           dummy TYPE i,
         END OF listwrappercallbackgroupname.

* Component schema: PageBeanWorkflowScheme, object
  TYPES: BEGIN OF pagebeanworkflowscheme,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanworkflowscheme.

* Component schema: SimpleListWrapperApplicationRole, object
  TYPES: BEGIN OF simplelistwrapperapplicationro,
           size TYPE i,
           items TYPE string,
           pagingcallback TYPE string,
           callback TYPE string,
           max_results TYPE i,
         END OF simplelistwrapperapplicationro.

* Component schema: SimpleListWrapperGroupName, object
  TYPES: BEGIN OF simplelistwrappergroupname,
           size TYPE i,
           items TYPE string,
           pagingcallback TYPE string,
           callback TYPE string,
           max_results TYPE i,
         END OF simplelistwrappergroupname.

* Component schema: User, object
  TYPES: BEGIN OF user,
           self TYPE string,
           key TYPE string,
           accountid TYPE string,
           accounttype TYPE string,
           name TYPE string,
           emailaddress TYPE string,
           avatarurls TYPE string,
           displayname TYPE string,
           active TYPE abap_bool,
           timezone TYPE string,
           locale TYPE string,
           groups TYPE string,
           applicationroles TYPE string,
           expand TYPE string,
         END OF user.

* Component schema: WorkflowScheme, object
  TYPES: BEGIN OF workflowscheme,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           defaultworkflow TYPE string,
           issuetypemappings TYPE string,
           originaldefaultworkflow TYPE string,
           originalissuetypemappings TYPE string,
           draft TYPE abap_bool,
           lastmodifieduser TYPE string,
           lastmodified TYPE string,
           self TYPE string,
           updatedraftifneeded TYPE abap_bool,
           issuetypes TYPE string,
         END OF workflowscheme.

* Component schema: IssueTypesWorkflowMapping, object
  TYPES: BEGIN OF issuetypesworkflowmapping,
           workflow TYPE string,
           issuetypes TYPE string,
           defaultmapping TYPE abap_bool,
           updatedraftifneeded TYPE abap_bool,
         END OF issuetypesworkflowmapping.

* Component schema: IssueTypeWorkflowMapping, object
  TYPES: BEGIN OF issuetypeworkflowmapping,
           issuetype TYPE string,
           workflow TYPE string,
           updatedraftifneeded TYPE abap_bool,
         END OF issuetypeworkflowmapping.

* Component schema: DefaultWorkflow, object
  TYPES: BEGIN OF defaultworkflow,
           workflow TYPE string,
           updatedraftifneeded TYPE abap_bool,
         END OF defaultworkflow.

* Component schema: ContainerOfWorkflowSchemeAssociations, object
  TYPES: BEGIN OF containerofworkflowschemeassoc,
           values TYPE string,
         END OF containerofworkflowschemeassoc.

* Component schema: WorkflowSchemeAssociations, object
  TYPES: BEGIN OF workflowschemeassociations,
           projectids TYPE string,
           workflowscheme TYPE string,
         END OF workflowschemeassociations.

* Component schema: WorkflowSchemeProjectAssociation, object
  TYPES: BEGIN OF workflowschemeprojectassociati,
           workflowschemeid TYPE string,
           projectid TYPE string,
         END OF workflowschemeprojectassociati.

* Component schema: PageBeanWorkflow, object
  TYPES: BEGIN OF pagebeanworkflow,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanworkflow.

* Component schema: PublishedWorkflowId, object
  TYPES: BEGIN OF publishedworkflowid,
           name TYPE string,
         END OF publishedworkflowid.

* Component schema: ScreenID, object
  TYPES: BEGIN OF screenid,
           id TYPE string,
         END OF screenid.

* Component schema: Transition, object
  TYPES: BEGIN OF transition,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           from TYPE string,
           to TYPE string,
           type TYPE string,
           screen TYPE string,
           rules TYPE string,
         END OF transition.

* Component schema: Workflow, object
  TYPES: BEGIN OF workflow,
           id TYPE string,
           description TYPE string,
           transitions TYPE string,
           statuses TYPE string,
         END OF workflow.

* Component schema: WorkflowRules, object
  TYPES: BEGIN OF workflowrules,
           conditions TYPE string,
           validators TYPE string,
           postfunctions TYPE string,
         END OF workflowrules.

* Component schema: WorkflowStatus, object
  TYPES: BEGIN OF workflowstatus,
           id TYPE string,
           name TYPE string,
           properties TYPE string,
         END OF workflowstatus.

* Component schema: WorkflowStatusProperties, object
  TYPES: BEGIN OF workflowstatusproperties,
           issueeditable TYPE abap_bool,
         END OF workflowstatusproperties.

* Component schema: WorkflowTransitionRule, object
  TYPES: BEGIN OF workflowtransitionrule,
           type TYPE string,
           configuration TYPE string,
         END OF workflowtransitionrule.

* Component schema: ErrorCollection, object
  TYPES: BEGIN OF errorcollection,
           errormessages TYPE string,
           errors TYPE string,
           status TYPE i,
         END OF errorcollection.

* Component schema: ConnectWorkflowTransitionRule, object
  TYPES: BEGIN OF connectworkflowtransitionrule,
           id TYPE string,
           key TYPE string,
           configuration TYPE string,
           transition TYPE string,
         END OF connectworkflowtransitionrule.

* Component schema: PageBeanWorkflowTransitionRules, object
  TYPES: BEGIN OF pagebeanworkflowtransitionrule,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanworkflowtransitionrule.

* Component schema: RuleConfiguration, object
  TYPES: BEGIN OF ruleconfiguration,
           value TYPE string,
         END OF ruleconfiguration.

* Component schema: WorkflowId, object
  TYPES: BEGIN OF workflowid,
           name TYPE string,
           draft TYPE abap_bool,
         END OF workflowid.

* Component schema: WorkflowTransition, object
  TYPES: BEGIN OF workflowtransition,
           id TYPE i,
           name TYPE string,
         END OF workflowtransition.

* Component schema: WorkflowTransitionRules, object
  TYPES: BEGIN OF workflowtransitionrules,
           workflowid TYPE string,
           postfunctions TYPE string,
           conditions TYPE string,
           validators TYPE string,
         END OF workflowtransitionrules.

* Component schema: WorkflowTransitionRulesUpdate, object
  TYPES: BEGIN OF workflowtransitionrulesupdate,
           workflows TYPE string,
         END OF workflowtransitionrulesupdate.

* Component schema: WorkflowTransitionRulesUpdateErrorDetails, object
  TYPES: BEGIN OF workflowtransitionrulesupdatee,
           workflowid TYPE string,
           ruleupdateerrors TYPE string,
           updateerrors TYPE string,
         END OF workflowtransitionrulesupdatee.

* Component schema: WorkflowTransitionRulesUpdateErrors, object
  TYPES: BEGIN OF workflowtransitionrulesupdat01,
           updateresults TYPE string,
         END OF workflowtransitionrulesupdat01.

* Component schema: TimeTrackingProvider, object
  TYPES: BEGIN OF timetrackingprovider,
           key TYPE string,
           name TYPE string,
           url TYPE string,
         END OF timetrackingprovider.

* Component schema: PermissionGrant, object
  TYPES: BEGIN OF permissiongrant,
           id TYPE i,
           self TYPE string,
           holder TYPE string,
           permission TYPE string,
         END OF permissiongrant.

* Component schema: PermissionHolder, object
  TYPES: BEGIN OF permissionholder,
           type TYPE string,
           parameter TYPE string,
           expand TYPE string,
         END OF permissionholder.

* Component schema: PermissionScheme, object
  TYPES: BEGIN OF permissionscheme,
           expand TYPE string,
           id TYPE i,
           self TYPE string,
           name TYPE string,
           description TYPE string,
           scope TYPE string,
           permissions TYPE string,
         END OF permissionscheme.

* Component schema: PermissionSchemes, object
  TYPES: BEGIN OF permissionschemes,
           permissionschemes TYPE string,
         END OF permissionschemes.

* Component schema: PermissionGrants, object
  TYPES: BEGIN OF permissiongrants,
           permissions TYPE string,
           expand TYPE string,
         END OF permissiongrants.

* Component schema: PageBeanUserKey, object
  TYPES: BEGIN OF pagebeanuserkey,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanuserkey.

* Component schema: UserKey, object
  TYPES: BEGIN OF userkey,
           key TYPE string,
           accountid TYPE string,
         END OF userkey.

* Component schema: PageBeanUser, object
  TYPES: BEGIN OF pagebeanuser,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanuser.

* Component schema: ChangeDetails, object
  TYPES: BEGIN OF changedetails,
           field TYPE string,
           fieldtype TYPE string,
           fieldid TYPE string,
           from TYPE string,
           fromstring TYPE string,
           to TYPE string,
           tostring TYPE string,
         END OF changedetails.

* Component schema: Changelog, object
  TYPES: BEGIN OF changelog,
           id TYPE string,
           author TYPE string,
           created TYPE string,
           items TYPE string,
           historymetadata TYPE string,
         END OF changelog.

* Component schema: FieldMetadata, object
  TYPES: BEGIN OF fieldmetadata,
           required TYPE abap_bool,
           schema TYPE string,
           name TYPE string,
           key TYPE string,
           autocompleteurl TYPE string,
           hasdefaultvalue TYPE abap_bool,
           operations TYPE string,
           allowedvalues TYPE string,
           defaultvalue TYPE string,
         END OF fieldmetadata.

* Component schema: HistoryMetadata, object
  TYPES: BEGIN OF historymetadata,
           type TYPE string,
           description TYPE string,
           descriptionkey TYPE string,
           activitydescription TYPE string,
           activitydescriptionkey TYPE string,
           emaildescription TYPE string,
           emaildescriptionkey TYPE string,
           actor TYPE string,
           generator TYPE string,
           cause TYPE string,
           extradata TYPE string,
         END OF historymetadata.

* Component schema: HistoryMetadataParticipant, object
  TYPES: BEGIN OF historymetadataparticipant,
           id TYPE string,
           displayname TYPE string,
           displaynamekey TYPE string,
           type TYPE string,
           avatarurl TYPE string,
           url TYPE string,
         END OF historymetadataparticipant.

* Component schema: IncludedFields, object
  TYPES: BEGIN OF includedfields,
           included TYPE string,
           excluded TYPE string,
           actuallyincluded TYPE string,
         END OF includedfields.

* Component schema: IssueBean, object
  TYPES: BEGIN OF issuebean,
           expand TYPE string,
           id TYPE string,
           self TYPE string,
           key TYPE string,
           renderedfields TYPE string,
           properties TYPE string,
           names TYPE string,
           schema TYPE string,
           transitions TYPE string,
           operations TYPE string,
           editmeta TYPE string,
           changelog TYPE string,
           versionedrepresentations TYPE string,
           fieldstoinclude TYPE string,
           fields TYPE string,
         END OF issuebean.

* Component schema: IssueTransition, object
  TYPES: BEGIN OF issuetransition,
           id TYPE string,
           name TYPE string,
           to TYPE string,
           hasscreen TYPE abap_bool,
           isglobal TYPE abap_bool,
           isinitial TYPE abap_bool,
           isavailable TYPE abap_bool,
           isconditional TYPE abap_bool,
           fields TYPE string,
           expand TYPE string,
           looped TYPE abap_bool,
         END OF issuetransition.

* Component schema: IssueUpdateMetadata, object
  TYPES: BEGIN OF issueupdatemetadata,
           fields TYPE string,
         END OF issueupdatemetadata.

* Component schema: JsonTypeBean, object
  TYPES: BEGIN OF jsontypebean,
           type TYPE string,
           items TYPE string,
           system TYPE string,
           custom TYPE string,
           customid TYPE i,
           configuration TYPE string,
         END OF jsontypebean.

* Component schema: LinkGroup, object
  TYPES: BEGIN OF linkgroup,
           id TYPE string,
           styleclass TYPE string,
           header TYPE string,
           weight TYPE i,
           links TYPE string,
           groups TYPE string,
         END OF linkgroup.

* Component schema: Operations, object
  TYPES: BEGIN OF operations,
           linkgroups TYPE string,
         END OF operations.

* Component schema: PageOfChangelogs, object
  TYPES: BEGIN OF pageofchangelogs,
           startat TYPE i,
           maxresults TYPE i,
           total TYPE i,
           histories TYPE string,
         END OF pageofchangelogs.

* Component schema: SearchResults, object
  TYPES: BEGIN OF searchresults,
           expand TYPE string,
           startat TYPE i,
           maxresults TYPE i,
           total TYPE i,
           issues TYPE string,
           warningmessages TYPE string,
           names TYPE string,
           schema TYPE string,
         END OF searchresults.

* Component schema: SimpleLink, object
  TYPES: BEGIN OF simplelink,
           id TYPE string,
           styleclass TYPE string,
           iconclass TYPE string,
           label TYPE string,
           title TYPE string,
           href TYPE string,
           weight TYPE i,
         END OF simplelink.

* Component schema: StatusCategory, object
  TYPES: BEGIN OF statuscategory,
           self TYPE string,
           id TYPE i,
           key TYPE string,
           colorname TYPE string,
           name TYPE string,
         END OF statuscategory.

* Component schema: StatusDetails, object
  TYPES: BEGIN OF statusdetails,
           self TYPE string,
           description TYPE string,
           iconurl TYPE string,
           name TYPE string,
           id TYPE string,
           statuscategory TYPE string,
         END OF statusdetails.

* Component schema: UserDetails, object
  TYPES: BEGIN OF userdetails,
           self TYPE string,
           name TYPE string,
           key TYPE string,
           accountid TYPE string,
           emailaddress TYPE string,
           avatarurls TYPE string,
           displayname TYPE string,
           active TYPE abap_bool,
           timezone TYPE string,
           accounttype TYPE string,
         END OF userdetails.

* Component schema: SearchRequestBean, object
  TYPES: BEGIN OF searchrequestbean,
           jql TYPE string,
           startat TYPE i,
           maxresults TYPE i,
           fields TYPE string,
           validatequery TYPE string,
           expand TYPE string,
           properties TYPE string,
           fieldsbykeys TYPE abap_bool,
         END OF searchrequestbean.

* Component schema: FieldReferenceData, object
  TYPES: BEGIN OF fieldreferencedata,
           value TYPE string,
           displayname TYPE string,
           orderable TYPE string,
           searchable TYPE string,
           auto TYPE string,
           cfid TYPE string,
           operators TYPE string,
           types TYPE string,
         END OF fieldreferencedata.

* Component schema: FunctionReferenceData, object
  TYPES: BEGIN OF functionreferencedata,
           value TYPE string,
           displayname TYPE string,
           islist TYPE string,
           types TYPE string,
         END OF functionreferencedata.

* Component schema: JQLReferenceData, object
  TYPES: BEGIN OF jqlreferencedata,
           visiblefieldnames TYPE string,
           visiblefunctionnames TYPE string,
           jqlreservedwords TYPE string,
         END OF jqlreferencedata.

* Component schema: AutoCompleteSuggestion, object
  TYPES: BEGIN OF autocompletesuggestion,
           value TYPE string,
           displayname TYPE string,
         END OF autocompletesuggestion.

* Component schema: AutoCompleteSuggestions, object
  TYPES: BEGIN OF autocompletesuggestions,
           results TYPE string,
         END OF autocompletesuggestions.

* Component schema: JQLPersonalDataMigrationRequest, object
  TYPES: BEGIN OF jqlpersonaldatamigrationreques,
           querystrings TYPE string,
         END OF jqlpersonaldatamigrationreques.

* Component schema: ConvertedJQLQueries, object
  TYPES: BEGIN OF convertedjqlqueries,
           querystrings TYPE string,
           querieswithunknownusers TYPE string,
         END OF convertedjqlqueries.

* Component schema: JQLQueryWithUnknownUsers, object
  TYPES: BEGIN OF jqlquerywithunknownusers,
           originalquery TYPE string,
           convertedquery TYPE string,
         END OF jqlquerywithunknownusers.

* Component schema: Component, object
  TYPES: BEGIN OF component,
           self TYPE string,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           lead TYPE string,
           leadusername TYPE string,
           leadaccountid TYPE string,
           assigneetype TYPE string,
           assignee TYPE string,
           realassigneetype TYPE string,
           realassignee TYPE string,
           isassigneetypevalid TYPE abap_bool,
           project TYPE string,
           projectid TYPE i,
         END OF component.

* Component schema: Filter, object
  TYPES: BEGIN OF filter,
           self TYPE string,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           owner TYPE string,
           jql TYPE string,
           viewurl TYPE string,
           searchurl TYPE string,
           favourite TYPE abap_bool,
           favouritedcount TYPE i,
           sharepermissions TYPE string,
           sharedusers TYPE string,
           subscriptions TYPE string,
         END OF filter.

* Component schema: FilterSubscription, object
  TYPES: BEGIN OF filtersubscription,
           id TYPE i,
           user TYPE string,
           group TYPE string,
         END OF filtersubscription.

* Component schema: FilterSubscriptionsList, object
  TYPES: BEGIN OF filtersubscriptionslist,
           size TYPE i,
           items TYPE string,
           max_results TYPE i,
           start_index TYPE i,
           end_index TYPE i,
         END OF filtersubscriptionslist.

* Component schema: Hierarchy, object
  TYPES: BEGIN OF hierarchy,
           level TYPE string,
         END OF hierarchy.

* Component schema: HierarchyLevel, object
  TYPES: BEGIN OF hierarchylevel,
           id TYPE i,
           name TYPE string,
           abovelevelid TYPE i,
           belowlevelid TYPE i,
           projectconfigurationid TYPE i,
           level TYPE i,
           issuetypeids TYPE string,
           externaluuid TYPE string,
           globalhierarchylevel TYPE string,
         END OF hierarchylevel.

* Component schema: Project, object
  TYPES: BEGIN OF project,
           expand TYPE string,
           self TYPE string,
           id TYPE string,
           key TYPE string,
           description TYPE string,
           lead TYPE string,
           components TYPE string,
           issuetypes TYPE string,
           url TYPE string,
           email TYPE string,
           assigneetype TYPE string,
           versions TYPE string,
           name TYPE string,
           roles TYPE string,
           avatarurls TYPE string,
           projectcategory TYPE string,
           projecttypekey TYPE string,
           simplified TYPE abap_bool,
           style TYPE string,
           favourite TYPE abap_bool,
           isprivate TYPE abap_bool,
           issuetypehierarchy TYPE string,
           permissions TYPE string,
           properties TYPE string,
           uuid TYPE string,
           insight TYPE string,
           deleted TYPE abap_bool,
           retentiontilldate TYPE string,
           deleteddate TYPE string,
           deletedby TYPE string,
           archived TYPE abap_bool,
           archiveddate TYPE string,
           archivedby TYPE string,
         END OF project.

* Component schema: ProjectCategory, object
  TYPES: BEGIN OF projectcategory,
           self TYPE string,
           id TYPE string,
           name TYPE string,
           description TYPE string,
         END OF projectcategory.

* Component schema: ProjectInsight, object
  TYPES: BEGIN OF projectinsight,
           totalissuecount TYPE i,
           lastissueupdatetime TYPE string,
         END OF projectinsight.

* Component schema: ProjectPermissions, object
  TYPES: BEGIN OF projectpermissions,
           canedit TYPE abap_bool,
         END OF projectpermissions.

* Component schema: ProjectRole, object
  TYPES: BEGIN OF projectrole,
           self TYPE string,
           name TYPE string,
           id TYPE i,
           description TYPE string,
           actors TYPE string,
           scope TYPE string,
           translatedname TYPE string,
           currentuserrole TYPE abap_bool,
           admin TYPE abap_bool,
           roleconfigurable TYPE abap_bool,
           default TYPE abap_bool,
         END OF projectrole.

* Component schema: ProjectRoleGroup, object
  TYPES: BEGIN OF projectrolegroup,
           displayname TYPE string,
           name TYPE string,
         END OF projectrolegroup.

* Component schema: ProjectRoleUser, object
  TYPES: BEGIN OF projectroleuser,
           accountid TYPE string,
         END OF projectroleuser.

* Component schema: RoleActor, object
  TYPES: BEGIN OF roleactor,
           id TYPE i,
           displayname TYPE string,
           type TYPE string,
           name TYPE string,
           avatarurl TYPE string,
           actoruser TYPE string,
           actorgroup TYPE string,
         END OF roleactor.

* Component schema: SharePermission, object
  TYPES: BEGIN OF sharepermission,
           id TYPE i,
           type TYPE string,
           project TYPE string,
           role TYPE string,
           group TYPE string,
         END OF sharepermission.

* Component schema: UserList, object
  TYPES: BEGIN OF userlist,
           size TYPE i,
           items TYPE string,
           max_results TYPE i,
           start_index TYPE i,
           end_index TYPE i,
         END OF userlist.

* Component schema: Version, object
  TYPES: BEGIN OF version,
           expand TYPE string,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           name TYPE string,
           archived TYPE abap_bool,
           released TYPE abap_bool,
           startdate TYPE string,
           releasedate TYPE string,
           overdue TYPE abap_bool,
           userstartdate TYPE string,
           userreleasedate TYPE string,
           project TYPE string,
           projectid TYPE i,
           moveunfixedissuesto TYPE string,
           operations TYPE string,
           issuesstatusforfixversion TYPE string,
         END OF version.

* Component schema: VersionIssuesStatus, object
  TYPES: BEGIN OF versionissuesstatus,
           unmapped TYPE i,
           todo TYPE i,
           inprogress TYPE i,
           done TYPE i,
         END OF versionissuesstatus.

* Component schema: FilterDetails, object
  TYPES: BEGIN OF filterdetails,
           self TYPE string,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           owner TYPE string,
           jql TYPE string,
           viewurl TYPE string,
           searchurl TYPE string,
           favourite TYPE abap_bool,
           favouritedcount TYPE i,
           sharepermissions TYPE string,
           subscriptions TYPE string,
         END OF filterdetails.

* Component schema: PageBeanFilterDetails, object
  TYPES: BEGIN OF pagebeanfilterdetails,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfilterdetails.

* Component schema: DefaultShareScope, object
  TYPES: BEGIN OF defaultsharescope,
           scope TYPE string,
         END OF defaultsharescope.

* Component schema: SharePermissionInputBean, object
  TYPES: BEGIN OF sharepermissioninputbean,
           type TYPE string,
           projectid TYPE string,
           groupname TYPE string,
           projectroleid TYPE string,
         END OF sharepermissioninputbean.

* Component schema: TaskProgressBeanObject, object
  TYPES: BEGIN OF taskprogressbeanobject,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           status TYPE string,
           message TYPE string,
           result TYPE string,
           submittedby TYPE i,
           progress TYPE i,
           elapsedruntime TYPE i,
           submitted TYPE i,
           started TYPE i,
           finished TYPE i,
           lastupdate TYPE i,
         END OF taskprogressbeanobject.

* Component schema: Dashboard, object
  TYPES: BEGIN OF dashboard,
           description TYPE string,
           id TYPE string,
           isfavourite TYPE abap_bool,
           name TYPE string,
           owner TYPE string,
           popularity TYPE i,
           rank TYPE i,
           self TYPE string,
           sharepermissions TYPE string,
           view TYPE string,
         END OF dashboard.

* Component schema: PageOfDashboards, object
  TYPES: BEGIN OF pageofdashboards,
           startat TYPE i,
           maxresults TYPE i,
           total TYPE i,
           prev TYPE string,
           next TYPE string,
           dashboards TYPE string,
         END OF pageofdashboards.

* Component schema: UserBean, object
  TYPES: BEGIN OF userbean,
           key TYPE string,
           self TYPE string,
           name TYPE string,
           displayname TYPE string,
           active TYPE abap_bool,
           accountid TYPE string,
           avatarurls TYPE string,
         END OF userbean.

* Component schema: UserBeanAvatarUrls, object
  TYPES: BEGIN OF userbeanavatarurls,
           24x24 TYPE string,
           32x32 TYPE string,
           16x16 TYPE string,
           48x48 TYPE string,
         END OF userbeanavatarurls.

* Component schema: PageBeanDashboard, object
  TYPES: BEGIN OF pagebeandashboard,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeandashboard.

* Component schema: DashboardDetails, object
  TYPES: BEGIN OF dashboarddetails,
           name TYPE string,
           description TYPE string,
           sharepermissions TYPE string,
         END OF dashboarddetails.

* Component schema: CustomFieldReplacement, object
  TYPES: BEGIN OF customfieldreplacement,
           customfieldid TYPE i,
           moveto TYPE i,
         END OF customfieldreplacement.

* Component schema: DeleteAndReplaceVersionBean, object
  TYPES: BEGIN OF deleteandreplaceversionbean,
           movefixissuesto TYPE i,
           moveaffectedissuesto TYPE i,
           customfieldreplacementlist TYPE string,
         END OF deleteandreplaceversionbean.

* Component schema: VersionIssueCounts, object
  TYPES: BEGIN OF versionissuecounts,
           self TYPE string,
           issuesfixedcount TYPE i,
           issuesaffectedcount TYPE i,
           issuecountwithcustomfieldsshow TYPE i,
           customfieldusage TYPE string,
         END OF versionissuecounts.

* Component schema: VersionUsageInCustomField, object
  TYPES: BEGIN OF versionusageincustomfield,
           fieldname TYPE string,
           customfieldid TYPE i,
           issuecountwithversionincustomf TYPE i,
         END OF versionusageincustomfield.

* Component schema: VersionUnresolvedIssuesCount, object
  TYPES: BEGIN OF versionunresolvedissuescount,
           self TYPE string,
           issuesunresolvedcount TYPE i,
           issuescount TYPE i,
         END OF versionunresolvedissuescount.

* Component schema: VersionMoveBean, object
  TYPES: BEGIN OF versionmovebean,
           after TYPE string,
           position TYPE string,
         END OF versionmovebean.

* Component schema: FoundUsers, object
  TYPES: BEGIN OF foundusers,
           users TYPE string,
           total TYPE i,
           header TYPE string,
         END OF foundusers.

* Component schema: UserPickerUser, object
  TYPES: BEGIN OF userpickeruser,
           accountid TYPE string,
           name TYPE string,
           key TYPE string,
           html TYPE string,
           displayname TYPE string,
           avatarurl TYPE string,
         END OF userpickeruser.

* Component schema: UserWriteBean, object
  TYPES: BEGIN OF userwritebean,
           self TYPE string,
           key TYPE string,
           name TYPE string,
           password TYPE string,
           emailaddress TYPE string,
           displayname TYPE string,
           notification TYPE string,
           applicationkeys TYPE string,
         END OF userwritebean.

* Component schema: Avatar, object
  TYPES: BEGIN OF avatar,
           id TYPE string,
           owner TYPE string,
           issystemavatar TYPE abap_bool,
           isselected TYPE abap_bool,
           isdeletable TYPE abap_bool,
           filename TYPE string,
           urls TYPE string,
         END OF avatar.

* Component schema: Avatars, object
  TYPES: BEGIN OF avatars,
           system TYPE string,
           custom TYPE string,
         END OF avatars.

* Component schema: ScreenableTab, object
  TYPES: BEGIN OF screenabletab,
           id TYPE i,
           name TYPE string,
         END OF screenabletab.

* Component schema: PageBeanScreen, object
  TYPES: BEGIN OF pagebeanscreen,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanscreen.

* Component schema: Screen, object
  TYPES: BEGIN OF screen,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           scope TYPE string,
         END OF screen.

* Component schema: ScreenableField, object
  TYPES: BEGIN OF screenablefield,
           id TYPE string,
           name TYPE string,
         END OF screenablefield.

* Component schema: MoveFieldBean, object
  TYPES: BEGIN OF movefieldbean,
           after TYPE string,
           position TYPE string,
         END OF movefieldbean.

* Component schema: AddFieldBean, object
  TYPES: BEGIN OF addfieldbean,
           fieldid TYPE string,
         END OF addfieldbean.

* Component schema: ScreenDetails, object
  TYPES: BEGIN OF screendetails,
           name TYPE string,
           description TYPE string,
         END OF screendetails.

* Component schema: UpdateScreenDetails, object
  TYPES: BEGIN OF updatescreendetails,
           name TYPE string,
           description TYPE string,
         END OF updatescreendetails.

* Component schema: Resolution, object
  TYPES: BEGIN OF resolution,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           name TYPE string,
         END OF resolution.

* Component schema: ProjectInputBean, object
  TYPES: BEGIN OF projectinputbean,
           key TYPE string,
           name TYPE string,
           projecttypekey TYPE string,
           projecttemplatekey TYPE string,
           description TYPE string,
           lead TYPE string,
           leadaccountid TYPE string,
           url TYPE string,
           assigneetype TYPE string,
           avatarid TYPE i,
           issuesecurityscheme TYPE i,
           permissionscheme TYPE i,
           notificationscheme TYPE i,
           categoryid TYPE i,
         END OF projectinputbean.

* Component schema: ProjectIdentifiers, object
  TYPES: BEGIN OF projectidentifiers,
           self TYPE string,
           id TYPE i,
           key TYPE string,
         END OF projectidentifiers.

* Component schema: PageBeanVersion, object
  TYPES: BEGIN OF pagebeanversion,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanversion.

* Component schema: ComponentWithIssueCount, object
  TYPES: BEGIN OF componentwithissuecount,
           issuecount TYPE i,
           projectid TYPE i,
           description TYPE string,
           self TYPE string,
           project TYPE string,
           assigneetype TYPE string,
           lead TYPE string,
           assignee TYPE string,
           realassignee TYPE string,
           isassigneetypevalid TYPE abap_bool,
           realassigneetype TYPE string,
           name TYPE string,
           id TYPE string,
         END OF componentwithissuecount.

* Component schema: PageBeanComponentWithIssueCount, object
  TYPES: BEGIN OF pagebeancomponentwithissuecoun,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancomponentwithissuecoun.

* Component schema: StringList, object
  TYPES: BEGIN OF stringlist,
           dummy TYPE i,
         END OF stringlist.

* Component schema: PageBeanProject, object
  TYPES: BEGIN OF pagebeanproject,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanproject.

* Component schema: ProjectAvatars, object
  TYPES: BEGIN OF projectavatars,
           system TYPE string,
           custom TYPE string,
         END OF projectavatars.

* Component schema: IssueTypeWithStatus, object
  TYPES: BEGIN OF issuetypewithstatus,
           self TYPE string,
           id TYPE string,
           name TYPE string,
           subtask TYPE abap_bool,
           statuses TYPE string,
         END OF issuetypewithstatus.

* Component schema: SecurityLevel, object
  TYPES: BEGIN OF securitylevel,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           name TYPE string,
         END OF securitylevel.

* Component schema: SecurityScheme, object
  TYPES: BEGIN OF securityscheme,
           self TYPE string,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           defaultsecuritylevelid TYPE i,
           levels TYPE string,
         END OF securityscheme.

* Component schema: Priority, object
  TYPES: BEGIN OF priority,
           self TYPE string,
           statuscolor TYPE string,
           description TYPE string,
           iconurl TYPE string,
           name TYPE string,
           id TYPE string,
         END OF priority.

* Component schema: Comment, object
  TYPES: BEGIN OF comment,
           self TYPE string,
           id TYPE string,
           author TYPE string,
           body TYPE string,
           renderedbody TYPE string,
           updateauthor TYPE string,
           created TYPE string,
           updated TYPE string,
           visibility TYPE string,
           jsdpublic TYPE abap_bool,
           properties TYPE string,
         END OF comment.

* Component schema: Fields, object
  TYPES: BEGIN OF fields,
           summary TYPE string,
           status TYPE string,
           priority TYPE string,
           assignee TYPE string,
           timetracking TYPE string,
           issuetype TYPE string,
           issuetype01 TYPE string,
         END OF fields.

* Component schema: IssueLinkType, object
  TYPES: BEGIN OF issuelinktype,
           id TYPE string,
           name TYPE string,
           inward TYPE string,
           outward TYPE string,
           self TYPE string,
         END OF issuelinktype.

* Component schema: LinkIssueRequestJsonBean, object
  TYPES: BEGIN OF linkissuerequestjsonbean,
           type TYPE string,
           inwardissue TYPE string,
           outwardissue TYPE string,
           comment TYPE string,
         END OF linkissuerequestjsonbean.

* Component schema: LinkedIssue, object
  TYPES: BEGIN OF linkedissue,
           id TYPE string,
           key TYPE string,
           self TYPE string,
           fields TYPE string,
         END OF linkedissue.

* Component schema: RichText, object
  TYPES: BEGIN OF richtext,
           finalised TYPE abap_bool,
           emptyadf TYPE abap_bool,
           valueset TYPE abap_bool,
         END OF richtext.

* Component schema: TimeTrackingDetails, object
  TYPES: BEGIN OF timetrackingdetails,
           originalestimate TYPE string,
           remainingestimate TYPE string,
           timespent TYPE string,
           originalestimateseconds TYPE i,
           remainingestimateseconds TYPE i,
           timespentseconds TYPE i,
         END OF timetrackingdetails.

* Component schema: Visibility, object
  TYPES: BEGIN OF visibility,
           type TYPE string,
           value TYPE string,
         END OF visibility.

* Component schema: IssueLink, object
  TYPES: BEGIN OF issuelink,
           id TYPE string,
           self TYPE string,
           type TYPE string,
           inwardissue TYPE string,
           outwardissue TYPE string,
         END OF issuelink.

* Component schema: PageOfWorklogs, object
  TYPES: BEGIN OF pageofworklogs,
           startat TYPE i,
           maxresults TYPE i,
           total TYPE i,
           worklogs TYPE string,
         END OF pageofworklogs.

* Component schema: Worklog, object
  TYPES: BEGIN OF worklog,
           self TYPE string,
           author TYPE string,
           updateauthor TYPE string,
           comment TYPE string,
           created TYPE string,
           updated TYPE string,
           visibility TYPE string,
           started TYPE string,
           timespent TYPE string,
           timespentseconds TYPE i,
           id TYPE string,
           issueid TYPE string,
           properties TYPE string,
         END OF worklog.

* Component schema: IssueTypeCreateBean, object
  TYPES: BEGIN OF issuetypecreatebean,
           name TYPE string,
           description TYPE string,
           type TYPE string,
         END OF issuetypecreatebean.

* Component schema: IssueTypeUpdateBean, object
  TYPES: BEGIN OF issuetypeupdatebean,
           name TYPE string,
           description TYPE string,
           avatarid TYPE i,
         END OF issuetypeupdatebean.

* Component schema: SecuritySchemes, object
  TYPES: BEGIN OF securityschemes,
           issuesecurityschemes TYPE string,
         END OF securityschemes.

* Component schema: IssueSecurityLevelMember, object
  TYPES: BEGIN OF issuesecuritylevelmember,
           id TYPE i,
           issuesecuritylevelid TYPE i,
           holder TYPE string,
         END OF issuesecuritylevelmember.

* Component schema: PageBeanIssueSecurityLevelMember, object
  TYPES: BEGIN OF pagebeanissuesecuritylevelmemb,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuesecuritylevelmemb.

* Component schema: Transitions, object
  TYPES: BEGIN OF transitions,
           expand TYPE string,
           transitions TYPE string,
         END OF transitions.

* Component schema: IssuePickerSuggestions, object
  TYPES: BEGIN OF issuepickersuggestions,
           sections TYPE string,
         END OF issuepickersuggestions.

* Component schema: IssuePickerSuggestionsIssueType, object
  TYPES: BEGIN OF issuepickersuggestionsissuetyp,
           label TYPE string,
           sub TYPE string,
           id TYPE string,
           msg TYPE string,
           issues TYPE string,
         END OF issuepickersuggestionsissuetyp.

* Component schema: SuggestedIssue, object
  TYPES: BEGIN OF suggestedissue,
           id TYPE i,
           key TYPE string,
           keyhtml TYPE string,
           img TYPE string,
           summary TYPE string,
           summarytext TYPE string,
         END OF suggestedissue.

* Component schema: FieldUpdateOperation, object
  TYPES: BEGIN OF fieldupdateoperation,
           add TYPE string,
           set TYPE string,
           remove TYPE string,
           edit TYPE string,
         END OF fieldupdateoperation.

* Component schema: IssueUpdateDetails, object
  TYPES: BEGIN OF issueupdatedetails,
           transition TYPE string,
           fields TYPE string,
           update TYPE string,
           historymetadata TYPE string,
           properties TYPE string,
         END OF issueupdatedetails.

* Component schema: Votes, object
  TYPES: BEGIN OF votes,
           self TYPE string,
           votes TYPE i,
           hasvoted TYPE abap_bool,
           voters TYPE string,
         END OF votes.

* Component schema: Watchers, object
  TYPES: BEGIN OF watchers,
           self TYPE string,
           iswatching TYPE abap_bool,
           watchcount TYPE i,
           watchers TYPE string,
         END OF watchers.

* Component schema: CreatedIssue, object
  TYPES: BEGIN OF createdissue,
           id TYPE string,
           key TYPE string,
           self TYPE string,
           transition TYPE string,
         END OF createdissue.

* Component schema: NestedResponse, object
  TYPES: BEGIN OF nestedresponse,
           status TYPE i,
           errorcollection TYPE string,
         END OF nestedresponse.

* Component schema: IssuesUpdateBean, object
  TYPES: BEGIN OF issuesupdatebean,
           issueupdates TYPE string,
         END OF issuesupdatebean.

* Component schema: BulkOperationErrorResult, object
  TYPES: BEGIN OF bulkoperationerrorresult,
           status TYPE i,
           elementerrors TYPE string,
           failedelementnumber TYPE i,
         END OF bulkoperationerrorresult.

* Component schema: CreatedIssues, object
  TYPES: BEGIN OF createdissues,
           issues TYPE string,
           errors TYPE string,
         END OF createdissues.

* Component schema: IssueCreateMetadata, object
  TYPES: BEGIN OF issuecreatemetadata,
           expand TYPE string,
           projects TYPE string,
         END OF issuecreatemetadata.

* Component schema: IssueTypeIssueCreateMetadata, object
  TYPES: BEGIN OF issuetypeissuecreatemetadata,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           iconurl TYPE string,
           name TYPE string,
           subtask TYPE abap_bool,
           avatarid TYPE i,
           entityid TYPE string,
           hierarchylevel TYPE i,
           scope TYPE string,
           expand TYPE string,
           fields TYPE string,
         END OF issuetypeissuecreatemetadata.

* Component schema: ProjectIssueCreateMetadata, object
  TYPES: BEGIN OF projectissuecreatemetadata,
           expand TYPE string,
           self TYPE string,
           id TYPE string,
           key TYPE string,
           name TYPE string,
           avatarurls TYPE string,
           issuetypes TYPE string,
         END OF projectissuecreatemetadata.

* Component schema: Application, object
  TYPES: BEGIN OF application,
           type TYPE string,
           name TYPE string,
         END OF application.

* Component schema: IconBean, object
  TYPES: BEGIN OF iconbean,
           url16x16 TYPE string,
           title TYPE string,
           link TYPE string,
         END OF iconbean.

* Component schema: RemoteIssueLink, object
  TYPES: BEGIN OF remoteissuelink,
           id TYPE i,
           self TYPE string,
           globalid TYPE string,
           application TYPE string,
           relationship TYPE string,
           object TYPE string,
         END OF remoteissuelink.

* Component schema: RemoteObject, object
  TYPES: BEGIN OF remoteobject,
           url TYPE string,
           title TYPE string,
           summary TYPE string,
           icon TYPE string,
           status TYPE string,
         END OF remoteobject.

* Component schema: Status, object
  TYPES: BEGIN OF status,
           resolved TYPE abap_bool,
           icon TYPE string,
         END OF status.

* Component schema: Icon, object
  TYPES: BEGIN OF icon,
           url16x16 TYPE string,
           title TYPE string,
           link TYPE string,
         END OF icon.

* Component schema: RemoteIssueLinkRequest, object
  TYPES: BEGIN OF remoteissuelinkrequest,
           globalid TYPE string,
           application TYPE string,
           relationship TYPE string,
           object TYPE string,
         END OF remoteissuelinkrequest.

* Component schema: RemoteIssueLinkIdentifies, object
  TYPES: BEGIN OF remoteissuelinkidentifies,
           id TYPE i,
           self TYPE string,
         END OF remoteissuelinkidentifies.

* Component schema: Notification, object
  TYPES: BEGIN OF notification,
           subject TYPE string,
           textbody TYPE string,
           htmlbody TYPE string,
           to TYPE string,
           restrict TYPE string,
         END OF notification.

* Component schema: NotificationRecipients, object
  TYPES: BEGIN OF notificationrecipients,
           reporter TYPE abap_bool,
           assignee TYPE abap_bool,
           watchers TYPE abap_bool,
           voters TYPE abap_bool,
           users TYPE string,
           groups TYPE string,
         END OF notificationrecipients.

* Component schema: NotificationRecipientsRestrictions, object
  TYPES: BEGIN OF notificationrecipientsrestrict,
           groups TYPE string,
           permissions TYPE string,
         END OF notificationrecipientsrestrict.

* Component schema: RestrictedPermission, object
  TYPES: BEGIN OF restrictedpermission,
           id TYPE string,
           key TYPE string,
         END OF restrictedpermission.

* Component schema: IssueLinkTypes, object
  TYPES: BEGIN OF issuelinktypes,
           issuelinktypes TYPE string,
         END OF issuelinktypes.

* Component schema: PageOfComments, object
  TYPES: BEGIN OF pageofcomments,
           startat TYPE i,
           maxresults TYPE i,
           total TYPE i,
           comments TYPE string,
         END OF pageofcomments.

* Component schema: PaginatedResponseComment, object
  TYPES: BEGIN OF paginatedresponsecomment,
           total TYPE i,
           results TYPE string,
           startat TYPE i,
           maxresults TYPE i,
         END OF paginatedresponsecomment.

* Component schema: IssueCommentListRequestBean, object
  TYPES: BEGIN OF issuecommentlistrequestbean,
           ids TYPE string,
         END OF issuecommentlistrequestbean.

* Component schema: PageBeanComment, object
  TYPES: BEGIN OF pagebeancomment,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancomment.

* Component schema: PageBeanChangelog, object
  TYPES: BEGIN OF pagebeanchangelog,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanchangelog.

* Component schema: Attachment, object
  TYPES: BEGIN OF attachment,
           self TYPE string,
           id TYPE string,
           filename TYPE string,
           author TYPE string,
           created TYPE string,
           size TYPE i,
           mimetype TYPE string,
           content TYPE string,
           thumbnail TYPE string,
         END OF attachment.

* Component schema: Group, object
  TYPES: BEGIN OF group,
           name TYPE string,
           self TYPE string,
           users TYPE string,
           expand TYPE string,
         END OF group.

* Component schema: PagedListUserDetailsApplicationUser, object
  TYPES: BEGIN OF pagedlistuserdetailsapplicatio,
           size TYPE i,
           items TYPE string,
           max_results TYPE i,
           start_index TYPE i,
           end_index TYPE i,
         END OF pagedlistuserdetailsapplicatio.

* Component schema: PageBeanUserDetails, object
  TYPES: BEGIN OF pagebeanuserdetails,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanuserdetails.

* Component schema: AddGroupBean, object
  TYPES: BEGIN OF addgroupbean,
           name TYPE string,
         END OF addgroupbean.

* Component schema: UpdateUserToGroupBean, object
  TYPES: BEGIN OF updateusertogroupbean,
           name TYPE string,
           accountid TYPE string,
         END OF updateusertogroupbean.

* Component schema: FoundGroup, object
  TYPES: BEGIN OF foundgroup,
           name TYPE string,
           html TYPE string,
           labels TYPE string,
           groupid TYPE string,
         END OF foundgroup.

* Component schema: FoundGroups, object
  TYPES: BEGIN OF foundgroups,
           header TYPE string,
           total TYPE i,
           groups TYPE string,
         END OF foundgroups.

* Component schema: GroupLabel, object
  TYPES: BEGIN OF grouplabel,
           text TYPE string,
           title TYPE string,
           type TYPE string,
         END OF grouplabel.

* Component schema: FoundUsersAndGroups, object
  TYPES: BEGIN OF foundusersandgroups,
           users TYPE string,
           groups TYPE string,
         END OF foundusersandgroups.

* Component schema: FieldDetails, object
  TYPES: BEGIN OF fielddetails,
           id TYPE string,
           key TYPE string,
           name TYPE string,
           custom TYPE abap_bool,
           orderable TYPE abap_bool,
           navigable TYPE abap_bool,
           searchable TYPE abap_bool,
           clausenames TYPE string,
           scope TYPE string,
           schema TYPE string,
         END OF fielddetails.

* Component schema: CustomFieldDefinitionJsonBean, object
  TYPES: BEGIN OF customfielddefinitionjsonbean,
           name TYPE string,
           description TYPE string,
           type TYPE string,
           searcherkey TYPE string,
         END OF customfielddefinitionjsonbean.

* Component schema: Context, object
  TYPES: BEGIN OF context,
           id TYPE i,
           name TYPE string,
           scope TYPE string,
         END OF context.

* Component schema: PageBeanContext, object
  TYPES: BEGIN OF pagebeancontext,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancontext.

* Component schema: CustomFieldContextOption, object
  TYPES: BEGIN OF customfieldcontextoption,
           id TYPE string,
           value TYPE string,
           optionid TYPE string,
           disabled TYPE abap_bool,
         END OF customfieldcontextoption.

* Component schema: PageBeanCustomFieldContextOption, object
  TYPES: BEGIN OF pagebeancustomfieldcontextopti,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancustomfieldcontextopti.

* Component schema: BulkCustomFieldOptionCreateRequest, object
  TYPES: BEGIN OF bulkcustomfieldoptioncreatereq,
           options TYPE string,
         END OF bulkcustomfieldoptioncreatereq.

* Component schema: CustomFieldOptionCreate, object
  TYPES: BEGIN OF customfieldoptioncreate,
           value TYPE string,
           optionid TYPE string,
           disabled TYPE abap_bool,
         END OF customfieldoptioncreate.

* Component schema: CustomFieldCreatedContextOptionsList, object
  TYPES: BEGIN OF customfieldcreatedcontextoptio,
           options TYPE string,
         END OF customfieldcreatedcontextoptio.

* Component schema: OrderOfCustomFieldOptions, object
  TYPES: BEGIN OF orderofcustomfieldoptions,
           customfieldoptionids TYPE string,
           after TYPE string,
           position TYPE string,
         END OF orderofcustomfieldoptions.

* Component schema: BulkCustomFieldOptionUpdateRequest, object
  TYPES: BEGIN OF bulkcustomfieldoptionupdatereq,
           options TYPE string,
         END OF bulkcustomfieldoptionupdatereq.

* Component schema: CustomFieldOptionUpdate, object
  TYPES: BEGIN OF customfieldoptionupdate,
           id TYPE string,
           value TYPE string,
           disabled TYPE abap_bool,
         END OF customfieldoptionupdate.

* Component schema: CustomFieldUpdatedContextOptionsList, object
  TYPES: BEGIN OF customfieldupdatedcontextoptio,
           options TYPE string,
         END OF customfieldupdatedcontextoptio.

* Component schema: ComponentIssuesCount, object
  TYPES: BEGIN OF componentissuescount,
           self TYPE string,
           issuecount TYPE i,
         END OF componentissuescount.

* Component schema: BulkCreateCustomFieldOptionRequest, object
  TYPES: BEGIN OF bulkcreatecustomfieldoptionreq,
           options TYPE string,
         END OF bulkcreatecustomfieldoptionreq.

* Component schema: CustomFieldOptionValue, object
  TYPES: BEGIN OF customfieldoptionvalue,
           value TYPE string,
           cascadingoptions TYPE string,
         END OF customfieldoptionvalue.

* Component schema: RenamedCascadingOption, object
  TYPES: BEGIN OF renamedcascadingoption,
           value TYPE string,
           newvalue TYPE string,
         END OF renamedcascadingoption.

* Component schema: RenamedOption, object
  TYPES: BEGIN OF renamedoption,
           value TYPE string,
           newvalue TYPE string,
           cascadingoptions TYPE string,
         END OF renamedoption.

* Component schema: UpdateCustomFieldOption, object
  TYPES: BEGIN OF updatecustomfieldoption,
           options TYPE string,
         END OF updatecustomfieldoption.

* Component schema: CustomFieldOptionDetails, object
  TYPES: BEGIN OF customfieldoptiondetails,
           id TYPE i,
           value TYPE string,
           cascadingoptions TYPE string,
         END OF customfieldoptiondetails.

* Component schema: PageBeanCustomFieldOptionDetails, object
  TYPES: BEGIN OF pagebeancustomfieldoptiondetai,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancustomfieldoptiondetai.

* Component schema: SystemAvatars, object
  TYPES: BEGIN OF systemavatars,
           system TYPE string,
         END OF systemavatars.

* Component schema: GlobalScopeBean, object
  TYPES: BEGIN OF globalscopebean,
           attributes TYPE string,
         END OF globalscopebean.

* Component schema: IssueFieldOption, object
  TYPES: BEGIN OF issuefieldoption,
           id TYPE i,
           value TYPE string,
           properties TYPE string,
           config TYPE string,
         END OF issuefieldoption.

* Component schema: IssueFieldOptionConfiguration, object
  TYPES: BEGIN OF issuefieldoptionconfiguration,
           scope TYPE string,
           attributes TYPE string,
         END OF issuefieldoptionconfiguration.

* Component schema: IssueFieldOptionScopeBean, object
  TYPES: BEGIN OF issuefieldoptionscopebean,
           projects TYPE string,
           projects2 TYPE string,
           global TYPE string,
         END OF issuefieldoptionscopebean.

* Component schema: PageBeanIssueFieldOption, object
  TYPES: BEGIN OF pagebeanissuefieldoption,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuefieldoption.

* Component schema: ProjectScopeBean, object
  TYPES: BEGIN OF projectscopebean,
           id TYPE i,
           attributes TYPE string,
         END OF projectscopebean.

* Component schema: IssueFieldOptionCreateBean, object
  TYPES: BEGIN OF issuefieldoptioncreatebean,
           value TYPE string,
           properties TYPE string,
           config TYPE string,
         END OF issuefieldoptioncreatebean.

* Component schema: RemoveOptionFromIssuesResult, object
  TYPES: BEGIN OF removeoptionfromissuesresult,
           modifiedissues TYPE string,
           unmodifiedissues TYPE string,
           errors TYPE string,
         END OF removeoptionfromissuesresult.

* Component schema: SimpleErrorCollection, object
  TYPES: BEGIN OF simpleerrorcollection,
           errors TYPE string,
           errormessages TYPE string,
           httpstatuscode TYPE i,
         END OF simpleerrorcollection.

* Component schema: TaskProgressBeanRemoveOptionFromIssuesResult, object
  TYPES: BEGIN OF taskprogressbeanremoveoptionfr,
           self TYPE string,
           id TYPE string,
           description TYPE string,
           status TYPE string,
           message TYPE string,
           result TYPE string,
           submittedby TYPE i,
           progress TYPE i,
           elapsedruntime TYPE i,
           submitted TYPE i,
           started TYPE i,
           finished TYPE i,
           lastupdate TYPE i,
         END OF taskprogressbeanremoveoptionfr.

* Component schema: Field, object
  TYPES: BEGIN OF field,
           id TYPE string,
           name TYPE string,
           schema TYPE string,
           description TYPE string,
           key TYPE string,
           islocked TYPE abap_bool,
           screenscount TYPE i,
           contextscount TYPE i,
           lastused TYPE string,
         END OF field.

* Component schema: FieldLastUsed, object
  TYPES: BEGIN OF fieldlastused,
           type TYPE string,
           value TYPE string,
         END OF fieldlastused.

* Component schema: PageBeanField, object
  TYPES: BEGIN OF pagebeanfield,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfield.

* Component schema: FieldConfigurationScheme, object
  TYPES: BEGIN OF fieldconfigurationscheme,
           id TYPE string,
           name TYPE string,
           description TYPE string,
         END OF fieldconfigurationscheme.

* Component schema: PageBeanFieldConfigurationScheme, object
  TYPES: BEGIN OF pagebeanfieldconfigurationsche,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfieldconfigurationsche.

* Component schema: FieldConfigurationIssueTypeItem, object
  TYPES: BEGIN OF fieldconfigurationissuetypeite,
           fieldconfigurationschemeid TYPE string,
           issuetypeid TYPE string,
           fieldconfigurationid TYPE string,
         END OF fieldconfigurationissuetypeite.

* Component schema: PageBeanFieldConfigurationIssueTypeItem, object
  TYPES: BEGIN OF pagebeanfieldconfigurationissu,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfieldconfigurationissu.

* Component schema: FieldConfigurationSchemeProjects, object
  TYPES: BEGIN OF fieldconfigurationschemeprojec,
           fieldconfigurationscheme TYPE string,
           projectids TYPE string,
         END OF fieldconfigurationschemeprojec.

* Component schema: PageBeanFieldConfigurationSchemeProjects, object
  TYPES: BEGIN OF pagebeanfieldconfigurationsc01,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfieldconfigurationsc01.

* Component schema: FieldConfigurationSchemeProjectAssociation, object
  TYPES: BEGIN OF fieldconfigurationschemeproj01,
           fieldconfigurationschemeid TYPE string,
           projectid TYPE string,
         END OF fieldconfigurationschemeproj01.

* Component schema: FieldConfiguration, object
  TYPES: BEGIN OF fieldconfiguration,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           isdefault TYPE abap_bool,
         END OF fieldconfiguration.

* Component schema: PageBeanFieldConfiguration, object
  TYPES: BEGIN OF pagebeanfieldconfiguration,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfieldconfiguration.

* Component schema: FieldConfigurationItem, object
  TYPES: BEGIN OF fieldconfigurationitem,
           id TYPE string,
           description TYPE string,
           ishidden TYPE abap_bool,
           isrequired TYPE abap_bool,
         END OF fieldconfigurationitem.

* Component schema: PageBeanFieldConfigurationItem, object
  TYPES: BEGIN OF pagebeanfieldconfigurationitem,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanfieldconfigurationitem.

* Component schema: PageBeanScreenScheme, object
  TYPES: BEGIN OF pagebeanscreenscheme,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanscreenscheme.

* Component schema: ScreenScheme, object
  TYPES: BEGIN OF screenscheme,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           screens TYPE string,
         END OF screenscheme.

* Component schema: ScreenTypes, object
  TYPES: BEGIN OF screentypes,
           edit TYPE i,
           create TYPE i,
           view TYPE i,
           default TYPE i,
         END OF screentypes.

* Component schema: ScreenSchemeDetails, object
  TYPES: BEGIN OF screenschemedetails,
           name TYPE string,
           description TYPE string,
           screens TYPE string,
         END OF screenschemedetails.

* Component schema: ScreenSchemeId, object
  TYPES: BEGIN OF screenschemeid,
           id TYPE i,
         END OF screenschemeid.

* Component schema: UpdateScreenSchemeDetails, object
  TYPES: BEGIN OF updatescreenschemedetails,
           name TYPE string,
           description TYPE string,
           screens TYPE string,
         END OF updatescreenschemedetails.

* Component schema: UpdateScreenTypes, object
  TYPES: BEGIN OF updatescreentypes,
           edit TYPE string,
           create TYPE string,
           view TYPE string,
           default TYPE string,
         END OF updatescreentypes.

* Component schema: IssueTypeScheme, object
  TYPES: BEGIN OF issuetypescheme,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           defaultissuetypeid TYPE string,
           isdefault TYPE abap_bool,
         END OF issuetypescheme.

* Component schema: PageBeanIssueTypeScheme, object
  TYPES: BEGIN OF pagebeanissuetypescheme,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypescheme.

* Component schema: IssueTypeSchemeProjects, object
  TYPES: BEGIN OF issuetypeschemeprojects,
           issuetypescheme TYPE string,
           projectids TYPE string,
         END OF issuetypeschemeprojects.

* Component schema: PageBeanIssueTypeSchemeProjects, object
  TYPES: BEGIN OF pagebeanissuetypeschemeproject,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypeschemeproject.

* Component schema: IssueTypeSchemeMapping, object
  TYPES: BEGIN OF issuetypeschememapping,
           issuetypeschemeid TYPE string,
           issuetypeid TYPE string,
         END OF issuetypeschememapping.

* Component schema: PageBeanIssueTypeSchemeMapping, object
  TYPES: BEGIN OF pagebeanissuetypeschememapping,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypeschememapping.

* Component schema: IssueTypeSchemeProjectAssociation, object
  TYPES: BEGIN OF issuetypeschemeprojectassociat,
           issuetypeschemeid TYPE string,
           projectid TYPE string,
         END OF issuetypeschemeprojectassociat.

* Component schema: IssueTypeSchemeDetails, object
  TYPES: BEGIN OF issuetypeschemedetails,
           name TYPE string,
           description TYPE string,
           defaultissuetypeid TYPE string,
           issuetypeids TYPE string,
         END OF issuetypeschemedetails.

* Component schema: IssueTypeSchemeID, object
  TYPES: BEGIN OF issuetypeschemeid,
           issuetypeschemeid TYPE string,
         END OF issuetypeschemeid.

* Component schema: IssueTypeIDs, object
  TYPES: BEGIN OF issuetypeids,
           issuetypeids TYPE string,
         END OF issuetypeids.

* Component schema: IssueTypeSchemeUpdateDetails, object
  TYPES: BEGIN OF issuetypeschemeupdatedetails,
           name TYPE string,
           description TYPE string,
           defaultissuetypeid TYPE string,
         END OF issuetypeschemeupdatedetails.

* Component schema: OrderOfIssueTypes, object
  TYPES: BEGIN OF orderofissuetypes,
           issuetypeids TYPE string,
           after TYPE string,
           position TYPE string,
         END OF orderofissuetypes.

* Component schema: AttachmentMetadata, object
  TYPES: BEGIN OF attachmentmetadata,
           id TYPE i,
           self TYPE string,
           filename TYPE string,
           author TYPE string,
           created TYPE string,
           size TYPE i,
           mimetype TYPE string,
           properties TYPE string,
           content TYPE string,
           thumbnail TYPE string,
         END OF attachmentmetadata.

* Component schema: AttachmentSettings, object
  TYPES: BEGIN OF attachmentsettings,
           enabled TYPE abap_bool,
           uploadlimit TYPE i,
         END OF attachmentsettings.

* Component schema: AttachmentArchiveEntry, object
  TYPES: BEGIN OF attachmentarchiveentry,
           mediatype TYPE string,
           abbreviatedname TYPE string,
           entryindex TYPE i,
           name TYPE string,
           size TYPE i,
         END OF attachmentarchiveentry.

* Component schema: AttachmentArchiveImpl, object
  TYPES: BEGIN OF attachmentarchiveimpl,
           entries TYPE string,
           totalentrycount TYPE i,
         END OF attachmentarchiveimpl.

* Component schema: AttachmentArchive, object
  TYPES: BEGIN OF attachmentarchive,
           moreavailable TYPE abap_bool,
           totalnumberofentriesavailable TYPE i,
           totalentrycount TYPE i,
           entries TYPE string,
         END OF attachmentarchive.

* Component schema: AttachmentArchiveItemReadable, object
  TYPES: BEGIN OF attachmentarchiveitemreadable,
           path TYPE string,
           index TYPE i,
           size TYPE string,
           mediatype TYPE string,
           label TYPE string,
         END OF attachmentarchiveitemreadable.

* Component schema: AttachmentArchiveMetadataReadable, object
  TYPES: BEGIN OF attachmentarchivemetadatareada,
           id TYPE i,
           name TYPE string,
           entries TYPE string,
           totalentrycount TYPE i,
           mediatype TYPE string,
         END OF attachmentarchivemetadatareada.

* Component schema: IssueTypeScreenSchemeItem, object
  TYPES: BEGIN OF issuetypescreenschemeitem,
           issuetypescreenschemeid TYPE string,
           issuetypeid TYPE string,
           screenschemeid TYPE string,
         END OF issuetypescreenschemeitem.

* Component schema: PageBeanIssueTypeScreenSchemeItem, object
  TYPES: BEGIN OF pagebeanissuetypescreenschemei,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypescreenschemei.

* Component schema: IssueTypeScreenScheme, object
  TYPES: BEGIN OF issuetypescreenscheme,
           id TYPE string,
           name TYPE string,
           description TYPE string,
         END OF issuetypescreenscheme.

* Component schema: IssueTypeScreenSchemesProjects, object
  TYPES: BEGIN OF issuetypescreenschemesprojects,
           issuetypescreenscheme TYPE string,
           projectids TYPE string,
         END OF issuetypescreenschemesprojects.

* Component schema: PageBeanIssueTypeScreenSchemesProjects, object
  TYPES: BEGIN OF pagebeanissuetypescreenschemes,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypescreenschemes.

* Component schema: PageBeanIssueTypeScreenScheme, object
  TYPES: BEGIN OF pagebeanissuetypescreenscheme,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypescreenscheme.

* Component schema: IssueTypeScreenSchemeProjectAssociation, object
  TYPES: BEGIN OF issuetypescreenschemeprojectas,
           issuetypescreenschemeid TYPE string,
           projectid TYPE string,
         END OF issuetypescreenschemeprojectas.

* Component schema: IssueTypeScreenSchemeDetails, object
  TYPES: BEGIN OF issuetypescreenschemedetails,
           name TYPE string,
           description TYPE string,
           issuetypemappings TYPE string,
         END OF issuetypescreenschemedetails.

* Component schema: IssueTypeScreenSchemeMapping, object
  TYPES: BEGIN OF issuetypescreenschememapping,
           issuetypeid TYPE string,
           screenschemeid TYPE string,
         END OF issuetypescreenschememapping.

* Component schema: IssueTypeScreenSchemeId, object
  TYPES: BEGIN OF issuetypescreenschemeid,
           id TYPE string,
         END OF issuetypescreenschemeid.

* Component schema: IssueTypeScreenSchemeUpdateDetails, object
  TYPES: BEGIN OF issuetypescreenschemeupdatedet,
           name TYPE string,
           description TYPE string,
         END OF issuetypescreenschemeupdatedet.

* Component schema: IssueTypeScreenSchemeMappingDetails, object
  TYPES: BEGIN OF issuetypescreenschememappingde,
           issuetypemappings TYPE string,
         END OF issuetypescreenschememappingde.

* Component schema: UpdateDefaultScreenScheme, object
  TYPES: BEGIN OF updatedefaultscreenscheme,
           screenschemeid TYPE string,
         END OF updatedefaultscreenscheme.

* Component schema: IssueTypeIds, object
  TYPES: BEGIN OF issuetypeids01,
           issuetypeids TYPE string,
         END OF issuetypeids01.

* Component schema: CreateUpdateRoleRequestBean, object
  TYPES: BEGIN OF createupdaterolerequestbean,
           name TYPE string,
           description TYPE string,
         END OF createupdaterolerequestbean.

* Component schema: ActorInputBean, object
  TYPES: BEGIN OF actorinputbean,
           user TYPE string,
           group TYPE string,
         END OF actorinputbean.

* Component schema: ProjectRoleActorsUpdateBean, object
  TYPES: BEGIN OF projectroleactorsupdatebean,
           id TYPE i,
           categorisedactors TYPE string,
         END OF projectroleactorsupdatebean.

* Component schema: ActorsMap, object
  TYPES: BEGIN OF actorsmap,
           user TYPE string,
           group TYPE string,
         END OF actorsmap.

* Component schema: ProjectRoleDetail, object
  TYPES: BEGIN OF projectroledetail,
           self TYPE string,
           name TYPE string,
           id TYPE i,
           description TYPE string,
           admin TYPE abap_bool,
           scope TYPE string,
           roleconfigurable TYPE abap_bool,
           translatedname TYPE string,
           default TYPE abap_bool,
         END OF projectroledetail.

* Component schema: CustomFieldOption, object
  TYPES: BEGIN OF customfieldoption,
           self TYPE string,
           value TYPE string,
         END OF customfieldoption.

* Component schema: CustomFieldContextProjectMapping, object
  TYPES: BEGIN OF customfieldcontextprojectmappi,
           contextid TYPE string,
           projectid TYPE string,
           isglobalcontext TYPE abap_bool,
         END OF customfieldcontextprojectmappi.

* Component schema: PageBeanCustomFieldContextProjectMapping, object
  TYPES: BEGIN OF pagebeancustomfieldcontextproj,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancustomfieldcontextproj.

* Component schema: CustomFieldContext, object
  TYPES: BEGIN OF customfieldcontext,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           isglobalcontext TYPE abap_bool,
           isanyissuetype TYPE abap_bool,
         END OF customfieldcontext.

* Component schema: PageBeanCustomFieldContext, object
  TYPES: BEGIN OF pagebeancustomfieldcontext,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancustomfieldcontext.

* Component schema: CreateCustomFieldContext, object
  TYPES: BEGIN OF createcustomfieldcontext,
           id TYPE string,
           name TYPE string,
           description TYPE string,
           projectids TYPE string,
           issuetypeids TYPE string,
         END OF createcustomfieldcontext.

* Component schema: ProjectIds, object
  TYPES: BEGIN OF projectids,
           projectids TYPE string,
         END OF projectids.

* Component schema: CustomFieldContextUpdateDetails, object
  TYPES: BEGIN OF customfieldcontextupdatedetail,
           name TYPE string,
           description TYPE string,
         END OF customfieldcontextupdatedetail.

* Component schema: ProjectIssueTypeMapping, object
  TYPES: BEGIN OF projectissuetypemapping,
           projectid TYPE string,
           issuetypeid TYPE string,
         END OF projectissuetypemapping.

* Component schema: ProjectIssueTypeMappings, object
  TYPES: BEGIN OF projectissuetypemappings,
           mappings TYPE string,
         END OF projectissuetypemappings.

* Component schema: ContextForProjectAndIssueType, object
  TYPES: BEGIN OF contextforprojectandissuetype,
           projectid TYPE string,
           issuetypeid TYPE string,
           contextid TYPE string,
         END OF contextforprojectandissuetype.

* Component schema: PageBeanContextForProjectAndIssueType, object
  TYPES: BEGIN OF pagebeancontextforprojectandis,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeancontextforprojectandis.

* Component schema: IssueTypeToContextMapping, object
  TYPES: BEGIN OF issuetypetocontextmapping,
           contextid TYPE string,
           issuetypeid TYPE string,
           isanyissuetype TYPE abap_bool,
         END OF issuetypetocontextmapping.

* Component schema: PageBeanIssueTypeToContextMapping, object
  TYPES: BEGIN OF pagebeanissuetypetocontextmapp,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanissuetypetocontextmapp.

* Component schema: ChangedWorklog, object
  TYPES: BEGIN OF changedworklog,
           worklogid TYPE i,
           updatedtime TYPE i,
           properties TYPE string,
         END OF changedworklog.

* Component schema: ChangedWorklogs, object
  TYPES: BEGIN OF changedworklogs,
           values TYPE string,
           since TYPE i,
           until TYPE i,
           self TYPE string,
           nextpage TYPE string,
           lastpage TYPE abap_bool,
         END OF changedworklogs.

* Component schema: WorklogIdsRequestBean, object
  TYPES: BEGIN OF worklogidsrequestbean,
           ids TYPE string,
         END OF worklogidsrequestbean.

* Component schema: UserMigrationBean, object
  TYPES: BEGIN OF usermigrationbean,
           key TYPE string,
           username TYPE string,
           accountid TYPE string,
         END OF usermigrationbean.

* Component schema: UnrestrictedUserEmail, object
  TYPES: BEGIN OF unrestricteduseremail,
           accountid TYPE string,
           email TYPE string,
         END OF unrestricteduseremail.

* Component schema: FailedWebhook, object
  TYPES: BEGIN OF failedwebhook,
           id TYPE string,
           body TYPE string,
           url TYPE string,
           failuretime TYPE i,
         END OF failedwebhook.

* Component schema: FailedWebhooks, object
  TYPES: BEGIN OF failedwebhooks,
           values TYPE string,
           maxresults TYPE i,
           next TYPE string,
         END OF failedwebhooks.

* Component schema: WebhookDetails, object
  TYPES: BEGIN OF webhookdetails,
           jqlfilter TYPE string,
           events TYPE string,
         END OF webhookdetails.

* Component schema: WebhookRegistrationDetails, object
  TYPES: BEGIN OF webhookregistrationdetails,
           webhooks TYPE string,
           url TYPE string,
         END OF webhookregistrationdetails.

* Component schema: ContainerForRegisteredWebhooks, object
  TYPES: BEGIN OF containerforregisteredwebhooks,
           webhookregistrationresult TYPE string,
         END OF containerforregisteredwebhooks.

* Component schema: RegisteredWebhook, object
  TYPES: BEGIN OF registeredwebhook,
           createdwebhookid TYPE i,
           errors TYPE string,
         END OF registeredwebhook.

* Component schema: PageBeanWebhook, object
  TYPES: BEGIN OF pagebeanwebhook,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanwebhook.

* Component schema: Webhook, object
  TYPES: BEGIN OF webhook,
           id TYPE i,
           jqlfilter TYPE string,
           events TYPE string,
           expirationdate TYPE i,
         END OF webhook.

* Component schema: ContainerForWebhookIDs, object
  TYPES: BEGIN OF containerforwebhookids,
           webhookids TYPE string,
         END OF containerforwebhookids.

* Component schema: WebhooksExpirationDate, object
  TYPES: BEGIN OF webhooksexpirationdate,
           expirationdate TYPE i,
         END OF webhooksexpirationdate.

* Component schema: BulkIssuePropertyUpdateRequest, object
  TYPES: BEGIN OF bulkissuepropertyupdaterequest,
           value TYPE string,
           expression TYPE string,
           filter TYPE string,
         END OF bulkissuepropertyupdaterequest.

* Component schema: IssueFilterForBulkPropertySet, object
  TYPES: BEGIN OF issuefilterforbulkpropertyset,
           entityids TYPE string,
           currentvalue TYPE string,
           hasproperty TYPE abap_bool,
         END OF issuefilterforbulkpropertyset.

* Component schema: IssueFilterForBulkPropertyDelete, object
  TYPES: BEGIN OF issuefilterforbulkpropertydele,
           entityids TYPE string,
           currentvalue TYPE string,
         END OF issuefilterforbulkpropertydele.

* Component schema: IssueEntityProperties, object
  TYPES: BEGIN OF issueentityproperties,
           entitiesids TYPE string,
           properties TYPE string,
         END OF issueentityproperties.

* Component schema: JsonNode, object
  TYPES: BEGIN OF jsonnode,
           elements TYPE string,
           pojo TYPE abap_bool,
           containernode TYPE abap_bool,
           missingnode TYPE abap_bool,
           object TYPE abap_bool,
           valuenode TYPE abap_bool,
           number TYPE abap_bool,
           integralnumber TYPE abap_bool,
           floatingpointnumber TYPE abap_bool,
           int TYPE abap_bool,
           long TYPE abap_bool,
           double TYPE abap_bool,
           bigdecimal TYPE abap_bool,
           biginteger TYPE abap_bool,
           textual TYPE abap_bool,
           boolean TYPE abap_bool,
           binary TYPE abap_bool,
           numbervalue TYPE f,
           numbertype TYPE string,
           intvalue TYPE i,
           longvalue TYPE i,
           bigintegervalue TYPE i,
           doublevalue TYPE f,
           decimalvalue TYPE f,
           booleanvalue TYPE abap_bool,
           binaryvalue TYPE string,
           valueasint TYPE i,
           valueaslong TYPE i,
           valueasdouble TYPE f,
           valueasboolean TYPE abap_bool,
           textvalue TYPE string,
           valueastext TYPE string,
           fieldnames TYPE string,
           array TYPE abap_bool,
           fields TYPE string,
           null TYPE abap_bool,
         END OF jsonnode.

* Component schema: GroupDetails, object
  TYPES: BEGIN OF groupdetails,
           name TYPE string,
           groupid TYPE string,
         END OF groupdetails.

* Component schema: PageBeanGroupDetails, object
  TYPES: BEGIN OF pagebeangroupdetails,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeangroupdetails.

* Component schema: Locale, object
  TYPES: BEGIN OF locale,
           locale TYPE string,
         END OF locale.

* Component schema: HealthCheckResult, object
  TYPES: BEGIN OF healthcheckresult,
           name TYPE string,
           description TYPE string,
           passed TYPE abap_bool,
         END OF healthcheckresult.

* Component schema: ServerInformation, object
  TYPES: BEGIN OF serverinformation,
           baseurl TYPE string,
           version TYPE string,
           versionnumbers TYPE string,
           deploymenttype TYPE string,
           buildnumber TYPE i,
           builddate TYPE string,
           servertime TYPE string,
           scminfo TYPE string,
           servertitle TYPE string,
           healthchecks TYPE string,
         END OF serverinformation.

* Component schema: EventNotification, object
  TYPES: BEGIN OF eventnotification,
           expand TYPE string,
           id TYPE i,
           notificationtype TYPE string,
           parameter TYPE string,
           group TYPE string,
           field TYPE string,
           emailaddress TYPE string,
           projectrole TYPE string,
           user TYPE string,
         END OF eventnotification.

* Component schema: NotificationEvent, object
  TYPES: BEGIN OF notificationevent,
           id TYPE i,
           name TYPE string,
           description TYPE string,
           templateevent TYPE string,
         END OF notificationevent.

* Component schema: NotificationScheme, object
  TYPES: BEGIN OF notificationscheme,
           expand TYPE string,
           id TYPE i,
           self TYPE string,
           name TYPE string,
           description TYPE string,
           notificationschemeevents TYPE string,
           scope TYPE string,
         END OF notificationscheme.

* Component schema: NotificationSchemeEvent, object
  TYPES: BEGIN OF notificationschemeevent,
           event TYPE string,
           notifications TYPE string,
         END OF notificationschemeevent.

* Component schema: PageBeanNotificationScheme, object
  TYPES: BEGIN OF pagebeannotificationscheme,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeannotificationscheme.

* Component schema: IdBean, object
  TYPES: BEGIN OF idbean,
           id TYPE i,
         END OF idbean.

* Component schema: Permissions, object
  TYPES: BEGIN OF permissions,
           permissions TYPE string,
         END OF permissions.

* Component schema: UserPermission, object
  TYPES: BEGIN OF userpermission,
           id TYPE string,
           key TYPE string,
           name TYPE string,
           type TYPE string,
           description TYPE string,
           havepermission TYPE abap_bool,
           deprecatedkey TYPE abap_bool,
         END OF userpermission.

* Component schema: BulkPermissionsRequestBean, object
  TYPES: BEGIN OF bulkpermissionsrequestbean,
           projectpermissions TYPE string,
           globalpermissions TYPE string,
           accountid TYPE string,
         END OF bulkpermissionsrequestbean.

* Component schema: BulkProjectPermissions, object
  TYPES: BEGIN OF bulkprojectpermissions,
           issues TYPE string,
           projects TYPE string,
           permissions TYPE string,
         END OF bulkprojectpermissions.

* Component schema: BulkPermissionGrants, object
  TYPES: BEGIN OF bulkpermissiongrants,
           projectpermissions TYPE string,
           globalpermissions TYPE string,
         END OF bulkpermissiongrants.

* Component schema: BulkProjectPermissionGrants, object
  TYPES: BEGIN OF bulkprojectpermissiongrants,
           permission TYPE string,
           issues TYPE string,
           projects TYPE string,
         END OF bulkprojectpermissiongrants.

* Component schema: PermissionsKeysBean, object
  TYPES: BEGIN OF permissionskeysbean,
           permissions TYPE string,
         END OF permissionskeysbean.

* Component schema: PermittedProjects, object
  TYPES: BEGIN OF permittedprojects,
           projects TYPE string,
         END OF permittedprojects.

* Component schema: ProjectIdentifierBean, object
  TYPES: BEGIN OF projectidentifierbean,
           id TYPE i,
           key TYPE string,
         END OF projectidentifierbean.

* Component schema: JqlQueriesToParse, object
  TYPES: BEGIN OF jqlqueriestoparse,
           queries TYPE string,
         END OF jqlqueriestoparse.

* Component schema: CompoundClause, object
  TYPES: BEGIN OF compoundclause,
           clauses TYPE string,
           operator TYPE string,
         END OF compoundclause.

* Component schema: FieldChangedClause, object
  TYPES: BEGIN OF fieldchangedclause,
           field TYPE string,
           operator TYPE string,
           predicates TYPE string,
         END OF fieldchangedclause.

* Component schema: FieldValueClause, object
  TYPES: BEGIN OF fieldvalueclause,
           field TYPE string,
           operator TYPE string,
           operand TYPE string,
         END OF fieldvalueclause.

* Component schema: FieldWasClause, object
  TYPES: BEGIN OF fieldwasclause,
           field TYPE string,
           operator TYPE string,
           operand TYPE string,
           predicates TYPE string,
         END OF fieldwasclause.

* Component schema: FunctionOperand, object
  TYPES: BEGIN OF functionoperand,
           function TYPE string,
           arguments TYPE string,
         END OF functionoperand.

* Component schema: JqlQuery, object
  TYPES: BEGIN OF jqlquery,
           where TYPE string,
           orderby TYPE string,
         END OF jqlquery.

* Component schema: JqlQueryClause, object
  TYPES: BEGIN OF jqlqueryclause,
           dummy TYPE i,
         END OF jqlqueryclause.

* Component schema: JqlQueryClauseOperand, object
  TYPES: BEGIN OF jqlqueryclauseoperand,
           dummy TYPE i,
         END OF jqlqueryclauseoperand.

* Component schema: JqlQueryClauseTimePredicate, object
  TYPES: BEGIN OF jqlqueryclausetimepredicate,
           operator TYPE string,
           operand TYPE string,
         END OF jqlqueryclausetimepredicate.

* Component schema: JqlQueryField, object
  TYPES: BEGIN OF jqlqueryfield,
           name TYPE string,
           property TYPE string,
         END OF jqlqueryfield.

* Component schema: JqlQueryFieldEntityProperty, object
  TYPES: BEGIN OF jqlqueryfieldentityproperty,
           entity TYPE string,
           key TYPE string,
           path TYPE string,
           type TYPE string,
         END OF jqlqueryfieldentityproperty.

* Component schema: JqlQueryOrderByClause, object
  TYPES: BEGIN OF jqlqueryorderbyclause,
           fields TYPE string,
         END OF jqlqueryorderbyclause.

* Component schema: JqlQueryOrderByClauseElement, object
  TYPES: BEGIN OF jqlqueryorderbyclauseelement,
           field TYPE string,
           direction TYPE string,
         END OF jqlqueryorderbyclauseelement.

* Component schema: JqlQueryUnitaryOperand, object
  TYPES: BEGIN OF jqlqueryunitaryoperand,
           dummy TYPE i,
         END OF jqlqueryunitaryoperand.

* Component schema: KeywordOperand, object
  TYPES: BEGIN OF keywordoperand,
           keyword TYPE string,
         END OF keywordoperand.

* Component schema: ListOperand, object
  TYPES: BEGIN OF listoperand,
           values TYPE string,
         END OF listoperand.

* Component schema: ParsedJqlQueries, object
  TYPES: BEGIN OF parsedjqlqueries,
           queries TYPE string,
         END OF parsedjqlqueries.

* Component schema: ParsedJqlQuery, object
  TYPES: BEGIN OF parsedjqlquery,
           query TYPE string,
           structure TYPE string,
           errors TYPE string,
         END OF parsedjqlquery.

* Component schema: ValueOperand, object
  TYPES: BEGIN OF valueoperand,
           value TYPE string,
         END OF valueoperand.

* Component schema: ProjectEmailAddress, object
  TYPES: BEGIN OF projectemailaddress,
           emailaddress TYPE string,
         END OF projectemailaddress.

* Component schema: ProjectType, object
  TYPES: BEGIN OF projecttype,
           key TYPE string,
           formattedkey TYPE string,
           descriptioni18nkey TYPE string,
           icon TYPE string,
           color TYPE string,
         END OF projecttype.

* Component schema: IdOrKeyBean, object
  TYPES: BEGIN OF idorkeybean,
           id TYPE i,
           key TYPE string,
         END OF idorkeybean.

* Component schema: JexpIssues, object
  TYPES: BEGIN OF jexpissues,
           jql TYPE string,
         END OF jexpissues.

* Component schema: JexpJqlIssues, object
  TYPES: BEGIN OF jexpjqlissues,
           query TYPE string,
           startat TYPE i,
           maxresults TYPE i,
           validation TYPE string,
         END OF jexpjqlissues.

* Component schema: JiraExpressionEvalContextBean, object
  TYPES: BEGIN OF jiraexpressionevalcontextbean,
           issue TYPE string,
           issues TYPE string,
           project TYPE string,
           sprint TYPE i,
           board TYPE i,
           servicedesk TYPE i,
           customerrequest TYPE i,
         END OF jiraexpressionevalcontextbean.

* Component schema: JiraExpressionEvalRequestBean, object
  TYPES: BEGIN OF jiraexpressionevalrequestbean,
           expression TYPE string,
           context TYPE string,
         END OF jiraexpressionevalrequestbean.

* Component schema: IssuesJqlMetaDataBean, object
  TYPES: BEGIN OF issuesjqlmetadatabean,
           startat TYPE i,
           maxresults TYPE i,
           count TYPE i,
           totalcount TYPE i,
           validationwarnings TYPE string,
         END OF issuesjqlmetadatabean.

* Component schema: IssuesMetaBean, object
  TYPES: BEGIN OF issuesmetabean,
           jql TYPE string,
         END OF issuesmetabean.

* Component schema: JiraExpressionEvaluationMetaDataBean, object
  TYPES: BEGIN OF jiraexpressionevaluationmetada,
           complexity TYPE string,
           issues TYPE string,
         END OF jiraexpressionevaluationmetada.

* Component schema: JiraExpressionResult, object
  TYPES: BEGIN OF jiraexpressionresult,
           value TYPE string,
           meta TYPE string,
         END OF jiraexpressionresult.

* Component schema: JiraExpressionsComplexityBean, object
  TYPES: BEGIN OF jiraexpressionscomplexitybean,
           steps TYPE string,
           expensiveoperations TYPE string,
           beans TYPE string,
           primitivevalues TYPE string,
         END OF jiraexpressionscomplexitybean.

* Component schema: JiraExpressionsComplexityValueBean, object
  TYPES: BEGIN OF jiraexpressionscomplexityvalue,
           value TYPE i,
           limit TYPE i,
         END OF jiraexpressionscomplexityvalue.

* Component schema: JiraExpressionForAnalysis, object
  TYPES: BEGIN OF jiraexpressionforanalysis,
           expressions TYPE string,
           contextvariables TYPE string,
         END OF jiraexpressionforanalysis.

* Component schema: JiraExpressionAnalysis, object
  TYPES: BEGIN OF jiraexpressionanalysis,
           expression TYPE string,
           errors TYPE string,
           valid TYPE abap_bool,
           type TYPE string,
           complexity TYPE string,
         END OF jiraexpressionanalysis.

* Component schema: JiraExpressionComplexity, object
  TYPES: BEGIN OF jiraexpressioncomplexity,
           expensiveoperations TYPE string,
           variables TYPE string,
         END OF jiraexpressioncomplexity.

* Component schema: JiraExpressionValidationError, object
  TYPES: BEGIN OF jiraexpressionvalidationerror,
           line TYPE i,
           column TYPE i,
           expression TYPE string,
           message TYPE string,
           type TYPE string,
         END OF jiraexpressionvalidationerror.

* Component schema: JiraExpressionsAnalysis, object
  TYPES: BEGIN OF jiraexpressionsanalysis,
           results TYPE string,
         END OF jiraexpressionsanalysis.

* Component schema: ProjectIssueSecurityLevels, object
  TYPES: BEGIN OF projectissuesecuritylevels,
           levels TYPE string,
         END OF projectissuesecuritylevels.

* Component schema: IssueTypeInfo, object
  TYPES: BEGIN OF issuetypeinfo,
           id TYPE i,
           name TYPE string,
           avatarid TYPE i,
         END OF issuetypeinfo.

* Component schema: ProjectIssueTypeHierarchy, object
  TYPES: BEGIN OF projectissuetypehierarchy,
           projectid TYPE i,
           hierarchy TYPE string,
         END OF projectissuetypehierarchy.

* Component schema: ProjectIssueTypesHierarchyLevel, object
  TYPES: BEGIN OF projectissuetypeshierarchyleve,
           entityid TYPE string,
           level TYPE i,
           name TYPE string,
           issuetypes TYPE string,
         END OF projectissuetypeshierarchyleve.

* Component schema: PageBeanString, object
  TYPES: BEGIN OF pagebeanstring,
           self TYPE string,
           nextpage TYPE string,
           maxresults TYPE i,
           startat TYPE i,
           total TYPE i,
           islast TYPE abap_bool,
           values TYPE string,
         END OF pagebeanstring.

* Component schema: OperationMessage, object
  TYPES: BEGIN OF operationmessage,
           message TYPE string,
           statuscode TYPE i,
         END OF operationmessage.

* Component schema: ErrorMessage, object
  TYPES: BEGIN OF errormessage,
           message TYPE string,
         END OF errormessage.

* Component schema: ConnectModules, object
  TYPES: BEGIN OF connectmodules,
           modules TYPE string,
         END OF connectmodules.

* Component schema: ConnectModule, object
  TYPES: BEGIN OF connectmodule,
           dummy TYPE i,
         END OF connectmodule.

* GET - "Get application property"
* Operation id: getApplicationProperty
* Parameter: key, optional, query
* Parameter: permissionLevel, optional, query
* Parameter: keyFilter, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getapplicationproperty
    IMPORTING
      key TYPE string OPTIONAL
      permissionlevel TYPE string OPTIONAL
      keyfilter TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get advanced settings"
* Operation id: getAdvancedSettings
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
  METHODS getadvancedsettings
    RAISING cx_static_check.

* PUT - "Set application property"
* Operation id: setApplicationProperty
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ApplicationProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/SimpleApplicationPropertyBean
  METHODS setapplicationproperty
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE applicationproperty
    RAISING cx_static_check.

* GET - "Get all application roles"
* Operation id: getAllApplicationRoles
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
  METHODS getallapplicationroles
    RAISING cx_static_check.

* GET - "Get application role"
* Operation id: getApplicationRole
* Parameter: key, required, path
* Response: 200
*     application/json, #/components/schemas/ApplicationRole
* Response: 401
* Response: 403
* Response: 404
  METHODS getapplicationrole
    IMPORTING
      key TYPE string
    RETURNING VALUE(return_data) TYPE applicationrole
    RAISING cx_static_check.

* GET - "Get Jira attachment settings"
* Operation id: getAttachmentMeta
* Response: 200
*     application/json, #/components/schemas/AttachmentSettings
* Response: 401
  METHODS getattachmentmeta
    RETURNING VALUE(return_data) TYPE attachmentsettings
    RAISING cx_static_check.

* GET - "Get attachment metadata"
* Operation id: getAttachment
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/AttachmentMetadata
* Response: 401
* Response: 403
* Response: 404
  METHODS getattachment
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE attachmentmetadata
    RAISING cx_static_check.

* DELETE - "Delete attachment"
* Operation id: removeAttachment
* Parameter: id, required, path
* Response: 204
* Response: 403
* Response: 404
  METHODS removeattachment
    IMPORTING
      id TYPE string
    RAISING cx_static_check.

* GET - "Get all metadata for an expanded attachment"
* Operation id: expandAttachmentForHumans
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/AttachmentArchiveMetadataReadable
* Response: 401
* Response: 403
* Response: 404
* Response: 409
  METHODS expandattachmentforhumans
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE attachmentarchivemetadatareada
    RAISING cx_static_check.

* GET - "Get contents metadata for an expanded attachment"
* Operation id: expandAttachmentForMachines
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/AttachmentArchiveImpl
* Response: 401
* Response: 403
* Response: 404
* Response: 409
  METHODS expandattachmentformachines
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE attachmentarchiveimpl
    RAISING cx_static_check.

* GET - "Get audit records"
* Operation id: getAuditRecords
* Parameter: offset, optional, query
* Parameter: limit, optional, query
* Parameter: filter, optional, query
* Parameter: from, optional, query
* Parameter: to, optional, query
* Response: 200
*     application/json, #/components/schemas/AuditRecords
* Response: 401
* Response: 403
  METHODS getauditrecords
    IMPORTING
      offset TYPE i DEFAULT 0 OPTIONAL
      limit TYPE i DEFAULT 1000 OPTIONAL
      filter TYPE string OPTIONAL
      from TYPE string OPTIONAL
      to TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE auditrecords
    RAISING cx_static_check.

* GET - "Get system avatars by type"
* Operation id: getAllSystemAvatars
* Parameter: type, required, path
* Response: 200
*     application/json, #/components/schemas/SystemAvatars
* Response: 401
* Response: 500
  METHODS getallsystemavatars
    IMPORTING
      type TYPE string
    RETURNING VALUE(return_data) TYPE systemavatars
    RAISING cx_static_check.

* POST - "Get comments by IDs"
* Operation id: getCommentsByIds
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanComment
* Response: 400
* Body ref: #/components/schemas/IssueCommentListRequestBean
  METHODS getcommentsbyids
    IMPORTING
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancomment
    RAISING cx_static_check.

* GET - "Get comment property keys"
* Operation id: getCommentPropertyKeys
* Parameter: commentId, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getcommentpropertykeys
    IMPORTING
      commentid TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get comment property"
* Operation id: getCommentProperty
* Parameter: commentId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getcommentproperty
    IMPORTING
      commentid TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set comment property"
* Operation id: setCommentProperty
* Parameter: commentId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setcommentproperty
    IMPORTING
      commentid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete comment property"
* Operation id: deleteCommentProperty
* Parameter: commentId, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deletecommentproperty
    IMPORTING
      commentid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* POST - "Create component"
* Operation id: createComponent
* Response: 201
*     application/json, #/components/schemas/Component
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/Component
  METHODS createcomponent
    RAISING cx_static_check.

* GET - "Get component"
* Operation id: getComponent
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Component
* Response: 401
* Response: 404
  METHODS getcomponent
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE component
    RAISING cx_static_check.

* PUT - "Update component"
* Operation id: updateComponent
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Component
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/Component
  METHODS updatecomponent
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE component
    RAISING cx_static_check.

* DELETE - "Delete component"
* Operation id: deleteComponent
* Parameter: id, required, path
* Parameter: moveIssuesTo, optional, query
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS deletecomponent
    IMPORTING
      id TYPE string
      moveissuesto TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get component issues count"
* Operation id: getComponentRelatedIssues
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ComponentIssuesCount
* Response: 401
* Response: 404
  METHODS getcomponentrelatedissues
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE componentissuescount
    RAISING cx_static_check.

* GET - "Get global settings"
* Operation id: getConfiguration
* Response: 200
*     application/json, #/components/schemas/Configuration
* Response: 401
  METHODS getconfiguration
    RETURNING VALUE(return_data) TYPE configuration
    RAISING cx_static_check.

* GET - "Get selected time tracking provider"
* Operation id: getSelectedTimeTrackingImplementation
* Response: 200
*     application/json, #/components/schemas/TimeTrackingProvider
* Response: 204
*     application/json, 
* Response: 401
* Response: 403
  METHODS getselectedtimetrackingimpleme
    RETURNING VALUE(return_data) TYPE timetrackingprovider
    RAISING cx_static_check.

* PUT - "Select time tracking provider"
* Operation id: selectTimeTrackingImplementation
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/TimeTrackingProvider
  METHODS selecttimetrackingimplementati
    RAISING cx_static_check.

* GET - "Get all time tracking providers"
* Operation id: getAvailableTimeTrackingImplementations
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
  METHODS getavailabletimetrackingimplem
    RAISING cx_static_check.

* GET - "Get time tracking settings"
* Operation id: getSharedTimeTrackingConfiguration
* Response: 200
*     application/json, #/components/schemas/TimeTrackingConfiguration
* Response: 401
* Response: 403
  METHODS getsharedtimetrackingconfigura
    RETURNING VALUE(return_data) TYPE timetrackingconfiguration
    RAISING cx_static_check.

* PUT - "Set time tracking settings"
* Operation id: setSharedTimeTrackingConfiguration
* Response: 200
*     application/json, #/components/schemas/TimeTrackingConfiguration
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/TimeTrackingConfiguration
  METHODS setsharedtimetrackingconfigura
    RETURNING VALUE(return_data) TYPE timetrackingconfiguration
    RAISING cx_static_check.

* GET - "Get options for field"
* Operation id: getOptionsForField
* Parameter: fieldId, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanCustomFieldOptionDetails
* Response: 400
* Response: 401
* Response: 404
  METHODS getoptionsforfield
    IMPORTING
      fieldid TYPE i
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 1000 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancustomfieldoptiondetai
    RAISING cx_static_check.

* PUT - "Update custom field options"
* Operation id: updateCustomFieldOptions
* Parameter: fieldId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/UpdateCustomFieldOption
  METHODS updatecustomfieldoptions
    IMPORTING
      fieldid TYPE i
    RAISING cx_static_check.

* POST - "Create custom field options"
* Operation id: createCustomFieldOptions
* Parameter: fieldId, required, path
* Response: 201
*     application/json, 
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/BulkCreateCustomFieldOptionRequest
  METHODS createcustomfieldoptions
    IMPORTING
      fieldid TYPE i
    RAISING cx_static_check.

* GET - "Get custom field option"
* Operation id: getCustomFieldOption
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/CustomFieldOption
* Response: 401
* Response: 404
  METHODS getcustomfieldoption
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE customfieldoption
    RAISING cx_static_check.

* GET - "Get all dashboards"
* Operation id: getAllDashboards
* Parameter: filter, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageOfDashboards
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
  METHODS getalldashboards
    IMPORTING
      filter TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 20 OPTIONAL
    RETURNING VALUE(return_data) TYPE pageofdashboards
    RAISING cx_static_check.

* POST - "Create dashboard"
* Operation id: createDashboard
* Response: 200
*     application/json, #/components/schemas/Dashboard
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/DashboardDetails
  METHODS createdashboard
    RETURNING VALUE(return_data) TYPE dashboard
    RAISING cx_static_check.

* GET - "Search for dashboards"
* Operation id: getDashboardsPaginated
* Parameter: dashboardName, optional, query
* Parameter: accountId, optional, query
* Parameter: owner, optional, query
* Parameter: groupname, optional, query
* Parameter: projectId, optional, query
* Parameter: orderBy, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanDashboard
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
  METHODS getdashboardspaginated
    IMPORTING
      dashboardname TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      owner TYPE string OPTIONAL
      groupname TYPE string OPTIONAL
      projectid TYPE i OPTIONAL
      orderby TYPE string DEFAULT 'name' OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeandashboard
    RAISING cx_static_check.

* GET - "Get dashboard item property keys"
* Operation id: getDashboardItemPropertyKeys
* Parameter: dashboardId, required, path
* Parameter: itemId, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 401
* Response: 404
  METHODS getdashboarditempropertykeys
    IMPORTING
      dashboardid TYPE string
      itemid TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get dashboard item property"
* Operation id: getDashboardItemProperty
* Parameter: dashboardId, required, path
* Parameter: itemId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 401
* Response: 404
  METHODS getdashboarditemproperty
    IMPORTING
      dashboardid TYPE string
      itemid TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set dashboard item property"
* Operation id: setDashboardItemProperty
* Parameter: dashboardId, required, path
* Parameter: itemId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setdashboarditemproperty
    IMPORTING
      dashboardid TYPE string
      itemid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete dashboard item property"
* Operation id: deleteDashboardItemProperty
* Parameter: dashboardId, required, path
* Parameter: itemId, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deletedashboarditemproperty
    IMPORTING
      dashboardid TYPE string
      itemid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Get dashboard"
* Operation id: getDashboard
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Dashboard
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
  METHODS getdashboard
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE dashboard
    RAISING cx_static_check.

* PUT - "Update dashboard"
* Operation id: updateDashboard
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Dashboard
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/DashboardDetails
  METHODS updatedashboard
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE dashboard
    RAISING cx_static_check.

* DELETE - "Delete dashboard"
* Operation id: deleteDashboard
* Parameter: id, required, path
* Response: 204
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
  METHODS deletedashboard
    IMPORTING
      id TYPE string
    RAISING cx_static_check.

* POST - "Copy dashboard"
* Operation id: copyDashboard
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Dashboard
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/DashboardDetails
  METHODS copydashboard
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE dashboard
    RAISING cx_static_check.

* POST - "Analyse Jira expression"
* Operation id: analyseExpression
* Parameter: check, optional, query
* Response: 200
*     application/json, #/components/schemas/JiraExpressionsAnalysis
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/JiraExpressionForAnalysis
  METHODS analyseexpression
    IMPORTING
      check TYPE string DEFAULT 'syntax' OPTIONAL
    RETURNING VALUE(return_data) TYPE jiraexpressionsanalysis
    RAISING cx_static_check.

* POST - "Evaluate Jira expression"
* Operation id: evaluateJiraExpression
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/JiraExpressionResult
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/JiraExpressionEvalRequestBean
  METHODS evaluatejiraexpression
    IMPORTING
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE jiraexpressionresult
    RAISING cx_static_check.

* GET - "Get fields"
* Operation id: getFields
* Response: 200
*     application/json, array
* Response: 401
  METHODS getfields
    RAISING cx_static_check.

* POST - "Create custom field"
* Operation id: createCustomField
* Response: 201
*     application/json, #/components/schemas/FieldDetails
* Response: 400
* Body ref: #/components/schemas/CustomFieldDefinitionJsonBean
  METHODS createcustomfield
    RAISING cx_static_check.

* GET - "Get fields paginated"
* Operation id: getFieldsPaginated
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: type, optional, query
* Parameter: id, optional, query
* Parameter: query, optional, query
* Parameter: orderBy, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanField
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
  METHODS getfieldspaginated
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      type TYPE string OPTIONAL
      id TYPE string OPTIONAL
      query TYPE string OPTIONAL
      orderby TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfield
    RAISING cx_static_check.

* GET - "Get custom field contexts"
* Operation id: getContextsForField
* Parameter: fieldId, required, path
* Parameter: isAnyIssueType, optional, query
* Parameter: isGlobalContext, optional, query
* Parameter: contextId, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanCustomFieldContext
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS getcontextsforfield
    IMPORTING
      fieldid TYPE string
      isanyissuetype TYPE abap_bool OPTIONAL
      isglobalcontext TYPE abap_bool OPTIONAL
      contextid TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancustomfieldcontext
    RAISING cx_static_check.

* POST - "Create custom field context"
* Operation id: createCustomFieldContext
* Parameter: fieldId, required, path
* Response: 201
*     application/json, #/components/schemas/CreateCustomFieldContext
* Response: 400
* Response: 401
* Response: 404
* Response: 409
*     application/json, 
* Body ref: #/components/schemas/CreateCustomFieldContext
  METHODS createcustomfieldcontext
    IMPORTING
      fieldid TYPE string
    RAISING cx_static_check.

* GET - "Get issue types for custom field context"
* Operation id: getIssueTypeMappingsForContexts
* Parameter: fieldId, required, path
* Parameter: contextId, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeToContextMapping
* Response: 401
* Response: 403
*     application/json, 
  METHODS getissuetypemappingsforcontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuetypetocontextmapp
    RAISING cx_static_check.

* POST - "Get custom field contexts for projects and issue types"
* Operation id: getCustomFieldContextsForProjectsAndIssueTypes
* Parameter: fieldId, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanContextForProjectAndIssueType
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/ProjectIssueTypeMappings
  METHODS getcustomfieldcontextsforproje
    IMPORTING
      fieldid TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancontextforprojectandis
    RAISING cx_static_check.

* GET - "Get project mappings for custom field context"
* Operation id: getProjectContextMapping
* Parameter: fieldId, required, path
* Parameter: contextId, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanCustomFieldContextProjectMapping
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS getprojectcontextmapping
    IMPORTING
      fieldid TYPE string
      contextid TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancustomfieldcontextproj
    RAISING cx_static_check.

* PUT - "Update custom field context"
* Operation id: updateCustomFieldContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/CustomFieldContextUpdateDetails
  METHODS updatecustomfieldcontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* DELETE - "Delete custom field context"
* Operation id: deleteCustomFieldContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS deletecustomfieldcontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* PUT - "Add issue types to context"
* Operation id: addIssueTypesToContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Response: 409
*     application/json, 
* Body ref: #/components/schemas/IssueTypeIds
  METHODS addissuetypestocontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* POST - "Remove issue types from context"
* Operation id: removeIssueTypesFromContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeIds
  METHODS removeissuetypesfromcontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* GET - "Get custom field options (context)"
* Operation id: getOptionsForContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Parameter: optionId, optional, query
* Parameter: onlyOptions, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanCustomFieldContextOption
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS getoptionsforcontext
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
      optionid TYPE i OPTIONAL
      onlyoptions TYPE abap_bool DEFAULT 'false' OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancustomfieldcontextopti
    RAISING cx_static_check.

* PUT - "Update custom field options (context)"
* Operation id: updateCustomFieldOption
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 200
*     application/json, #/components/schemas/CustomFieldUpdatedContextOptionsList
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/BulkCustomFieldOptionUpdateRequest
  METHODS updatecustomfieldoption
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RETURNING VALUE(return_data) TYPE customfieldupdatedcontextoptio
    RAISING cx_static_check.

* POST - "Create custom field options (context)"
* Operation id: createCustomFieldOption
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 200
*     application/json, #/components/schemas/CustomFieldCreatedContextOptionsList
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/BulkCustomFieldOptionCreateRequest
  METHODS createcustomfieldoption
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RETURNING VALUE(return_data) TYPE customfieldcreatedcontextoptio
    RAISING cx_static_check.

* PUT - "Reorder custom field options (context)"
* Operation id: reorderCustomFieldOptions
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/OrderOfCustomFieldOptions
  METHODS reordercustomfieldoptions
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* DELETE - "Delete custom field options (context)"
* Operation id: deleteCustomFieldOption
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Parameter: optionId, required, path
* Response: 204
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS deletecustomfieldoption
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
      optionid TYPE i
    RAISING cx_static_check.

* PUT - "Assign custom field context to projects"
* Operation id: assignProjectsToCustomFieldContext
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/ProjectIds
  METHODS assignprojectstocustomfieldcon
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* POST - "Remove custom field context from projects"
* Operation id: removeCustomFieldContextFromProjects
* Parameter: fieldId, required, path
* Parameter: contextId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/ProjectIds
  METHODS removecustomfieldcontextfrompr
    IMPORTING
      fieldid TYPE string
      contextid TYPE i
    RAISING cx_static_check.

* GET - "Get contexts for a field"
* Operation id: getContextsForFieldDeprecated
* Parameter: fieldId, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanContext
* Response: 401
* Response: 403
  METHODS getcontextsforfielddeprecated
    IMPORTING
      fieldid TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 20 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancontext
    RAISING cx_static_check.

* GET - "Get screens for a field"
* Operation id: getScreensForField
* Parameter: fieldId, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanScreen
* Response: 401
* Response: 403
  METHODS getscreensforfield
    IMPORTING
      fieldid TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanscreen
    RAISING cx_static_check.

* GET - "Get all issue field options"
* Operation id: getAllIssueFieldOptions
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: fieldKey, required, path
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueFieldOption
* Response: 400
* Response: 403
  METHODS getallissuefieldoptions
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      fieldkey TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanissuefieldoption
    RAISING cx_static_check.

* POST - "Create issue field option"
* Operation id: createIssueFieldOption
* Parameter: fieldKey, required, path
* Response: 200
*     application/json, #/components/schemas/IssueFieldOption
* Response: 400
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueFieldOptionCreateBean
  METHODS createissuefieldoption
    IMPORTING
      fieldkey TYPE string
    RETURNING VALUE(return_data) TYPE issuefieldoption
    RAISING cx_static_check.

* GET - "Get selectable issue field options"
* Operation id: getSelectableIssueFieldOptions
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: projectId, optional, query
* Parameter: fieldKey, required, path
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueFieldOption
* Response: 401
* Response: 404
  METHODS getselectableissuefieldoptions
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      projectid TYPE i OPTIONAL
      fieldkey TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanissuefieldoption
    RAISING cx_static_check.

* GET - "Get visible issue field options"
* Operation id: getVisibleIssueFieldOptions
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: projectId, optional, query
* Parameter: fieldKey, required, path
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueFieldOption
* Response: 401
* Response: 404
  METHODS getvisibleissuefieldoptions
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i OPTIONAL
      projectid TYPE i OPTIONAL
      fieldkey TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanissuefieldoption
    RAISING cx_static_check.

* GET - "Get issue field option"
* Operation id: getIssueFieldOption
* Parameter: fieldKey, required, path
* Parameter: optionId, required, path
* Response: 200
*     application/json, #/components/schemas/IssueFieldOption
* Response: 400
* Response: 403
* Response: 404
  METHODS getissuefieldoption
    IMPORTING
      fieldkey TYPE string
      optionid TYPE i
    RETURNING VALUE(return_data) TYPE issuefieldoption
    RAISING cx_static_check.

* PUT - "Update issue field option"
* Operation id: updateIssueFieldOption
* Parameter: fieldKey, required, path
* Parameter: optionId, required, path
* Response: 200
*     application/json, #/components/schemas/IssueFieldOption
* Response: 400
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueFieldOption
  METHODS updateissuefieldoption
    IMPORTING
      fieldkey TYPE string
      optionid TYPE i
    RETURNING VALUE(return_data) TYPE issuefieldoption
    RAISING cx_static_check.

* DELETE - "Delete issue field option"
* Operation id: deleteIssueFieldOption
* Parameter: fieldKey, required, path
* Parameter: optionId, required, path
* Response: 204
*     application/json, 
* Response: 403
* Response: 404
* Response: 409
  METHODS deleteissuefieldoption
    IMPORTING
      fieldkey TYPE string
      optionid TYPE i
    RAISING cx_static_check.

* DELETE - "Replace issue field option"
* Operation id: replaceIssueFieldOption
* Parameter: replaceWith, optional, query
* Parameter: jql, optional, query
* Parameter: fieldKey, required, path
* Parameter: optionId, required, path
* Response: 303
*     application/json, #/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult
* Response: 400
* Response: 404
  METHODS replaceissuefieldoption
    IMPORTING
      replacewith TYPE i OPTIONAL
      jql TYPE string OPTIONAL
      fieldkey TYPE string
      optionid TYPE i
    RAISING cx_static_check.

* GET - "Get all field configurations"
* Operation id: getAllFieldConfigurations
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Parameter: isDefault, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFieldConfiguration
* Response: 401
* Response: 403
  METHODS getallfieldconfigurations
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      id TYPE string OPTIONAL
      isdefault TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfieldconfiguration
    RAISING cx_static_check.

* GET - "Get field configuration items"
* Operation id: getFieldConfigurationItems
* Parameter: id, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFieldConfigurationItem
* Response: 401
* Response: 403
* Response: 404
  METHODS getfieldconfigurationitems
    IMPORTING
      id TYPE i
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfieldconfigurationitem
    RAISING cx_static_check.

* GET - "Get all field configuration schemes"
* Operation id: getAllFieldConfigurationSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFieldConfigurationScheme
* Response: 400
* Response: 401
* Response: 403
  METHODS getallfieldconfigurationscheme
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      id TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfieldconfigurationsche
    RAISING cx_static_check.

* GET - "Get field configuration issue type items"
* Operation id: getFieldConfigurationSchemeMappings
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: fieldConfigurationSchemeId, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFieldConfigurationIssueTypeItem
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getfieldconfigurationschememap
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      fieldconfigurationschemeid TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfieldconfigurationissu
    RAISING cx_static_check.

* GET - "Get field configuration schemes for projects"
* Operation id: getFieldConfigurationSchemeProjectMapping
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: projectId, required, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFieldConfigurationSchemeProjects
* Response: 400
* Response: 401
* Response: 403
  METHODS getfieldconfigurationschemepro
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      projectid TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanfieldconfigurationsc01
    RAISING cx_static_check.

* PUT - "Assign field configuration scheme to project"
* Operation id: assignFieldConfigurationSchemeToProject
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/FieldConfigurationSchemeProjectAssociation
  METHODS assignfieldconfigurationscheme
    RAISING cx_static_check.

* GET - "Get filters"
* Operation id: getFilters
* Parameter: expand, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS getfilters
    IMPORTING
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* POST - "Create filter"
* Operation id: createFilter
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Filter
* Response: 400
* Response: 401
* Body ref: #/components/schemas/Filter
  METHODS createfilter
    IMPORTING
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE filter
    RAISING cx_static_check.

* GET - "Get default share scope"
* Operation id: getDefaultShareScope
* Response: 200
*     application/json, #/components/schemas/DefaultShareScope
* Response: 401
  METHODS getdefaultsharescope
    RETURNING VALUE(return_data) TYPE defaultsharescope
    RAISING cx_static_check.

* PUT - "Set default share scope"
* Operation id: setDefaultShareScope
* Response: 200
*     application/json, #/components/schemas/DefaultShareScope
* Response: 400
* Response: 401
* Body ref: #/components/schemas/DefaultShareScope
  METHODS setdefaultsharescope
    RETURNING VALUE(return_data) TYPE defaultsharescope
    RAISING cx_static_check.

* GET - "Get favorite filters"
* Operation id: getFavouriteFilters
* Parameter: expand, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS getfavouritefilters
    IMPORTING
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get my filters"
* Operation id: getMyFilters
* Parameter: expand, optional, query
* Parameter: includeFavourites, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS getmyfilters
    IMPORTING
      expand TYPE string OPTIONAL
      includefavourites TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* GET - "Search for filters"
* Operation id: getFiltersPaginated
* Parameter: filterName, optional, query
* Parameter: accountId, optional, query
* Parameter: owner, optional, query
* Parameter: groupname, optional, query
* Parameter: projectId, optional, query
* Parameter: id, optional, query
* Parameter: orderBy, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanFilterDetails
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
  METHODS getfilterspaginated
    IMPORTING
      filtername TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      owner TYPE string OPTIONAL
      groupname TYPE string OPTIONAL
      projectid TYPE i OPTIONAL
      id TYPE string OPTIONAL
      orderby TYPE string DEFAULT 'name' OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanfilterdetails
    RAISING cx_static_check.

* GET - "Get filter"
* Operation id: getFilter
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Filter
* Response: 400
* Response: 401
  METHODS getfilter
    IMPORTING
      id TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE filter
    RAISING cx_static_check.

* PUT - "Update filter"
* Operation id: updateFilter
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Filter
* Response: 400
* Response: 401
* Body ref: #/components/schemas/Filter
  METHODS updatefilter
    IMPORTING
      id TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE filter
    RAISING cx_static_check.

* DELETE - "Delete filter"
* Operation id: deleteFilter
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 401
  METHODS deletefilter
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* GET - "Get columns"
* Operation id: getColumns
* Parameter: id, required, path
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 404
  METHODS getcolumns
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* PUT - "Set columns"
* Operation id: setColumns
* Parameter: id, required, path
* Response: 200
*     application/json, 
* Response: 400
  METHODS setcolumns
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* DELETE - "Reset columns"
* Operation id: resetColumns
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 401
  METHODS resetcolumns
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* PUT - "Add filter as favorite"
* Operation id: setFavouriteForFilter
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Filter
* Response: 400
  METHODS setfavouriteforfilter
    IMPORTING
      id TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE filter
    RAISING cx_static_check.

* DELETE - "Remove filter as favorite"
* Operation id: deleteFavouriteForFilter
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Filter
* Response: 400
  METHODS deletefavouriteforfilter
    IMPORTING
      id TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE filter
    RAISING cx_static_check.

* GET - "Get share permissions"
* Operation id: getSharePermissions
* Parameter: id, required, path
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getsharepermissions
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* POST - "Add share permission"
* Operation id: addSharePermission
* Parameter: id, required, path
* Response: 201
*     application/json, array
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/SharePermissionInputBean
  METHODS addsharepermission
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* GET - "Get share permission"
* Operation id: getSharePermission
* Parameter: id, required, path
* Parameter: permissionId, required, path
* Response: 200
*     application/json, #/components/schemas/SharePermission
* Response: 401
* Response: 404
  METHODS getsharepermission
    IMPORTING
      id TYPE i
      permissionid TYPE i
    RETURNING VALUE(return_data) TYPE sharepermission
    RAISING cx_static_check.

* DELETE - "Delete share permission"
* Operation id: deleteSharePermission
* Parameter: id, required, path
* Parameter: permissionId, required, path
* Response: 204
* Response: 401
* Response: 404
  METHODS deletesharepermission
    IMPORTING
      id TYPE i
      permissionid TYPE i
    RAISING cx_static_check.

* GET - "Get group"
* Operation id: getGroup
* Parameter: groupname, required, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Group
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getgroup
    IMPORTING
      groupname TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE group
    RAISING cx_static_check.

* POST - "Create group"
* Operation id: createGroup
* Response: 201
*     application/json, #/components/schemas/Group
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/AddGroupBean
  METHODS creategroup
    RAISING cx_static_check.

* DELETE - "Remove group"
* Operation id: removeGroup
* Parameter: groupname, required, query
* Parameter: swapGroup, optional, query
* Response: 200
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS removegroup
    IMPORTING
      groupname TYPE string
      swapgroup TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Bulk get groups"
* Operation id: bulkGetGroups
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: groupId, optional, query
* Parameter: groupName, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanGroupDetails
* Response: 400
* Response: 401
* Response: 403
*     application/json, 
  METHODS bulkgetgroups
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      groupid TYPE string OPTIONAL
      groupname TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeangroupdetails
    RAISING cx_static_check.

* GET - "Get users from group"
* Operation id: getUsersFromGroup
* Parameter: groupname, required, query
* Parameter: includeInactiveUsers, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanUserDetails
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getusersfromgroup
    IMPORTING
      groupname TYPE string
      includeinactiveusers TYPE abap_bool DEFAULT 'false' OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanuserdetails
    RAISING cx_static_check.

* POST - "Add user to group"
* Operation id: addUserToGroup
* Parameter: groupname, required, query
* Response: 201
*     application/json, #/components/schemas/Group
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/UpdateUserToGroupBean
  METHODS addusertogroup
    IMPORTING
      groupname TYPE string
    RAISING cx_static_check.

* DELETE - "Remove user from group"
* Operation id: removeUserFromGroup
* Parameter: groupname, required, query
* Parameter: username, optional, query
* Parameter: accountId, required, query
* Response: 200
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS removeuserfromgroup
    IMPORTING
      groupname TYPE string
      username TYPE string OPTIONAL
      accountid TYPE string
    RAISING cx_static_check.

* GET - "Find groups"
* Operation id: findGroups
* Parameter: accountId, optional, query
* Parameter: query, optional, query
* Parameter: exclude, optional, query
* Parameter: maxResults, optional, query
* Parameter: userName, optional, query
* Response: 200
*     application/json, #/components/schemas/FoundGroups
  METHODS findgroups
    IMPORTING
      accountid TYPE string OPTIONAL
      query TYPE string OPTIONAL
      exclude TYPE string OPTIONAL
      maxresults TYPE i OPTIONAL
      username TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE foundgroups
    RAISING cx_static_check.

* GET - "Find users and groups"
* Operation id: findUsersAndGroups
* Parameter: query, required, query
* Parameter: maxResults, optional, query
* Parameter: showAvatar, optional, query
* Parameter: fieldId, optional, query
* Parameter: projectId, optional, query
* Parameter: issueTypeId, optional, query
* Parameter: avatarSize, optional, query
* Parameter: caseInsensitive, optional, query
* Parameter: excludeConnectAddons, optional, query
* Response: 200
*     application/json, #/components/schemas/FoundUsersAndGroups
* Response: 400
* Response: 401
* Response: 403
  METHODS findusersandgroups
    IMPORTING
      query TYPE string
      maxresults TYPE i DEFAULT 50 OPTIONAL
      showavatar TYPE abap_bool DEFAULT 'false' OPTIONAL
      fieldid TYPE string OPTIONAL
      projectid TYPE string OPTIONAL
      issuetypeid TYPE string OPTIONAL
      avatarsize TYPE string DEFAULT 'xsmall' OPTIONAL
      caseinsensitive TYPE abap_bool DEFAULT 'false' OPTIONAL
      excludeconnectaddons TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE foundusersandgroups
    RAISING cx_static_check.

* POST - "Create issue"
* Operation id: createIssue
* Parameter: updateHistory, optional, query
* Response: 201
*     application/json, #/components/schemas/CreatedIssue
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/IssueUpdateDetails
  METHODS createissue
    IMPORTING
      updatehistory TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* POST - "Bulk create issue"
* Operation id: createIssues
* Response: 201
*     application/json, #/components/schemas/CreatedIssues
* Response: 400
*     application/json, #/components/schemas/CreatedIssues
* Response: 401
* Body ref: #/components/schemas/IssuesUpdateBean
  METHODS createissues
    RAISING cx_static_check.

* GET - "Get create issue metadata"
* Operation id: getCreateIssueMeta
* Parameter: projectIds, optional, query
* Parameter: projectKeys, optional, query
* Parameter: issuetypeIds, optional, query
* Parameter: issuetypeNames, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueCreateMetadata
* Response: 401
  METHODS getcreateissuemeta
    IMPORTING
      projectids TYPE string OPTIONAL
      projectkeys TYPE string OPTIONAL
      issuetypeids TYPE string OPTIONAL
      issuetypenames TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE issuecreatemetadata
    RAISING cx_static_check.

* GET - "Get issue picker suggestions"
* Operation id: getIssuePickerResource
* Parameter: query, optional, query
* Parameter: currentJQL, optional, query
* Parameter: currentIssueKey, optional, query
* Parameter: currentProjectId, optional, query
* Parameter: showSubTasks, optional, query
* Parameter: showSubTaskParent, optional, query
* Response: 200
*     application/json, #/components/schemas/IssuePickerSuggestions
* Response: 401
  METHODS getissuepickerresource
    IMPORTING
      query TYPE string OPTIONAL
      currentjql TYPE string OPTIONAL
      currentissuekey TYPE string OPTIONAL
      currentprojectid TYPE string OPTIONAL
      showsubtasks TYPE abap_bool OPTIONAL
      showsubtaskparent TYPE abap_bool OPTIONAL
    RETURNING VALUE(return_data) TYPE issuepickersuggestions
    RAISING cx_static_check.

* POST - "Bulk set issues properties"
* Operation id: bulkSetIssuesProperties
* Response: 303
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/IssueEntityProperties
  METHODS bulksetissuesproperties
    RAISING cx_static_check.

* PUT - "Bulk set issue property"
* Operation id: bulkSetIssueProperty
* Parameter: propertyKey, required, path
* Response: 303
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/BulkIssuePropertyUpdateRequest
  METHODS bulksetissueproperty
    IMPORTING
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Bulk delete issue property"
* Operation id: bulkDeleteIssueProperty
* Parameter: propertyKey, required, path
* Response: 303
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/IssueFilterForBulkPropertyDelete
  METHODS bulkdeleteissueproperty
    IMPORTING
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Get issue"
* Operation id: getIssue
* Parameter: issueIdOrKey, required, path
* Parameter: fields, optional, query
* Parameter: fieldsByKeys, optional, query
* Parameter: expand, optional, query
* Parameter: properties, optional, query
* Parameter: updateHistory, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueBean
* Response: 401
* Response: 404
  METHODS getissue
    IMPORTING
      issueidorkey TYPE string
      fields TYPE string OPTIONAL
      fieldsbykeys TYPE abap_bool DEFAULT 'false' OPTIONAL
      expand TYPE string OPTIONAL
      properties TYPE string OPTIONAL
      updatehistory TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE issuebean
    RAISING cx_static_check.

* PUT - "Edit issue"
* Operation id: editIssue
* Parameter: issueIdOrKey, required, path
* Parameter: notifyUsers, optional, query
* Parameter: overrideScreenSecurity, optional, query
* Parameter: overrideEditableFlag, optional, query
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueUpdateDetails
  METHODS editissue
    IMPORTING
      issueidorkey TYPE string
      notifyusers TYPE abap_bool DEFAULT 'true' OPTIONAL
      overridescreensecurity TYPE abap_bool DEFAULT 'false' OPTIONAL
      overrideeditableflag TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* DELETE - "Delete issue"
* Operation id: deleteIssue
* Parameter: issueIdOrKey, required, path
* Parameter: deleteSubtasks, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteissue
    IMPORTING
      issueidorkey TYPE string
      deletesubtasks TYPE string DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* PUT - "Assign issue"
* Operation id: assignIssue
* Parameter: issueIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 403
* Response: 404
* Body ref: #/components/schemas/User
  METHODS assignissue
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* POST - "Add attachment"
* Operation id: addAttachment
* Parameter: issueIdOrKey, required, path
* Response: 200
*     application/json, array
* Response: 403
* Response: 404
* Response: 413
  METHODS addattachment
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get change logs"
* Operation id: getChangeLogs
* Parameter: issueIdOrKey, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanChangelog
* Response: 404
  METHODS getchangelogs
    IMPORTING
      issueidorkey TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanchangelog
    RAISING cx_static_check.

* GET - "Get comments"
* Operation id: getComments
* Parameter: issueIdOrKey, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: orderBy, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageOfComments
* Response: 400
* Response: 401
* Response: 404
  METHODS getcomments
    IMPORTING
      issueidorkey TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      orderby TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pageofcomments
    RAISING cx_static_check.

* POST - "Add comment"
* Operation id: addComment
* Parameter: issueIdOrKey, required, path
* Parameter: expand, optional, query
* Response: 201
*     application/json, #/components/schemas/Comment
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Comment
  METHODS addcomment
    IMPORTING
      issueidorkey TYPE string
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get comment"
* Operation id: getComment
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Comment
* Response: 401
* Response: 404
  METHODS getcomment
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE comment
    RAISING cx_static_check.

* PUT - "Update comment"
* Operation id: updateComment
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Comment
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Comment
  METHODS updatecomment
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE comment
    RAISING cx_static_check.

* DELETE - "Delete comment"
* Operation id: deleteComment
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 404
* Response: 405
  METHODS deletecomment
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
    RAISING cx_static_check.

* GET - "Get edit issue metadata"
* Operation id: getEditIssueMeta
* Parameter: issueIdOrKey, required, path
* Parameter: overrideScreenSecurity, optional, query
* Parameter: overrideEditableFlag, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueUpdateMetadata
* Response: 401
* Response: 403
* Response: 404
  METHODS geteditissuemeta
    IMPORTING
      issueidorkey TYPE string
      overridescreensecurity TYPE abap_bool DEFAULT 'false' OPTIONAL
      overrideeditableflag TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE issueupdatemetadata
    RAISING cx_static_check.

* POST - "Send notification for issue"
* Operation id: notify
* Parameter: issueIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 403
* Response: 404
* Body ref: #/components/schemas/Notification
  METHODS notify
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get issue property keys"
* Operation id: getIssuePropertyKeys
* Parameter: issueIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 404
  METHODS getissuepropertykeys
    IMPORTING
      issueidorkey TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get issue property"
* Operation id: getIssueProperty
* Parameter: issueIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 401
* Response: 404
  METHODS getissueproperty
    IMPORTING
      issueidorkey TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set issue property"
* Operation id: setIssueProperty
* Parameter: issueIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setissueproperty
    IMPORTING
      issueidorkey TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete issue property"
* Operation id: deleteIssueProperty
* Parameter: issueIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 401
* Response: 404
  METHODS deleteissueproperty
    IMPORTING
      issueidorkey TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Get remote issue links"
* Operation id: getRemoteIssueLinks
* Parameter: issueIdOrKey, required, path
* Parameter: globalId, optional, query
* Response: 200
*     application/json, #/components/schemas/RemoteIssueLink
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getremoteissuelinks
    IMPORTING
      issueidorkey TYPE string
      globalid TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE remoteissuelink
    RAISING cx_static_check.

* POST - "Create or update remote issue link"
* Operation id: createOrUpdateRemoteIssueLink
* Parameter: issueIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/RemoteIssueLinkIdentifies
* Response: 201
*     application/json, #/components/schemas/RemoteIssueLinkIdentifies
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/RemoteIssueLinkRequest
  METHODS createorupdateremoteissuelink
    IMPORTING
      issueidorkey TYPE string
    RETURNING VALUE(return_data) TYPE remoteissuelinkidentifies
    RAISING cx_static_check.

* DELETE - "Delete remote issue link by global ID"
* Operation id: deleteRemoteIssueLinkByGlobalId
* Parameter: issueIdOrKey, required, path
* Parameter: globalId, required, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteremoteissuelinkbyglobali
    IMPORTING
      issueidorkey TYPE string
      globalid TYPE string
    RAISING cx_static_check.

* GET - "Get remote issue link by ID"
* Operation id: getRemoteIssueLinkById
* Parameter: issueIdOrKey, required, path
* Parameter: linkId, required, path
* Response: 200
*     application/json, #/components/schemas/RemoteIssueLink
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getremoteissuelinkbyid
    IMPORTING
      issueidorkey TYPE string
      linkid TYPE string
    RETURNING VALUE(return_data) TYPE remoteissuelink
    RAISING cx_static_check.

* PUT - "Update remote issue link by ID"
* Operation id: updateRemoteIssueLink
* Parameter: issueIdOrKey, required, path
* Parameter: linkId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/RemoteIssueLinkRequest
  METHODS updateremoteissuelink
    IMPORTING
      issueidorkey TYPE string
      linkid TYPE string
    RAISING cx_static_check.

* DELETE - "Delete remote issue link by ID"
* Operation id: deleteRemoteIssueLinkById
* Parameter: issueIdOrKey, required, path
* Parameter: linkId, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteremoteissuelinkbyid
    IMPORTING
      issueidorkey TYPE string
      linkid TYPE string
    RAISING cx_static_check.

* GET - "Get transitions"
* Operation id: getTransitions
* Parameter: issueIdOrKey, required, path
* Parameter: expand, optional, query
* Parameter: transitionId, optional, query
* Parameter: skipRemoteOnlyCondition, optional, query
* Parameter: includeUnavailableTransitions, optional, query
* Parameter: sortByOpsBarAndStatus, optional, query
* Response: 200
*     application/json, #/components/schemas/Transitions
* Response: 401
* Response: 404
  METHODS gettransitions
    IMPORTING
      issueidorkey TYPE string
      expand TYPE string OPTIONAL
      transitionid TYPE string OPTIONAL
      skipremoteonlycondition TYPE abap_bool DEFAULT 'false' OPTIONAL
      includeunavailabletransitions TYPE abap_bool DEFAULT 'false' OPTIONAL
      sortbyopsbarandstatus TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE transitions
    RAISING cx_static_check.

* POST - "Transition issue"
* Operation id: doTransition
* Parameter: issueIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/IssueUpdateDetails
  METHODS dotransition
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get votes"
* Operation id: getVotes
* Parameter: issueIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/Votes
* Response: 401
* Response: 404
  METHODS getvotes
    IMPORTING
      issueidorkey TYPE string
    RETURNING VALUE(return_data) TYPE votes
    RAISING cx_static_check.

* POST - "Add vote"
* Operation id: addVote
* Parameter: issueIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 401
* Response: 404
  METHODS addvote
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete vote"
* Operation id: removeVote
* Parameter: issueIdOrKey, required, path
* Response: 204
* Response: 401
* Response: 404
  METHODS removevote
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get issue watchers"
* Operation id: getIssueWatchers
* Parameter: issueIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/Watchers
* Response: 401
* Response: 404
  METHODS getissuewatchers
    IMPORTING
      issueidorkey TYPE string
    RETURNING VALUE(return_data) TYPE watchers
    RAISING cx_static_check.

* POST - "Add watcher"
* Operation id: addWatcher
* Parameter: issueIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body schema: string
  METHODS addwatcher
    IMPORTING
      issueidorkey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete watcher"
* Operation id: removeWatcher
* Parameter: issueIdOrKey, required, path
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body schema: string
  METHODS removewatcher
    IMPORTING
      issueidorkey TYPE string
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get issue worklogs"
* Operation id: getIssueWorklog
* Parameter: issueIdOrKey, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: startedAfter, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageOfWorklogs
* Response: 401
* Response: 404
  METHODS getissueworklog
    IMPORTING
      issueidorkey TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 1048576 OPTIONAL
      startedafter TYPE i OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pageofworklogs
    RAISING cx_static_check.

* POST - "Add worklog"
* Operation id: addWorklog
* Parameter: issueIdOrKey, required, path
* Parameter: notifyUsers, optional, query
* Parameter: adjustEstimate, optional, query
* Parameter: newEstimate, optional, query
* Parameter: reduceBy, optional, query
* Parameter: expand, optional, query
* Parameter: overrideEditableFlag, optional, query
* Response: 201
*     application/json, #/components/schemas/Worklog
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Worklog
  METHODS addworklog
    IMPORTING
      issueidorkey TYPE string
      notifyusers TYPE abap_bool DEFAULT 'true' OPTIONAL
      adjustestimate TYPE string DEFAULT 'auto' OPTIONAL
      newestimate TYPE string OPTIONAL
      reduceby TYPE string OPTIONAL
      expand TYPE string OPTIONAL
      overrideeditableflag TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* GET - "Get worklog"
* Operation id: getWorklog
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Worklog
* Response: 401
* Response: 404
  METHODS getworklog
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE worklog
    RAISING cx_static_check.

* PUT - "Update worklog"
* Operation id: updateWorklog
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Parameter: notifyUsers, optional, query
* Parameter: adjustEstimate, optional, query
* Parameter: newEstimate, optional, query
* Parameter: expand, optional, query
* Parameter: overrideEditableFlag, optional, query
* Response: 200
*     application/json, #/components/schemas/Worklog
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Worklog
  METHODS updateworklog
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
      notifyusers TYPE abap_bool DEFAULT 'true' OPTIONAL
      adjustestimate TYPE string DEFAULT 'auto' OPTIONAL
      newestimate TYPE string OPTIONAL
      expand TYPE string OPTIONAL
      overrideeditableflag TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE worklog
    RAISING cx_static_check.

* DELETE - "Delete worklog"
* Operation id: deleteWorklog
* Parameter: issueIdOrKey, required, path
* Parameter: id, required, path
* Parameter: notifyUsers, optional, query
* Parameter: adjustEstimate, optional, query
* Parameter: newEstimate, optional, query
* Parameter: increaseBy, optional, query
* Parameter: overrideEditableFlag, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 404
  METHODS deleteworklog
    IMPORTING
      issueidorkey TYPE string
      id TYPE string
      notifyusers TYPE abap_bool DEFAULT 'true' OPTIONAL
      adjustestimate TYPE string DEFAULT 'auto' OPTIONAL
      newestimate TYPE string OPTIONAL
      increaseby TYPE string OPTIONAL
      overrideeditableflag TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* GET - "Get worklog property keys"
* Operation id: getWorklogPropertyKeys
* Parameter: issueIdOrKey, required, path
* Parameter: worklogId, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 400
* Response: 401
* Response: 404
  METHODS getworklogpropertykeys
    IMPORTING
      issueidorkey TYPE string
      worklogid TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get worklog property"
* Operation id: getWorklogProperty
* Parameter: issueIdOrKey, required, path
* Parameter: worklogId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
* Response: 401
* Response: 404
  METHODS getworklogproperty
    IMPORTING
      issueidorkey TYPE string
      worklogid TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set worklog property"
* Operation id: setWorklogProperty
* Parameter: issueIdOrKey, required, path
* Parameter: worklogId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setworklogproperty
    IMPORTING
      issueidorkey TYPE string
      worklogid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete worklog property"
* Operation id: deleteWorklogProperty
* Parameter: issueIdOrKey, required, path
* Parameter: worklogId, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworklogproperty
    IMPORTING
      issueidorkey TYPE string
      worklogid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* POST - "Create issue link"
* Operation id: linkIssues
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/LinkIssueRequestJsonBean
  METHODS linkissues
    RAISING cx_static_check.

* GET - "Get issue link"
* Operation id: getIssueLink
* Parameter: linkId, required, path
* Response: 200
*     application/json, #/components/schemas/IssueLink
* Response: 400
* Response: 401
* Response: 404
  METHODS getissuelink
    IMPORTING
      linkid TYPE string
    RETURNING VALUE(return_data) TYPE issuelink
    RAISING cx_static_check.

* DELETE - "Delete issue link"
* Operation id: deleteIssueLink
* Parameter: linkId, required, path
* Response: 200
* Response: 204
* Response: 400
* Response: 401
* Response: 404
  METHODS deleteissuelink
    IMPORTING
      linkid TYPE string
    RAISING cx_static_check.

* GET - "Get issue link types"
* Operation id: getIssueLinkTypes
* Response: 200
*     application/json, #/components/schemas/IssueLinkTypes
* Response: 401
* Response: 404
  METHODS getissuelinktypes
    RETURNING VALUE(return_data) TYPE issuelinktypes
    RAISING cx_static_check.

* POST - "Create issue link type"
* Operation id: createIssueLinkType
* Response: 201
*     application/json, #/components/schemas/IssueLinkType
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/IssueLinkType
  METHODS createissuelinktype
    RAISING cx_static_check.

* GET - "Get issue link type"
* Operation id: getIssueLinkType
* Parameter: issueLinkTypeId, required, path
* Response: 200
*     application/json, #/components/schemas/IssueLinkType
* Response: 400
* Response: 401
* Response: 404
  METHODS getissuelinktype
    IMPORTING
      issuelinktypeid TYPE string
    RETURNING VALUE(return_data) TYPE issuelinktype
    RAISING cx_static_check.

* PUT - "Update issue link type"
* Operation id: updateIssueLinkType
* Parameter: issueLinkTypeId, required, path
* Response: 200
*     application/json, #/components/schemas/IssueLinkType
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/IssueLinkType
  METHODS updateissuelinktype
    IMPORTING
      issuelinktypeid TYPE string
    RETURNING VALUE(return_data) TYPE issuelinktype
    RAISING cx_static_check.

* DELETE - "Delete issue link type"
* Operation id: deleteIssueLinkType
* Parameter: issueLinkTypeId, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 404
  METHODS deleteissuelinktype
    IMPORTING
      issuelinktypeid TYPE string
    RAISING cx_static_check.

* GET - "Get issue security schemes"
* Operation id: getIssueSecuritySchemes
* Response: 200
*     application/json, #/components/schemas/SecuritySchemes
* Response: 401
* Response: 403
  METHODS getissuesecurityschemes
    RETURNING VALUE(return_data) TYPE securityschemes
    RAISING cx_static_check.

* GET - "Get issue security scheme"
* Operation id: getIssueSecurityScheme
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/SecurityScheme
* Response: 401
* Response: 403
  METHODS getissuesecurityscheme
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE securityscheme
    RAISING cx_static_check.

* GET - "Get issue security level members"
* Operation id: getIssueSecurityLevelMembers
* Parameter: issueSecuritySchemeId, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: issueSecurityLevelId, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueSecurityLevelMember
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getissuesecuritylevelmembers
    IMPORTING
      issuesecurityschemeid TYPE i
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      issuesecuritylevelid TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuesecuritylevelmemb
    RAISING cx_static_check.

* GET - "Get all issue types for user"
* Operation id: getIssueAllTypes
* Response: 200
*     application/json, array
* Response: 401
  METHODS getissuealltypes
    RAISING cx_static_check.

* POST - "Create issue type"
* Operation id: createIssueType
* Response: 201
*     application/json, #/components/schemas/IssueTypeDetails
* Response: 400
* Response: 401
* Response: 403
* Response: 409
* Body ref: #/components/schemas/IssueTypeCreateBean
  METHODS createissuetype
    RAISING cx_static_check.

* GET - "Get issue type"
* Operation id: getIssueType
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/IssueTypeDetails
* Response: 400
* Response: 401
* Response: 404
  METHODS getissuetype
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE issuetypedetails
    RAISING cx_static_check.

* PUT - "Update issue type"
* Operation id: updateIssueType
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/IssueTypeDetails
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 409
* Body ref: #/components/schemas/IssueTypeUpdateBean
  METHODS updateissuetype
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE issuetypedetails
    RAISING cx_static_check.

* DELETE - "Delete issue type"
* Operation id: deleteIssueType
* Parameter: id, required, path
* Parameter: alternativeIssueTypeId, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 409
  METHODS deleteissuetype
    IMPORTING
      id TYPE string
      alternativeissuetypeid TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get alternative issue types"
* Operation id: getAlternativeIssueTypes
* Parameter: id, required, path
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getalternativeissuetypes
    IMPORTING
      id TYPE string
    RAISING cx_static_check.

* POST - "Load issue type avatar"
* Operation id: createIssueTypeAvatar
* Parameter: id, required, path
* Parameter: x, optional, query
* Parameter: y, optional, query
* Parameter: size, required, query
* Response: 201
*     application/json, #/components/schemas/Avatar
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS createissuetypeavatar
    IMPORTING
      id TYPE string
      x TYPE i DEFAULT 0 OPTIONAL
      y TYPE i DEFAULT 0 OPTIONAL
      size TYPE i
    RAISING cx_static_check.

* GET - "Get issue type property keys"
* Operation id: getIssueTypePropertyKeys
* Parameter: issueTypeId, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 400
* Response: 404
  METHODS getissuetypepropertykeys
    IMPORTING
      issuetypeid TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get issue type property"
* Operation id: getIssueTypeProperty
* Parameter: issueTypeId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
* Response: 401
* Response: 404
  METHODS getissuetypeproperty
    IMPORTING
      issuetypeid TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set issue type property"
* Operation id: setIssueTypeProperty
* Parameter: issueTypeId, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setissuetypeproperty
    IMPORTING
      issuetypeid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete issue type property"
* Operation id: deleteIssueTypeProperty
* Parameter: issueTypeId, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteissuetypeproperty
    IMPORTING
      issuetypeid TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Get all issue type schemes"
* Operation id: getAllIssueTypeSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeScheme
* Response: 400
* Response: 401
* Response: 403
  METHODS getallissuetypeschemes
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      id TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuetypescheme
    RAISING cx_static_check.

* POST - "Create issue type scheme"
* Operation id: createIssueTypeScheme
* Response: 201
*     application/json, #/components/schemas/IssueTypeSchemeID
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 409
*     application/json, 
* Body ref: #/components/schemas/IssueTypeSchemeDetails
  METHODS createissuetypescheme
    RAISING cx_static_check.

* GET - "Get issue type scheme items"
* Operation id: getIssueTypeSchemesMapping
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: issueTypeSchemeId, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeSchemeMapping
* Response: 400
* Response: 401
* Response: 403
  METHODS getissuetypeschemesmapping
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      issuetypeschemeid TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuetypeschememapping
    RAISING cx_static_check.

* GET - "Get issue type schemes for projects"
* Operation id: getIssueTypeSchemeForProjects
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: projectId, required, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeSchemeProjects
* Response: 400
* Response: 401
* Response: 403
  METHODS getissuetypeschemeforprojects
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      projectid TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanissuetypeschemeproject
    RAISING cx_static_check.

* PUT - "Assign issue type scheme to project"
* Operation id: assignIssueTypeSchemeToProject
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeSchemeProjectAssociation
  METHODS assignissuetypeschemetoproject
    RAISING cx_static_check.

* PUT - "Update issue type scheme"
* Operation id: updateIssueTypeScheme
* Parameter: issueTypeSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeSchemeUpdateDetails
  METHODS updateissuetypescheme
    IMPORTING
      issuetypeschemeid TYPE i
    RAISING cx_static_check.

* DELETE - "Delete issue type scheme"
* Operation id: deleteIssueTypeScheme
* Parameter: issueTypeSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS deleteissuetypescheme
    IMPORTING
      issuetypeschemeid TYPE i
    RAISING cx_static_check.

* PUT - "Add issue types to issue type scheme"
* Operation id: addIssueTypesToIssueTypeScheme
* Parameter: issueTypeSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeIDs
  METHODS addissuetypestoissuetypescheme
    IMPORTING
      issuetypeschemeid TYPE i
    RAISING cx_static_check.

* PUT - "Change order of issue types"
* Operation id: reorderIssueTypesInIssueTypeScheme
* Parameter: issueTypeSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/OrderOfIssueTypes
  METHODS reorderissuetypesinissuetypesc
    IMPORTING
      issuetypeschemeid TYPE i
    RAISING cx_static_check.

* DELETE - "Remove issue type from issue type scheme"
* Operation id: removeIssueTypeFromIssueTypeScheme
* Parameter: issueTypeSchemeId, required, path
* Parameter: issueTypeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS removeissuetypefromissuetypesc
    IMPORTING
      issuetypeschemeid TYPE i
      issuetypeid TYPE i
    RAISING cx_static_check.

* GET - "Get issue type screen schemes"
* Operation id: getIssueTypeScreenSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeScreenScheme
* Response: 400
* Response: 401
* Response: 403
  METHODS getissuetypescreenschemes
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      id TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuetypescreenscheme
    RAISING cx_static_check.

* POST - "Create issue type screen scheme"
* Operation id: createIssueTypeScreenScheme
* Response: 201
*     application/json, #/components/schemas/IssueTypeScreenSchemeId
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Response: 409
*     application/json, 
* Body ref: #/components/schemas/IssueTypeScreenSchemeDetails
  METHODS createissuetypescreenscheme
    RAISING cx_static_check.

* GET - "Get issue type screen scheme items"
* Operation id: getIssueTypeScreenSchemeMappings
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: issueTypeScreenSchemeId, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeScreenSchemeItem
* Response: 400
* Response: 401
* Response: 403
  METHODS getissuetypescreenschememappin
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      issuetypescreenschemeid TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanissuetypescreenschemei
    RAISING cx_static_check.

* GET - "Get issue type screen schemes for projects"
* Operation id: getIssueTypeScreenSchemeProjectAssociations
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: projectId, required, query
* Response: 200
*     application/json, #/components/schemas/PageBeanIssueTypeScreenSchemesProjects
* Response: 400
* Response: 401
* Response: 403
  METHODS getissuetypescreenschemeprojec
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      projectid TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanissuetypescreenschemes
    RAISING cx_static_check.

* PUT - "Assign issue type screen scheme to project"
* Operation id: assignIssueTypeScreenSchemeToProject
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeScreenSchemeProjectAssociation
  METHODS assignissuetypescreenschemetop
    RAISING cx_static_check.

* PUT - "Update issue type screen scheme"
* Operation id: updateIssueTypeScreenScheme
* Parameter: issueTypeScreenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeScreenSchemeUpdateDetails
  METHODS updateissuetypescreenscheme
    IMPORTING
      issuetypescreenschemeid TYPE string
    RAISING cx_static_check.

* DELETE - "Delete issue type screen scheme"
* Operation id: deleteIssueTypeScreenScheme
* Parameter: issueTypeScreenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
*     application/json, 
  METHODS deleteissuetypescreenscheme
    IMPORTING
      issuetypescreenschemeid TYPE string
    RAISING cx_static_check.

* PUT - "Append mappings to issue type screen scheme"
* Operation id: appendMappingsForIssueTypeScreenScheme
* Parameter: issueTypeScreenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
*     application/json, 
* Response: 409
*     application/json, 
* Body ref: #/components/schemas/IssueTypeScreenSchemeMappingDetails
  METHODS appendmappingsforissuetypescre
    IMPORTING
      issuetypescreenschemeid TYPE string
    RAISING cx_static_check.

* PUT - "Update issue type screen scheme default screen scheme"
* Operation id: updateDefaultScreenScheme
* Parameter: issueTypeScreenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/UpdateDefaultScreenScheme
  METHODS updatedefaultscreenscheme
    IMPORTING
      issuetypescreenschemeid TYPE string
    RAISING cx_static_check.

* POST - "Remove mappings from issue type screen scheme"
* Operation id: removeMappingsFromIssueTypeScreenScheme
* Parameter: issueTypeScreenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/IssueTypeIds
  METHODS removemappingsfromissuetypescr
    IMPORTING
      issuetypescreenschemeid TYPE string
    RAISING cx_static_check.

* GET - "Get field reference data"
* Operation id: getAutoComplete
* Response: 200
*     application/json, #/components/schemas/JQLReferenceData
* Response: 401
  METHODS getautocomplete
    RETURNING VALUE(return_data) TYPE jqlreferencedata
    RAISING cx_static_check.

* GET - "Get field auto complete suggestions"
* Operation id: getFieldAutoCompleteForQueryString
* Parameter: fieldName, optional, query
* Parameter: fieldValue, optional, query
* Parameter: predicateName, optional, query
* Parameter: predicateValue, optional, query
* Response: 200
*     application/json, #/components/schemas/AutoCompleteSuggestions
* Response: 400
* Response: 401
  METHODS getfieldautocompleteforqueryst
    IMPORTING
      fieldname TYPE string OPTIONAL
      fieldvalue TYPE string OPTIONAL
      predicatename TYPE string OPTIONAL
      predicatevalue TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE autocompletesuggestions
    RAISING cx_static_check.

* POST - "Check issues against JQL"
* Operation id: matchIssues
* Response: 200
*     application/json, #/components/schemas/IssueMatches
* Response: 400
* Body ref: #/components/schemas/IssuesAndJQLQueries
  METHODS matchissues
    RETURNING VALUE(return_data) TYPE issuematches
    RAISING cx_static_check.

* POST - "Parse JQL query"
* Operation id: parseJqlQueries
* Parameter: validation, optional, query
* Response: 200
*     application/json, #/components/schemas/ParsedJqlQueries
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
* Body ref: #/components/schemas/JqlQueriesToParse
  METHODS parsejqlqueries
    IMPORTING
      validation TYPE string DEFAULT 'strict' OPTIONAL
    RETURNING VALUE(return_data) TYPE parsedjqlqueries
    RAISING cx_static_check.

* POST - "Convert user identifiers to account IDs in JQL queries"
* Operation id: migrateQueries
* Response: 200
*     application/json, #/components/schemas/ConvertedJQLQueries
* Response: 400
* Response: 401
* Body ref: #/components/schemas/JQLPersonalDataMigrationRequest
  METHODS migratequeries
    RETURNING VALUE(return_data) TYPE convertedjqlqueries
    RAISING cx_static_check.

* GET - "Get all labels"
* Operation id: getAllLabels
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanString
  METHODS getalllabels
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 1000 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanstring
    RAISING cx_static_check.

* GET - "Get my permissions"
* Operation id: getMyPermissions
* Parameter: projectKey, optional, query
* Parameter: projectId, optional, query
* Parameter: issueKey, optional, query
* Parameter: issueId, optional, query
* Parameter: permissions, optional, query
* Parameter: projectUuid, optional, query
* Parameter: projectConfigurationUuid, optional, query
* Response: 200
*     application/json, #/components/schemas/Permissions
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
*     application/json, #/components/schemas/ErrorCollection
  METHODS getmypermissions
    IMPORTING
      projectkey TYPE string OPTIONAL
      projectid TYPE string OPTIONAL
      issuekey TYPE string OPTIONAL
      issueid TYPE string OPTIONAL
      permissions TYPE string OPTIONAL
      projectuuid TYPE string OPTIONAL
      projectconfigurationuuid TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissions
    RAISING cx_static_check.

* GET - "Get preference"
* Operation id: getPreference
* Parameter: key, required, query
* Response: 200
*     application/json, string
* Response: 401
* Response: 404
  METHODS getpreference
    IMPORTING
      key TYPE string
    RAISING cx_static_check.

* PUT - "Set preference"
* Operation id: setPreference
* Parameter: key, required, query
* Response: 204
*     application/json, 
* Response: 401
* Response: 404
* Body schema: string
  METHODS setpreference
    IMPORTING
      key TYPE string
    RAISING cx_static_check.

* DELETE - "Delete preference"
* Operation id: removePreference
* Parameter: key, required, query
* Response: 204
* Response: 401
* Response: 404
* Body schema: string
  METHODS removepreference
    IMPORTING
      key TYPE string
    RAISING cx_static_check.

* GET - "Get locale"
* Operation id: getLocale
* Response: 200
*     application/json, #/components/schemas/Locale
* Response: 401
  METHODS getlocale
    RETURNING VALUE(return_data) TYPE locale
    RAISING cx_static_check.

* PUT - "Set locale"
* Operation id: setLocale
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Body ref: #/components/schemas/Locale
  METHODS setlocale
    RAISING cx_static_check.

* DELETE - "Delete locale"
* Operation id: deleteLocale
* Response: 204
*     application/json, 
* Response: 401
  METHODS deletelocale
    RAISING cx_static_check.

* GET - "Get current user"
* Operation id: getCurrentUser
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/User
* Response: 401
  METHODS getcurrentuser
    IMPORTING
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE user
    RAISING cx_static_check.

* GET - "Get notification schemes paginated"
* Operation id: getNotificationSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanNotificationScheme
* Response: 401
  METHODS getnotificationschemes
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeannotificationscheme
    RAISING cx_static_check.

* GET - "Get notification scheme"
* Operation id: getNotificationScheme
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/NotificationScheme
* Response: 400
* Response: 401
* Response: 404
  METHODS getnotificationscheme
    IMPORTING
      id TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE notificationscheme
    RAISING cx_static_check.

* GET - "Get all permissions"
* Operation id: getAllPermissions
* Response: 200
*     application/json, #/components/schemas/Permissions
* Response: 401
* Response: 403
  METHODS getallpermissions
    RETURNING VALUE(return_data) TYPE permissions
    RAISING cx_static_check.

* POST - "Get bulk permissions"
* Operation id: getBulkPermissions
* Response: 200
*     application/json, #/components/schemas/BulkPermissionGrants
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/BulkPermissionsRequestBean
  METHODS getbulkpermissions
    RETURNING VALUE(return_data) TYPE bulkpermissiongrants
    RAISING cx_static_check.

* POST - "Get permitted projects"
* Operation id: getPermittedProjects
* Response: 200
*     application/json, #/components/schemas/PermittedProjects
* Response: 400
*     application/json, 
* Response: 401
* Body ref: #/components/schemas/PermissionsKeysBean
  METHODS getpermittedprojects
    RETURNING VALUE(return_data) TYPE permittedprojects
    RAISING cx_static_check.

* GET - "Get all permission schemes"
* Operation id: getAllPermissionSchemes
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionSchemes
* Response: 401
  METHODS getallpermissionschemes
    IMPORTING
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissionschemes
    RAISING cx_static_check.

* POST - "Create permission scheme"
* Operation id: createPermissionScheme
* Parameter: expand, optional, query
* Response: 201
*     application/json, #/components/schemas/PermissionScheme
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/PermissionScheme
  METHODS createpermissionscheme
    IMPORTING
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get permission scheme"
* Operation id: getPermissionScheme
* Parameter: schemeId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionScheme
* Response: 401
* Response: 404
  METHODS getpermissionscheme
    IMPORTING
      schemeid TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissionscheme
    RAISING cx_static_check.

* PUT - "Update permission scheme"
* Operation id: updatePermissionScheme
* Parameter: schemeId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionScheme
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/PermissionScheme
  METHODS updatepermissionscheme
    IMPORTING
      schemeid TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissionscheme
    RAISING cx_static_check.

* DELETE - "Delete permission scheme"
* Operation id: deletePermissionScheme
* Parameter: schemeId, required, path
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS deletepermissionscheme
    IMPORTING
      schemeid TYPE i
    RAISING cx_static_check.

* GET - "Get permission scheme grants"
* Operation id: getPermissionSchemeGrants
* Parameter: schemeId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionGrants
* Response: 401
* Response: 404
  METHODS getpermissionschemegrants
    IMPORTING
      schemeid TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissiongrants
    RAISING cx_static_check.

* POST - "Create permission grant"
* Operation id: createPermissionGrant
* Parameter: schemeId, required, path
* Parameter: expand, optional, query
* Response: 201
*     application/json, #/components/schemas/PermissionGrant
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/PermissionGrant
  METHODS createpermissiongrant
    IMPORTING
      schemeid TYPE i
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get permission scheme grant"
* Operation id: getPermissionSchemeGrant
* Parameter: schemeId, required, path
* Parameter: permissionId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionGrant
* Response: 401
* Response: 404
  METHODS getpermissionschemegrant
    IMPORTING
      schemeid TYPE i
      permissionid TYPE i
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissiongrant
    RAISING cx_static_check.

* DELETE - "Delete permission scheme grant"
* Operation id: deletePermissionSchemeEntity
* Parameter: schemeId, required, path
* Parameter: permissionId, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
  METHODS deletepermissionschemeentity
    IMPORTING
      schemeid TYPE i
      permissionid TYPE i
    RAISING cx_static_check.

* GET - "Get priorities"
* Operation id: getPriorities
* Response: 200
*     application/json, array
* Response: 401
  METHODS getpriorities
    RAISING cx_static_check.

* GET - "Get priority"
* Operation id: getPriority
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Priority
* Response: 401
* Response: 404
  METHODS getpriority
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE priority
    RAISING cx_static_check.

* GET - "Get all projects"
* Operation id: getAllProjects
* Parameter: expand, optional, query
* Parameter: recent, optional, query
* Parameter: properties, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS getallprojects
    IMPORTING
      expand TYPE string OPTIONAL
      recent TYPE i OPTIONAL
      properties TYPE string OPTIONAL
    RAISING cx_static_check.

* POST - "Create project"
* Operation id: createProject
* Response: 201
*     application/json, #/components/schemas/ProjectIdentifiers
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/ProjectInputBean
  METHODS createproject
    RAISING cx_static_check.

* GET - "Get projects paginated"
* Operation id: searchProjects
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: orderBy, optional, query
* Parameter: query, optional, query
* Parameter: typeKey, optional, query
* Parameter: categoryId, optional, query
* Parameter: action, optional, query
* Parameter: expand, optional, query
* Parameter: status, optional, query
* Parameter: properties, optional, query
* Parameter: property, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanProject
* Response: 400
* Response: 401
* Response: 404
  METHODS searchprojects
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      orderby TYPE string DEFAULT 'key' OPTIONAL
      query TYPE string OPTIONAL
      typekey TYPE string OPTIONAL
      categoryid TYPE i OPTIONAL
      action TYPE string DEFAULT 'view' OPTIONAL
      expand TYPE string OPTIONAL
      status TYPE string OPTIONAL
      properties TYPE string OPTIONAL
      property TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanproject
    RAISING cx_static_check.

* GET - "Get all project types"
* Operation id: getAllProjectTypes
* Response: 200
*     application/json, array
* Response: 401
  METHODS getallprojecttypes
    RAISING cx_static_check.

* GET - "Get licensed project types"
* Operation id: getAllAccessibleProjectTypes
* Response: 200
*     application/json, array
  METHODS getallaccessibleprojecttypes
    RAISING cx_static_check.

* GET - "Get project type by key"
* Operation id: getProjectTypeByKey
* Parameter: projectTypeKey, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectType
* Response: 401
* Response: 404
  METHODS getprojecttypebykey
    IMPORTING
      projecttypekey TYPE string
    RETURNING VALUE(return_data) TYPE projecttype
    RAISING cx_static_check.

* GET - "Get accessible project type by key"
* Operation id: getAccessibleProjectTypeByKey
* Parameter: projectTypeKey, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectType
* Response: 401
* Response: 404
  METHODS getaccessibleprojecttypebykey
    IMPORTING
      projecttypekey TYPE string
    RETURNING VALUE(return_data) TYPE projecttype
    RAISING cx_static_check.

* GET - "Get project"
* Operation id: getProject
* Parameter: projectIdOrKey, required, path
* Parameter: expand, optional, query
* Parameter: properties, optional, query
* Response: 200
*     application/json, #/components/schemas/Project
* Response: 401
* Response: 404
  METHODS getproject
    IMPORTING
      projectidorkey TYPE string
      expand TYPE string OPTIONAL
      properties TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* PUT - "Update project"
* Operation id: updateProject
* Parameter: projectIdOrKey, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Project
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ProjectInputBean
  METHODS updateproject
    IMPORTING
      projectidorkey TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* DELETE - "Delete project"
* Operation id: deleteProject
* Parameter: projectIdOrKey, required, path
* Parameter: enableUndo, optional, query
* Response: 204
* Response: 401
* Response: 404
  METHODS deleteproject
    IMPORTING
      projectidorkey TYPE string
      enableundo TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* POST - "Archive project"
* Operation id: archiveProject
* Parameter: projectIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS archiveproject
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* PUT - "Set project avatar"
* Operation id: updateProjectAvatar
* Parameter: projectIdOrKey, required, path
* Response: 204
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/Avatar
  METHODS updateprojectavatar
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete project avatar"
* Operation id: deleteProjectAvatar
* Parameter: projectIdOrKey, required, path
* Parameter: id, required, path
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteprojectavatar
    IMPORTING
      projectidorkey TYPE string
      id TYPE i
    RAISING cx_static_check.

* POST - "Load project avatar"
* Operation id: createProjectAvatar
* Parameter: projectIdOrKey, required, path
* Parameter: x, optional, query
* Parameter: y, optional, query
* Parameter: size, optional, query
* Response: 201
*     application/json, #/components/schemas/Avatar
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS createprojectavatar
    IMPORTING
      projectidorkey TYPE string
      x TYPE i DEFAULT 0 OPTIONAL
      y TYPE i DEFAULT 0 OPTIONAL
      size TYPE i OPTIONAL
    RAISING cx_static_check.

* GET - "Get all project avatars"
* Operation id: getAllProjectAvatars
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectAvatars
* Response: 401
* Response: 404
  METHODS getallprojectavatars
    IMPORTING
      projectidorkey TYPE string
    RETURNING VALUE(return_data) TYPE projectavatars
    RAISING cx_static_check.

* GET - "Get project components paginated"
* Operation id: getProjectComponentsPaginated
* Parameter: projectIdOrKey, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: orderBy, optional, query
* Parameter: query, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanComponentWithIssueCount
* Response: 401
* Response: 404
  METHODS getprojectcomponentspaginated
    IMPORTING
      projectidorkey TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      orderby TYPE string OPTIONAL
      query TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeancomponentwithissuecoun
    RAISING cx_static_check.

* GET - "Get project components"
* Operation id: getProjectComponents
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getprojectcomponents
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* POST - "Delete project asynchronously"
* Operation id: deleteProjectAsynchronously
* Parameter: projectIdOrKey, required, path
* Response: 303
*     application/json, #/components/schemas/TaskProgressBeanObject
* Response: 400
* Response: 401
* Response: 404
  METHODS deleteprojectasynchronously
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get project property keys"
* Operation id: getProjectPropertyKeys
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectpropertykeys
    IMPORTING
      projectidorkey TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get project property"
* Operation id: getProjectProperty
* Parameter: projectIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectproperty
    IMPORTING
      projectidorkey TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set project property"
* Operation id: setProjectProperty
* Parameter: projectIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setprojectproperty
    IMPORTING
      projectidorkey TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete project property"
* Operation id: deleteProjectProperty
* Parameter: projectIdOrKey, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteprojectproperty
    IMPORTING
      projectidorkey TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* POST - "Restore deleted project"
* Operation id: restore
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/Project
* Response: 400
* Response: 401
* Response: 404
  METHODS restore
    IMPORTING
      projectidorkey TYPE string
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* GET - "Get project roles for project"
* Operation id: getProjectRoles
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, object
* Response: 401
* Response: 404
  METHODS getprojectroles
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* GET - "Get project role for project"
* Operation id: getProjectRole
* Parameter: projectIdOrKey, required, path
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 404
  METHODS getprojectrole
    IMPORTING
      projectidorkey TYPE string
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* PUT - "Set actors for project role"
* Operation id: setActors
* Parameter: projectIdOrKey, required, path
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/ProjectRoleActorsUpdateBean
  METHODS setactors
    IMPORTING
      projectidorkey TYPE string
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* POST - "Add actors to project role"
* Operation id: addActorUsers
* Parameter: projectIdOrKey, required, path
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/ActorsMap
  METHODS addactorusers
    IMPORTING
      projectidorkey TYPE string
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* DELETE - "Delete actors from project role"
* Operation id: deleteActor
* Parameter: projectIdOrKey, required, path
* Parameter: id, required, path
* Parameter: user, optional, query
* Parameter: group, optional, query
* Response: 204
* Response: 400
* Response: 404
  METHODS deleteactor
    IMPORTING
      projectidorkey TYPE string
      id TYPE i
      user TYPE string OPTIONAL
      group TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get project role details"
* Operation id: getProjectRoleDetails
* Parameter: projectIdOrKey, required, path
* Parameter: currentMember, optional, query
* Parameter: excludeConnectAddons, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getprojectroledetails
    IMPORTING
      projectidorkey TYPE string
      currentmember TYPE abap_bool DEFAULT 'false' OPTIONAL
      excludeconnectaddons TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* GET - "Get all statuses for project"
* Operation id: getAllStatuses
* Parameter: projectIdOrKey, required, path
* Response: 200
*     application/json, array
* Response: 401
* Response: 404
  METHODS getallstatuses
    IMPORTING
      projectidorkey TYPE string
    RAISING cx_static_check.

* PUT - "Update project type"
* Operation id: updateProjectType
* Parameter: projectIdOrKey, required, path
* Parameter: newProjectTypeKey, required, path
* Response: 200
*     application/json, #/components/schemas/Project
* Response: 400
* Response: 401
* Response: 404
  METHODS updateprojecttype
    IMPORTING
      projectidorkey TYPE string
      newprojecttypekey TYPE string
    RETURNING VALUE(return_data) TYPE project
    RAISING cx_static_check.

* GET - "Get project versions paginated"
* Operation id: getProjectVersionsPaginated
* Parameter: projectIdOrKey, required, path
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: orderBy, optional, query
* Parameter: query, optional, query
* Parameter: status, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanVersion
* Response: 404
  METHODS getprojectversionspaginated
    IMPORTING
      projectidorkey TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      orderby TYPE string OPTIONAL
      query TYPE string OPTIONAL
      status TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanversion
    RAISING cx_static_check.

* GET - "Get project versions"
* Operation id: getProjectVersions
* Parameter: projectIdOrKey, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, array
* Response: 404
  METHODS getprojectversions
    IMPORTING
      projectidorkey TYPE string
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get project's sender email"
* Operation id: getProjectEmail
* Parameter: projectId, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectEmailAddress
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectemail
    IMPORTING
      projectid TYPE i
    RETURNING VALUE(return_data) TYPE projectemailaddress
    RAISING cx_static_check.

* PUT - "Set project's sender email"
* Operation id: updateProjectEmail
* Parameter: projectId, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ProjectEmailAddress
  METHODS updateprojectemail
    IMPORTING
      projectid TYPE i
    RAISING cx_static_check.

* GET - "Get project issue type hierarchy"
* Operation id: getHierarchy
* Parameter: projectId, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectIssueTypeHierarchy
* Response: 400
* Response: 401
* Response: 404
  METHODS gethierarchy
    IMPORTING
      projectid TYPE i
    RETURNING VALUE(return_data) TYPE projectissuetypehierarchy
    RAISING cx_static_check.

* GET - "Get project issue security scheme"
* Operation id: getProjectIssueSecurityScheme
* Parameter: projectKeyOrId, required, path
* Response: 200
*     application/json, #/components/schemas/SecurityScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectissuesecurityscheme
    IMPORTING
      projectkeyorid TYPE string
    RETURNING VALUE(return_data) TYPE securityscheme
    RAISING cx_static_check.

* GET - "Get project notification scheme"
* Operation id: getNotificationSchemeForProject
* Parameter: projectKeyOrId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/NotificationScheme
* Response: 400
* Response: 401
* Response: 404
  METHODS getnotificationschemeforprojec
    IMPORTING
      projectkeyorid TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE notificationscheme
    RAISING cx_static_check.

* GET - "Get assigned permission scheme"
* Operation id: getAssignedPermissionScheme
* Parameter: projectKeyOrId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionScheme
* Response: 401
* Response: 403
* Response: 404
  METHODS getassignedpermissionscheme
    IMPORTING
      projectkeyorid TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissionscheme
    RAISING cx_static_check.

* PUT - "Assign permission scheme"
* Operation id: assignPermissionScheme
* Parameter: projectKeyOrId, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PermissionScheme
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IdBean
  METHODS assignpermissionscheme
    IMPORTING
      projectkeyorid TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE permissionscheme
    RAISING cx_static_check.

* GET - "Get project issue security levels"
* Operation id: getSecurityLevelsForProject
* Parameter: projectKeyOrId, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectIssueSecurityLevels
* Response: 404
  METHODS getsecuritylevelsforproject
    IMPORTING
      projectkeyorid TYPE string
    RETURNING VALUE(return_data) TYPE projectissuesecuritylevels
    RAISING cx_static_check.

* GET - "Get all project categories"
* Operation id: getAllProjectCategories
* Response: 200
*     application/json, array
* Response: 401
  METHODS getallprojectcategories
    RAISING cx_static_check.

* POST - "Create project category"
* Operation id: createProjectCategory
* Response: 201
*     application/json, #/components/schemas/ProjectCategory
* Response: 400
* Response: 401
* Response: 403
* Response: 409
* Body ref: #/components/schemas/ProjectCategory
  METHODS createprojectcategory
    RAISING cx_static_check.

* GET - "Get project category by ID"
* Operation id: getProjectCategoryById
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectCategory
* Response: 401
* Response: 404
  METHODS getprojectcategorybyid
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectcategory
    RAISING cx_static_check.

* PUT - "Update project category"
* Operation id: updateProjectCategory
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/UpdatedProjectCategory
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ProjectCategory
  METHODS updateprojectcategory
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE updatedprojectcategory
    RAISING cx_static_check.

* DELETE - "Delete project category"
* Operation id: removeProjectCategory
* Parameter: id, required, path
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS removeprojectcategory
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* GET - "Validate project key"
* Operation id: validateProjectKey
* Parameter: key, optional, query
* Response: 200
*     application/json, #/components/schemas/ErrorCollection
* Response: 401
  METHODS validateprojectkey
    IMPORTING
      key TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE errorcollection
    RAISING cx_static_check.

* GET - "Get valid project key"
* Operation id: getValidProjectKey
* Parameter: key, optional, query
* Response: 200
*     application/json, string
* Response: 401
  METHODS getvalidprojectkey
    IMPORTING
      key TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get valid project name"
* Operation id: getValidProjectName
* Parameter: name, required, query
* Response: 200
*     application/json, string
* Response: 400
* Response: 401
* Response: 404
  METHODS getvalidprojectname
    IMPORTING
      name TYPE string
    RAISING cx_static_check.

* GET - "Get resolutions"
* Operation id: getResolutions
* Response: 200
*     application/json, array
* Response: 401
  METHODS getresolutions
    RAISING cx_static_check.

* GET - "Get resolution"
* Operation id: getResolution
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Resolution
* Response: 401
* Response: 404
  METHODS getresolution
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE resolution
    RAISING cx_static_check.

* GET - "Get all project roles"
* Operation id: getAllProjectRoles
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
  METHODS getallprojectroles
    RAISING cx_static_check.

* POST - "Create project role"
* Operation id: createProjectRole
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 409
* Body ref: #/components/schemas/CreateUpdateRoleRequestBean
  METHODS createprojectrole
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* GET - "Get project role by ID"
* Operation id: getProjectRoleById
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectrolebyid
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* PUT - "Fully update project role"
* Operation id: fullyUpdateProjectRole
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/CreateUpdateRoleRequestBean
  METHODS fullyupdateprojectrole
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* POST - "Partial update project role"
* Operation id: partialUpdateProjectRole
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/CreateUpdateRoleRequestBean
  METHODS partialupdateprojectrole
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* DELETE - "Delete project role"
* Operation id: deleteProjectRole
* Parameter: id, required, path
* Parameter: swap, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 409
  METHODS deleteprojectrole
    IMPORTING
      id TYPE i
      swap TYPE i OPTIONAL
    RAISING cx_static_check.

* GET - "Get default actors for project role"
* Operation id: getProjectRoleActorsForRole
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getprojectroleactorsforrole
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* POST - "Add default actors to project role"
* Operation id: addProjectRoleActorsToRole
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ActorInputBean
  METHODS addprojectroleactorstorole
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* DELETE - "Delete default actors from project role"
* Operation id: deleteProjectRoleActorsFromRole
* Parameter: id, required, path
* Parameter: user, optional, query
* Parameter: group, optional, query
* Response: 200
*     application/json, #/components/schemas/ProjectRole
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteprojectroleactorsfromrol
    IMPORTING
      id TYPE i
      user TYPE string OPTIONAL
      group TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE projectrole
    RAISING cx_static_check.

* GET - "Get screens"
* Operation id: getScreens
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanScreen
* Response: 401
* Response: 403
  METHODS getscreens
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
      id TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanscreen
    RAISING cx_static_check.

* POST - "Create screen"
* Operation id: createScreen
* Response: 201
*     application/json, #/components/schemas/Screen
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Body ref: #/components/schemas/ScreenDetails
  METHODS createscreen
    RAISING cx_static_check.

* POST - "Add field to default screen"
* Operation id: addFieldToDefaultScreen
* Parameter: fieldId, required, path
* Response: 200
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
  METHODS addfieldtodefaultscreen
    IMPORTING
      fieldid TYPE string
    RAISING cx_static_check.

* PUT - "Update screen"
* Operation id: updateScreen
* Parameter: screenId, required, path
* Response: 200
*     application/json, #/components/schemas/Screen
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/UpdateScreenDetails
  METHODS updatescreen
    IMPORTING
      screenid TYPE i
    RETURNING VALUE(return_data) TYPE screen
    RAISING cx_static_check.

* DELETE - "Delete screen"
* Operation id: deleteScreen
* Parameter: screenId, required, path
* Response: 204
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS deletescreen
    IMPORTING
      screenid TYPE i
    RAISING cx_static_check.

* GET - "Get available screen fields"
* Operation id: getAvailableScreenFields
* Parameter: screenId, required, path
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
* Response: 404
  METHODS getavailablescreenfields
    IMPORTING
      screenid TYPE i
    RAISING cx_static_check.

* GET - "Get all screen tabs"
* Operation id: getAllScreenTabs
* Parameter: screenId, required, path
* Parameter: projectKey, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getallscreentabs
    IMPORTING
      screenid TYPE i
      projectkey TYPE string OPTIONAL
    RAISING cx_static_check.

* POST - "Create screen tab"
* Operation id: addScreenTab
* Parameter: screenId, required, path
* Response: 200
*     application/json, #/components/schemas/ScreenableTab
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ScreenableTab
  METHODS addscreentab
    IMPORTING
      screenid TYPE i
    RETURNING VALUE(return_data) TYPE screenabletab
    RAISING cx_static_check.

* PUT - "Update screen tab"
* Operation id: renameScreenTab
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Response: 200
*     application/json, #/components/schemas/ScreenableTab
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/ScreenableTab
  METHODS renamescreentab
    IMPORTING
      screenid TYPE i
      tabid TYPE i
    RETURNING VALUE(return_data) TYPE screenabletab
    RAISING cx_static_check.

* DELETE - "Delete screen tab"
* Operation id: deleteScreenTab
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS deletescreentab
    IMPORTING
      screenid TYPE i
      tabid TYPE i
    RAISING cx_static_check.

* GET - "Get all screen tab fields"
* Operation id: getAllScreenTabFields
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Parameter: projectKey, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
* Response: 404
  METHODS getallscreentabfields
    IMPORTING
      screenid TYPE i
      tabid TYPE i
      projectkey TYPE string OPTIONAL
    RAISING cx_static_check.

* POST - "Add screen tab field"
* Operation id: addScreenTabField
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Response: 200
*     application/json, #/components/schemas/ScreenableField
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/AddFieldBean
  METHODS addscreentabfield
    IMPORTING
      screenid TYPE i
      tabid TYPE i
    RETURNING VALUE(return_data) TYPE screenablefield
    RAISING cx_static_check.

* DELETE - "Remove screen tab field"
* Operation id: removeScreenTabField
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS removescreentabfield
    IMPORTING
      screenid TYPE i
      tabid TYPE i
      id TYPE string
    RAISING cx_static_check.

* POST - "Move screen tab field"
* Operation id: moveScreenTabField
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Parameter: id, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/MoveFieldBean
  METHODS movescreentabfield
    IMPORTING
      screenid TYPE i
      tabid TYPE i
      id TYPE string
    RAISING cx_static_check.

* POST - "Move screen tab"
* Operation id: moveScreenTab
* Parameter: screenId, required, path
* Parameter: tabId, required, path
* Parameter: pos, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS movescreentab
    IMPORTING
      screenid TYPE i
      tabid TYPE i
      pos TYPE i
    RAISING cx_static_check.

* GET - "Get screen schemes"
* Operation id: getScreenSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: id, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanScreenScheme
* Response: 401
* Response: 403
  METHODS getscreenschemes
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 25 OPTIONAL
      id TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanscreenscheme
    RAISING cx_static_check.

* POST - "Create screen scheme"
* Operation id: createScreenScheme
* Response: 201
*     application/json, #/components/schemas/ScreenSchemeId
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/ScreenSchemeDetails
  METHODS createscreenscheme
    RAISING cx_static_check.

* PUT - "Update screen scheme"
* Operation id: updateScreenScheme
* Parameter: screenSchemeId, required, path
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/UpdateScreenSchemeDetails
  METHODS updatescreenscheme
    IMPORTING
      screenschemeid TYPE string
    RAISING cx_static_check.

* DELETE - "Delete screen scheme"
* Operation id: deleteScreenScheme
* Parameter: screenSchemeId, required, path
* Response: 204
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
  METHODS deletescreenscheme
    IMPORTING
      screenschemeid TYPE string
    RAISING cx_static_check.

* GET - "Search for issues using JQL (GET)"
* Operation id: searchForIssuesUsingJql
* Parameter: jql, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: validateQuery, optional, query
* Parameter: fields, optional, query
* Parameter: expand, optional, query
* Parameter: properties, optional, query
* Parameter: fieldsByKeys, optional, query
* Response: 200
*     application/json, #/components/schemas/SearchResults
* Response: 400
* Response: 401
  METHODS searchforissuesusingjql
    IMPORTING
      jql TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      validatequery TYPE string DEFAULT 'strict' OPTIONAL
      fields TYPE string OPTIONAL
      expand TYPE string OPTIONAL
      properties TYPE string OPTIONAL
      fieldsbykeys TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE searchresults
    RAISING cx_static_check.

* POST - "Search for issues using JQL (POST)"
* Operation id: searchForIssuesUsingJqlPost
* Response: 200
*     application/json, #/components/schemas/SearchResults
* Response: 400
* Response: 401
* Body ref: #/components/schemas/SearchRequestBean
  METHODS searchforissuesusingjqlpost
    RETURNING VALUE(return_data) TYPE searchresults
    RAISING cx_static_check.

* GET - "Get issue security level"
* Operation id: getIssueSecurityLevel
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/SecurityLevel
* Response: 401
* Response: 404
  METHODS getissuesecuritylevel
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE securitylevel
    RAISING cx_static_check.

* GET - "Get Jira instance info"
* Operation id: getServerInfo
* Response: 200
*     application/json, #/components/schemas/ServerInformation
* Response: 401
  METHODS getserverinfo
    RETURNING VALUE(return_data) TYPE serverinformation
    RAISING cx_static_check.

* GET - "Get issue navigator default columns"
* Operation id: getIssueNavigatorDefaultColumns
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
  METHODS getissuenavigatordefaultcolumn
    RAISING cx_static_check.

* PUT - "Set issue navigator default columns"
* Operation id: setIssueNavigatorDefaultColumns
* Response: 200
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS setissuenavigatordefaultcolumn
    RAISING cx_static_check.

* GET - "Get all statuses"
* Operation id: getStatuses
* Response: 200
*     application/json, array
* Response: 401
  METHODS getstatuses
    RAISING cx_static_check.

* GET - "Get status"
* Operation id: getStatus
* Parameter: idOrName, required, path
* Response: 200
*     application/json, #/components/schemas/StatusDetails
* Response: 401
* Response: 404
  METHODS getstatus
    IMPORTING
      idorname TYPE string
    RETURNING VALUE(return_data) TYPE statusdetails
    RAISING cx_static_check.

* GET - "Get all status categories"
* Operation id: getStatusCategories
* Response: 200
*     application/json, array
* Response: 401
  METHODS getstatuscategories
    RAISING cx_static_check.

* GET - "Get status category"
* Operation id: getStatusCategory
* Parameter: idOrKey, required, path
* Response: 200
*     application/json, #/components/schemas/StatusCategory
* Response: 401
* Response: 404
  METHODS getstatuscategory
    IMPORTING
      idorkey TYPE string
    RETURNING VALUE(return_data) TYPE statuscategory
    RAISING cx_static_check.

* GET - "Get task"
* Operation id: getTask
* Parameter: taskId, required, path
* Response: 200
*     application/json, #/components/schemas/TaskProgressBeanObject
* Response: 401
* Response: 403
* Response: 404
  METHODS gettask
    IMPORTING
      taskid TYPE string
    RETURNING VALUE(return_data) TYPE taskprogressbeanobject
    RAISING cx_static_check.

* POST - "Cancel task"
* Operation id: cancelTask
* Parameter: taskId, required, path
* Response: 202
*     application/json, 
* Response: 400
*     application/json, array
* Response: 401
*     application/json, array
* Response: 403
*     application/json, array
* Response: 404
*     application/json, array
  METHODS canceltask
    IMPORTING
      taskid TYPE string
    RAISING cx_static_check.

* GET - "Get avatars"
* Operation id: getAvatars
* Parameter: type, required, path
* Parameter: entityId, required, path
* Response: 200
*     application/json, #/components/schemas/Avatars
* Response: 401
* Response: 404
  METHODS getavatars
    IMPORTING
      type TYPE string
      entityid TYPE string
    RETURNING VALUE(return_data) TYPE avatars
    RAISING cx_static_check.

* POST - "Load avatar"
* Operation id: storeAvatar
* Parameter: type, required, path
* Parameter: entityId, required, path
* Parameter: x, optional, query
* Parameter: y, optional, query
* Parameter: size, required, query
* Response: 201
*     application/json, #/components/schemas/Avatar
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS storeavatar
    IMPORTING
      type TYPE string
      entityid TYPE string
      x TYPE i DEFAULT 0 OPTIONAL
      y TYPE i DEFAULT 0 OPTIONAL
      size TYPE i
    RAISING cx_static_check.

* DELETE - "Delete avatar"
* Operation id: deleteAvatar
* Parameter: type, required, path
* Parameter: owningObjectId, required, path
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 403
* Response: 404
  METHODS deleteavatar
    IMPORTING
      type TYPE string
      owningobjectid TYPE string
      id TYPE i
    RAISING cx_static_check.

* GET - "Get user"
* Operation id: getUser
* Parameter: accountId, optional, query
* Parameter: username, optional, query
* Parameter: key, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/User
* Response: 401
* Response: 403
* Response: 404
  METHODS getuser
    IMPORTING
      accountid TYPE string OPTIONAL
      username TYPE string OPTIONAL
      key TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE user
    RAISING cx_static_check.

* POST - "Create user"
* Operation id: createUser
* Response: 201
*     application/json, #/components/schemas/User
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/UserWriteBean
  METHODS createuser
    RAISING cx_static_check.

* DELETE - "Delete user"
* Operation id: removeUser
* Parameter: accountId, required, query
* Parameter: username, optional, query
* Parameter: key, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS removeuser
    IMPORTING
      accountid TYPE string
      username TYPE string OPTIONAL
      key TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Find users assignable to projects"
* Operation id: findBulkAssignableUsers
* Parameter: query, optional, query
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Parameter: projectKeys, required, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 404
  METHODS findbulkassignableusers
    IMPORTING
      query TYPE string OPTIONAL
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      projectkeys TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RAISING cx_static_check.

* GET - "Find users assignable to issues"
* Operation id: findAssignableUsers
* Parameter: query, optional, query
* Parameter: sessionId, optional, query
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Parameter: project, optional, query
* Parameter: issueKey, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: actionDescriptorId, optional, query
* Parameter: recommend, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 404
  METHODS findassignableusers
    IMPORTING
      query TYPE string OPTIONAL
      sessionid TYPE string OPTIONAL
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      project TYPE string OPTIONAL
      issuekey TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      actiondescriptorid TYPE i OPTIONAL
      recommend TYPE abap_bool DEFAULT 'false' OPTIONAL
    RAISING cx_static_check.

* GET - "Bulk get users"
* Operation id: bulkGetUsers
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: username, optional, query
* Parameter: key, optional, query
* Parameter: accountId, required, query
* Response: 200
*     application/json, #/components/schemas/PageBeanUser
* Response: 400
* Response: 401
  METHODS bulkgetusers
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 10 OPTIONAL
      username TYPE string OPTIONAL
      key TYPE string OPTIONAL
      accountid TYPE string
    RETURNING VALUE(return_data) TYPE pagebeanuser
    RAISING cx_static_check.

* GET - "Get account IDs for users"
* Operation id: bulkGetUsersMigration
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: username, optional, query
* Parameter: key, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
  METHODS bulkgetusersmigration
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 10 OPTIONAL
      username TYPE string OPTIONAL
      key TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get user default columns"
* Operation id: getUserDefaultColumns
* Parameter: accountId, optional, query
* Parameter: username, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
* Response: 404
  METHODS getuserdefaultcolumns
    IMPORTING
      accountid TYPE string OPTIONAL
      username TYPE string OPTIONAL
    RAISING cx_static_check.

* PUT - "Set user default columns"
* Operation id: setUserColumns
* Parameter: accountId, optional, query
* Response: 200
*     application/json, 
* Response: 401
* Response: 403
* Response: 404
* Response: 500
  METHODS setusercolumns
    IMPORTING
      accountid TYPE string OPTIONAL
    RAISING cx_static_check.

* DELETE - "Reset user default columns"
* Operation id: resetUserColumns
* Parameter: accountId, optional, query
* Parameter: username, optional, query
* Response: 204
* Response: 401
* Response: 403
  METHODS resetusercolumns
    IMPORTING
      accountid TYPE string OPTIONAL
      username TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get user email"
* Operation id: getUserEmail
* Parameter: accountId, required, query
* Response: 200
*     application/json, #/components/schemas/UnrestrictedUserEmail
* Response: 400
* Response: 401
* Response: 404
* Response: 503
  METHODS getuseremail
    IMPORTING
      accountid TYPE string
    RETURNING VALUE(return_data) TYPE unrestricteduseremail
    RAISING cx_static_check.

* GET - "Get user email bulk"
* Operation id: getUserEmailBulk
* Parameter: accountId, required, query
* Response: 200
*     application/json, #/components/schemas/UnrestrictedUserEmail
* Response: 400
* Response: 401
* Response: 503
  METHODS getuseremailbulk
    IMPORTING
      accountid TYPE string
    RETURNING VALUE(return_data) TYPE unrestricteduseremail
    RAISING cx_static_check.

* GET - "Get user groups"
* Operation id: getUserGroups
* Parameter: accountId, required, query
* Parameter: username, optional, query
* Parameter: key, optional, query
* Response: 200
*     application/json, array
* Response: 401
* Response: 403
* Response: 404
  METHODS getusergroups
    IMPORTING
      accountid TYPE string
      username TYPE string OPTIONAL
      key TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Find users with permissions"
* Operation id: findUsersWithAllPermissions
* Parameter: query, optional, query
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Parameter: permissions, required, query
* Parameter: issueKey, optional, query
* Parameter: projectKey, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS finduserswithallpermissions
    IMPORTING
      query TYPE string OPTIONAL
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      permissions TYPE string
      issuekey TYPE string OPTIONAL
      projectkey TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RAISING cx_static_check.

* GET - "Find users for picker"
* Operation id: findUsersForPicker
* Parameter: query, required, query
* Parameter: maxResults, optional, query
* Parameter: showAvatar, optional, query
* Parameter: exclude, optional, query
* Parameter: excludeAccountIds, optional, query
* Parameter: avatarSize, optional, query
* Parameter: excludeConnectUsers, optional, query
* Response: 200
*     application/json, #/components/schemas/FoundUsers
* Response: 400
* Response: 401
  METHODS findusersforpicker
    IMPORTING
      query TYPE string
      maxresults TYPE i DEFAULT 50 OPTIONAL
      showavatar TYPE abap_bool DEFAULT 'false' OPTIONAL
      exclude TYPE string OPTIONAL
      excludeaccountids TYPE string OPTIONAL
      avatarsize TYPE string OPTIONAL
      excludeconnectusers TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE foundusers
    RAISING cx_static_check.

* GET - "Get user property keys"
* Operation id: getUserPropertyKeys
* Parameter: accountId, optional, query
* Parameter: userKey, optional, query
* Parameter: username, optional, query
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getuserpropertykeys
    IMPORTING
      accountid TYPE string OPTIONAL
      userkey TYPE string OPTIONAL
      username TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get user property"
* Operation id: getUserProperty
* Parameter: accountId, optional, query
* Parameter: userKey, optional, query
* Parameter: username, optional, query
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getuserproperty
    IMPORTING
      accountid TYPE string OPTIONAL
      userkey TYPE string OPTIONAL
      username TYPE string OPTIONAL
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set user property"
* Operation id: setUserProperty
* Parameter: accountId, optional, query
* Parameter: userKey, optional, query
* Parameter: username, optional, query
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, 
* Response: 201
*     application/json, 
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Response: 405
  METHODS setuserproperty
    IMPORTING
      accountid TYPE string OPTIONAL
      userkey TYPE string OPTIONAL
      username TYPE string OPTIONAL
      propertykey TYPE string
    RAISING cx_static_check.

* DELETE - "Delete user property"
* Operation id: deleteUserProperty
* Parameter: accountId, optional, query
* Parameter: userKey, optional, query
* Parameter: username, optional, query
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteuserproperty
    IMPORTING
      accountid TYPE string OPTIONAL
      userkey TYPE string OPTIONAL
      username TYPE string OPTIONAL
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Find users"
* Operation id: findUsers
* Parameter: query, optional, query
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: property, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
  METHODS findusers
    IMPORTING
      query TYPE string OPTIONAL
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      property TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Find users by query"
* Operation id: findUsersByQuery
* Parameter: query, required, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanUser
* Response: 400
* Response: 401
* Response: 403
* Response: 408
  METHODS findusersbyquery
    IMPORTING
      query TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanuser
    RAISING cx_static_check.

* GET - "Find user keys by query"
* Operation id: findUserKeysByQuery
* Parameter: query, required, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanUserKey
* Response: 400
* Response: 401
* Response: 403
* Response: 408
  METHODS finduserkeysbyquery
    IMPORTING
      query TYPE string
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanuserkey
    RAISING cx_static_check.

* GET - "Find users with browse permission"
* Operation id: findUsersWithBrowsePermission
* Parameter: query, optional, query
* Parameter: username, optional, query
* Parameter: accountId, optional, query
* Parameter: issueKey, optional, query
* Parameter: projectKey, optional, query
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Response: 404
  METHODS finduserswithbrowsepermission
    IMPORTING
      query TYPE string OPTIONAL
      username TYPE string OPTIONAL
      accountid TYPE string OPTIONAL
      issuekey TYPE string OPTIONAL
      projectkey TYPE string OPTIONAL
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RAISING cx_static_check.

* GET - "Get all users default"
* Operation id: getAllUsersDefault
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 403
* Response: 409
  METHODS getallusersdefault
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RAISING cx_static_check.

* GET - "Get all users"
* Operation id: getAllUsers
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 403
* Response: 409
  METHODS getallusers
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RAISING cx_static_check.

* POST - "Create version"
* Operation id: createVersion
* Response: 201
*     application/json, #/components/schemas/Version
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Version
  METHODS createversion
    RAISING cx_static_check.

* GET - "Get version"
* Operation id: getVersion
* Parameter: id, required, path
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/Version
* Response: 401
* Response: 404
  METHODS getversion
    IMPORTING
      id TYPE string
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE version
    RAISING cx_static_check.

* PUT - "Update version"
* Operation id: updateVersion
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Version
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/Version
  METHODS updateversion
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE version
    RAISING cx_static_check.

* DELETE - "Delete version"
* Operation id: deleteVersion
* Parameter: id, required, path
* Parameter: moveFixIssuesTo, optional, query
* Parameter: moveAffectedIssuesTo, optional, query
* Response: 204
* Response: 400
* Response: 401
* Response: 404
  METHODS deleteversion
    IMPORTING
      id TYPE string
      movefixissuesto TYPE string OPTIONAL
      moveaffectedissuesto TYPE string OPTIONAL
    RAISING cx_static_check.

* PUT - "Merge versions"
* Operation id: mergeVersions
* Parameter: id, required, path
* Parameter: moveIssuesTo, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 404
  METHODS mergeversions
    IMPORTING
      id TYPE string
      moveissuesto TYPE string
    RAISING cx_static_check.

* POST - "Move version"
* Operation id: moveVersion
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/Version
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/VersionMoveBean
  METHODS moveversion
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE version
    RAISING cx_static_check.

* GET - "Get version's related issues count"
* Operation id: getVersionRelatedIssues
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/VersionIssueCounts
* Response: 401
* Response: 404
  METHODS getversionrelatedissues
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE versionissuecounts
    RAISING cx_static_check.

* POST - "Delete and replace version"
* Operation id: deleteAndReplaceVersion
* Parameter: id, required, path
* Response: 204
*     application/json, 
* Response: 400
* Response: 401
* Response: 404
* Body ref: #/components/schemas/DeleteAndReplaceVersionBean
  METHODS deleteandreplaceversion
    IMPORTING
      id TYPE string
    RAISING cx_static_check.

* GET - "Get version's unresolved issues count"
* Operation id: getVersionUnresolvedIssues
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/VersionUnresolvedIssuesCount
* Response: 401
* Response: 404
  METHODS getversionunresolvedissues
    IMPORTING
      id TYPE string
    RETURNING VALUE(return_data) TYPE versionunresolvedissuescount
    RAISING cx_static_check.

* GET - "Get dynamic webhooks for app"
* Operation id: getDynamicWebhooksForApp
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanWebhook
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
  METHODS getdynamicwebhooksforapp
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 100 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanwebhook
    RAISING cx_static_check.

* POST - "Register dynamic webhooks"
* Operation id: registerDynamicWebhooks
* Response: 200
*     application/json, #/components/schemas/ContainerForRegisteredWebhooks
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/WebhookRegistrationDetails
  METHODS registerdynamicwebhooks
    RETURNING VALUE(return_data) TYPE containerforregisteredwebhooks
    RAISING cx_static_check.

* DELETE - "Delete webhooks by ID"
* Operation id: deleteWebhookById
* Response: 202
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/ContainerForWebhookIDs
  METHODS deletewebhookbyid
    RAISING cx_static_check.

* GET - "Get failed webhooks"
* Operation id: getFailedWebhooks
* Parameter: maxResults, optional, query
* Parameter: after, optional, query
* Response: 200
*     application/json, #/components/schemas/FailedWebhooks
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
  METHODS getfailedwebhooks
    IMPORTING
      maxresults TYPE i OPTIONAL
      after TYPE i OPTIONAL
    RETURNING VALUE(return_data) TYPE failedwebhooks
    RAISING cx_static_check.

* PUT - "Extend webhook life"
* Operation id: refreshWebhooks
* Response: 200
*     application/json, #/components/schemas/WebhooksExpirationDate
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/ContainerForWebhookIDs
  METHODS refreshwebhooks
    RETURNING VALUE(return_data) TYPE webhooksexpirationdate
    RAISING cx_static_check.

* GET - "Get all workflows"
* Operation id: getAllWorkflows
* Parameter: workflowName, optional, query
* Response: 200
*     application/json, array
* Response: 401
  METHODS getallworkflows
    IMPORTING
      workflowname TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get workflow transition rule configurations"
* Operation id: getWorkflowTransitionRuleConfigurations
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: types, required, query
* Parameter: keys, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanWorkflowTransitionRules
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Response: 404
  METHODS getworkflowtransitionruleconfi
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 10 OPTIONAL
      types TYPE string
      keys TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanworkflowtransitionrule
    RAISING cx_static_check.

* PUT - "Update workflow transition rule configurations"
* Operation id: updateWorkflowTransitionRuleConfigurations
* Response: 200
*     application/json, #/components/schemas/WorkflowTransitionRulesUpdateErrors
* Response: 400
*     application/json, #/components/schemas/ErrorCollection
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
* Body ref: #/components/schemas/WorkflowTransitionRulesUpdate
  METHODS updateworkflowtransitionruleco
    RETURNING VALUE(return_data) TYPE workflowtransitionrulesupdat01
    RAISING cx_static_check.

* GET - "Get workflows paginated"
* Operation id: getWorkflowsPaginated
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Parameter: workflowName, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanWorkflow
* Response: 401
* Response: 403
*     application/json, #/components/schemas/ErrorCollection
  METHODS getworkflowspaginated
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
      workflowname TYPE string OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanworkflow
    RAISING cx_static_check.

* GET - "Get workflow transition properties"
* Operation id: getWorkflowTransitionProperties
* Parameter: transitionId, required, path
* Parameter: includeReservedKeys, optional, query
* Parameter: key, optional, query
* Parameter: workflowName, required, query
* Parameter: workflowMode, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowTransitionProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflowtransitionpropertie
    IMPORTING
      transitionid TYPE i
      includereservedkeys TYPE abap_bool DEFAULT 'false' OPTIONAL
      key TYPE string OPTIONAL
      workflowname TYPE string
      workflowmode TYPE string DEFAULT 'live' OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowtransitionproperty
    RAISING cx_static_check.

* PUT - "Update workflow transition property"
* Operation id: updateWorkflowTransitionProperty
* Parameter: transitionId, required, path
* Parameter: key, required, query
* Parameter: workflowName, required, query
* Parameter: workflowMode, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowTransitionProperty
* Response: 304
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/WorkflowTransitionProperty
  METHODS updateworkflowtransitionproper
    IMPORTING
      transitionid TYPE i
      key TYPE string
      workflowname TYPE string
      workflowmode TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowtransitionproperty
    RAISING cx_static_check.

* POST - "Create workflow transition property"
* Operation id: createWorkflowTransitionProperty
* Parameter: transitionId, required, path
* Parameter: key, required, query
* Parameter: workflowName, required, query
* Parameter: workflowMode, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowTransitionProperty
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/WorkflowTransitionProperty
  METHODS createworkflowtransitionproper
    IMPORTING
      transitionid TYPE i
      key TYPE string
      workflowname TYPE string
      workflowmode TYPE string DEFAULT 'live' OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowtransitionproperty
    RAISING cx_static_check.

* DELETE - "Delete workflow transition property"
* Operation id: deleteWorkflowTransitionProperty
* Parameter: transitionId, required, path
* Parameter: key, required, query
* Parameter: workflowName, required, query
* Parameter: workflowMode, optional, query
* Response: 200
* Response: 304
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowtransitionproper
    IMPORTING
      transitionid TYPE i
      key TYPE string
      workflowname TYPE string
      workflowmode TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get all workflow schemes"
* Operation id: getAllWorkflowSchemes
* Parameter: startAt, optional, query
* Parameter: maxResults, optional, query
* Response: 200
*     application/json, #/components/schemas/PageBeanWorkflowScheme
* Response: 401
* Response: 403
  METHODS getallworkflowschemes
    IMPORTING
      startat TYPE i DEFAULT 0 OPTIONAL
      maxresults TYPE i DEFAULT 50 OPTIONAL
    RETURNING VALUE(return_data) TYPE pagebeanworkflowscheme
    RAISING cx_static_check.

* POST - "Create workflow scheme"
* Operation id: createWorkflowScheme
* Response: 201
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Body ref: #/components/schemas/WorkflowScheme
  METHODS createworkflowscheme
    RAISING cx_static_check.

* GET - "Get workflow scheme project associations"
* Operation id: getWorkflowSchemeProjectAssociations
* Parameter: projectId, required, query
* Response: 200
*     application/json, #/components/schemas/ContainerOfWorkflowSchemeAssociations
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
  METHODS getworkflowschemeprojectassoci
    IMPORTING
      projectid TYPE string
    RETURNING VALUE(return_data) TYPE containerofworkflowschemeassoc
    RAISING cx_static_check.

* PUT - "Assign workflow scheme to project"
* Operation id: associateSchemeWithProject
* Response: 204
*     application/json, 
* Response: 400
*     application/json, 
* Response: 401
* Response: 403
*     application/json, 
* Response: 404
*     application/json, 
* Body ref: #/components/schemas/WorkflowSchemeProjectAssociation
  METHODS associateschemewithproject
    RAISING cx_static_check.

* GET - "Get workflow scheme"
* Operation id: getWorkflowScheme
* Parameter: id, required, path
* Parameter: returnDraftIfExists, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflowscheme
    IMPORTING
      id TYPE i
      returndraftifexists TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* PUT - "Update workflow scheme"
* Operation id: updateWorkflowScheme
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/WorkflowScheme
  METHODS updateworkflowscheme
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete workflow scheme"
* Operation id: deleteWorkflowScheme
* Parameter: id, required, path
* Response: 204
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowscheme
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* POST - "Create draft workflow scheme"
* Operation id: createWorkflowSchemeDraftFromParent
* Parameter: id, required, path
* Response: 201
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
  METHODS createworkflowschemedraftfromp
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* GET - "Get default workflow"
* Operation id: getDefaultWorkflow
* Parameter: id, required, path
* Parameter: returnDraftIfExists, optional, query
* Response: 200
*     application/json, #/components/schemas/DefaultWorkflow
* Response: 401
* Response: 403
* Response: 404
  METHODS getdefaultworkflow
    IMPORTING
      id TYPE i
      returndraftifexists TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE defaultworkflow
    RAISING cx_static_check.

* PUT - "Update default workflow"
* Operation id: updateDefaultWorkflow
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/DefaultWorkflow
  METHODS updatedefaultworkflow
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete default workflow"
* Operation id: deleteDefaultWorkflow
* Parameter: id, required, path
* Parameter: updateDraftIfNeeded, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deletedefaultworkflow
    IMPORTING
      id TYPE i
      updatedraftifneeded TYPE abap_bool OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* GET - "Get draft workflow scheme"
* Operation id: getWorkflowSchemeDraft
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflowschemedraft
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* PUT - "Update draft workflow scheme"
* Operation id: updateWorkflowSchemeDraft
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/WorkflowScheme
  METHODS updateworkflowschemedraft
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete draft workflow scheme"
* Operation id: deleteWorkflowSchemeDraft
* Parameter: id, required, path
* Response: 204
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowschemedraft
    IMPORTING
      id TYPE i
    RAISING cx_static_check.

* GET - "Get draft default workflow"
* Operation id: getDraftDefaultWorkflow
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/DefaultWorkflow
* Response: 401
* Response: 403
* Response: 404
  METHODS getdraftdefaultworkflow
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE defaultworkflow
    RAISING cx_static_check.

* PUT - "Update draft default workflow"
* Operation id: updateDraftDefaultWorkflow
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/DefaultWorkflow
  METHODS updatedraftdefaultworkflow
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete draft default workflow"
* Operation id: deleteDraftDefaultWorkflow
* Parameter: id, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 401
* Response: 403
* Response: 404
  METHODS deletedraftdefaultworkflow
    IMPORTING
      id TYPE i
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* GET - "Get workflow for issue type in draft workflow scheme"
* Operation id: getWorkflowSchemeDraftIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Response: 200
*     application/json, #/components/schemas/IssueTypeWorkflowMapping
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflowschemedraftissuetyp
    IMPORTING
      id TYPE i
      issuetype TYPE string
    RETURNING VALUE(return_data) TYPE issuetypeworkflowmapping
    RAISING cx_static_check.

* PUT - "Set workflow for issue type in draft workflow scheme"
* Operation id: setWorkflowSchemeDraftIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueTypeWorkflowMapping
  METHODS setworkflowschemedraftissuetyp
    IMPORTING
      id TYPE i
      issuetype TYPE string
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete workflow for issue type in draft workflow scheme"
* Operation id: deleteWorkflowSchemeDraftIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowschemedraftissue
    IMPORTING
      id TYPE i
      issuetype TYPE string
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* GET - "Get issue types for workflows in draft workflow scheme"
* Operation id: getDraftWorkflow
* Parameter: id, required, path
* Parameter: workflowName, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueTypesWorkflowMapping
* Response: 401
* Response: 403
* Response: 404
  METHODS getdraftworkflow
    IMPORTING
      id TYPE i
      workflowname TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE issuetypesworkflowmapping
    RAISING cx_static_check.

* PUT - "Set issue types for workflow in workflow scheme"
* Operation id: updateDraftWorkflowMapping
* Parameter: id, required, path
* Parameter: workflowName, required, query
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueTypesWorkflowMapping
  METHODS updatedraftworkflowmapping
    IMPORTING
      id TYPE i
      workflowname TYPE string
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete issue types for workflow in draft workflow scheme"
* Operation id: deleteDraftWorkflowMapping
* Parameter: id, required, path
* Parameter: workflowName, required, query
* Response: 200
* Response: 401
* Response: 403
* Response: 404
  METHODS deletedraftworkflowmapping
    IMPORTING
      id TYPE i
      workflowname TYPE string
    RAISING cx_static_check.

* GET - "Get workflow for issue type in workflow scheme"
* Operation id: getWorkflowSchemeIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Parameter: returnDraftIfExists, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueTypeWorkflowMapping
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflowschemeissuetype
    IMPORTING
      id TYPE i
      issuetype TYPE string
      returndraftifexists TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE issuetypeworkflowmapping
    RAISING cx_static_check.

* PUT - "Set workflow for issue type in workflow scheme"
* Operation id: setWorkflowSchemeIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueTypeWorkflowMapping
  METHODS setworkflowschemeissuetype
    IMPORTING
      id TYPE i
      issuetype TYPE string
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete workflow for issue type in workflow scheme"
* Operation id: deleteWorkflowSchemeIssueType
* Parameter: id, required, path
* Parameter: issueType, required, path
* Parameter: updateDraftIfNeeded, optional, query
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowschemeissuetype
    IMPORTING
      id TYPE i
      issuetype TYPE string
      updatedraftifneeded TYPE abap_bool OPTIONAL
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* GET - "Get issue types for workflows in workflow scheme"
* Operation id: getWorkflow
* Parameter: id, required, path
* Parameter: workflowName, optional, query
* Parameter: returnDraftIfExists, optional, query
* Response: 200
*     application/json, #/components/schemas/IssueTypesWorkflowMapping
* Response: 401
* Response: 403
* Response: 404
  METHODS getworkflow
    IMPORTING
      id TYPE i
      workflowname TYPE string OPTIONAL
      returndraftifexists TYPE abap_bool DEFAULT 'false' OPTIONAL
    RETURNING VALUE(return_data) TYPE issuetypesworkflowmapping
    RAISING cx_static_check.

* PUT - "Set issue types for workflow in workflow scheme"
* Operation id: updateWorkflowMapping
* Parameter: id, required, path
* Parameter: workflowName, required, query
* Response: 200
*     application/json, #/components/schemas/WorkflowScheme
* Response: 400
* Response: 401
* Response: 403
* Response: 404
* Body ref: #/components/schemas/IssueTypesWorkflowMapping
  METHODS updateworkflowmapping
    IMPORTING
      id TYPE i
      workflowname TYPE string
    RETURNING VALUE(return_data) TYPE workflowscheme
    RAISING cx_static_check.

* DELETE - "Delete issue types for workflow in workflow scheme"
* Operation id: deleteWorkflowMapping
* Parameter: id, required, path
* Parameter: workflowName, required, query
* Parameter: updateDraftIfNeeded, optional, query
* Response: 200
* Response: 400
* Response: 401
* Response: 403
* Response: 404
  METHODS deleteworkflowmapping
    IMPORTING
      id TYPE i
      workflowname TYPE string
      updatedraftifneeded TYPE abap_bool OPTIONAL
    RAISING cx_static_check.

* GET - "Get IDs of deleted worklogs"
* Operation id: getIdsOfWorklogsDeletedSince
* Parameter: since, optional, query
* Response: 200
*     application/json, #/components/schemas/ChangedWorklogs
* Response: 401
  METHODS getidsofworklogsdeletedsince
    IMPORTING
      since TYPE i DEFAULT 0 OPTIONAL
    RETURNING VALUE(return_data) TYPE changedworklogs
    RAISING cx_static_check.

* POST - "Get worklogs"
* Operation id: getWorklogsForIds
* Parameter: expand, optional, query
* Response: 200
*     application/json, array
* Response: 400
* Response: 401
* Body ref: #/components/schemas/WorklogIdsRequestBean
  METHODS getworklogsforids
    IMPORTING
      expand TYPE string OPTIONAL
    RAISING cx_static_check.

* GET - "Get IDs of updated worklogs"
* Operation id: getIdsOfWorklogsModifiedSince
* Parameter: since, optional, query
* Parameter: expand, optional, query
* Response: 200
*     application/json, #/components/schemas/ChangedWorklogs
* Response: 401
  METHODS getidsofworklogsmodifiedsince
    IMPORTING
      since TYPE i DEFAULT 0 OPTIONAL
      expand TYPE string OPTIONAL
    RETURNING VALUE(return_data) TYPE changedworklogs
    RAISING cx_static_check.

* GET - "Get app properties"
* Operation id: AddonPropertiesResource.getAddonProperties_get
* Parameter: addonKey, required, path
* Response: 200
*     application/json, #/components/schemas/PropertyKeys
* Response: 401
*     application/json, #/components/schemas/OperationMessage
  METHODS addonpropertiesresource_getadd
    IMPORTING
      addonkey TYPE string
    RETURNING VALUE(return_data) TYPE propertykeys
    RAISING cx_static_check.

* GET - "Get app property"
* Operation id: AddonPropertiesResource.getAddonProperty_get
* Parameter: addonKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/EntityProperty
* Response: 400
*     application/json, #/components/schemas/OperationMessage
* Response: 401
*     application/json, #/components/schemas/OperationMessage
* Response: 404
*     application/json, #/components/schemas/OperationMessage
  METHODS addonpropertiesresource_geta01
    IMPORTING
      addonkey TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE entityproperty
    RAISING cx_static_check.

* PUT - "Set app property"
* Operation id: AddonPropertiesResource.putAddonProperty_put
* Parameter: addonKey, required, path
* Parameter: propertyKey, required, path
* Response: 200
*     application/json, #/components/schemas/OperationMessage
* Response: 201
*     application/json, #/components/schemas/OperationMessage
* Response: 400
*     application/json, #/components/schemas/OperationMessage
* Response: 401
*     application/json, #/components/schemas/OperationMessage
  METHODS addonpropertiesresource_putadd
    IMPORTING
      addonkey TYPE string
      propertykey TYPE string
    RETURNING VALUE(return_data) TYPE operationmessage
    RAISING cx_static_check.

* DELETE - "Delete app property"
* Operation id: AddonPropertiesResource.deleteAddonProperty_delete
* Parameter: addonKey, required, path
* Parameter: propertyKey, required, path
* Response: 204
* Response: 400
*     application/json, #/components/schemas/OperationMessage
* Response: 401
*     application/json, #/components/schemas/OperationMessage
* Response: 404
*     application/json, #/components/schemas/OperationMessage
  METHODS addonpropertiesresource_delete
    IMPORTING
      addonkey TYPE string
      propertykey TYPE string
    RAISING cx_static_check.

* GET - "Get modules"
* Operation id: DynamicModulesResource.getModules_get
* Response: 200
*     application/json, #/components/schemas/ConnectModules
* Response: 401
*     application/json, #/components/schemas/ErrorMessage
  METHODS dynamicmodulesresource_getmodu
    RETURNING VALUE(return_data) TYPE connectmodules
    RAISING cx_static_check.

* POST - "Register modules"
* Operation id: DynamicModulesResource.registerModules_post
* Response: 200
* Response: 400
*     application/json, #/components/schemas/ErrorMessage
* Response: 401
*     application/json, #/components/schemas/ErrorMessage
* Body ref: #/components/schemas/ConnectModules
  METHODS dynamicmodulesresource_registe
    RAISING cx_static_check.

* DELETE - "Remove modules"
* Operation id: DynamicModulesResource.removeModules_delete
* Parameter: moduleKey, optional, query
* Response: 204
* Response: 401
*     application/json, #/components/schemas/ErrorMessage
  METHODS dynamicmodulesresource_removem
    IMPORTING
      modulekey TYPE string OPTIONAL
    RAISING cx_static_check.

ENDINTERFACE.