CLASS zcl_aopi_main DEFINITION PUBLIC.
  PUBLIC SECTION.
    TYPES: BEGIN OF ty_result,
        clas TYPE string,
        intf TYPE string,
      END OF ty_result.

    METHODS run
      IMPORTING iv_json TYPE string
      RETURNING VALUE(rs_result) TYPE ty_result.

  PRIVATE SECTION.
    DATA mo_json TYPE REF TO zcl_oapi_json.

    TYPES: BEGIN OF ty_parameter,
             name TYPE string,
             in TYPE string,
             description TYPE string,
             required TYPE abap_bool,
           END OF ty_parameter.

    TYPES ty_parameters TYPE STANDARD TABLE OF ty_parameter WITH DEFAULT KEY.

    TYPES: BEGIN OF ty_operation,
             path TYPE string,
             method TYPE string,
             summary TYPE string,
             description TYPE string,
             operation_id TYPE string,
             abap_name TYPE string,
             parameters TYPE ty_parameters,
           END OF ty_operation.

    TYPES ty_operations TYPE STANDARD TABLE OF ty_operation WITH DEFAULT KEY.

    METHODS operations
      RETURNING VALUE(rt_operations) TYPE ty_operations.

    METHODS parameters
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rt_parameters) TYPE ty_parameters.

    METHODS operation_implementation
      IMPORTING is_operation TYPE ty_operation
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS paramters_to_abap
      IMPORTING it_parameters TYPE ty_parameters
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS build_class
      IMPORTING
      iv_interface_name TYPE string
      it_operations TYPE ty_operations
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS build_interface
      IMPORTING
      iv_interface_name TYPE string
      it_operations TYPE ty_operations
      RETURNING VALUE(rv_abap) TYPE string.

ENDCLASS.

CLASS zcl_aopi_main IMPLEMENTATION.

  METHOD run.

    DATA lv_interface_name TYPE string.
    DATA lt_operations TYPE ty_operations.

    CREATE OBJECT mo_json EXPORTING iv_json = iv_json.

    ASSERT mo_json->value_string( '/openapi' ) CP '3*'.

    lt_operations = operations( ).
    lv_interface_name = 'zif_bar'.

    rs_result-clas = build_class(
        iv_interface_name = lv_interface_name
        it_operations = lt_operations ).

    rs_result-intf = build_interface(
      iv_interface_name = lv_interface_name
      it_operations = lt_operations ).

  ENDMETHOD.

  METHOD build_class.

    DATA ls_operation LIKE LINE OF it_operations.
    DATA ls_parameter TYPE ty_parameter.

    rv_abap =
      |CLASS zcl_bar DEFINITION PUBLIC.\n| &&
      |* Generated by abap-openapi-client\n| &&
      |* "{ mo_json->value_string( '/info/title' ) }"\n| &&
      |  PUBLIC SECTION.\n| &&
      |    INTERFACES { iv_interface_name }.\n| &&
      |    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.\n| &&
      |  PRIVATE SECTION.\n| &&
      |    DATA mi_client TYPE REF TO if_http_client.\n| &&
      |ENDCLASS.\n\n| &&
      |CLASS zcl_bar IMPLEMENTATION.\n| &&
      |  METHOD constructor.\n| &&
      |    mi_client = ii_client.\n| &&
      |  ENDMETHOD.\n\n|.

    LOOP AT it_operations INTO ls_operation.
      rv_abap = rv_abap &&
        |  METHOD { iv_interface_name }~{ ls_operation-abap_name }.\n| &&
        operation_implementation( ls_operation ) &&
        |  ENDMETHOD.\n\n|.
    ENDLOOP.

    rv_abap = rv_abap && |ENDCLASS.|.

  ENDMETHOD.

  METHOD build_interface.

    DATA ls_operation LIKE LINE OF it_operations.
    DATA ls_parameter TYPE ty_parameter.

    rv_abap = |INTERFACE { iv_interface_name }.\n| &&
      |* Generated by abap-openapi-client\n| &&
      |* "{ mo_json->value_string( '/info/title' ) }"\n\n|.
    LOOP AT it_operations INTO ls_operation.
      rv_abap = rv_abap &&
        |* { to_upper( ls_operation-method ) } - "{ ls_operation-summary }"\n|.
      LOOP AT ls_operation-parameters INTO ls_parameter.
        rv_abap = rv_abap &&
          |* { ls_parameter-name }, { ls_parameter-required }, "{ ls_parameter-description }", { ls_parameter-in }\n|.
      ENDLOOP.
      rv_abap = rv_abap &&
        |  METHODS { ls_operation-abap_name }{ paramters_to_abap( ls_operation-parameters ) }.\n|.
    ENDLOOP.
    rv_abap = rv_abap && |ENDINTERFACE.|.

  ENDMETHOD.

  METHOD operation_implementation.
    rv_abap =
      |    mi_client-request->set_method( '{ to_upper( is_operation-method ) }' ).\n| &&
      |    mi_client->request->set_header_field( name = '~request_uri' value = '{ is_operation-path }' ).\n| &&
      |    mi_client->request->set_header_field( name = 'Content-Type' value = 'todo' ).\n| &&
      |    mi_client->request->set_header_field( name = 'Accept'       value = 'todo' ).\n|.
  ENDMETHOD.

  METHOD paramters_to_abap.

    DATA ls_parameter LIKE LINE OF it_parameters.
    DATA lt_tab TYPE string_table.
    DATA lv_text TYPE string.

    IF lines( it_parameters ) = 0.
      RETURN.
    ENDIF.

    rv_abap = |\n    IMPORTING\n|.

    LOOP AT it_parameters INTO ls_parameter.
      lv_text = |      | && to_lower( ls_parameter-name ) && | TYPE string|.
      IF ls_parameter-required = abap_false.
        lv_text = lv_text && | OPTIONAL|.
      ENDIF.
      APPEND lv_text TO lt_tab.
    ENDLOOP.

    lv_text = concat_lines_of( table = lt_tab
                               sep = |\n| ).
    rv_abap = rv_abap && lv_text.

  ENDMETHOD.

  METHOD operations.
    DATA lt_paths TYPE string_table.
    DATA lv_path LIKE LINE OF lt_paths.
    DATA lt_methods TYPE string_table.
    DATA lv_method LIKE LINE OF lt_methods.
    DATA lv_prefix TYPE string.
    DATA ls_operation LIKE LINE OF rt_operations.

    lt_paths = mo_json->members( '/paths/' ).
    LOOP AT lt_paths INTO lv_path.
      CLEAR ls_operation.
      ls_operation-path = lv_path.
      lt_methods = mo_json->members( '/paths/' && lv_path && '/' ).
      LOOP AT lt_methods INTO lv_method.
        ls_operation-method = lv_method.
        lv_prefix = '/paths/' && lv_path && '/' && lv_method.
        ls_operation-summary = mo_json->value_string( lv_prefix && '/summary' ).
        ls_operation-description = mo_json->value_string( lv_prefix && '/description' ).
        ls_operation-operation_id = mo_json->value_string( lv_prefix && '/operationId' ).
        ls_operation-parameters = parameters( lv_prefix && '/parameters/' ).
        ls_operation-abap_name = to_lower( ls_operation-operation_id ).
        APPEND ls_operation TO rt_operations.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD parameters.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA ls_parameter LIKE LINE OF rt_parameters.
    lt_members = mo_json->members( iv_prefix ).
    LOOP AT lt_members INTO lv_member.
      CLEAR ls_parameter.
      ls_parameter-name = mo_json->value_string( iv_prefix && lv_member && '/name' ).
      ls_parameter-in = mo_json->value_string( iv_prefix && lv_member && '/in' ).
      ls_parameter-description = mo_json->value_string( iv_prefix && lv_member && '/description' ).
      ls_parameter-required = mo_json->value_boolean( iv_prefix && lv_member && '/required' ).
      IF ls_parameter-name IS NOT INITIAL. " it might be a #ref
        APPEND ls_parameter TO rt_parameters.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.